<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classds_1_1_doubly_linked_list" kind="class" language="C++" prot="public">
    <compoundname>ds::DoublyLinkedList</compoundname>
    <includes refid="doubly__linked__list_8h" local="no">doubly_linked_list.h</includes>
    <innerclass refid="structds_1_1_doubly_linked_list_1_1iterator" prot="public">ds::DoublyLinkedList::iterator</innerclass>
    <innerclass refid="structds_1_1_doubly_linked_list_1_1_node" prot="private">ds::DoublyLinkedList::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classds_1_1_doubly_linked_list_1ab984830080da01385b6e0c8eb8e1b963" prot="private" static="no" mutable="no">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* ds::DoublyLinkedList&lt; T &gt;::head_</definition>
        <argsstring></argsstring>
        <name>head_</name>
        <qualifiedname>ds::DoublyLinkedList::head_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Liste başı pointer&apos;ı </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="39" column="10" bodyfile="include/ds/doubly_linked_list.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classds_1_1_doubly_linked_list_1aac0ac5dbd0e1a6f3d935a8357cf00a96" prot="private" static="no" mutable="no">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* ds::DoublyLinkedList&lt; T &gt;::tail_</definition>
        <argsstring></argsstring>
        <name>tail_</name>
        <qualifiedname>ds::DoublyLinkedList::tail_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Liste sonu pointer&apos;ı </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="40" column="10" bodyfile="include/ds/doubly_linked_list.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classds_1_1_doubly_linked_list_1a8d9e5866bbdd5647b9ce4858bd9c60af" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t ds::DoublyLinkedList&lt; T &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>ds::DoublyLinkedList::size_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Liste eleman sayısı </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="41" column="17" bodyfile="include/ds/doubly_linked_list.h" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a5ff7741bb2cbf5168485b6b2ece42bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ds::DoublyLinkedList&lt; T &gt;::DoublyLinkedList</definition>
        <argsstring>()=default</argsstring>
        <name>DoublyLinkedList</name>
        <qualifiedname>ds::DoublyLinkedList::DoublyLinkedList</qualifiedname>
        <briefdescription>
<para>Varsayılan constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a16cada9d8162d86ba8b82dbaf7e1918b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ds::DoublyLinkedList&lt; T &gt;::~DoublyLinkedList</definition>
        <argsstring>()</argsstring>
        <name>~DoublyLinkedList</name>
        <qualifiedname>ds::DoublyLinkedList::~DoublyLinkedList</qualifiedname>
        <briefdescription>
<para>Destructor - tüm düğümleri serbest bırakır. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="52" column="5" bodyfile="include/ds/doubly_linked_list.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a7cbccc3d21845cd07e4473c66a6b3f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ds::DoublyLinkedList&lt; T &gt;::DoublyLinkedList</definition>
        <argsstring>(const DoublyLinkedList &amp;)=delete</argsstring>
        <name>DoublyLinkedList</name>
        <qualifiedname>ds::DoublyLinkedList::DoublyLinkedList</qualifiedname>
        <param>
          <type>const <ref refid="classds_1_1_doubly_linked_list" kindref="compound">DoublyLinkedList</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor (silinmiş) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a5139026d2052aea99e34ec66356e8d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classds_1_1_doubly_linked_list" kindref="compound">DoublyLinkedList</ref> &amp;</type>
        <definition>DoublyLinkedList &amp; ds::DoublyLinkedList&lt; T &gt;::operator=</definition>
        <argsstring>(const DoublyLinkedList &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>ds::DoublyLinkedList::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classds_1_1_doubly_linked_list" kindref="compound">DoublyLinkedList</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment operator (silinmiş) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="62" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a0cd2cfe2104c7250369ee89c9616b923" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>ds::DoublyLinkedList::begin</qualifiedname>
        <briefdescription>
<para>Başlangıç iteratörü </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>İlk düğümü gösteren iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="145" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1aed22012cf544c4546868ab5a545914f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>ds::DoublyLinkedList::end</qualifiedname>
        <briefdescription>
<para>Sondan bir sonrası iteratörü </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Liste sonundaki null iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="151" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1aaad687c167f3f8a8b3264d183bab8064" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <qualifiedname>ds::DoublyLinkedList::rbegin</qualifiedname>
        <briefdescription>
<para>Sondan geri iterasyon için başlangıç </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Son düğümü gösteren iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="157" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a161308040d6174300cdcf4f138c97c51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t ds::DoublyLinkedList&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>ds::DoublyLinkedList::size</qualifiedname>
        <briefdescription>
<para>Liste eleman sayısını döndürür. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eleman sayısı </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="163" column="17" bodyfile="include/ds/doubly_linked_list.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1ae6b33a59dd79d4b4d578ad4ddcf64a97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::DoublyLinkedList&lt; T &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>ds::DoublyLinkedList::empty</qualifiedname>
        <briefdescription>
<para>Listenin boş olup olmadığını kontrol eder. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true eğer liste boşsa </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="169" column="10" bodyfile="include/ds/doubly_linked_list.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a06c0989d05c4bd2bea24fe4e157cb7ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ds::DoublyLinkedList&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>ds::DoublyLinkedList::clear</qualifiedname>
        <briefdescription>
<para>Tüm elemanları serbest bırakır. </para>
        </briefdescription>
        <detaileddescription>
<para>Liste başından sonuna kadar tüm düğümleri siler ve listeyi boş duruma getirir. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="177" column="10" bodyfile="include/ds/doubly_linked_list.h" bodystart="177" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a1eef59637606e2427a92a1c345bcf7de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::push_back</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>push_back</name>
        <qualifiedname>ds::DoublyLinkedList::push_back</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Listeye sona eleman ekler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Eklenecek değer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Yeni eklenen düğümü gösteren iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="193" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a0bf5bd3a047a9f9af555efb35f0afcdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::push_front</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>push_front</name>
        <qualifiedname>ds::DoublyLinkedList::push_front</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Listeye başa eleman ekler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Eklenecek değer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Yeni eklenen düğümü gösteren iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="206" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="206" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a7e2d78d1d937fdd894fd9bc9e5448e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::insert_after</definition>
        <argsstring>(iterator it, const T &amp;v)</argsstring>
        <name>insert_after</name>
        <qualifiedname>ds::DoublyLinkedList::insert_after</qualifiedname>
        <param>
          <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Verilen düğümden sonra eleman ekler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Referans alınacak iterator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Eklenecek değer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Yeni eklenen düğümü gösteren iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="220" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="220" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_doubly_linked_list_1a007e35bdeab28fea7dc5931dc57bc267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::erase</definition>
        <argsstring>(iterator it)</argsstring>
        <name>erase</name>
        <qualifiedname>ds::DoublyLinkedList::erase</qualifiedname>
        <param>
          <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Verilen konumdaki düğümü kaldırır. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Silinecek düğümü gösteren iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sonraki düğümü gösteren iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="236" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="236" bodyend="244"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Çift yönlü bağlı liste kapsayıcısı </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Eleman tipi</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Bu sınıf, çift yönlü bağlı liste veri yapısını implement eder. Her düğüm, önceki ve sonraki düğümlere referans tutar. Iterator desteği ile STL uyumlu erişim sağlar. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>ds::DoublyLinkedList&lt; T &gt;::Node</label>
        <link refid="structds_1_1_doubly_linked_list_1_1_node"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+next</edgelabel>
          <edgelabel>+prev</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ds::DoublyLinkedList&lt; T &gt;</label>
        <link refid="classds_1_1_doubly_linked_list"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-head_</edgelabel>
          <edgelabel>-tail_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/ds/doubly_linked_list.h" line="23" column="1" bodyfile="include/ds/doubly_linked_list.h" bodystart="23" bodyend="245"/>
    <listofallmembers>
      <member refid="classds_1_1_doubly_linked_list_1a0cd2cfe2104c7250369ee89c9616b923" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>begin</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a06c0989d05c4bd2bea24fe4e157cb7ea" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>clear</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a5ff7741bb2cbf5168485b6b2ece42bbd" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>DoublyLinkedList</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a7cbccc3d21845cd07e4473c66a6b3f22" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>DoublyLinkedList</name></member>
      <member refid="classds_1_1_doubly_linked_list_1ae6b33a59dd79d4b4d578ad4ddcf64a97" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>empty</name></member>
      <member refid="classds_1_1_doubly_linked_list_1aed22012cf544c4546868ab5a545914f9" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>end</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a007e35bdeab28fea7dc5931dc57bc267" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>erase</name></member>
      <member refid="classds_1_1_doubly_linked_list_1ab984830080da01385b6e0c8eb8e1b963" prot="private" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>head_</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a7e2d78d1d937fdd894fd9bc9e5448e1f" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>insert_after</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a5139026d2052aea99e34ec66356e8d2c" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>operator=</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a1eef59637606e2427a92a1c345bcf7de" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>push_back</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a0bf5bd3a047a9f9af555efb35f0afcdb" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>push_front</name></member>
      <member refid="classds_1_1_doubly_linked_list_1aaad687c167f3f8a8b3264d183bab8064" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>rbegin</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a161308040d6174300cdcf4f138c97c51" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>size</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a8d9e5866bbdd5647b9ce4858bd9c60af" prot="private" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>size_</name></member>
      <member refid="classds_1_1_doubly_linked_list_1aac0ac5dbd0e1a6f3d935a8357cf00a96" prot="private" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>tail_</name></member>
      <member refid="classds_1_1_doubly_linked_list_1a16cada9d8162d86ba8b82dbaf7e1918b" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList</scope><name>~DoublyLinkedList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
