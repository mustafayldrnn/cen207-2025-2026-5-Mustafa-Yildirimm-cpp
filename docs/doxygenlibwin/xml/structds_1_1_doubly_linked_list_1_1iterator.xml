<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="structds_1_1_doubly_linked_list_1_1iterator" kind="struct" language="C++" prot="public">
    <compoundname>ds::DoublyLinkedList::iterator</compoundname>
    <includes refid="doubly__linked__list_8h" local="no">doubly_linked_list.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structds_1_1_doubly_linked_list_1_1iterator_1a95a9f3158637486ed75de0441c1d1a5b" prot="public" static="no">
        <type>std::bidirectional_iterator_tag</type>
        <definition>using ds::DoublyLinkedList&lt; T &gt;::iterator::iterator_category =  std::bidirectional_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::iterator_category</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="71" column="9" bodyfile="include/ds/doubly_linked_list.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structds_1_1_doubly_linked_list_1_1iterator_1aaf7a86224100a96c9d7ad72b622ec847" prot="public" static="no">
        <type>T</type>
        <definition>using ds::DoublyLinkedList&lt; T &gt;::iterator::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="72" column="9" bodyfile="include/ds/doubly_linked_list.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structds_1_1_doubly_linked_list_1_1iterator_1a8b86df8007ae034f8a931d0b332047ae" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using ds::DoublyLinkedList&lt; T &gt;::iterator::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="73" column="9" bodyfile="include/ds/doubly_linked_list.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structds_1_1_doubly_linked_list_1_1iterator_1a4718b4853fce611523b73e37c02a0c4e" prot="public" static="no">
        <type>T *</type>
        <definition>using ds::DoublyLinkedList&lt; T &gt;::iterator::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="74" column="9" bodyfile="include/ds/doubly_linked_list.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structds_1_1_doubly_linked_list_1_1iterator_1a8fa14f9d1a85839f9e2a4a6f24086a65" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using ds::DoublyLinkedList&lt; T &gt;::iterator::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="75" column="9" bodyfile="include/ds/doubly_linked_list.h" bodystart="75" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structds_1_1_doubly_linked_list_1_1iterator_1a3bacec3a931e9a28634e1790db443abb" prot="public" static="no" mutable="no">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* ds::DoublyLinkedList&lt; T &gt;::iterator::n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::n</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Mevcut düğüm pointer&apos;ı </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="77" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="77" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1a56a09b0ddbb67972c8a927b452dd6ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ds::DoublyLinkedList&lt; T &gt;::iterator::iterator</definition>
        <argsstring>()=default</argsstring>
        <name>iterator</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::iterator</qualifiedname>
        <briefdescription>
<para>Varsayılan constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="82" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1af3a3f1bf35f3546a138331069cfcf7dc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ds::DoublyLinkedList&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(Node *p)</argsstring>
        <name>iterator</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::iterator</qualifiedname>
        <param>
          <type><ref refid="structds_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Düğüm pointer&apos;ı ile constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Düğüm pointer&apos;ı </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="88" column="18" bodyfile="include/ds/doubly_linked_list.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1a48456d6f3f4889de29b7df3477053deb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference ds::DoublyLinkedList&lt; T &gt;::iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator*</qualifiedname>
        <briefdescription>
<para>Dereference operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Düğümdeki değerin referansı </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="94" column="19" bodyfile="include/ds/doubly_linked_list.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1a03ff7d385b670d58d0e33f28b4a70772" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer ds::DoublyLinkedList&lt; T &gt;::iterator::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator-&gt;</qualifiedname>
        <briefdescription>
<para>Arrow operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Düğümdeki değerin pointer&apos;ı </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="100" column="17" bodyfile="include/ds/doubly_linked_list.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1aa37bc58b8d0f1b10722e65228bee2050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
        <definition>iterator &amp; ds::DoublyLinkedList&lt; T &gt;::iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator++</qualifiedname>
        <briefdescription>
<para>Pre-increment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Sonraki düğüme geçen iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="106" column="18" bodyfile="include/ds/doubly_linked_list.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1ab9af84f0f8dd3f210c1836dc52d80411" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::iterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eski konumdaki iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="112" column="18" bodyfile="include/ds/doubly_linked_list.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1ae282529971ee5b00f01e85a564bdafaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
        <definition>iterator &amp; ds::DoublyLinkedList&lt; T &gt;::iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator--</qualifiedname>
        <briefdescription>
<para>Pre-decrement operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Önceki düğüme geçen iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="118" column="18" bodyfile="include/ds/doubly_linked_list.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1a340a5137c8b569c5241498e9643d0b86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator ds::DoublyLinkedList&lt; T &gt;::iterator::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator--</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-decrement operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eski konumdaki iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="124" column="18" bodyfile="include/ds/doubly_linked_list.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1a46864d5a6547833a3165b2d0b9b5fca8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::DoublyLinkedList&lt; T &gt;::iterator::operator==</definition>
        <argsstring>(const iterator &amp;o) const</argsstring>
        <name>operator==</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Karşılaştırılacak iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true eğer aynı düğümü gösteriyorlarsa </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="131" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structds_1_1_doubly_linked_list_1_1iterator_1a26603e5eca1f4e6bbb8f8194190a23ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::DoublyLinkedList&lt; T &gt;::iterator::operator!=</definition>
        <argsstring>(const iterator &amp;o) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>ds::DoublyLinkedList::iterator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structds_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Karşılaştırılacak iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true eğer farklı düğümleri gösteriyorlarsa </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/doubly_linked_list.h" line="138" column="14" bodyfile="include/ds/doubly_linked_list.h" bodystart="138" bodyend="138"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Çift yönlü iterator. </para>
    </briefdescription>
    <detaileddescription>
<para>Bu iterator, listeyi ileri ve geri yönde gezinmeyi sağlar. STL bidirectional_iterator_tag kategorisini destekler. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>ds::DoublyLinkedList&lt; T &gt;::Node</label>
        <link refid="structds_1_1_doubly_linked_list_1_1_node"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+next</edgelabel>
          <edgelabel>+prev</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ds::DoublyLinkedList&lt; T &gt;::iterator</label>
        <link refid="structds_1_1_doubly_linked_list_1_1iterator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+n</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/ds/doubly_linked_list.h" line="70" column="5" bodyfile="include/ds/doubly_linked_list.h" bodystart="70" bodyend="139"/>
    <listofallmembers>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a8b86df8007ae034f8a931d0b332047ae" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>difference_type</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a56a09b0ddbb67972c8a927b452dd6ca3" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>iterator</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1af3a3f1bf35f3546a138331069cfcf7dc" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>iterator</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a95a9f3158637486ed75de0441c1d1a5b" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>iterator_category</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a3bacec3a931e9a28634e1790db443abb" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>n</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a26603e5eca1f4e6bbb8f8194190a23ee" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator!=</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a48456d6f3f4889de29b7df3477053deb" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator*</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1aa37bc58b8d0f1b10722e65228bee2050" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator++</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1ab9af84f0f8dd3f210c1836dc52d80411" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator++</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1ae282529971ee5b00f01e85a564bdafaa" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator--</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a340a5137c8b569c5241498e9643d0b86" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator--</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a03ff7d385b670d58d0e33f28b4a70772" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator-&gt;</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a46864d5a6547833a3165b2d0b9b5fca8" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>operator==</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a4718b4853fce611523b73e37c02a0c4e" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>pointer</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1a8fa14f9d1a85839f9e2a4a6f24086a65" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>reference</name></member>
      <member refid="structds_1_1_doubly_linked_list_1_1iterator_1aaf7a86224100a96c9d7ad72b622ec847" prot="public" virt="non-virtual"><scope>ds::DoublyLinkedList::iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
