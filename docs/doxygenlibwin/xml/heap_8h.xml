<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="heap_8h" kind="file" language="C++">
    <compoundname>heap.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/include/ds/heap.h</label>
        <link refid="heap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classds_1_1_binary_heap" prot="public">ds::BinaryHeap</innerclass>
    <innernamespace refid="namespaceds">ds</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceds" kindref="compound">ds</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>std::less&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="8" refid="classds_1_1_binary_heap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classds_1_1_binary_heap" kindref="compound">BinaryHeap</ref><sp/>{</highlight></codeline>
<codeline lineno="9" refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>;</highlight></codeline>
<codeline lineno="10" refid="classds_1_1_binary_heap_1a10e019bc6948302123ecebd5ba1be449" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Compare<sp/><ref refid="classds_1_1_binary_heap_1a10e019bc6948302123ecebd5ba1be449" kindref="member">cmp_</ref>{};</highlight></codeline>
<codeline lineno="11" refid="classds_1_1_binary_heap_1a5ae353f634f177f593dd2e488779333a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a5ae353f634f177f593dd2e488779333a" kindref="member">sift_up</ref>(std::size_t<sp/>i){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;0){<sp/>std::size_t<sp/>p=(i-1)/2;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classds_1_1_binary_heap_1a10e019bc6948302123ecebd5ba1be449" kindref="member">cmp_</ref>(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[p],<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[i]))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>std::swap(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[p],<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[i]);<sp/>i=p;<sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14" refid="classds_1_1_binary_heap_1a3ca481ab3ae4a8f14cd2ef734cb5463e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a3ca481ab3ae4a8f14cd2ef734cb5463e" kindref="member">sift_down</ref>(std::size_t<sp/>i){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>n<sp/>=<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.size();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){<sp/>std::size_t<sp/>l=2*i+1,<sp/>r=2*i+2,<sp/>m=i;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l&lt;n<sp/>&amp;&amp;<sp/><ref refid="classds_1_1_binary_heap_1a10e019bc6948302123ecebd5ba1be449" kindref="member">cmp_</ref>(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[m],<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[l]))<sp/>m=l;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r&lt;n<sp/>&amp;&amp;<sp/><ref refid="classds_1_1_binary_heap_1a10e019bc6948302123ecebd5ba1be449" kindref="member">cmp_</ref>(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[m],<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[r]))<sp/>m=r;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m==i)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>std::swap(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[i],<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>[m]);<sp/>i=m;<sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19" refid="classds_1_1_binary_heap_1ad20587f5fd34a78c2c53f79a7a874c43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1ad20587f5fd34a78c2c53f79a7a874c43" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.empty();<sp/>}</highlight></codeline>
<codeline lineno="20" refid="classds_1_1_binary_heap_1a7b5bce7c78ca6e621247c672d17c6d1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classds_1_1_binary_heap_1a7b5bce7c78ca6e621247c672d17c6d1f" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="21" refid="classds_1_1_binary_heap_1ae4fd1d06e57589a7465609c8df10ad29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classds_1_1_binary_heap_1ae4fd1d06e57589a7465609c8df10ad29" kindref="member">top</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.front();<sp/>}</highlight></codeline>
<codeline lineno="22" refid="classds_1_1_binary_heap_1a97c2f6999ad6446c6833cb8f45185dea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a97c2f6999ad6446c6833cb8f45185dea" kindref="member">push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v){<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.push_back(v);<sp/><ref refid="classds_1_1_binary_heap_1a5ae353f634f177f593dd2e488779333a" kindref="member">sift_up</ref>(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.size()-1);<sp/>}</highlight></codeline>
<codeline lineno="23" refid="classds_1_1_binary_heap_1ab8da6f06f1a9a012cf1c4c53f2a8cf6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1ab8da6f06f1a9a012cf1c4c53f2a8cf6d" kindref="member">pop</ref>(){<sp/>std::swap(<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.front(),<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.back());<sp/><ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.pop_back();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>.empty())<sp/><ref refid="classds_1_1_binary_heap_1a3ca481ab3ae4a8f14cd2ef734cb5463e" kindref="member">sift_down</ref>(0);<sp/>}</highlight></codeline>
<codeline lineno="24" refid="classds_1_1_binary_heap_1ad7467e086392e18c40c5423283ca38f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classds_1_1_binary_heap_1ad7467e086392e18c40c5423283ca38f6" kindref="member">heap_sort_copy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b=<ref refid="classds_1_1_binary_heap_1a47028623394d46a8b882eb07aa729f7b" kindref="member">a_</ref>;<sp/>std::vector&lt;T&gt;<sp/>out;<sp/>out.reserve(b.size());<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cmp=<ref refid="classds_1_1_binary_heap_1a10e019bc6948302123ecebd5ba1be449" kindref="member">cmp_</ref>;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classds_1_1_binary_heap_1a3ca481ab3ae4a8f14cd2ef734cb5463e" kindref="member">sift_down</ref>=[&amp;](std::size_t<sp/>i){<sp/>std::size_t<sp/>n=b.size();<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){<sp/>std::size_t<sp/>l=2*i+1,r=2*i+2,m=i;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l&lt;n&amp;&amp;cmp(b[m],b[l]))<sp/>m=l;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r&lt;n&amp;&amp;cmp(b[m],b[r]))<sp/>m=r;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m==i)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>std::swap(b[i],b[m]);<sp/>i=m;<sp/>}};<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=b.size()/2;i--&gt;0;)<sp/><ref refid="classds_1_1_binary_heap_1a3ca481ab3ae4a8f14cd2ef734cb5463e" kindref="member">sift_down</ref>(i);<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!b.empty()){<sp/>std::swap(b.front(),<sp/>b.back());<sp/>out.push_back(b.back());<sp/>b.pop_back();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!b.empty())<sp/><ref refid="classds_1_1_binary_heap_1a3ca481ab3ae4a8f14cd2ef734cb5463e" kindref="member">sift_down</ref>(0);}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/include/ds/heap.h"/>
  </compounddef>
</doxygen>
