<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="heap_8h" kind="file" language="C++">
    <compoundname>heap.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/ahmet/OneDrive/Masa端st端/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/include/ds/heap.h</label>
        <link refid="heap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classds_1_1_binary_heap" prot="public">ds::BinaryHeap</innerclass>
    <innernamespace refid="namespaceds">ds</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ds<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>std::less&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryHeap<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>a_;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>Compare<sp/>cmp_{};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sift_up(std::size_t<sp/>i){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;0){<sp/>std::size_t<sp/>p=(i-1)/2;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cmp_(a_[p],<sp/>a_[i]))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>std::swap(a_[p],<sp/>a_[i]);<sp/>i=p;<sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sift_down(std::size_t<sp/>i){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>n<sp/>=<sp/>a_.size();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){<sp/>std::size_t<sp/>l=2*i+1,<sp/>r=2*i+2,<sp/>m=i;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l&lt;n<sp/>&amp;&amp;<sp/>cmp_(a_[m],<sp/>a_[l]))<sp/>m=l;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r&lt;n<sp/>&amp;&amp;<sp/>cmp_(a_[m],<sp/>a_[r]))<sp/>m=r;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m==i)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>std::swap(a_[i],<sp/>a_[m]);<sp/>i=m;<sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_.empty();<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_.size();<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>top()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_.front();<sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v){<sp/>a_.push_back(v);<sp/>sift_up(a_.size()-1);<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop(){<sp/>std::swap(a_.front(),<sp/>a_.back());<sp/>a_.pop_back();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!a_.empty())<sp/>sift_down(0);<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>heap_sort_copy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b=a_;<sp/>std::vector&lt;T&gt;<sp/>out;<sp/>out.reserve(b.size());<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cmp=cmp_;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sift_down=[&amp;](std::size_t<sp/>i){<sp/>std::size_t<sp/>n=b.size();<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){<sp/>std::size_t<sp/>l=2*i+1,r=2*i+2,m=i;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l&lt;n&amp;&amp;cmp(b[m],b[l]))<sp/>m=l;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r&lt;n&amp;&amp;cmp(b[m],b[r]))<sp/>m=r;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m==i)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>std::swap(b[i],b[m]);<sp/>i=m;<sp/>}};<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=b.size()/2;i--&gt;0;)<sp/>sift_down(i);<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!b.empty()){<sp/>std::swap(b.front(),<sp/>b.back());<sp/>out.push_back(b.back());<sp/>b.pop_back();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!b.empty())<sp/>sift_down(0);}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ahmet/OneDrive/Masa端st端/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/include/ds/heap.h"/>
  </compounddef>
</doxygen>
