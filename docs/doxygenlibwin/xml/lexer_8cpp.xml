<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="lexer_8cpp" kind="file" language="C++">
    <compoundname>lexer.cpp</compoundname>
    <includes refid="lexer_8h" local="yes">translator/lexer.h</includes>
    <includes local="no">cctype</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/src/translator/lexer.cpp</label>
        <link refid="lexer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>translator/lexer.h</label>
        <link refid="lexer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>translator/token.h</label>
        <link refid="token_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cctype</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetranslator">translator</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacetranslator_1aff7945b4dbc7ff061dc31ce231c353d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool translator::is_ident_start</definition>
        <argsstring>(char c)</argsstring>
        <name>is_ident_start</name>
        <qualifiedname>translator::is_ident_start</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/src/translator/lexer.cpp" line="6" column="13" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/src/translator/lexer.cpp" bodystart="6" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacetranslator_1aff7e8ed0ea13ef191061e25e7ca6c3fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool translator::is_ident_char</definition>
        <argsstring>(char c)</argsstring>
        <name>is_ident_char</name>
        <qualifiedname>translator::is_ident_char</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/src/translator/lexer.cpp" line="7" column="13" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/src/translator/lexer.cpp" bodystart="7" bodyend="7"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lexer_8h" kindref="compound">translator/lexer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetranslator" kindref="compound">translator</ref><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ident_start(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isalpha(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c))<sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ident_char(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isalnum(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c))<sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">std::vector&lt;Token&gt;<sp/><ref refid="classtranslator_1_1_lexer_1a89260e1e02eb2b01abcd1c7e31d480b9" kindref="member">Lexer::tokenize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Token&gt;<sp/>out;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line=1;<sp/>std::size_t<sp/>i=0,<sp/>n=<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>.size();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>add=[&amp;](<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480" kindref="member">TokenType</ref><sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lx){<sp/>out.push_back({t,lx,line});<sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&lt;n){<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">){<sp/>++i;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">){<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a755fee300780823fcf4df98383331745" kindref="member">TokenType::Newline</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/>++line;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isspace(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c))){<sp/>++i;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;<sp/>std::string<sp/>s;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;n<sp/>&amp;&amp;<sp/><ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">){<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i]==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>++line;<sp/>s.push_back(<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i++]);<sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;n<sp/>&amp;&amp;<sp/><ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i]==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>++i;<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a27118326006d3829667a400ad23d5d98" kindref="member">TokenType::String</ref>,<sp/>s);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isdigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c))){<sp/>std::string<sp/>num;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;n<sp/>&amp;&amp;<sp/>std::isdigit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i])))<sp/>num.push_back(<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i++]);<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480ab2ee912b91d69b435159c7c3f6df7f5f" kindref="member">TokenType::Number</ref>,<sp/>num);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ident_start(c)){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>id;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&lt;n<sp/>&amp;&amp;<sp/>is_ident_char(<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i]))<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.push_back(<ref refid="classtranslator_1_1_lexer_1a8dd38bc122462334b34032f50ca8a9e7" kindref="member">src_</ref>[i++]);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>up;<sp/>up.reserve(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.size());<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch:</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>up.push_back(std::toupper(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ch)));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;LET&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a90997b7f299d862f6bcbb1ac11d6cd24" kindref="member">TokenType::KW_LET</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;PRINT&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a4f1a5bb6f9136f5f9231ef51ed1db995" kindref="member">TokenType::KW_PRINT</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;INPUT&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a369d5563133c61595496807e8b3aa19d" kindref="member">TokenType::KW_INPUT</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;IF&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480aff705823708ecc4645c4220d09620ae9" kindref="member">TokenType::KW_IF</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;THEN&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480aaad4a74ae5c704a58a3b563dc11d2fb8" kindref="member">TokenType::KW_THEN</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;GOTO&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a68a2ea2db0d1f282955130bb75c25172" kindref="member">TokenType::KW_GOTO</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;FOR&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a97f42a58579d6cbe9b1c9eb0f0de750f" kindref="member">TokenType::KW_FOR</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;TO&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a221d6d4f9619e1cb8f5e563eb8c4e903" kindref="member">TokenType::KW_TO</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;NEXT&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a5b810bf9b287af6a80bc2756f5f650c8" kindref="member">TokenType::KW_NEXT</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;GOSUB&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480aa83315e9d302480b6b4128b714921a1a" kindref="member">TokenType::KW_GOSUB</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(up==</highlight><highlight class="stringliteral">&quot;RETURN&quot;</highlight><highlight class="normal">)<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a3a387a428e7d6557200c4c5eea812c11" kindref="member">TokenType::KW_RETURN</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a29ee5d1ebcc033234938a5234f1f2075" kindref="member">TokenType::Identifier</ref>,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a32ba78fe43257d3e7f88e3935a8ea0d4" kindref="member">TokenType::Plus</ref>,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a453fb623e752c5993f65bc410fd74fe5" kindref="member">TokenType::Minus</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a26f93e6e68e28a698377e941cb59f29a" kindref="member">TokenType::Star</ref>,<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a358cfe58715d680d9ab09f82e4010cbc" kindref="member">TokenType::Slash</ref>,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a185b7133db22230701a857c059360cc2" kindref="member">TokenType::Assign</ref>,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a876a9d4efdf66785e41cb452f0402c79" kindref="member">TokenType::LParen</ref>,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480ad011e3feb19babda65e8951ff7189c0c" kindref="member">TokenType::RParen</ref>,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:<sp/>add(<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a58be47db9455679e6a44df2eff9c9fa6" kindref="member">TokenType::Comma</ref>,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>++i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>out.push_back({<ref refid="namespacetranslator_1a0eb119efce2d20d6019adb661cd4c480a49650dcc55dc413da4032cbe44b15d37" kindref="member">TokenType::Eof</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>line});</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>translator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/src/translator/lexer.cpp"/>
  </compounddef>
</doxygen>
