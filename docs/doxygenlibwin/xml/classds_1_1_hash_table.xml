<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classds_1_1_hash_table" kind="class" language="C++" prot="public">
    <compoundname>ds::HashTable</compoundname>
    <includes refid="hash__table_8h" local="no">hash_table.h</includes>
    <innerclass refid="structds_1_1_hash_table_1_1_entry" prot="private">ds::HashTable::Entry</innerclass>
    <templateparamlist>
      <param>
        <type>typename K</type>
      </param>
      <param>
        <type>typename V</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classds_1_1_hash_table_1ae6b9272c3d706ba75c7f6fabcdc9ace8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structds_1_1_hash_table_1_1_entry" kindref="compound">Entry</ref> &gt;</type>
        <definition>std::vector&lt;Entry&gt; ds::HashTable&lt; K, V &gt;::table_</definition>
        <argsstring></argsstring>
        <name>table_</name>
        <qualifiedname>ds::HashTable::table_</qualifiedname>
        <briefdescription>
<para>Hash tablosu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="45" column="17" bodyfile="include/ds/hash_table.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classds_1_1_hash_table_1a9b7d14e05e82361e2166dac9be580190" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t ds::HashTable&lt; K, V &gt;::count_</definition>
        <argsstring></argsstring>
        <name>count_</name>
        <qualifiedname>ds::HashTable::count_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Mevcut eleman sayısı </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="46" column="17" bodyfile="include/ds/hash_table.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classds_1_1_hash_table_1a9791021117665e725c0bc73c7e258a33" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float ds::HashTable&lt; K, V &gt;::max_load_</definition>
        <argsstring></argsstring>
        <name>max_load_</name>
        <qualifiedname>ds::HashTable::max_load_</qualifiedname>
        <initializer>= 0.7f</initializer>
        <briefdescription>
<para>Maksimum yük faktörü </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="47" column="11" bodyfile="include/ds/hash_table.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classds_1_1_hash_table_1a26b863af6d4339774e71afe1e7c33080" prot="private" static="no" mutable="no">
        <type>std::hash&lt; K &gt;</type>
        <definition>std::hash&lt;K&gt; ds::HashTable&lt; K, V &gt;::hasher_</definition>
        <argsstring></argsstring>
        <name>hasher_</name>
        <qualifiedname>ds::HashTable::hasher_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>Hash fonksiyonu. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="48" column="15" bodyfile="include/ds/hash_table.h" bodystart="48" bodyend="48"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classds_1_1_hash_table_1a228a82ca4a7e5438ee5725a441a84902" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t ds::HashTable&lt; K, V &gt;::idx</definition>
        <argsstring>(const K &amp;k) const</argsstring>
        <name>idx</name>
        <qualifiedname>ds::HashTable::idx</qualifiedname>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Anahtar için hash indeksini hesaplar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Anahtar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hash indeksi </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="55" column="17" bodyfile="include/ds/hash_table.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a2b378cb65c687e96a785f3bd311197ea" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ds::HashTable&lt; K, V &gt;::rehash</definition>
        <argsstring>(std::size_t new_cap)</argsstring>
        <name>rehash</name>
        <qualifiedname>ds::HashTable::rehash</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>new_cap</declname>
        </param>
        <briefdescription>
<para>Tabloyu yeniden boyutlandırır ve elemanları yeniden yerleştirir. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Yeni kapasite </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="61" column="10" bodyfile="include/ds/hash_table.h" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a9b34ffbaba50d07a6951faf2dae7b476" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ds::HashTable&lt; K, V &gt;::ensure</definition>
        <argsstring>()</argsstring>
        <name>ensure</name>
        <qualifiedname>ds::HashTable::ensure</qualifiedname>
        <briefdescription>
<para>Yük faktörünü kontrol eder ve gerekirse rehash yapar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="70" column="10" bodyfile="include/ds/hash_table.h" bodystart="70" bodyend="70"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classds_1_1_hash_table_1a47881f4560d8482207d0c72061df0176" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ds::HashTable&lt; K, V &gt;::HashTable</definition>
        <argsstring>(std::size_t cap=16)</argsstring>
        <name>HashTable</name>
        <qualifiedname>ds::HashTable::HashTable</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>cap</declname>
          <defval>16</defval>
        </param>
        <briefdescription>
<para>Hash tablosu oluşturur. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Başlangıç kapasitesi (varsayılan: 16)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Kapasite 2&apos;nin kuvveti olacak şekilde ayarlanır. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="79" column="14" bodyfile="include/ds/hash_table.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a3bb53d07891669bf56c915bc60b1f929" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t ds::HashTable&lt; K, V &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>ds::HashTable::size</qualifiedname>
        <briefdescription>
<para>Tablodaki eleman sayısını döndürür. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eleman sayısı </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="85" column="17" bodyfile="include/ds/hash_table.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a9441a212b9899e91aad5e3c915005395" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::HashTable&lt; K, V &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>ds::HashTable::empty</qualifiedname>
        <briefdescription>
<para>Tablonun boş olup olmadığını kontrol eder. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true eğer tablo boşsa </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="91" column="10" bodyfile="include/ds/hash_table.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a11c32f21e0c681b3eee2e7cba0532dcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::HashTable&lt; K, V &gt;::insert</definition>
        <argsstring>(const K &amp;k, const V &amp;v)</argsstring>
        <name>insert</name>
        <qualifiedname>ds::HashTable::insert</qualifiedname>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Anahtar-değer çifti ekler veya günceller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Anahtar </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Değer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true eğer yeni eleman eklendiyse, false eğer güncellendiyse </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="99" column="10" bodyfile="include/ds/hash_table.h" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1aa50954bdb669803b7e6c9b0e63db48ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>V *</type>
        <definition>V * ds::HashTable&lt; K, V &gt;::find</definition>
        <argsstring>(const K &amp;k)</argsstring>
        <name>find</name>
        <qualifiedname>ds::HashTable::find</qualifiedname>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Anahtar ile değer arar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Aranacak anahtar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Değerin pointer&apos;ı, bulunamazsa nullptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="112" column="7" bodyfile="include/ds/hash_table.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1afb487ac0b40053e9e74902fb035ea979" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const V *</type>
        <definition>const V * ds::HashTable&lt; K, V &gt;::find</definition>
        <argsstring>(const K &amp;k) const</argsstring>
        <name>find</name>
        <qualifiedname>ds::HashTable::find</qualifiedname>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Anahtar ile değer arar (const versiyonu) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Aranacak anahtar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Değerin const pointer&apos;ı, bulunamazsa nullptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="119" column="13" bodyfile="include/ds/hash_table.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a0acc1f9c857e04c3769939702b0e19c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::HashTable&lt; K, V &gt;::contains</definition>
        <argsstring>(const K &amp;k) const</argsstring>
        <name>contains</name>
        <qualifiedname>ds::HashTable::contains</qualifiedname>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Anahtarın tabloda olup olmadığını kontrol eder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Kontrol edilecek anahtar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true eğer anahtar bulunursa </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="126" column="10" bodyfile="include/ds/hash_table.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classds_1_1_hash_table_1a13001e8242174229d97e1b470704962c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ds::HashTable&lt; K, V &gt;::erase</definition>
        <argsstring>(const K &amp;k)</argsstring>
        <name>erase</name>
        <qualifiedname>ds::HashTable::erase</qualifiedname>
        <param>
          <type>const K &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Anahtarı tablodan siler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Silinecek anahtar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true eğer anahtar bulunup silindiyse </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ds/hash_table.h" line="133" column="10" bodyfile="include/ds/hash_table.h" bodystart="133" bodyend="133"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Kapalı adreslemeli hash tablosu implementasyonu. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>Anahtar türü </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Değer türü</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Bu sınıf, kapalı adresleme (closed addressing) tekniği kullanarak hash tablosu implementasyonu sağlar. Linear probing ile çakışma çözümü yapar. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>ds::HashTable&lt; K, V &gt;</label>
        <link refid="classds_1_1_hash_table"/>
      </node>
    </collaborationgraph>
    <location file="include/ds/hash_table.h" line="35" column="1" bodyfile="include/ds/hash_table.h" bodystart="35" bodyend="134"/>
    <listofallmembers>
      <member refid="classds_1_1_hash_table_1a0acc1f9c857e04c3769939702b0e19c5" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>contains</name></member>
      <member refid="classds_1_1_hash_table_1a9b7d14e05e82361e2166dac9be580190" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>count_</name></member>
      <member refid="classds_1_1_hash_table_1a9441a212b9899e91aad5e3c915005395" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>empty</name></member>
      <member refid="classds_1_1_hash_table_1a9b34ffbaba50d07a6951faf2dae7b476" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>ensure</name></member>
      <member refid="classds_1_1_hash_table_1a13001e8242174229d97e1b470704962c" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>erase</name></member>
      <member refid="classds_1_1_hash_table_1aa50954bdb669803b7e6c9b0e63db48ab" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>find</name></member>
      <member refid="classds_1_1_hash_table_1afb487ac0b40053e9e74902fb035ea979" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>find</name></member>
      <member refid="classds_1_1_hash_table_1a26b863af6d4339774e71afe1e7c33080" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>hasher_</name></member>
      <member refid="classds_1_1_hash_table_1a47881f4560d8482207d0c72061df0176" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>HashTable</name></member>
      <member refid="classds_1_1_hash_table_1a228a82ca4a7e5438ee5725a441a84902" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>idx</name></member>
      <member refid="classds_1_1_hash_table_1a11c32f21e0c681b3eee2e7cba0532dcc" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>insert</name></member>
      <member refid="classds_1_1_hash_table_1a9791021117665e725c0bc73c7e258a33" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>max_load_</name></member>
      <member refid="classds_1_1_hash_table_1a2b378cb65c687e96a785f3bd311197ea" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>rehash</name></member>
      <member refid="classds_1_1_hash_table_1a3bb53d07891669bf56c915bc60b1f929" prot="public" virt="non-virtual"><scope>ds::HashTable</scope><name>size</name></member>
      <member refid="classds_1_1_hash_table_1ae6b9272c3d706ba75c7f6fabcdc9ace8" prot="private" virt="non-virtual"><scope>ds::HashTable</scope><name>table_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
