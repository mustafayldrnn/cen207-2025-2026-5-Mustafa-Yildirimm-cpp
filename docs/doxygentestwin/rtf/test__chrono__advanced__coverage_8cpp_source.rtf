{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_chrono_advanced_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAE}{\bkmkend AAAAAAAAAE}
00001 \par
{\bkmkstart AAAAAAAAAF}{\bkmkend AAAAAAAAAF}
00008 \par
{\bkmkstart AAAAAAAAAG}{\bkmkend AAAAAAAAAG}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAK}{\bkmkend AAAAAAAAAK}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAAAQ}{\bkmkend AAAAAAAAAQ}
00011 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAAAU}{\bkmkend AAAAAAAAAU}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAAAW}{\bkmkend AAAAAAAAAW}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00015 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAACX}{\bkmkend AAAAAAAACX}
00016 \par
{\bkmkstart AAAAAAAACY}{\bkmkend AAAAAAAACY}
00017 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAADB}{\bkmkend AAAAAAAADB}
00018 \par
{\bkmkstart AAAAAAAADD}{\bkmkend AAAAAAAADD}
00023 {\cf17 class }ChronoAdvancedCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAADI}{\bkmkend AAAAAAAADI}
00024 {\cf17 protected}:\par
{\bkmkstart AAAAAAAADK}{\bkmkend AAAAAAAADK}
00025     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADM}{\bkmkend AAAAAAAADM}
00026         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAADO}{\bkmkend AAAAAAAADO}
00027     \}\par
{\bkmkstart AAAAAAAADP}{\bkmkend AAAAAAAADP}
00028     \par
{\bkmkstart AAAAAAAADQ}{\bkmkend AAAAAAAADQ}
00029     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
00030         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAADS}{\bkmkend AAAAAAAADS}
00031     \}\par
{\bkmkstart AAAAAAAADT}{\bkmkend AAAAAAAADT}
00032 \};\par
{\bkmkstart AAAAAAAADV}{\bkmkend AAAAAAAADV}
00033 \par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00038 TEST_F(ChronoAdvancedCoverageTest, TestChronoTypeTraits) \{\par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00039     {\cf20 // Test duration type traits}\par
{\bkmkstart AAAAAAAADY}{\bkmkend AAAAAAAADY}
00040     {\cf17 using }seconds_type = std::chrono::seconds;\par
{\bkmkstart AAAAAAAAEB}{\bkmkend AAAAAAAAEB}
00041     {\cf17 using }milliseconds_type = std::chrono::milliseconds;\par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00042     {\cf17 using }microseconds_type = std::chrono::microseconds;\par
{\bkmkstart AAAAAAAAED}{\bkmkend AAAAAAAAED}
00043     {\cf17 using }nanoseconds_type = std::chrono::nanoseconds;\par
{\bkmkstart AAAAAAAAEE}{\bkmkend AAAAAAAAEE}
00044     \par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
00045     {\cf20 // Test duration properties}\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00046     EXPECT_TRUE(std::is_arithmetic_v<seconds_type::rep>);\par
{\bkmkstart AAAAAAAAEJ}{\bkmkend AAAAAAAAEJ}
00047     EXPECT_TRUE(std::is_arithmetic_v<milliseconds_type::rep>);\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00048     EXPECT_TRUE(std::is_arithmetic_v<microseconds_type::rep>);\par
{\bkmkstart AAAAAAAAEN}{\bkmkend AAAAAAAAEN}
00049     EXPECT_TRUE(std::is_arithmetic_v<nanoseconds_type::rep>);\par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00050     \par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00051     {\cf20 // Test period properties}\par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00052     EXPECT_GT(seconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00053     EXPECT_GT(milliseconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00054     EXPECT_GT(microseconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00055     EXPECT_GT(nanoseconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAEZ}{\bkmkend AAAAAAAAEZ}
00056 \}\par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00057 \par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00062 TEST_F(ChronoAdvancedCoverageTest, TestChronoRatioOperations) \{\par
{\bkmkstart AAAAAAAAFF}{\bkmkend AAAAAAAAFF}
00063     {\cf17 using namespace }std::chrono;\par
{\bkmkstart AAAAAAAAFG}{\bkmkend AAAAAAAAFG}
00064     \par
{\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
00065     {\cf20 // Test ratio arithmetic}\par
{\bkmkstart AAAAAAAAFJ}{\bkmkend AAAAAAAAFJ}
00066     {\cf17 using }ratio_1_1 = std::ratio<1, 1>;\par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00067     {\cf17 using }ratio_1_1000 = std::ratio<1, 1000>;\par
{\bkmkstart AAAAAAAAFN}{\bkmkend AAAAAAAAFN}
00068     {\cf17 using }ratio_1000_1 = std::ratio<1000, 1>;\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00069     \par
{\bkmkstart AAAAAAAAFQ}{\bkmkend AAAAAAAAFQ}
00070     {\cf20 // Test ratio properties}\par
{\bkmkstart AAAAAAAAFS}{\bkmkend AAAAAAAAFS}
00071     EXPECT_EQ(ratio_1_1::num, 1);\par
{\bkmkstart AAAAAAAAFU}{\bkmkend AAAAAAAAFU}
00072     EXPECT_EQ(ratio_1_1::den, 1);\par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00073     EXPECT_EQ(ratio_1_1000::num, 1);\par
{\bkmkstart AAAAAAAAFY}{\bkmkend AAAAAAAAFY}
00074     EXPECT_EQ(ratio_1_1000::den, 1000);\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00075     EXPECT_EQ(ratio_1000_1::num, 1000);\par
{\bkmkstart AAAAAAAAGB}{\bkmkend AAAAAAAAGB}
00076     EXPECT_EQ(ratio_1000_1::den, 1);\par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00077     \par
{\bkmkstart AAAAAAAAGE}{\bkmkend AAAAAAAAGE}
00078     {\cf20 // Test duration with custom ratios}\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00079     {\cf17 using }custom_duration = duration<int, ratio_1_1000>;\par
{\bkmkstart AAAAAAAAGJ}{\bkmkend AAAAAAAAGJ}
00080     {\cf17 auto} custom_dur = custom_duration(1000);\par
{\bkmkstart AAAAAAAAGL}{\bkmkend AAAAAAAAGL}
00081     EXPECT_EQ(custom_dur.count(), 1000);\par
{\bkmkstart AAAAAAAAGN}{\bkmkend AAAAAAAAGN}
00082 \}\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00083 \par
{\bkmkstart AAAAAAAAGS}{\bkmkend AAAAAAAAGS}
00088 TEST_F(ChronoAdvancedCoverageTest, TestChronoClockComparison) \{\par
{\bkmkstart AAAAAAAAGT}{\bkmkend AAAAAAAAGT}
00089     {\cf20 // Test clock ordering}\par
{\bkmkstart AAAAAAAAGV}{\bkmkend AAAAAAAAGV}
00090     {\cf17 auto} now1 = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00091     std::this_thread::sleep_for(std::chrono::microseconds(1));\par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00092     {\cf17 auto} now2 = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00093     \par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00094     EXPECT_LT(now1, now2);\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00095     EXPECT_LE(now1, now2);\par
{\bkmkstart AAAAAAAAHE}{\bkmkend AAAAAAAAHE}
00096     EXPECT_GT(now2, now1);\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00097     EXPECT_GE(now2, now1);\par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00098     EXPECT_NE(now1, now2);\par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00099     \par
{\bkmkstart AAAAAAAAHK}{\bkmkend AAAAAAAAHK}
00100     {\cf20 // Test equal time points}\par
{\bkmkstart AAAAAAAAHL}{\bkmkend AAAAAAAAHL}
00101     {\cf17 auto} now3 = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00102     {\cf17 auto} now4 = now3;\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00103     EXPECT_EQ(now3, now4);\par
{\bkmkstart AAAAAAAAHW}{\bkmkend AAAAAAAAHW}
00104     EXPECT_LE(now3, now4);\par
{\bkmkstart AAAAAAAAHY}{\bkmkend AAAAAAAAHY}
00105     EXPECT_GE(now3, now4);\par
{\bkmkstart AAAAAAAAIA}{\bkmkend AAAAAAAAIA}
00106 \}\par
{\bkmkstart AAAAAAAAIB}{\bkmkend AAAAAAAAIB}
00107 \par
{\bkmkstart AAAAAAAAID}{\bkmkend AAAAAAAAID}
00112 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationComparison) \{\par
{\bkmkstart AAAAAAAAIE}{\bkmkend AAAAAAAAIE}
00113     {\cf17 auto} dur1 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAAIF}{\bkmkend AAAAAAAAIF}
00114     {\cf17 auto} dur2 = std::chrono::seconds(10);\par
{\bkmkstart AAAAAAAAIG}{\bkmkend AAAAAAAAIG}
00115     {\cf17 auto} dur3 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAAII}{\bkmkend AAAAAAAAII}
00116     \par
{\bkmkstart AAAAAAAAIK}{\bkmkend AAAAAAAAIK}
00117     {\cf20 // Test all comparison operators}\par
{\bkmkstart AAAAAAAAIM}{\bkmkend AAAAAAAAIM}
00118     EXPECT_LT(dur1, dur2);\par
{\bkmkstart AAAAAAAAIO}{\bkmkend AAAAAAAAIO}
00119     EXPECT_LE(dur1, dur2);\par
{\bkmkstart AAAAAAAAIR}{\bkmkend AAAAAAAAIR}
00120     EXPECT_LE(dur1, dur3);\par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00121     EXPECT_GT(dur2, dur1);\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00122     EXPECT_GE(dur2, dur1);\par
{\bkmkstart AAAAAAAAIX}{\bkmkend AAAAAAAAIX}
00123     EXPECT_GE(dur1, dur3);\par
{\bkmkstart AAAAAAAAIZ}{\bkmkend AAAAAAAAIZ}
00124     EXPECT_EQ(dur1, dur3);\par
{\bkmkstart AAAAAAAAJB}{\bkmkend AAAAAAAAJB}
00125     EXPECT_NE(dur1, dur2);\par
{\bkmkstart AAAAAAAAJD}{\bkmkend AAAAAAAAJD}
00126 \}\par
{\bkmkstart AAAAAAAAJE}{\bkmkend AAAAAAAAJE}
00127 \par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00132 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationArithmeticAdvanced) \{\par
{\bkmkstart AAAAAAAAJP}{\bkmkend AAAAAAAAJP}
00133     {\cf20 // Test mixed duration arithmetic}\par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00134     {\cf17 auto} hours = std::chrono::hours(2);\par
{\bkmkstart AAAAAAAAJT}{\bkmkend AAAAAAAAJT}
00135     {\cf17 auto} minutes = std::chrono::minutes(30);\par
{\bkmkstart AAAAAAAAJV}{\bkmkend AAAAAAAAJV}
00136     {\cf17 auto} seconds = std::chrono::seconds(45);\par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
00137     \par
{\bkmkstart AAAAAAAAJZ}{\bkmkend AAAAAAAAJZ}
00138     {\cf20 // Test complex arithmetic}\par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00139     {\cf17 auto} total1 = hours + minutes + seconds;\par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00140     {\cf17 auto} total2 = hours - minutes + seconds;\par
{\bkmkstart AAAAAAAAKF}{\bkmkend AAAAAAAAKF}
00141     {\cf17 auto} total3 = hours * 2 + minutes;\par
{\bkmkstart AAAAAAAAKI}{\bkmkend AAAAAAAAKI}
00142     {\cf17 auto} total4 = (hours + minutes) / 2;\par
{\bkmkstart AAAAAAAAKK}{\bkmkend AAAAAAAAKK}
00143     \par
{\bkmkstart AAAAAAAAKM}{\bkmkend AAAAAAAAKM}
00144     EXPECT_GT(total1.count(), 0);\par
{\bkmkstart AAAAAAAAKP}{\bkmkend AAAAAAAAKP}
00145     EXPECT_GT(total2.count(), 0);\par
{\bkmkstart AAAAAAAAKR}{\bkmkend AAAAAAAAKR}
00146     EXPECT_GT(total3.count(), 0);\par
{\bkmkstart AAAAAAAAKT}{\bkmkend AAAAAAAAKT}
00147     EXPECT_GT(total4.count(), 0);\par
{\bkmkstart AAAAAAAAKV}{\bkmkend AAAAAAAAKV}
00148     \par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00149     {\cf20 // Test duration modulo operations}\par
{\bkmkstart AAAAAAAAKZ}{\bkmkend AAAAAAAAKZ}
00150     {\cf17 auto} remainder = total1 % std::chrono::minutes(1);\par
{\bkmkstart AAAAAAAALB}{\bkmkend AAAAAAAALB}
00151     EXPECT_GE(remainder.count(), 0);\par
{\bkmkstart AAAAAAAALC}{\bkmkend AAAAAAAALC}
00152 \}\par
{\bkmkstart AAAAAAAALD}{\bkmkend AAAAAAAALD}
00153 \par
{\bkmkstart AAAAAAAALE}{\bkmkend AAAAAAAALE}
00158 TEST_F(ChronoAdvancedCoverageTest, TestChronoTimePointArithmeticAdvanced) \{\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00159     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAALK}{\bkmkend AAAAAAAALK}
00160     {\cf17 auto} duration1 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAALQ}{\bkmkend AAAAAAAALQ}
00161     {\cf17 auto} duration2 = std::chrono::minutes(2);\par
{\bkmkstart AAAAAAAAME}{\bkmkend AAAAAAAAME}
00162     \par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00163     {\cf20 // Test time point arithmetic}\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00164     {\cf17 auto} future1 = now + duration1;\par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00165     {\cf17 auto} future2 = now + duration2;\par
{\bkmkstart AAAAAAAAMP}{\bkmkend AAAAAAAAMP}
00166     {\cf17 auto} past1 = now - duration1;\par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00167     {\cf17 auto} past2 = now - duration2;\par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00168     \par
{\bkmkstart AAAAAAAAMX}{\bkmkend AAAAAAAAMX}
00169     EXPECT_GT(future1, now);\par
{\bkmkstart AAAAAAAAMZ}{\bkmkend AAAAAAAAMZ}
00170     EXPECT_GT(future2, now);\par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00171     EXPECT_LT(past1, now);\par
{\bkmkstart AAAAAAAANG}{\bkmkend AAAAAAAANG}
00172     EXPECT_LT(past2, now);\par
{\bkmkstart AAAAAAAANM}{\bkmkend AAAAAAAANM}
00173     \par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00174     {\cf20 // Test time point difference}\par
{\bkmkstart AAAAAAAANQ}{\bkmkend AAAAAAAANQ}
00175     {\cf17 auto} diff1 = future1 - now;\par
{\bkmkstart AAAAAAAANV}{\bkmkend AAAAAAAANV}
00176     {\cf17 auto} diff2 = now - past1;\par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00177     \par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00178     EXPECT_EQ(diff1, duration1);\par
{\bkmkstart AAAAAAAAOH}{\bkmkend AAAAAAAAOH}
00179     EXPECT_EQ(diff2, duration1);\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00180 \}\par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00181 \par
{\bkmkstart AAAAAAAAOP}{\bkmkend AAAAAAAAOP}
00186 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationCastAdvanced) \{\par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00187     {\cf20 // Test complex duration casting}\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00188     {\cf17 auto} hours = std::chrono::hours(1);\par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00189     {\cf17 auto} minutes = std::chrono::minutes(30);\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00190     {\cf17 auto} seconds = std::chrono::seconds(45);\par
{\bkmkstart AAAAAAAAPI}{\bkmkend AAAAAAAAPI}
00191     {\cf17 auto} milliseconds = std::chrono::milliseconds(500);\par
{\bkmkstart AAAAAAAAPK}{\bkmkend AAAAAAAAPK}
00192     \par
{\bkmkstart AAAAAAAAPM}{\bkmkend AAAAAAAAPM}
00193     {\cf20 // Test casting to different types}\par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00194     {\cf17 auto} total_hours = std::chrono::duration_cast<std::chrono::hours>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00195     {\cf17 auto} total_minutes = std::chrono::duration_cast<std::chrono::minutes>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAPZ}{\bkmkend AAAAAAAAPZ}
00196     {\cf17 auto} total_seconds = std::chrono::duration_cast<std::chrono::seconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQD}{\bkmkend AAAAAAAAQD}
00197     {\cf17 auto} total_milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQH}{\bkmkend AAAAAAAAQH}
00198     {\cf17 auto} total_microseconds = std::chrono::duration_cast<std::chrono::microseconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQK}{\bkmkend AAAAAAAAQK}
00199     {\cf17 auto} total_nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQM}{\bkmkend AAAAAAAAQM}
00200     \par
{\bkmkstart AAAAAAAAQO}{\bkmkend AAAAAAAAQO}
00201     EXPECT_GT(total_hours.count(), 0);\par
{\bkmkstart AAAAAAAAQP}{\bkmkend AAAAAAAAQP}
00202     EXPECT_GT(total_minutes.count(), 0);\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00203     EXPECT_GT(total_seconds.count(), 0);\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00204     EXPECT_GT(total_milliseconds.count(), 0);\par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00205     EXPECT_GT(total_microseconds.count(), 0);\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00206     EXPECT_GT(total_nanoseconds.count(), 0);\par
{\bkmkstart AAAAAAAARB}{\bkmkend AAAAAAAARB}
00207 \}\par
{\bkmkstart AAAAAAAARC}{\bkmkend AAAAAAAARC}
00208 \par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00213 TEST_F(ChronoAdvancedCoverageTest, TestChronoClockResolution) \{\par
{\bkmkstart AAAAAAAARH}{\bkmkend AAAAAAAARH}
00214     {\cf20 // Test high resolution clock resolution}\par
{\bkmkstart AAAAAAAARI}{\bkmkend AAAAAAAARI}
00215     {\cf17 auto} start_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAARN}{\bkmkend AAAAAAAARN}
00216     {\cf17 auto} end_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00217     {\cf17 auto} resolution_hr = end_hr - start_hr;\par
{\bkmkstart AAAAAAAARS}{\bkmkend AAAAAAAARS}
00218     \par
{\bkmkstart AAAAAAAART}{\bkmkend AAAAAAAART}
00219     EXPECT_GE(resolution_hr.count(), 0);\par
{\bkmkstart AAAAAAAARV}{\bkmkend AAAAAAAARV}
00220     \par
{\bkmkstart AAAAAAAARW}{\bkmkend AAAAAAAARW}
00221     {\cf20 // Test steady clock resolution}\par
{\bkmkstart AAAAAAAARX}{\bkmkend AAAAAAAARX}
00222     {\cf17 auto} start_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAARZ}{\bkmkend AAAAAAAARZ}
00223     {\cf17 auto} end_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAASB}{\bkmkend AAAAAAAASB}
00224     {\cf17 auto} resolution_sc = end_sc - start_sc;\par
{\bkmkstart AAAAAAAASD}{\bkmkend AAAAAAAASD}
00225     \par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00226     EXPECT_GE(resolution_sc.count(), 0);\par
{\bkmkstart AAAAAAAASH}{\bkmkend AAAAAAAASH}
00227     \par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00228     {\cf20 // Test system clock resolution}\par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00229     {\cf17 auto} start_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAASO}{\bkmkend AAAAAAAASO}
00230     {\cf17 auto} end_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAASR}{\bkmkend AAAAAAAASR}
00231     {\cf17 auto} resolution_sys = end_sys - start_sys;\par
{\bkmkstart AAAAAAAAST}{\bkmkend AAAAAAAAST}
00232     \par
{\bkmkstart AAAAAAAASV}{\bkmkend AAAAAAAASV}
00233     EXPECT_GE(resolution_sys.count(), 0);\par
{\bkmkstart AAAAAAAASW}{\bkmkend AAAAAAAASW}
00234 \}\par
{\bkmkstart AAAAAAAASY}{\bkmkend AAAAAAAASY}
00235 \par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00240 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationLimits) \{\par
{\bkmkstart AAAAAAAATB}{\bkmkend AAAAAAAATB}
00241     {\cf20 // Test maximum duration values}\par
{\bkmkstart AAAAAAAATC}{\bkmkend AAAAAAAATC}
00242     {\cf17 auto} max_seconds = std::chrono::seconds(std::numeric_limits<std::chrono::seconds::rep>::max());\par
{\bkmkstart AAAAAAAATV}{\bkmkend AAAAAAAATV}
00243     {\cf17 auto} max_milliseconds = std::chrono::milliseconds(std::numeric_limits<std::chrono::milliseconds::rep>::max());\par
{\bkmkstart AAAAAAAAUN}{\bkmkend AAAAAAAAUN}
00244     {\cf17 auto} max_microseconds = std::chrono::microseconds(std::numeric_limits<std::chrono::microseconds::rep>::max());\par
{\bkmkstart AAAAAAAAVD}{\bkmkend AAAAAAAAVD}
00245     {\cf17 auto} max_nanoseconds = std::chrono::nanoseconds(std::numeric_limits<std::chrono::nanoseconds::rep>::max());\par
{\bkmkstart AAAAAAAAVN}{\bkmkend AAAAAAAAVN}
00246     \par
{\bkmkstart AAAAAAAAVP}{\bkmkend AAAAAAAAVP}
00247     EXPECT_GT(max_seconds.count(), 0);\par
{\bkmkstart AAAAAAAAVQ}{\bkmkend AAAAAAAAVQ}
00248     EXPECT_GT(max_milliseconds.count(), 0);\par
{\bkmkstart AAAAAAAAVT}{\bkmkend AAAAAAAAVT}
00249     EXPECT_GT(max_microseconds.count(), 0);\par
{\bkmkstart AAAAAAAAVU}{\bkmkend AAAAAAAAVU}
00250     EXPECT_GT(max_nanoseconds.count(), 0);\par
{\bkmkstart AAAAAAAAVW}{\bkmkend AAAAAAAAVW}
00251     \par
{\bkmkstart AAAAAAAAVX}{\bkmkend AAAAAAAAVX}
00252     {\cf20 // Test minimum duration values}\par
{\bkmkstart AAAAAAAAVY}{\bkmkend AAAAAAAAVY}
00253     {\cf17 auto} min_seconds = std::chrono::seconds(std::numeric_limits<std::chrono::seconds::rep>::min());\par
{\bkmkstart AAAAAAAAWD}{\bkmkend AAAAAAAAWD}
00254     {\cf17 auto} min_milliseconds = std::chrono::milliseconds(std::numeric_limits<std::chrono::milliseconds::rep>::min());\par
{\bkmkstart AAAAAAAAWQ}{\bkmkend AAAAAAAAWQ}
00255     {\cf17 auto} min_microseconds = std::chrono::microseconds(std::numeric_limits<std::chrono::microseconds::rep>::min());\par
{\bkmkstart AAAAAAAAWX}{\bkmkend AAAAAAAAWX}
00256     {\cf17 auto} min_nanoseconds = std::chrono::nanoseconds(std::numeric_limits<std::chrono::nanoseconds::rep>::min());\par
{\bkmkstart AAAAAAAAXE}{\bkmkend AAAAAAAAXE}
00257     \par
{\bkmkstart AAAAAAAAXG}{\bkmkend AAAAAAAAXG}
00258     EXPECT_LT(min_seconds.count(), 0);\par
{\bkmkstart AAAAAAAAXJ}{\bkmkend AAAAAAAAXJ}
00259     EXPECT_LT(min_milliseconds.count(), 0);\par
{\bkmkstart AAAAAAAAXN}{\bkmkend AAAAAAAAXN}
00260     EXPECT_LT(min_microseconds.count(), 0);\par
{\bkmkstart AAAAAAAAXQ}{\bkmkend AAAAAAAAXQ}
00261     EXPECT_LT(min_nanoseconds.count(), 0);\par
{\bkmkstart AAAAAAAAXS}{\bkmkend AAAAAAAAXS}
00262 \}\par
{\bkmkstart AAAAAAAAXT}{\bkmkend AAAAAAAAXT}
00263 \par
{\bkmkstart AAAAAAAAXV}{\bkmkend AAAAAAAAXV}
00268 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationArithmeticOverflow) \{\par
{\bkmkstart AAAAAAAAXX}{\bkmkend AAAAAAAAXX}
00269     {\cf20 // Test safe arithmetic operations}\par
{\bkmkstart AAAAAAAAYB}{\bkmkend AAAAAAAAYB}
00270     {\cf17 auto} duration1 = std::chrono::seconds(1000);\par
{\bkmkstart AAAAAAAAYH}{\bkmkend AAAAAAAAYH}
00271     {\cf17 auto} duration2 = std::chrono::seconds(2000);\par
{\bkmkstart AAAAAAAAYL}{\bkmkend AAAAAAAAYL}
00272     \par
{\bkmkstart AAAAAAAAYN}{\bkmkend AAAAAAAAYN}
00273     {\cf20 // Test safe addition}\par
{\bkmkstart AAAAAAAAYP}{\bkmkend AAAAAAAAYP}
00274     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAAAYW}{\bkmkend AAAAAAAAYW}
00275     EXPECT_EQ(sum.count(), 3000);\par
{\bkmkstart AAAAAAAAYY}{\bkmkend AAAAAAAAYY}
00276     \par
{\bkmkstart AAAAAAAAYZ}{\bkmkend AAAAAAAAYZ}
00277     {\cf20 // Test safe subtraction}\par
{\bkmkstart AAAAAAAAZC}{\bkmkend AAAAAAAAZC}
00278     {\cf17 auto} diff = duration2 - duration1;\par
{\bkmkstart AAAAAAAAZF}{\bkmkend AAAAAAAAZF}
00279     EXPECT_EQ(diff.count(), 1000);\par
{\bkmkstart AAAAAAAAZG}{\bkmkend AAAAAAAAZG}
00280     \par
{\bkmkstart AAAAAAAAZH}{\bkmkend AAAAAAAAZH}
00281     {\cf20 // Test safe multiplication}\par
{\bkmkstart AAAAAAAAZK}{\bkmkend AAAAAAAAZK}
00282     {\cf17 auto} mult = duration1 * 3;\par
{\bkmkstart AAAAAAAAZN}{\bkmkend AAAAAAAAZN}
00283     EXPECT_EQ(mult.count(), 3000);\par
{\bkmkstart AAAAAAAAZP}{\bkmkend AAAAAAAAZP}
00284     \par
{\bkmkstart AAAAAAAAZQ}{\bkmkend AAAAAAAAZQ}
00285     {\cf20 // Test safe division}\par
{\bkmkstart AAAAAAAAZS}{\bkmkend AAAAAAAAZS}
00286     {\cf17 auto} div = duration2 / 2;\par
{\bkmkstart AAAAAAAAZU}{\bkmkend AAAAAAAAZU}
00287     EXPECT_EQ(div.count(), 1000);\par
{\bkmkstart AAAAAAAAZY}{\bkmkend AAAAAAAAZY}
00288 \}\par
{\bkmkstart AAAAAAABAA}{\bkmkend AAAAAAABAA}
00289 \par
{\bkmkstart AAAAAAABAC}{\bkmkend AAAAAAABAC}
00294 TEST_F(ChronoAdvancedCoverageTest, TestChronoTimePointConversion) \{\par
{\bkmkstart AAAAAAABAG}{\bkmkend AAAAAAABAG}
00295     {\cf20 // Test system clock conversions}\par
{\bkmkstart AAAAAAABAI}{\bkmkend AAAAAAABAI}
00296     {\cf17 auto} now_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAABAM}{\bkmkend AAAAAAABAM}
00297     {\cf17 auto} time_t_val = std::chrono::system_clock::to_time_t(now_sys);\par
{\bkmkstart AAAAAAABAS}{\bkmkend AAAAAAABAS}
00298     {\cf17 auto} back_to_sys = std::chrono::system_clock::from_time_t(time_t_val);\par
{\bkmkstart AAAAAAABAY}{\bkmkend AAAAAAABAY}
00299     \par
{\bkmkstart AAAAAAABBB}{\bkmkend AAAAAAABBB}
00300     EXPECT_GT(time_t_val, 0);\par
{\bkmkstart AAAAAAABBC}{\bkmkend AAAAAAABBC}
00301     \par
{\bkmkstart AAAAAAABBE}{\bkmkend AAAAAAABBE}
00302     {\cf20 // Test time point arithmetic with conversions}\par
{\bkmkstart AAAAAAABBG}{\bkmkend AAAAAAABBG}
00303     {\cf17 auto} future_sys = now_sys + std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABBL}{\bkmkend AAAAAAABBL}
00304     {\cf17 auto} past_sys = now_sys - std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABBS}{\bkmkend AAAAAAABBS}
00305     \par
{\bkmkstart AAAAAAABBW}{\bkmkend AAAAAAABBW}
00306     EXPECT_GT(future_sys, now_sys);\par
{\bkmkstart AAAAAAABBZ}{\bkmkend AAAAAAABBZ}
00307     EXPECT_LT(past_sys, now_sys);\par
{\bkmkstart AAAAAAABCC}{\bkmkend AAAAAAABCC}
00308 \}\par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00309 \par
{\bkmkstart AAAAAAABCI}{\bkmkend AAAAAAABCI}
00314 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationSpecialValues) \{\par
{\bkmkstart AAAAAAABCO}{\bkmkend AAAAAAABCO}
00315     {\cf20 // Test zero durations}\par
{\bkmkstart AAAAAAABCS}{\bkmkend AAAAAAABCS}
00316     {\cf17 auto} zero_sec = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAABCW}{\bkmkend AAAAAAABCW}
00317     {\cf17 auto} zero_ms = std::chrono::milliseconds(0);\par
{\bkmkstart AAAAAAABDA}{\bkmkend AAAAAAABDA}
00318     {\cf17 auto} zero_us = std::chrono::microseconds(0);\par
{\bkmkstart AAAAAAABDC}{\bkmkend AAAAAAABDC}
00319     {\cf17 auto} zero_ns = std::chrono::nanoseconds(0);\par
{\bkmkstart AAAAAAABDD}{\bkmkend AAAAAAABDD}
00320     \par
{\bkmkstart AAAAAAABDE}{\bkmkend AAAAAAABDE}
00321     EXPECT_EQ(zero_sec.count(), 0);\par
{\bkmkstart AAAAAAABDG}{\bkmkend AAAAAAABDG}
00322     EXPECT_EQ(zero_ms.count(), 0);\par
{\bkmkstart AAAAAAABDI}{\bkmkend AAAAAAABDI}
00323     EXPECT_EQ(zero_us.count(), 0);\par
{\bkmkstart AAAAAAABDL}{\bkmkend AAAAAAABDL}
00324     EXPECT_EQ(zero_ns.count(), 0);\par
{\bkmkstart AAAAAAABDN}{\bkmkend AAAAAAABDN}
00325     \par
{\bkmkstart AAAAAAABDP}{\bkmkend AAAAAAABDP}
00326     {\cf20 // Test unit durations}\par
{\bkmkstart AAAAAAABDQ}{\bkmkend AAAAAAABDQ}
00327     {\cf17 auto} unit_sec = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABDT}{\bkmkend AAAAAAABDT}
00328     {\cf17 auto} unit_ms = std::chrono::milliseconds(1);\par
{\bkmkstart AAAAAAABDV}{\bkmkend AAAAAAABDV}
00329     {\cf17 auto} unit_us = std::chrono::microseconds(1);\par
{\bkmkstart AAAAAAABDX}{\bkmkend AAAAAAABDX}
00330     {\cf17 auto} unit_ns = std::chrono::nanoseconds(1);\par
{\bkmkstart AAAAAAABDZ}{\bkmkend AAAAAAABDZ}
00331     \par
{\bkmkstart AAAAAAABEA}{\bkmkend AAAAAAABEA}
00332     EXPECT_EQ(unit_sec.count(), 1);\par
{\bkmkstart AAAAAAABEC}{\bkmkend AAAAAAABEC}
00333     EXPECT_EQ(unit_ms.count(), 1);\par
{\bkmkstart AAAAAAABEE}{\bkmkend AAAAAAABEE}
00334     EXPECT_EQ(unit_us.count(), 1);\par
{\bkmkstart AAAAAAABEG}{\bkmkend AAAAAAABEG}
00335     EXPECT_EQ(unit_ns.count(), 1);\par
{\bkmkstart AAAAAAABEH}{\bkmkend AAAAAAABEH}
00336 \}\par
{\bkmkstart AAAAAAABEI}{\bkmkend AAAAAAABEI}
00337 \par
{\bkmkstart AAAAAAABEK}{\bkmkend AAAAAAABEK}
00342 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationArithmeticPrecision) \{\par
{\bkmkstart AAAAAAABEN}{\bkmkend AAAAAAABEN}
00343     {\cf20 // Test precision in arithmetic operations}\par
{\bkmkstart AAAAAAABEP}{\bkmkend AAAAAAABEP}
00344     {\cf17 auto} duration1 = std::chrono::nanoseconds(1000000000); {\cf20 // 1 second}\par
{\bkmkstart AAAAAAABET}{\bkmkend AAAAAAABET}
00345     {\cf17 auto} duration2 = std::chrono::nanoseconds(500000000);  {\cf20 // 0.5 seconds}\par
{\bkmkstart AAAAAAABEX}{\bkmkend AAAAAAABEX}
00346     \par
{\bkmkstart AAAAAAABEZ}{\bkmkend AAAAAAABEZ}
00347     {\cf20 // Test precision in addition}\par
{\bkmkstart AAAAAAABFB}{\bkmkend AAAAAAABFB}
00348     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAABFE}{\bkmkend AAAAAAABFE}
00349     EXPECT_EQ(sum.count(), 1500000000);\par
{\bkmkstart AAAAAAABFG}{\bkmkend AAAAAAABFG}
00350     \par
{\bkmkstart AAAAAAABFJ}{\bkmkend AAAAAAABFJ}
00351     {\cf20 // Test precision in subtraction}\par
{\bkmkstart AAAAAAABFK}{\bkmkend AAAAAAABFK}
00352     {\cf17 auto} diff = duration1 - duration2;\par
{\bkmkstart AAAAAAABFP}{\bkmkend AAAAAAABFP}
00353     EXPECT_EQ(diff.count(), 500000000);\par
{\bkmkstart AAAAAAABFR}{\bkmkend AAAAAAABFR}
00354     \par
{\bkmkstart AAAAAAABFS}{\bkmkend AAAAAAABFS}
00355     {\cf20 // Test precision in multiplication}\par
{\bkmkstart AAAAAAABFU}{\bkmkend AAAAAAABFU}
00356     {\cf17 auto} mult = duration2 * 2;\par
{\bkmkstart AAAAAAABFV}{\bkmkend AAAAAAABFV}
00357     EXPECT_EQ(mult.count(), 1000000000);\par
{\bkmkstart AAAAAAABFX}{\bkmkend AAAAAAABFX}
00358     \par
{\bkmkstart AAAAAAABGA}{\bkmkend AAAAAAABGA}
00359     {\cf20 // Test precision in division}\par
{\bkmkstart AAAAAAABGB}{\bkmkend AAAAAAABGB}
00360     {\cf17 auto} div = duration1 / 2;\par
{\bkmkstart AAAAAAABGD}{\bkmkend AAAAAAABGD}
00361     EXPECT_EQ(div.count(), 500000000);\par
{\bkmkstart AAAAAAABGF}{\bkmkend AAAAAAABGF}
00362 \}\par
{\bkmkstart AAAAAAABGH}{\bkmkend AAAAAAABGH}
00363 \par
{\bkmkstart AAAAAAABGI}{\bkmkend AAAAAAABGI}
00364 \} {\cf20 // namespace}\par
}
}