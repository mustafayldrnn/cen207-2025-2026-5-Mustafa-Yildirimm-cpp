{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_binary_tree.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_binary_tree.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_binary_tree.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAG}{\bkmkend AAAAAAAAAG}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAH}{\bkmkend AAAAAAAAAH}
00002 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAAAL}{\bkmkend AAAAAAAAAL}
00003 {\cf21 #include "ds/binary_tree.h"}\par
{\bkmkstart AAAAAAAAAN}{\bkmkend AAAAAAAAAN}
00004 \par
{\bkmkstart AAAAAAAAAO}{\bkmkend AAAAAAAAAO}
00005 {\cf17 using namespace }ds;\par
{\bkmkstart AAAAAAAAAQ}{\bkmkend AAAAAAAAAQ}
00006 \par
{\bkmkstart AAAAAAAAAR}{\bkmkend AAAAAAAAAR}
00007 TEST(BinaryTree, ConstructionAndDestruction)\{\par
{\bkmkstart AAAAAAAAAV}{\bkmkend AAAAAAAAAV}
00008     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAAW}{\bkmkend AAAAAAAAAW}
00009     EXPECT_TRUE(tree.empty());\par
{\bkmkstart AAAAAAAAAX}{\bkmkend AAAAAAAAAX}
00010     EXPECT_EQ(tree.size(), 0);\par
{\bkmkstart AAAAAAAAAY}{\bkmkend AAAAAAAAAY}
00011     EXPECT_EQ(tree.height(), -1);\par
{\bkmkstart AAAAAAAAAZ}{\bkmkend AAAAAAAAAZ}
00012 \}\par
{\bkmkstart AAAAAAAABA}{\bkmkend AAAAAAAABA}
00013 \par
{\bkmkstart AAAAAAAABB}{\bkmkend AAAAAAAABB}
00014 TEST(BinaryTree, CreateRoot)\{\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00015     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAABE}{\bkmkend AAAAAAAABE}
00016     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAABG}{\bkmkend AAAAAAAABG}
00017     EXPECT_EQ(root->value, 10);\par
{\bkmkstart AAAAAAAABH}{\bkmkend AAAAAAAABH}
00018     EXPECT_FALSE(tree.empty());\par
{\bkmkstart AAAAAAAABJ}{\bkmkend AAAAAAAABJ}
00019     EXPECT_EQ(tree.size(), 1);\par
{\bkmkstart AAAAAAAABL}{\bkmkend AAAAAAAABL}
00020     EXPECT_EQ(tree.height(), 0);\par
{\bkmkstart AAAAAAAABM}{\bkmkend AAAAAAAABM}
00021 \}\par
{\bkmkstart AAAAAAAABN}{\bkmkend AAAAAAAABN}
00022 \par
{\bkmkstart AAAAAAAABP}{\bkmkend AAAAAAAABP}
00023 TEST(BinaryTree, BuildTree)\{\par
{\bkmkstart AAAAAAAABQ}{\bkmkend AAAAAAAABQ}
00024     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAABR}{\bkmkend AAAAAAAABR}
00025     \par
{\bkmkstart AAAAAAAABT}{\bkmkend AAAAAAAABT}
00026     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAABV}{\bkmkend AAAAAAAABV}
00027     {\cf20 //       10}\par
{\bkmkstart AAAAAAAABW}{\bkmkend AAAAAAAABW}
00028     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAABX}{\bkmkend AAAAAAAABX}
00029 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAABY}{\bkmkend AAAAAAAABY}
00030     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAABZ}{\bkmkend AAAAAAAABZ}
00031 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAACA}{\bkmkend AAAAAAAACA}
00032     \par
{\bkmkstart AAAAAAAACB}{\bkmkend AAAAAAAACB}
00033     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAACC}{\bkmkend AAAAAAAACC}
00034     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAACD}{\bkmkend AAAAAAAACD}
00035     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAACE}{\bkmkend AAAAAAAACE}
00036     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAACF}{\bkmkend AAAAAAAACF}
00037     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAACJ}{\bkmkend AAAAAAAACJ}
00038     \par
{\bkmkstart AAAAAAAACK}{\bkmkend AAAAAAAACK}
00039     EXPECT_EQ(tree.size(), 5);\par
{\bkmkstart AAAAAAAACO}{\bkmkend AAAAAAAACO}
00040     EXPECT_EQ(tree.height(), 2);\par
{\bkmkstart AAAAAAAACQ}{\bkmkend AAAAAAAACQ}
00041 \}\par
{\bkmkstart AAAAAAAACR}{\bkmkend AAAAAAAACR}
00042 \par
{\bkmkstart AAAAAAAACS}{\bkmkend AAAAAAAACS}
00043 TEST(BinaryTree, InorderTraversal)\{\par
{\bkmkstart AAAAAAAACT}{\bkmkend AAAAAAAACT}
00044     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAACU}{\bkmkend AAAAAAAACU}
00045     \par
{\bkmkstart AAAAAAAACV}{\bkmkend AAAAAAAACV}
00046     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAACW}{\bkmkend AAAAAAAACW}
00047     {\cf20 //       10}\par
{\bkmkstart AAAAAAAACX}{\bkmkend AAAAAAAACX}
00048     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAACY}{\bkmkend AAAAAAAACY}
00049 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAACZ}{\bkmkend AAAAAAAACZ}
00050     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAADA}{\bkmkend AAAAAAAADA}
00051 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAADB}{\bkmkend AAAAAAAADB}
00052     \par
{\bkmkstart AAAAAAAADC}{\bkmkend AAAAAAAADC}
00053     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAADG}{\bkmkend AAAAAAAADG}
00054     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAADI}{\bkmkend AAAAAAAADI}
00055     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAADK}{\bkmkend AAAAAAAADK}
00056     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAADL}{\bkmkend AAAAAAAADL}
00057     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAADO}{\bkmkend AAAAAAAADO}
00058     \par
{\bkmkstart AAAAAAAADP}{\bkmkend AAAAAAAADP}
00059     std::vector<int> result;\par
{\bkmkstart AAAAAAAADQ}{\bkmkend AAAAAAAADQ}
00060     tree.inorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAADU}{\bkmkend AAAAAAAADU}
00061         result.push_back(val);\par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00062     \});\par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00063     \par
{\bkmkstart AAAAAAAADY}{\bkmkend AAAAAAAADY}
00064     {\cf20 // Inorder: 3, 5, 7, 10, 15}\par
{\bkmkstart AAAAAAAADZ}{\bkmkend AAAAAAAADZ}
00065     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAED}{\bkmkend AAAAAAAAED}
00066     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAEE}{\bkmkend AAAAAAAAEE}
00067     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAEG}{\bkmkend AAAAAAAAEG}
00068     EXPECT_EQ(result[2], 7);\par
{\bkmkstart AAAAAAAAEJ}{\bkmkend AAAAAAAAEJ}
00069     EXPECT_EQ(result[3], 10);\par
{\bkmkstart AAAAAAAAEM}{\bkmkend AAAAAAAAEM}
00070     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00071 \}\par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00072 \par
{\bkmkstart AAAAAAAAER}{\bkmkend AAAAAAAAER}
00073 TEST(BinaryTree, PreorderTraversal)\{\par
{\bkmkstart AAAAAAAAEV}{\bkmkend AAAAAAAAEV}
00074     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAEW}{\bkmkend AAAAAAAAEW}
00075     \par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00076     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAEY}{\bkmkend AAAAAAAAEY}
00077     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAEZ}{\bkmkend AAAAAAAAEZ}
00078     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00079 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAFC}{\bkmkend AAAAAAAAFC}
00080     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAFE}{\bkmkend AAAAAAAAFE}
00081 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAFG}{\bkmkend AAAAAAAAFG}
00082     \par
{\bkmkstart AAAAAAAAFH}{\bkmkend AAAAAAAAFH}
00083     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAFJ}{\bkmkend AAAAAAAAFJ}
00084     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00085     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAFO}{\bkmkend AAAAAAAAFO}
00086     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAFR}{\bkmkend AAAAAAAAFR}
00087     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAFU}{\bkmkend AAAAAAAAFU}
00088     \par
{\bkmkstart AAAAAAAAFV}{\bkmkend AAAAAAAAFV}
00089     std::vector<int> result;\par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00090     tree.preorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAGB}{\bkmkend AAAAAAAAGB}
00091         result.push_back(val);\par
{\bkmkstart AAAAAAAAGC}{\bkmkend AAAAAAAAGC}
00092     \});\par
{\bkmkstart AAAAAAAAGE}{\bkmkend AAAAAAAAGE}
00093     \par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00094     {\cf20 // Preorder: 10, 5, 3, 7, 15}\par
{\bkmkstart AAAAAAAAGH}{\bkmkend AAAAAAAAGH}
00095     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAGI}{\bkmkend AAAAAAAAGI}
00096     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAGJ}{\bkmkend AAAAAAAAGJ}
00097     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAGK}{\bkmkend AAAAAAAAGK}
00098     EXPECT_EQ(result[2], 3);\par
{\bkmkstart AAAAAAAAGL}{\bkmkend AAAAAAAAGL}
00099     EXPECT_EQ(result[3], 7);\par
{\bkmkstart AAAAAAAAGN}{\bkmkend AAAAAAAAGN}
00100     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAGS}{\bkmkend AAAAAAAAGS}
00101 \}\par
{\bkmkstart AAAAAAAAGW}{\bkmkend AAAAAAAAGW}
00102 \par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00103 TEST(BinaryTree, PostorderTraversal)\{\par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00104     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00105     \par
{\bkmkstart AAAAAAAAHI}{\bkmkend AAAAAAAAHI}
00106     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAHK}{\bkmkend AAAAAAAAHK}
00107     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAHM}{\bkmkend AAAAAAAAHM}
00108     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAHN}{\bkmkend AAAAAAAAHN}
00109 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00110     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00111 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAHS}{\bkmkend AAAAAAAAHS}
00112     \par
{\bkmkstart AAAAAAAAHU}{\bkmkend AAAAAAAAHU}
00113     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAHX}{\bkmkend AAAAAAAAHX}
00114     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAHY}{\bkmkend AAAAAAAAHY}
00115     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAIA}{\bkmkend AAAAAAAAIA}
00116     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAIC}{\bkmkend AAAAAAAAIC}
00117     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAIG}{\bkmkend AAAAAAAAIG}
00118     \par
{\bkmkstart AAAAAAAAIH}{\bkmkend AAAAAAAAIH}
00119     std::vector<int> result;\par
{\bkmkstart AAAAAAAAIL}{\bkmkend AAAAAAAAIL}
00120     tree.postorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAIS}{\bkmkend AAAAAAAAIS}
00121         result.push_back(val);\par
{\bkmkstart AAAAAAAAIU}{\bkmkend AAAAAAAAIU}
00122     \});\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00123     \par
{\bkmkstart AAAAAAAAIW}{\bkmkend AAAAAAAAIW}
00124     {\cf20 // Postorder: 3, 7, 5, 15, 10}\par
{\bkmkstart AAAAAAAAIY}{\bkmkend AAAAAAAAIY}
00125     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAJB}{\bkmkend AAAAAAAAJB}
00126     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAJF}{\bkmkend AAAAAAAAJF}
00127     EXPECT_EQ(result[1], 7);\par
{\bkmkstart AAAAAAAAJI}{\bkmkend AAAAAAAAJI}
00128     EXPECT_EQ(result[2], 5);\par
{\bkmkstart AAAAAAAAJN}{\bkmkend AAAAAAAAJN}
00129     EXPECT_EQ(result[3], 15);\par
{\bkmkstart AAAAAAAAJP}{\bkmkend AAAAAAAAJP}
00130     EXPECT_EQ(result[4], 10);\par
{\bkmkstart AAAAAAAAJR}{\bkmkend AAAAAAAAJR}
00131 \}\par
{\bkmkstart AAAAAAAAJS}{\bkmkend AAAAAAAAJS}
00132 \par
{\bkmkstart AAAAAAAAJT}{\bkmkend AAAAAAAAJT}
00133 TEST(BinaryTree, LevelOrderTraversal)\{\par
{\bkmkstart AAAAAAAAJW}{\bkmkend AAAAAAAAJW}
00134     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAJY}{\bkmkend AAAAAAAAJY}
00135     \par
{\bkmkstart AAAAAAAAKH}{\bkmkend AAAAAAAAKH}
00136     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAKL}{\bkmkend AAAAAAAAKL}
00137     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAKM}{\bkmkend AAAAAAAAKM}
00138     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAKO}{\bkmkend AAAAAAAAKO}
00139 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAKP}{\bkmkend AAAAAAAAKP}
00140     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAKS}{\bkmkend AAAAAAAAKS}
00141 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAKT}{\bkmkend AAAAAAAAKT}
00142     \par
{\bkmkstart AAAAAAAAKU}{\bkmkend AAAAAAAAKU}
00143     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAALA}{\bkmkend AAAAAAAALA}
00144     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAALE}{\bkmkend AAAAAAAALE}
00145     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAALK}{\bkmkend AAAAAAAALK}
00146     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAALQ}{\bkmkend AAAAAAAALQ}
00147     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAALU}{\bkmkend AAAAAAAALU}
00148     \par
{\bkmkstart AAAAAAAALV}{\bkmkend AAAAAAAALV}
00149     std::vector<int> result;\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00150     tree.levelOrder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAMF}{\bkmkend AAAAAAAAMF}
00151         result.push_back(val);\par
{\bkmkstart AAAAAAAAMK}{\bkmkend AAAAAAAAMK}
00152     \});\par
{\bkmkstart AAAAAAAAMO}{\bkmkend AAAAAAAAMO}
00153     \par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00154     {\cf20 // Level-order: 10, 5, 15, 3, 7}\par
{\bkmkstart AAAAAAAAMU}{\bkmkend AAAAAAAAMU}
00155     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAMZ}{\bkmkend AAAAAAAAMZ}
00156     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00157     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAANI}{\bkmkend AAAAAAAANI}
00158     EXPECT_EQ(result[2], 15);\par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00159     EXPECT_EQ(result[3], 3);\par
{\bkmkstart AAAAAAAANT}{\bkmkend AAAAAAAANT}
00160     EXPECT_EQ(result[4], 7);\par
{\bkmkstart AAAAAAAANZ}{\bkmkend AAAAAAAANZ}
00161 \}\par
{\bkmkstart AAAAAAAAOB}{\bkmkend AAAAAAAAOB}
00162 \par
{\bkmkstart AAAAAAAAOD}{\bkmkend AAAAAAAAOD}
00163 TEST(BinaryTree, InorderIterative)\{\par
{\bkmkstart AAAAAAAAOK}{\bkmkend AAAAAAAAOK}
00164     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAOO}{\bkmkend AAAAAAAAOO}
00165     \par
{\bkmkstart AAAAAAAAOQ}{\bkmkend AAAAAAAAOQ}
00166     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00167     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAOX}{\bkmkend AAAAAAAAOX}
00168     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAOZ}{\bkmkend AAAAAAAAOZ}
00169     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAPC}{\bkmkend AAAAAAAAPC}
00170     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAPG}{\bkmkend AAAAAAAAPG}
00171     \par
{\bkmkstart AAAAAAAAPH}{\bkmkend AAAAAAAAPH}
00172     std::vector<int> result;\par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00173     tree.inorderIterative([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00174         result.push_back(val);\par
{\bkmkstart AAAAAAAAPZ}{\bkmkend AAAAAAAAPZ}
00175     \});\par
{\bkmkstart AAAAAAAAQB}{\bkmkend AAAAAAAAQB}
00176     \par
{\bkmkstart AAAAAAAAQD}{\bkmkend AAAAAAAAQD}
00177     {\cf20 // Should match recursive inorder: 3, 5, 7, 10, 15}\par
{\bkmkstart AAAAAAAAQF}{\bkmkend AAAAAAAAQF}
00178     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAQK}{\bkmkend AAAAAAAAQK}
00179     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAQP}{\bkmkend AAAAAAAAQP}
00180     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00181     EXPECT_EQ(result[2], 7);\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00182     EXPECT_EQ(result[3], 10);\par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00183     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAARI}{\bkmkend AAAAAAAARI}
00184 \}\par
{\bkmkstart AAAAAAAARN}{\bkmkend AAAAAAAARN}
00185 \par
{\bkmkstart AAAAAAAARU}{\bkmkend AAAAAAAARU}
00186 TEST(BinaryTree, PreorderIterative)\{\par
{\bkmkstart AAAAAAAASA}{\bkmkend AAAAAAAASA}
00187     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAASF}{\bkmkend AAAAAAAASF}
00188     \par
{\bkmkstart AAAAAAAASH}{\bkmkend AAAAAAAASH}
00189     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAASK}{\bkmkend AAAAAAAASK}
00190     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAASS}{\bkmkend AAAAAAAASS}
00191     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00192     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAATH}{\bkmkend AAAAAAAATH}
00193     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAATO}{\bkmkend AAAAAAAATO}
00194     \par
{\bkmkstart AAAAAAAATR}{\bkmkend AAAAAAAATR}
00195     std::vector<int> result;\par
{\bkmkstart AAAAAAAAUG}{\bkmkend AAAAAAAAUG}
00196     tree.preorderIterative([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAUO}{\bkmkend AAAAAAAAUO}
00197         result.push_back(val);\par
{\bkmkstart AAAAAAAAUT}{\bkmkend AAAAAAAAUT}
00198     \});\par
{\bkmkstart AAAAAAAAUX}{\bkmkend AAAAAAAAUX}
00199     \par
{\bkmkstart AAAAAAAAUZ}{\bkmkend AAAAAAAAUZ}
00200     {\cf20 // Should match recursive preorder: 10, 5, 3, 7, 15}\par
{\bkmkstart AAAAAAAAVD}{\bkmkend AAAAAAAAVD}
00201     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAVL}{\bkmkend AAAAAAAAVL}
00202     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAVS}{\bkmkend AAAAAAAAVS}
00203     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAVX}{\bkmkend AAAAAAAAVX}
00204     EXPECT_EQ(result[2], 3);\par
{\bkmkstart AAAAAAAAWD}{\bkmkend AAAAAAAAWD}
00205     EXPECT_EQ(result[3], 7);\par
{\bkmkstart AAAAAAAAWN}{\bkmkend AAAAAAAAWN}
00206     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAWU}{\bkmkend AAAAAAAAWU}
00207 \}\par
{\bkmkstart AAAAAAAAWW}{\bkmkend AAAAAAAAWW}
00208 \par
{\bkmkstart AAAAAAAAWY}{\bkmkend AAAAAAAAWY}
00209 TEST(BinaryTree, HeightCalculation)\{\par
{\bkmkstart AAAAAAAAXE}{\bkmkend AAAAAAAAXE}
00210     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAXL}{\bkmkend AAAAAAAAXL}
00211     \par
{\bkmkstart AAAAAAAAXP}{\bkmkend AAAAAAAAXP}
00212     {\cf20 // Empty tree}\par
{\bkmkstart AAAAAAAAXT}{\bkmkend AAAAAAAAXT}
00213     EXPECT_EQ(tree.height(), -1);\par
{\bkmkstart AAAAAAAAYB}{\bkmkend AAAAAAAAYB}
00214     \par
{\bkmkstart AAAAAAAAYF}{\bkmkend AAAAAAAAYF}
00215     {\cf20 // Single node}\par
{\bkmkstart AAAAAAAAYW}{\bkmkend AAAAAAAAYW}
00216     tree.createRoot(10);\par
{\bkmkstart AAAAAAAAZC}{\bkmkend AAAAAAAAZC}
00217     EXPECT_EQ(tree.height(), 0);\par
{\bkmkstart AAAAAAAAZM}{\bkmkend AAAAAAAAZM}
00218     \par
{\bkmkstart AAAAAAAAZP}{\bkmkend AAAAAAAAZP}
00219     {\cf20 // Add left child}\par
{\bkmkstart AAAAAAAAZT}{\bkmkend AAAAAAAAZT}
00220     {\cf17 auto}* root = tree.root();\par
{\bkmkstart AAAAAAABAB}{\bkmkend AAAAAAABAB}
00221     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAABAI}{\bkmkend AAAAAAABAI}
00222     EXPECT_EQ(tree.height(), 1);\par
{\bkmkstart AAAAAAABAQ}{\bkmkend AAAAAAABAQ}
00223     \par
{\bkmkstart AAAAAAABAU}{\bkmkend AAAAAAABAU}
00224     {\cf20 // Add right child (height stays 1)}\par
{\bkmkstart AAAAAAABAZ}{\bkmkend AAAAAAABAZ}
00225     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAABBI}{\bkmkend AAAAAAABBI}
00226     EXPECT_EQ(tree.height(), 1);\par
{\bkmkstart AAAAAAABBP}{\bkmkend AAAAAAABBP}
00227     \par
{\bkmkstart AAAAAAABBQ}{\bkmkend AAAAAAABBQ}
00228     {\cf20 // Add grandchild}\par
{\bkmkstart AAAAAAABBS}{\bkmkend AAAAAAABBS}
00229     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAABBV}{\bkmkend AAAAAAABBV}
00230     EXPECT_EQ(tree.height(), 2);\par
{\bkmkstart AAAAAAABBY}{\bkmkend AAAAAAABBY}
00231 \}\par
{\bkmkstart AAAAAAABCA}{\bkmkend AAAAAAABCA}
00232 \par
{\bkmkstart AAAAAAABCB}{\bkmkend AAAAAAABCB}
00233 TEST(BinaryTree, SizeCalculation)\{\par
{\bkmkstart AAAAAAABCJ}{\bkmkend AAAAAAABCJ}
00234     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAABCQ}{\bkmkend AAAAAAABCQ}
00235     \par
{\bkmkstart AAAAAAABCT}{\bkmkend AAAAAAABCT}
00236     EXPECT_EQ(tree.size(), 0);\par
{\bkmkstart AAAAAAABCY}{\bkmkend AAAAAAABCY}
00237     \par
{\bkmkstart AAAAAAABDB}{\bkmkend AAAAAAABDB}
00238     tree.createRoot(10);\par
{\bkmkstart AAAAAAABDH}{\bkmkend AAAAAAABDH}
00239     EXPECT_EQ(tree.size(), 1);\par
{\bkmkstart AAAAAAABDO}{\bkmkend AAAAAAABDO}
00240     \par
{\bkmkstart AAAAAAABDP}{\bkmkend AAAAAAABDP}
00241     {\cf17 auto}* root = tree.root();\par
{\bkmkstart AAAAAAABDV}{\bkmkend AAAAAAABDV}
00242     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAABEF}{\bkmkend AAAAAAABEF}
00243     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAABEN}{\bkmkend AAAAAAABEN}
00244     EXPECT_EQ(tree.size(), 3);\par
{\bkmkstart AAAAAAABET}{\bkmkend AAAAAAABET}
00245     \par
{\bkmkstart AAAAAAABEX}{\bkmkend AAAAAAABEX}
00246     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAABFI}{\bkmkend AAAAAAABFI}
00247     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAABFN}{\bkmkend AAAAAAABFN}
00248     EXPECT_EQ(tree.size(), 5);\par
{\bkmkstart AAAAAAABFS}{\bkmkend AAAAAAABFS}
00249 \}\par
{\bkmkstart AAAAAAABFW}{\bkmkend AAAAAAABFW}
00250 \par
{\bkmkstart AAAAAAABGA}{\bkmkend AAAAAAABGA}
00251 TEST(BinaryTree, ComplexTree)\{\par
{\bkmkstart AAAAAAABGH}{\bkmkend AAAAAAABGH}
00252     BinaryTree<std::string> tree;\par
{\bkmkstart AAAAAAABGO}{\bkmkend AAAAAAABGO}
00253     \par
{\bkmkstart AAAAAAABGR}{\bkmkend AAAAAAABGR}
00254     {\cf20 // Build a more complex tree}\par
{\bkmkstart AAAAAAABGU}{\bkmkend AAAAAAABGU}
00255     {\cf20 //            "A"}\par
{\bkmkstart AAAAAAABGV}{\bkmkend AAAAAAABGV}
00256     {\cf20 //           /   \\}\par
{\bkmkstart AAAAAAABGZ}{\bkmkend AAAAAAABGZ}
00257 {\cf20     //         "B"   "C"}\par
{\bkmkstart AAAAAAABHE}{\bkmkend AAAAAAABHE}
00258     {\cf20 //        /   \\     \\}\par
{\bkmkstart AAAAAAABHI}{\bkmkend AAAAAAABHI}
00259 {\cf20     //      "D"   "E"   "F"}\par
{\bkmkstart AAAAAAABHL}{\bkmkend AAAAAAABHL}
00260     {\cf20 //             \\}\par
{\bkmkstart AAAAAAABHN}{\bkmkend AAAAAAABHN}
00261 {\cf20     //             "G"}\par
{\bkmkstart AAAAAAABHQ}{\bkmkend AAAAAAABHQ}
00262     \par
{\bkmkstart AAAAAAABHS}{\bkmkend AAAAAAABHS}
00263     {\cf17 auto}* root = tree.createRoot({\cf22 "A"});\par
{\bkmkstart AAAAAAABHW}{\bkmkend AAAAAAABHW}
00264     root->left = {\cf17 new} TreeNode<std::string>({\cf22 "B"});\par
{\bkmkstart AAAAAAABIH}{\bkmkend AAAAAAABIH}
00265     root->right = {\cf17 new} TreeNode<std::string>({\cf22 "C"});\par
{\bkmkstart AAAAAAABIS}{\bkmkend AAAAAAABIS}
00266     root->left->left = {\cf17 new} TreeNode<std::string>({\cf22 "D"});\par
{\bkmkstart AAAAAAABJA}{\bkmkend AAAAAAABJA}
00267     root->left->right = {\cf17 new} TreeNode<std::string>({\cf22 "E"});\par
{\bkmkstart AAAAAAABJI}{\bkmkend AAAAAAABJI}
00268     root->right->right = {\cf17 new} TreeNode<std::string>({\cf22 "F"});\par
{\bkmkstart AAAAAAABJY}{\bkmkend AAAAAAABJY}
00269     root->left->right->right = {\cf17 new} TreeNode<std::string>({\cf22 "G"});\par
{\bkmkstart AAAAAAABKI}{\bkmkend AAAAAAABKI}
00270     \par
{\bkmkstart AAAAAAABKM}{\bkmkend AAAAAAABKM}
00271     EXPECT_EQ(tree.size(), 7);\par
{\bkmkstart AAAAAAABKR}{\bkmkend AAAAAAABKR}
00272     EXPECT_EQ(tree.height(), 3);\par
{\bkmkstart AAAAAAABKY}{\bkmkend AAAAAAABKY}
00273     \par
{\bkmkstart AAAAAAABLA}{\bkmkend AAAAAAABLA}
00274     std::vector<std::string> inorder;\par
{\bkmkstart AAAAAAABLN}{\bkmkend AAAAAAABLN}
00275     tree.inorder([&inorder]({\cf17 const} std::string& val) \{\par
{\bkmkstart AAAAAAABLY}{\bkmkend AAAAAAABLY}
00276         inorder.push_back(val);\par
{\bkmkstart AAAAAAABMF}{\bkmkend AAAAAAABMF}
00277     \});\par
{\bkmkstart AAAAAAABMJ}{\bkmkend AAAAAAABMJ}
00278     \par
{\bkmkstart AAAAAAABMK}{\bkmkend AAAAAAABMK}
00279     ASSERT_EQ(inorder.size(), 7u);\par
{\bkmkstart AAAAAAABMR}{\bkmkend AAAAAAABMR}
00280     {\cf20 // Inorder: D, B, E, G, A, C, F}\par
{\bkmkstart AAAAAAABMU}{\bkmkend AAAAAAABMU}
00281     EXPECT_EQ(inorder[0], {\cf22 "D"});\par
{\bkmkstart AAAAAAABND}{\bkmkend AAAAAAABND}
00282     EXPECT_EQ(inorder[1], {\cf22 "B"});\par
{\bkmkstart AAAAAAABNK}{\bkmkend AAAAAAABNK}
00283     EXPECT_EQ(inorder[2], {\cf22 "E"});\par
{\bkmkstart AAAAAAABNP}{\bkmkend AAAAAAABNP}
00284     EXPECT_EQ(inorder[3], {\cf22 "G"});\par
{\bkmkstart AAAAAAABNT}{\bkmkend AAAAAAABNT}
00285     EXPECT_EQ(inorder[4], {\cf22 "A"});\par
{\bkmkstart AAAAAAABNY}{\bkmkend AAAAAAABNY}
00286     EXPECT_EQ(inorder[5], {\cf22 "C"});\par
{\bkmkstart AAAAAAABOC}{\bkmkend AAAAAAABOC}
00287     EXPECT_EQ(inorder[6], {\cf22 "F"});\par
{\bkmkstart AAAAAAABOJ}{\bkmkend AAAAAAABOJ}
00288 \}\par
}
}