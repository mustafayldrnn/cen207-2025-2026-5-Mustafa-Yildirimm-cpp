{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_binary_tree.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_binary_tree.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_binary_tree.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAD}{\bkmkend AAAAAAAAAD}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAI}{\bkmkend AAAAAAAAAI}
00002 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAAAJ}{\bkmkend AAAAAAAAAJ}
00003 {\cf21 #include "ds/binary_tree.h"}\par
{\bkmkstart AAAAAAAAAM}{\bkmkend AAAAAAAAAM}
00004 \par
{\bkmkstart AAAAAAAAAN}{\bkmkend AAAAAAAAAN}
00005 {\cf17 using namespace }ds;\par
{\bkmkstart AAAAAAAAAO}{\bkmkend AAAAAAAAAO}
00006 \par
{\bkmkstart AAAAAAAAAP}{\bkmkend AAAAAAAAAP}
00007 TEST(BinaryTree, ConstructionAndDestruction)\{\par
{\bkmkstart AAAAAAAAAT}{\bkmkend AAAAAAAAAT}
00008     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAAU}{\bkmkend AAAAAAAAAU}
00009     EXPECT_TRUE(tree.empty());\par
{\bkmkstart AAAAAAAAAW}{\bkmkend AAAAAAAAAW}
00010     EXPECT_EQ(tree.size(), 0);\par
{\bkmkstart AAAAAAAAAX}{\bkmkend AAAAAAAAAX}
00011     EXPECT_EQ(tree.height(), -1);\par
{\bkmkstart AAAAAAAAAY}{\bkmkend AAAAAAAAAY}
00012 \}\par
{\bkmkstart AAAAAAAABA}{\bkmkend AAAAAAAABA}
00013 \par
{\bkmkstart AAAAAAAABB}{\bkmkend AAAAAAAABB}
00014 TEST(BinaryTree, CreateRoot)\{\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00015     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAABD}{\bkmkend AAAAAAAABD}
00016     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAABH}{\bkmkend AAAAAAAABH}
00017     EXPECT_EQ(root->value, 10);\par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00018     EXPECT_FALSE(tree.empty());\par
{\bkmkstart AAAAAAAABK}{\bkmkend AAAAAAAABK}
00019     EXPECT_EQ(tree.size(), 1);\par
{\bkmkstart AAAAAAAABO}{\bkmkend AAAAAAAABO}
00020     EXPECT_EQ(tree.height(), 0);\par
{\bkmkstart AAAAAAAABP}{\bkmkend AAAAAAAABP}
00021 \}\par
{\bkmkstart AAAAAAAABQ}{\bkmkend AAAAAAAABQ}
00022 \par
{\bkmkstart AAAAAAAABT}{\bkmkend AAAAAAAABT}
00023 TEST(BinaryTree, BuildTree)\{\par
{\bkmkstart AAAAAAAABV}{\bkmkend AAAAAAAABV}
00024     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAABX}{\bkmkend AAAAAAAABX}
00025     \par
{\bkmkstart AAAAAAAABY}{\bkmkend AAAAAAAABY}
00026     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAABZ}{\bkmkend AAAAAAAABZ}
00027     {\cf20 //       10}\par
{\bkmkstart AAAAAAAACA}{\bkmkend AAAAAAAACA}
00028     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAACB}{\bkmkend AAAAAAAACB}
00029 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAACC}{\bkmkend AAAAAAAACC}
00030     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAACD}{\bkmkend AAAAAAAACD}
00031 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAACE}{\bkmkend AAAAAAAACE}
00032     \par
{\bkmkstart AAAAAAAACF}{\bkmkend AAAAAAAACF}
00033     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAACH}{\bkmkend AAAAAAAACH}
00034     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAACI}{\bkmkend AAAAAAAACI}
00035     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAACJ}{\bkmkend AAAAAAAACJ}
00036     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAACK}{\bkmkend AAAAAAAACK}
00037     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAACM}{\bkmkend AAAAAAAACM}
00038     \par
{\bkmkstart AAAAAAAACO}{\bkmkend AAAAAAAACO}
00039     EXPECT_EQ(tree.size(), 5);\par
{\bkmkstart AAAAAAAACQ}{\bkmkend AAAAAAAACQ}
00040     EXPECT_EQ(tree.height(), 2);\par
{\bkmkstart AAAAAAAACR}{\bkmkend AAAAAAAACR}
00041 \}\par
{\bkmkstart AAAAAAAACS}{\bkmkend AAAAAAAACS}
00042 \par
{\bkmkstart AAAAAAAACU}{\bkmkend AAAAAAAACU}
00043 TEST(BinaryTree, InorderTraversal)\{\par
{\bkmkstart AAAAAAAACW}{\bkmkend AAAAAAAACW}
00044     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAACZ}{\bkmkend AAAAAAAACZ}
00045     \par
{\bkmkstart AAAAAAAADA}{\bkmkend AAAAAAAADA}
00046     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAADC}{\bkmkend AAAAAAAADC}
00047     {\cf20 //       10}\par
{\bkmkstart AAAAAAAADE}{\bkmkend AAAAAAAADE}
00048     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAADF}{\bkmkend AAAAAAAADF}
00049 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAADG}{\bkmkend AAAAAAAADG}
00050     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAADH}{\bkmkend AAAAAAAADH}
00051 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAADJ}{\bkmkend AAAAAAAADJ}
00052     \par
{\bkmkstart AAAAAAAADK}{\bkmkend AAAAAAAADK}
00053     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAADM}{\bkmkend AAAAAAAADM}
00054     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAADQ}{\bkmkend AAAAAAAADQ}
00055     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
00056     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAADU}{\bkmkend AAAAAAAADU}
00057     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00058     \par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00059     std::vector<int> result;\par
{\bkmkstart AAAAAAAADZ}{\bkmkend AAAAAAAADZ}
00060     tree.inorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
00061         result.push_back(val);\par
{\bkmkstart AAAAAAAAEG}{\bkmkend AAAAAAAAEG}
00062     \});\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00063     \par
{\bkmkstart AAAAAAAAEI}{\bkmkend AAAAAAAAEI}
00064     {\cf20 // Inorder: 3, 5, 7, 10, 15}\par
{\bkmkstart AAAAAAAAEK}{\bkmkend AAAAAAAAEK}
00065     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00066     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAEM}{\bkmkend AAAAAAAAEM}
00067     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00068     EXPECT_EQ(result[2], 7);\par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00069     EXPECT_EQ(result[3], 10);\par
{\bkmkstart AAAAAAAAER}{\bkmkend AAAAAAAAER}
00070     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00071 \}\par
{\bkmkstart AAAAAAAAET}{\bkmkend AAAAAAAAET}
00072 \par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00073 TEST(BinaryTree, PreorderTraversal)\{\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00074     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAEZ}{\bkmkend AAAAAAAAEZ}
00075     \par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00076     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAFC}{\bkmkend AAAAAAAAFC}
00077     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAFE}{\bkmkend AAAAAAAAFE}
00078     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAFF}{\bkmkend AAAAAAAAFF}
00079 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAFH}{\bkmkend AAAAAAAAFH}
00080     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
00081 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAFK}{\bkmkend AAAAAAAAFK}
00082     \par
{\bkmkstart AAAAAAAAFL}{\bkmkend AAAAAAAAFL}
00083     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAFN}{\bkmkend AAAAAAAAFN}
00084     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00085     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAFS}{\bkmkend AAAAAAAAFS}
00086     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAFU}{\bkmkend AAAAAAAAFU}
00087     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAFW}{\bkmkend AAAAAAAAFW}
00088     \par
{\bkmkstart AAAAAAAAFY}{\bkmkend AAAAAAAAFY}
00089     std::vector<int> result;\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00090     tree.preorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAGC}{\bkmkend AAAAAAAAGC}
00091         result.push_back(val);\par
{\bkmkstart AAAAAAAAGE}{\bkmkend AAAAAAAAGE}
00092     \});\par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00093     \par
{\bkmkstart AAAAAAAAGH}{\bkmkend AAAAAAAAGH}
00094     {\cf20 // Preorder: 10, 5, 3, 7, 15}\par
{\bkmkstart AAAAAAAAGJ}{\bkmkend AAAAAAAAGJ}
00095     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAGK}{\bkmkend AAAAAAAAGK}
00096     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAGO}{\bkmkend AAAAAAAAGO}
00097     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00098     EXPECT_EQ(result[2], 3);\par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00099     EXPECT_EQ(result[3], 7);\par
{\bkmkstart AAAAAAAAGT}{\bkmkend AAAAAAAAGT}
00100     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAGU}{\bkmkend AAAAAAAAGU}
00101 \}\par
{\bkmkstart AAAAAAAAGV}{\bkmkend AAAAAAAAGV}
00102 \par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00103 TEST(BinaryTree, PostorderTraversal)\{\par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00104     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAGZ}{\bkmkend AAAAAAAAGZ}
00105     \par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00106     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00107     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00108     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAHE}{\bkmkend AAAAAAAAHE}
00109 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00110     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00111 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAHH}{\bkmkend AAAAAAAAHH}
00112     \par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00113     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAHM}{\bkmkend AAAAAAAAHM}
00114     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00115     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00116     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAHS}{\bkmkend AAAAAAAAHS}
00117     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAHT}{\bkmkend AAAAAAAAHT}
00118     \par
{\bkmkstart AAAAAAAAHU}{\bkmkend AAAAAAAAHU}
00119     std::vector<int> result;\par
{\bkmkstart AAAAAAAAHZ}{\bkmkend AAAAAAAAHZ}
00120     tree.postorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAIB}{\bkmkend AAAAAAAAIB}
00121         result.push_back(val);\par
{\bkmkstart AAAAAAAAIE}{\bkmkend AAAAAAAAIE}
00122     \});\par
{\bkmkstart AAAAAAAAIF}{\bkmkend AAAAAAAAIF}
00123     \par
{\bkmkstart AAAAAAAAIG}{\bkmkend AAAAAAAAIG}
00124     {\cf20 // Postorder: 3, 7, 5, 15, 10}\par
{\bkmkstart AAAAAAAAIH}{\bkmkend AAAAAAAAIH}
00125     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAIJ}{\bkmkend AAAAAAAAIJ}
00126     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAIL}{\bkmkend AAAAAAAAIL}
00127     EXPECT_EQ(result[1], 7);\par
{\bkmkstart AAAAAAAAIO}{\bkmkend AAAAAAAAIO}
00128     EXPECT_EQ(result[2], 5);\par
{\bkmkstart AAAAAAAAIQ}{\bkmkend AAAAAAAAIQ}
00129     EXPECT_EQ(result[3], 15);\par
{\bkmkstart AAAAAAAAIS}{\bkmkend AAAAAAAAIS}
00130     EXPECT_EQ(result[4], 10);\par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00131 \}\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00132 \par
{\bkmkstart AAAAAAAAIW}{\bkmkend AAAAAAAAIW}
00133 TEST(BinaryTree, LevelOrderTraversal)\{\par
{\bkmkstart AAAAAAAAIZ}{\bkmkend AAAAAAAAIZ}
00134     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAJB}{\bkmkend AAAAAAAAJB}
00135     \par
{\bkmkstart AAAAAAAAJF}{\bkmkend AAAAAAAAJF}
00136     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAJG}{\bkmkend AAAAAAAAJG}
00137     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAJI}{\bkmkend AAAAAAAAJI}
00138     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAJJ}{\bkmkend AAAAAAAAJJ}
00139 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00140     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAJL}{\bkmkend AAAAAAAAJL}
00141 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAJN}{\bkmkend AAAAAAAAJN}
00142     \par
{\bkmkstart AAAAAAAAJO}{\bkmkend AAAAAAAAJO}
00143     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00144     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAJT}{\bkmkend AAAAAAAAJT}
00145     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAJV}{\bkmkend AAAAAAAAJV}
00146     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
00147     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAJZ}{\bkmkend AAAAAAAAJZ}
00148     \par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00149     std::vector<int> result;\par
{\bkmkstart AAAAAAAAKB}{\bkmkend AAAAAAAAKB}
00150     tree.levelOrder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAKF}{\bkmkend AAAAAAAAKF}
00151         result.push_back(val);\par
{\bkmkstart AAAAAAAAKH}{\bkmkend AAAAAAAAKH}
00152     \});\par
{\bkmkstart AAAAAAAAKJ}{\bkmkend AAAAAAAAKJ}
00153     \par
{\bkmkstart AAAAAAAAKK}{\bkmkend AAAAAAAAKK}
00154     {\cf20 // Level-order: 10, 5, 15, 3, 7}\par
{\bkmkstart AAAAAAAAKL}{\bkmkend AAAAAAAAKL}
00155     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAKN}{\bkmkend AAAAAAAAKN}
00156     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAKP}{\bkmkend AAAAAAAAKP}
00157     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAKR}{\bkmkend AAAAAAAAKR}
00158     EXPECT_EQ(result[2], 15);\par
{\bkmkstart AAAAAAAAKU}{\bkmkend AAAAAAAAKU}
00159     EXPECT_EQ(result[3], 3);\par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00160     EXPECT_EQ(result[4], 7);\par
{\bkmkstart AAAAAAAAKX}{\bkmkend AAAAAAAAKX}
00161 \}\par
{\bkmkstart AAAAAAAAKY}{\bkmkend AAAAAAAAKY}
00162 \par
{\bkmkstart AAAAAAAALA}{\bkmkend AAAAAAAALA}
00163 TEST(BinaryTree, InorderIterative)\{\par
{\bkmkstart AAAAAAAALC}{\bkmkend AAAAAAAALC}
00164     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAALE}{\bkmkend AAAAAAAALE}
00165     \par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00166     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAALJ}{\bkmkend AAAAAAAALJ}
00167     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAALL}{\bkmkend AAAAAAAALL}
00168     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAALN}{\bkmkend AAAAAAAALN}
00169     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAALQ}{\bkmkend AAAAAAAALQ}
00170     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAALS}{\bkmkend AAAAAAAALS}
00171     \par
{\bkmkstart AAAAAAAALT}{\bkmkend AAAAAAAALT}
00172     std::vector<int> result;\par
{\bkmkstart AAAAAAAALW}{\bkmkend AAAAAAAALW}
00173     tree.inorderIterative([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00174         result.push_back(val);\par
{\bkmkstart AAAAAAAAMB}{\bkmkend AAAAAAAAMB}
00175     \});\par
{\bkmkstart AAAAAAAAMC}{\bkmkend AAAAAAAAMC}
00176     \par
{\bkmkstart AAAAAAAAME}{\bkmkend AAAAAAAAME}
00177     {\cf20 // Should match recursive inorder: 3, 5, 7, 10, 15}\par
{\bkmkstart AAAAAAAAMH}{\bkmkend AAAAAAAAMH}
00178     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00179     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAML}{\bkmkend AAAAAAAAML}
00180     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAMN}{\bkmkend AAAAAAAAMN}
00181     EXPECT_EQ(result[2], 7);\par
{\bkmkstart AAAAAAAAMP}{\bkmkend AAAAAAAAMP}
00182     EXPECT_EQ(result[3], 10);\par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00183     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAMT}{\bkmkend AAAAAAAAMT}
00184 \}\par
{\bkmkstart AAAAAAAAMV}{\bkmkend AAAAAAAAMV}
00185 \par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00186 TEST(BinaryTree, PreorderIterative)\{\par
{\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00187     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAANC}{\bkmkend AAAAAAAANC}
00188     \par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00189     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAANF}{\bkmkend AAAAAAAANF}
00190     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAANH}{\bkmkend AAAAAAAANH}
00191     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAANJ}{\bkmkend AAAAAAAANJ}
00192     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAANL}{\bkmkend AAAAAAAANL}
00193     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00194     \par
{\bkmkstart AAAAAAAANP}{\bkmkend AAAAAAAANP}
00195     std::vector<int> result;\par
{\bkmkstart AAAAAAAANS}{\bkmkend AAAAAAAANS}
00196     tree.preorderIterative([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAANU}{\bkmkend AAAAAAAANU}
00197         result.push_back(val);\par
{\bkmkstart AAAAAAAANW}{\bkmkend AAAAAAAANW}
00198     \});\par
{\bkmkstart AAAAAAAANX}{\bkmkend AAAAAAAANX}
00199     \par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
00200     {\cf20 // Should match recursive preorder: 10, 5, 3, 7, 15}\par
{\bkmkstart AAAAAAAANZ}{\bkmkend AAAAAAAANZ}
00201     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00202     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00203     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAOG}{\bkmkend AAAAAAAAOG}
00204     EXPECT_EQ(result[2], 3);\par
{\bkmkstart AAAAAAAAOH}{\bkmkend AAAAAAAAOH}
00205     EXPECT_EQ(result[3], 7);\par
{\bkmkstart AAAAAAAAOJ}{\bkmkend AAAAAAAAOJ}
00206     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00207 \}\par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00208 \par
{\bkmkstart AAAAAAAAON}{\bkmkend AAAAAAAAON}
00209 TEST(BinaryTree, HeightCalculation)\{\par
{\bkmkstart AAAAAAAAOR}{\bkmkend AAAAAAAAOR}
00210     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00211     \par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00212     {\cf20 // Empty tree}\par
{\bkmkstart AAAAAAAAOW}{\bkmkend AAAAAAAAOW}
00213     EXPECT_EQ(tree.height(), -1);\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00214     \par
{\bkmkstart AAAAAAAAOZ}{\bkmkend AAAAAAAAOZ}
00215     {\cf20 // Single node}\par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00216     tree.createRoot(10);\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00217     EXPECT_EQ(tree.height(), 0);\par
{\bkmkstart AAAAAAAAPI}{\bkmkend AAAAAAAAPI}
00218     \par
{\bkmkstart AAAAAAAAPJ}{\bkmkend AAAAAAAAPJ}
00219     {\cf20 // Add left child}\par
{\bkmkstart AAAAAAAAPL}{\bkmkend AAAAAAAAPL}
00220     {\cf17 auto}* root = tree.root();\par
{\bkmkstart AAAAAAAAPN}{\bkmkend AAAAAAAAPN}
00221     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00222     EXPECT_EQ(tree.height(), 1);\par
{\bkmkstart AAAAAAAAPS}{\bkmkend AAAAAAAAPS}
00223     \par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00224     {\cf20 // Add right child (height stays 1)}\par
{\bkmkstart AAAAAAAAPU}{\bkmkend AAAAAAAAPU}
00225     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAPX}{\bkmkend AAAAAAAAPX}
00226     EXPECT_EQ(tree.height(), 1);\par
{\bkmkstart AAAAAAAAQA}{\bkmkend AAAAAAAAQA}
00227     \par
{\bkmkstart AAAAAAAAQC}{\bkmkend AAAAAAAAQC}
00228     {\cf20 // Add grandchild}\par
{\bkmkstart AAAAAAAAQE}{\bkmkend AAAAAAAAQE}
00229     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAQF}{\bkmkend AAAAAAAAQF}
00230     EXPECT_EQ(tree.height(), 2);\par
{\bkmkstart AAAAAAAAQJ}{\bkmkend AAAAAAAAQJ}
00231 \}\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00232 \par
{\bkmkstart AAAAAAAAQM}{\bkmkend AAAAAAAAQM}
00233 TEST(BinaryTree, SizeCalculation)\{\par
{\bkmkstart AAAAAAAAQO}{\bkmkend AAAAAAAAQO}
00234     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAQQ}{\bkmkend AAAAAAAAQQ}
00235     \par
{\bkmkstart AAAAAAAAQR}{\bkmkend AAAAAAAAQR}
00236     EXPECT_EQ(tree.size(), 0);\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00237     \par
{\bkmkstart AAAAAAAAQU}{\bkmkend AAAAAAAAQU}
00238     tree.createRoot(10);\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00239     EXPECT_EQ(tree.size(), 1);\par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00240     \par
{\bkmkstart AAAAAAAARA}{\bkmkend AAAAAAAARA}
00241     {\cf17 auto}* root = tree.root();\par
{\bkmkstart AAAAAAAARB}{\bkmkend AAAAAAAARB}
00242     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAARF}{\bkmkend AAAAAAAARF}
00243     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAARG}{\bkmkend AAAAAAAARG}
00244     EXPECT_EQ(tree.size(), 3);\par
{\bkmkstart AAAAAAAARJ}{\bkmkend AAAAAAAARJ}
00245     \par
{\bkmkstart AAAAAAAARK}{\bkmkend AAAAAAAARK}
00246     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAARM}{\bkmkend AAAAAAAARM}
00247     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00248     EXPECT_EQ(tree.size(), 5);\par
{\bkmkstart AAAAAAAARR}{\bkmkend AAAAAAAARR}
00249 \}\par
{\bkmkstart AAAAAAAART}{\bkmkend AAAAAAAART}
00250 \par
{\bkmkstart AAAAAAAARV}{\bkmkend AAAAAAAARV}
00251 TEST(BinaryTree, ComplexTree)\{\par
{\bkmkstart AAAAAAAARX}{\bkmkend AAAAAAAARX}
00252     BinaryTree<std::string> tree;\par
{\bkmkstart AAAAAAAARZ}{\bkmkend AAAAAAAARZ}
00253     \par
{\bkmkstart AAAAAAAASA}{\bkmkend AAAAAAAASA}
00254     {\cf20 // Build a more complex tree}\par
{\bkmkstart AAAAAAAASB}{\bkmkend AAAAAAAASB}
00255     {\cf20 //            "A"}\par
{\bkmkstart AAAAAAAASD}{\bkmkend AAAAAAAASD}
00256     {\cf20 //           /   \\}\par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00257 {\cf20     //         "B"   "C"}\par
{\bkmkstart AAAAAAAASF}{\bkmkend AAAAAAAASF}
00258     {\cf20 //        /   \\     \\}\par
{\bkmkstart AAAAAAAASG}{\bkmkend AAAAAAAASG}
00259 {\cf20     //      "D"   "E"   "F"}\par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00260     {\cf20 //             \\}\par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00261 {\cf20     //             "G"}\par
{\bkmkstart AAAAAAAASM}{\bkmkend AAAAAAAASM}
00262     \par
{\bkmkstart AAAAAAAASN}{\bkmkend AAAAAAAASN}
00263     {\cf17 auto}* root = tree.createRoot({\cf22 "A"});\par
{\bkmkstart AAAAAAAASQ}{\bkmkend AAAAAAAASQ}
00264     root->left = {\cf17 new} TreeNode<std::string>({\cf22 "B"});\par
{\bkmkstart AAAAAAAASS}{\bkmkend AAAAAAAASS}
00265     root->right = {\cf17 new} TreeNode<std::string>({\cf22 "C"});\par
{\bkmkstart AAAAAAAASU}{\bkmkend AAAAAAAASU}
00266     root->left->left = {\cf17 new} TreeNode<std::string>({\cf22 "D"});\par
{\bkmkstart AAAAAAAASW}{\bkmkend AAAAAAAASW}
00267     root->left->right = {\cf17 new} TreeNode<std::string>({\cf22 "E"});\par
{\bkmkstart AAAAAAAASY}{\bkmkend AAAAAAAASY}
00268     root->right->right = {\cf17 new} TreeNode<std::string>({\cf22 "F"});\par
{\bkmkstart AAAAAAAATB}{\bkmkend AAAAAAAATB}
00269     root->left->right->right = {\cf17 new} TreeNode<std::string>({\cf22 "G"});\par
{\bkmkstart AAAAAAAATF}{\bkmkend AAAAAAAATF}
00270     \par
{\bkmkstart AAAAAAAATG}{\bkmkend AAAAAAAATG}
00271     EXPECT_EQ(tree.size(), 7);\par
{\bkmkstart AAAAAAAATJ}{\bkmkend AAAAAAAATJ}
00272     EXPECT_EQ(tree.height(), 3);\par
{\bkmkstart AAAAAAAATK}{\bkmkend AAAAAAAATK}
00273     \par
{\bkmkstart AAAAAAAATM}{\bkmkend AAAAAAAATM}
00274     std::vector<std::string> inorder;\par
{\bkmkstart AAAAAAAATO}{\bkmkend AAAAAAAATO}
00275     tree.inorder([&inorder]({\cf17 const} std::string& val) \{\par
{\bkmkstart AAAAAAAATT}{\bkmkend AAAAAAAATT}
00276         inorder.push_back(val);\par
{\bkmkstart AAAAAAAATW}{\bkmkend AAAAAAAATW}
00277     \});\par
{\bkmkstart AAAAAAAATX}{\bkmkend AAAAAAAATX}
00278     \par
{\bkmkstart AAAAAAAATY}{\bkmkend AAAAAAAATY}
00279     ASSERT_EQ(inorder.size(), 7u);\par
{\bkmkstart AAAAAAAATZ}{\bkmkend AAAAAAAATZ}
00280     {\cf20 // Inorder: D, B, E, G, A, C, F}\par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00281     EXPECT_EQ(inorder[0], {\cf22 "D"});\par
{\bkmkstart AAAAAAAAUB}{\bkmkend AAAAAAAAUB}
00282     EXPECT_EQ(inorder[1], {\cf22 "B"});\par
{\bkmkstart AAAAAAAAUC}{\bkmkend AAAAAAAAUC}
00283     EXPECT_EQ(inorder[2], {\cf22 "E"});\par
{\bkmkstart AAAAAAAAUE}{\bkmkend AAAAAAAAUE}
00284     EXPECT_EQ(inorder[3], {\cf22 "G"});\par
{\bkmkstart AAAAAAAAUF}{\bkmkend AAAAAAAAUF}
00285     EXPECT_EQ(inorder[4], {\cf22 "A"});\par
{\bkmkstart AAAAAAAAUG}{\bkmkend AAAAAAAAUG}
00286     EXPECT_EQ(inorder[5], {\cf22 "C"});\par
{\bkmkstart AAAAAAAAUJ}{\bkmkend AAAAAAAAUJ}
00287     EXPECT_EQ(inorder[6], {\cf22 "F"});\par
{\bkmkstart AAAAAAAAUL}{\bkmkend AAAAAAAAUL}
00288 \}\par
}
}