{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_binary_tree.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_binary_tree.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_binary_tree.cpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAR}{\bkmkend AAAAAAAAAR}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00002 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAABS}{\bkmkend AAAAAAAABS}
00003 {\cf21 #include "ds/binary_tree.h"}\par
{\bkmkstart AAAAAAAACG}{\bkmkend AAAAAAAACG}
00004 \par
{\bkmkstart AAAAAAAACJ}{\bkmkend AAAAAAAACJ}
00005 {\cf17 using namespace }ds;\par
{\bkmkstart AAAAAAAACL}{\bkmkend AAAAAAAACL}
00006 \par
{\bkmkstart AAAAAAAADS}{\bkmkend AAAAAAAADS}
00007 TEST(BinaryTree, ConstructionAndDestruction)\{\par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00008     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAEG}{\bkmkend AAAAAAAAEG}
00009     EXPECT_TRUE(tree.empty());\par
{\bkmkstart AAAAAAAAEI}{\bkmkend AAAAAAAAEI}
00010     EXPECT_EQ(tree.size(), 0);\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00011     EXPECT_EQ(tree.height(), -1);\par
{\bkmkstart AAAAAAAAEN}{\bkmkend AAAAAAAAEN}
00012 \}\par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00013 \par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00014 TEST(BinaryTree, CreateRoot)\{\par
{\bkmkstart AAAAAAAAET}{\bkmkend AAAAAAAAET}
00015     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAEV}{\bkmkend AAAAAAAAEV}
00016     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00017     EXPECT_EQ(root->value, 10);\par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00018     EXPECT_FALSE(tree.empty());\par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00019     EXPECT_EQ(tree.size(), 1);\par
{\bkmkstart AAAAAAAAFG}{\bkmkend AAAAAAAAFG}
00020     EXPECT_EQ(tree.height(), 0);\par
{\bkmkstart AAAAAAAAFJ}{\bkmkend AAAAAAAAFJ}
00021 \}\par
{\bkmkstart AAAAAAAAFK}{\bkmkend AAAAAAAAFK}
00022 \par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00023 TEST(BinaryTree, BuildTree)\{\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00024     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAFR}{\bkmkend AAAAAAAAFR}
00025     \par
{\bkmkstart AAAAAAAAFT}{\bkmkend AAAAAAAAFT}
00026     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAFV}{\bkmkend AAAAAAAAFV}
00027     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00028     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00029 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00030     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00031 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00032     \par
{\bkmkstart AAAAAAAAGH}{\bkmkend AAAAAAAAGH}
00033     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAGM}{\bkmkend AAAAAAAAGM}
00034     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00035     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00036     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAGU}{\bkmkend AAAAAAAAGU}
00037     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAGW}{\bkmkend AAAAAAAAGW}
00038     \par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00039     EXPECT_EQ(tree.size(), 5);\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00040     EXPECT_EQ(tree.height(), 2);\par
{\bkmkstart AAAAAAAAHD}{\bkmkend AAAAAAAAHD}
00041 \}\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00042 \par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00043 TEST(BinaryTree, InorderTraversal)\{\par
{\bkmkstart AAAAAAAAHH}{\bkmkend AAAAAAAAHH}
00044     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAHI}{\bkmkend AAAAAAAAHI}
00045     \par
{\bkmkstart AAAAAAAAHK}{\bkmkend AAAAAAAAHK}
00046     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAHL}{\bkmkend AAAAAAAAHL}
00047     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAHN}{\bkmkend AAAAAAAAHN}
00048     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAHP}{\bkmkend AAAAAAAAHP}
00049 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00050     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAHS}{\bkmkend AAAAAAAAHS}
00051 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAHV}{\bkmkend AAAAAAAAHV}
00052     \par
{\bkmkstart AAAAAAAAHW}{\bkmkend AAAAAAAAHW}
00053     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAIA}{\bkmkend AAAAAAAAIA}
00054     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAIJ}{\bkmkend AAAAAAAAIJ}
00055     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAIP}{\bkmkend AAAAAAAAIP}
00056     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAIR}{\bkmkend AAAAAAAAIR}
00057     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00058     \par
{\bkmkstart AAAAAAAAIX}{\bkmkend AAAAAAAAIX}
00059     std::vector<int> result;\par
{\bkmkstart AAAAAAAAJA}{\bkmkend AAAAAAAAJA}
00060     tree.inorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00061         result.push_back(val);\par
{\bkmkstart AAAAAAAAJN}{\bkmkend AAAAAAAAJN}
00062     \});\par
{\bkmkstart AAAAAAAAJO}{\bkmkend AAAAAAAAJO}
00063     \par
{\bkmkstart AAAAAAAAJR}{\bkmkend AAAAAAAAJR}
00064     {\cf20 // Inorder: 3, 5, 7, 10, 15}\par
{\bkmkstart AAAAAAAAJT}{\bkmkend AAAAAAAAJT}
00065     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAJW}{\bkmkend AAAAAAAAJW}
00066     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAAJY}{\bkmkend AAAAAAAAJY}
00067     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00068     EXPECT_EQ(result[2], 7);\par
{\bkmkstart AAAAAAAAKE}{\bkmkend AAAAAAAAKE}
00069     EXPECT_EQ(result[3], 10);\par
{\bkmkstart AAAAAAAAKJ}{\bkmkend AAAAAAAAKJ}
00070     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAKK}{\bkmkend AAAAAAAAKK}
00071 \}\par
{\bkmkstart AAAAAAAAKM}{\bkmkend AAAAAAAAKM}
00072 \par
{\bkmkstart AAAAAAAAKO}{\bkmkend AAAAAAAAKO}
00073 TEST(BinaryTree, PreorderTraversal)\{\par
{\bkmkstart AAAAAAAAKU}{\bkmkend AAAAAAAAKU}
00074     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAKZ}{\bkmkend AAAAAAAAKZ}
00075     \par
{\bkmkstart AAAAAAAALB}{\bkmkend AAAAAAAALB}
00076     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAALF}{\bkmkend AAAAAAAALF}
00077     {\cf20 //       10}\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00078     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAALJ}{\bkmkend AAAAAAAALJ}
00079 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAALW}{\bkmkend AAAAAAAALW}
00080     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00081 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAMC}{\bkmkend AAAAAAAAMC}
00082     \par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00083     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00084     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00085     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00086     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAANE}{\bkmkend AAAAAAAANE}
00087     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAANH}{\bkmkend AAAAAAAANH}
00088     \par
{\bkmkstart AAAAAAAANJ}{\bkmkend AAAAAAAANJ}
00089     std::vector<int> result;\par
{\bkmkstart AAAAAAAANM}{\bkmkend AAAAAAAANM}
00090     tree.preorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAANT}{\bkmkend AAAAAAAANT}
00091         result.push_back(val);\par
{\bkmkstart AAAAAAAANU}{\bkmkend AAAAAAAANU}
00092     \});\par
{\bkmkstart AAAAAAAANV}{\bkmkend AAAAAAAANV}
00093     \par
{\bkmkstart AAAAAAAANX}{\bkmkend AAAAAAAANX}
00094     {\cf20 // Preorder: 10, 5, 3, 7, 15}\par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
00095     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAOB}{\bkmkend AAAAAAAAOB}
00096     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAOG}{\bkmkend AAAAAAAAOG}
00097     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00098     EXPECT_EQ(result[2], 3);\par
{\bkmkstart AAAAAAAAOP}{\bkmkend AAAAAAAAOP}
00099     EXPECT_EQ(result[3], 7);\par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00100     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAAAOX}{\bkmkend AAAAAAAAOX}
00101 \}\par
{\bkmkstart AAAAAAAAPA}{\bkmkend AAAAAAAAPA}
00102 \par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00103 TEST(BinaryTree, PostorderTraversal)\{\par
{\bkmkstart AAAAAAAAPH}{\bkmkend AAAAAAAAPH}
00104     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAPN}{\bkmkend AAAAAAAAPN}
00105     \par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00106     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAPR}{\bkmkend AAAAAAAAPR}
00107     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00108     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00109 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAQA}{\bkmkend AAAAAAAAQA}
00110     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAQC}{\bkmkend AAAAAAAAQC}
00111 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAQE}{\bkmkend AAAAAAAAQE}
00112     \par
{\bkmkstart AAAAAAAAQG}{\bkmkend AAAAAAAAQG}
00113     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00114     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAQR}{\bkmkend AAAAAAAAQR}
00115     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAQX}{\bkmkend AAAAAAAAQX}
00116     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAARG}{\bkmkend AAAAAAAARG}
00117     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAARL}{\bkmkend AAAAAAAARL}
00118     \par
{\bkmkstart AAAAAAAARQ}{\bkmkend AAAAAAAARQ}
00119     std::vector<int> result;\par
{\bkmkstart AAAAAAAARY}{\bkmkend AAAAAAAARY}
00120     tree.postorder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAASG}{\bkmkend AAAAAAAASG}
00121         result.push_back(val);\par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00122     \});\par
{\bkmkstart AAAAAAAASP}{\bkmkend AAAAAAAASP}
00123     \par
{\bkmkstart AAAAAAAASS}{\bkmkend AAAAAAAASS}
00124     {\cf20 // Postorder: 3, 7, 5, 15, 10}\par
{\bkmkstart AAAAAAAASV}{\bkmkend AAAAAAAASV}
00125     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00126     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAAATC}{\bkmkend AAAAAAAATC}
00127     EXPECT_EQ(result[1], 7);\par
{\bkmkstart AAAAAAAATF}{\bkmkend AAAAAAAATF}
00128     EXPECT_EQ(result[2], 5);\par
{\bkmkstart AAAAAAAATI}{\bkmkend AAAAAAAATI}
00129     EXPECT_EQ(result[3], 15);\par
{\bkmkstart AAAAAAAATL}{\bkmkend AAAAAAAATL}
00130     EXPECT_EQ(result[4], 10);\par
{\bkmkstart AAAAAAAATS}{\bkmkend AAAAAAAATS}
00131 \}\par
{\bkmkstart AAAAAAAATU}{\bkmkend AAAAAAAATU}
00132 \par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00133 TEST(BinaryTree, LevelOrderTraversal)\{\par
{\bkmkstart AAAAAAAAUJ}{\bkmkend AAAAAAAAUJ}
00134     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAAAUP}{\bkmkend AAAAAAAAUP}
00135     \par
{\bkmkstart AAAAAAAAUX}{\bkmkend AAAAAAAAUX}
00136     {\cf20 // Build tree:}\par
{\bkmkstart AAAAAAAAUY}{\bkmkend AAAAAAAAUY}
00137     {\cf20 //       10}\par
{\bkmkstart AAAAAAAAVQ}{\bkmkend AAAAAAAAVQ}
00138     {\cf20 //      /  \\}\par
{\bkmkstart AAAAAAAAVS}{\bkmkend AAAAAAAAVS}
00139 {\cf20     //     5   15}\par
{\bkmkstart AAAAAAAAVT}{\bkmkend AAAAAAAAVT}
00140     {\cf20 //    / \\}\par
{\bkmkstart AAAAAAAAVW}{\bkmkend AAAAAAAAVW}
00141 {\cf20     //   3   7}\par
{\bkmkstart AAAAAAAAWA}{\bkmkend AAAAAAAAWA}
00142     \par
{\bkmkstart AAAAAAAAWF}{\bkmkend AAAAAAAAWF}
00143     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAAAWQ}{\bkmkend AAAAAAAAWQ}
00144     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAAAWV}{\bkmkend AAAAAAAAWV}
00145     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAAAXA}{\bkmkend AAAAAAAAXA}
00146     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAAAXM}{\bkmkend AAAAAAAAXM}
00147     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAAAXU}{\bkmkend AAAAAAAAXU}
00148     \par
{\bkmkstart AAAAAAAAXW}{\bkmkend AAAAAAAAXW}
00149     std::vector<int> result;\par
{\bkmkstart AAAAAAAAYF}{\bkmkend AAAAAAAAYF}
00150     tree.levelOrder([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAAAYP}{\bkmkend AAAAAAAAYP}
00151         result.push_back(val);\par
{\bkmkstart AAAAAAAAYY}{\bkmkend AAAAAAAAYY}
00152     \});\par
{\bkmkstart AAAAAAAAYZ}{\bkmkend AAAAAAAAYZ}
00153     \par
{\bkmkstart AAAAAAAAZA}{\bkmkend AAAAAAAAZA}
00154     {\cf20 // Level-order: 10, 5, 15, 3, 7}\par
{\bkmkstart AAAAAAAAZE}{\bkmkend AAAAAAAAZE}
00155     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAAAZJ}{\bkmkend AAAAAAAAZJ}
00156     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAAAZN}{\bkmkend AAAAAAAAZN}
00157     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAAAZR}{\bkmkend AAAAAAAAZR}
00158     EXPECT_EQ(result[2], 15);\par
{\bkmkstart AAAAAAAAZX}{\bkmkend AAAAAAAAZX}
00159     EXPECT_EQ(result[3], 3);\par
{\bkmkstart AAAAAAABAD}{\bkmkend AAAAAAABAD}
00160     EXPECT_EQ(result[4], 7);\par
{\bkmkstart AAAAAAABAJ}{\bkmkend AAAAAAABAJ}
00161 \}\par
{\bkmkstart AAAAAAABAN}{\bkmkend AAAAAAABAN}
00162 \par
{\bkmkstart AAAAAAABAP}{\bkmkend AAAAAAABAP}
00163 TEST(BinaryTree, InorderIterative)\{\par
{\bkmkstart AAAAAAABAT}{\bkmkend AAAAAAABAT}
00164     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAABBN}{\bkmkend AAAAAAABBN}
00165     \par
{\bkmkstart AAAAAAABBP}{\bkmkend AAAAAAABBP}
00166     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAABBU}{\bkmkend AAAAAAABBU}
00167     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAABBY}{\bkmkend AAAAAAABBY}
00168     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAABCB}{\bkmkend AAAAAAABCB}
00169     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00170     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAABCG}{\bkmkend AAAAAAABCG}
00171     \par
{\bkmkstart AAAAAAABCH}{\bkmkend AAAAAAABCH}
00172     std::vector<int> result;\par
{\bkmkstart AAAAAAABCN}{\bkmkend AAAAAAABCN}
00173     tree.inorderIterative([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAABCS}{\bkmkend AAAAAAABCS}
00174         result.push_back(val);\par
{\bkmkstart AAAAAAABCX}{\bkmkend AAAAAAABCX}
00175     \});\par
{\bkmkstart AAAAAAABCY}{\bkmkend AAAAAAABCY}
00176     \par
{\bkmkstart AAAAAAABDA}{\bkmkend AAAAAAABDA}
00177     {\cf20 // Should match recursive inorder: 3, 5, 7, 10, 15}\par
{\bkmkstart AAAAAAABDD}{\bkmkend AAAAAAABDD}
00178     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAABDK}{\bkmkend AAAAAAABDK}
00179     EXPECT_EQ(result[0], 3);\par
{\bkmkstart AAAAAAABDM}{\bkmkend AAAAAAABDM}
00180     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAABDQ}{\bkmkend AAAAAAABDQ}
00181     EXPECT_EQ(result[2], 7);\par
{\bkmkstart AAAAAAABDW}{\bkmkend AAAAAAABDW}
00182     EXPECT_EQ(result[3], 10);\par
{\bkmkstart AAAAAAABDZ}{\bkmkend AAAAAAABDZ}
00183     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAABED}{\bkmkend AAAAAAABED}
00184 \}\par
{\bkmkstart AAAAAAABEM}{\bkmkend AAAAAAABEM}
00185 \par
{\bkmkstart AAAAAAABEN}{\bkmkend AAAAAAABEN}
00186 TEST(BinaryTree, PreorderIterative)\{\par
{\bkmkstart AAAAAAABES}{\bkmkend AAAAAAABES}
00187     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAABEY}{\bkmkend AAAAAAABEY}
00188     \par
{\bkmkstart AAAAAAABFC}{\bkmkend AAAAAAABFC}
00189     {\cf17 auto}* root = tree.createRoot(10);\par
{\bkmkstart AAAAAAABFG}{\bkmkend AAAAAAABFG}
00190     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAABFP}{\bkmkend AAAAAAABFP}
00191     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAABFV}{\bkmkend AAAAAAABFV}
00192     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAABFZ}{\bkmkend AAAAAAABFZ}
00193     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAABGJ}{\bkmkend AAAAAAABGJ}
00194     \par
{\bkmkstart AAAAAAABGM}{\bkmkend AAAAAAABGM}
00195     std::vector<int> result;\par
{\bkmkstart AAAAAAABHX}{\bkmkend AAAAAAABHX}
00196     tree.preorderIterative([&result]({\cf17 const} {\cf18 int}& val) \{\par
{\bkmkstart AAAAAAABIB}{\bkmkend AAAAAAABIB}
00197         result.push_back(val);\par
{\bkmkstart AAAAAAABID}{\bkmkend AAAAAAABID}
00198     \});\par
{\bkmkstart AAAAAAABIF}{\bkmkend AAAAAAABIF}
00199     \par
{\bkmkstart AAAAAAABII}{\bkmkend AAAAAAABII}
00200     {\cf20 // Should match recursive preorder: 10, 5, 3, 7, 15}\par
{\bkmkstart AAAAAAABIJ}{\bkmkend AAAAAAABIJ}
00201     ASSERT_EQ(result.size(), 5u);\par
{\bkmkstart AAAAAAABIM}{\bkmkend AAAAAAABIM}
00202     EXPECT_EQ(result[0], 10);\par
{\bkmkstart AAAAAAABIQ}{\bkmkend AAAAAAABIQ}
00203     EXPECT_EQ(result[1], 5);\par
{\bkmkstart AAAAAAABIR}{\bkmkend AAAAAAABIR}
00204     EXPECT_EQ(result[2], 3);\par
{\bkmkstart AAAAAAABIT}{\bkmkend AAAAAAABIT}
00205     EXPECT_EQ(result[3], 7);\par
{\bkmkstart AAAAAAABIX}{\bkmkend AAAAAAABIX}
00206     EXPECT_EQ(result[4], 15);\par
{\bkmkstart AAAAAAABJA}{\bkmkend AAAAAAABJA}
00207 \}\par
{\bkmkstart AAAAAAABJD}{\bkmkend AAAAAAABJD}
00208 \par
{\bkmkstart AAAAAAABJE}{\bkmkend AAAAAAABJE}
00209 TEST(BinaryTree, HeightCalculation)\{\par
{\bkmkstart AAAAAAABJJ}{\bkmkend AAAAAAABJJ}
00210     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAABJN}{\bkmkend AAAAAAABJN}
00211     \par
{\bkmkstart AAAAAAABJP}{\bkmkend AAAAAAABJP}
00212     {\cf20 // Empty tree}\par
{\bkmkstart AAAAAAABJQ}{\bkmkend AAAAAAABJQ}
00213     EXPECT_EQ(tree.height(), -1);\par
{\bkmkstart AAAAAAABJS}{\bkmkend AAAAAAABJS}
00214     \par
{\bkmkstart AAAAAAABJV}{\bkmkend AAAAAAABJV}
00215     {\cf20 // Single node}\par
{\bkmkstart AAAAAAABJZ}{\bkmkend AAAAAAABJZ}
00216     tree.createRoot(10);\par
{\bkmkstart AAAAAAABKG}{\bkmkend AAAAAAABKG}
00217     EXPECT_EQ(tree.height(), 0);\par
{\bkmkstart AAAAAAABKO}{\bkmkend AAAAAAABKO}
00218     \par
{\bkmkstart AAAAAAABKR}{\bkmkend AAAAAAABKR}
00219     {\cf20 // Add left child}\par
{\bkmkstart AAAAAAABKT}{\bkmkend AAAAAAABKT}
00220     {\cf17 auto}* root = tree.root();\par
{\bkmkstart AAAAAAABKW}{\bkmkend AAAAAAABKW}
00221     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAABLC}{\bkmkend AAAAAAABLC}
00222     EXPECT_EQ(tree.height(), 1);\par
{\bkmkstart AAAAAAABLF}{\bkmkend AAAAAAABLF}
00223     \par
{\bkmkstart AAAAAAABLH}{\bkmkend AAAAAAABLH}
00224     {\cf20 // Add right child (height stays 1)}\par
{\bkmkstart AAAAAAABLJ}{\bkmkend AAAAAAABLJ}
00225     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAABLP}{\bkmkend AAAAAAABLP}
00226     EXPECT_EQ(tree.height(), 1);\par
{\bkmkstart AAAAAAABLR}{\bkmkend AAAAAAABLR}
00227     \par
{\bkmkstart AAAAAAABLT}{\bkmkend AAAAAAABLT}
00228     {\cf20 // Add grandchild}\par
{\bkmkstart AAAAAAABLW}{\bkmkend AAAAAAABLW}
00229     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAABME}{\bkmkend AAAAAAABME}
00230     EXPECT_EQ(tree.height(), 2);\par
{\bkmkstart AAAAAAABMI}{\bkmkend AAAAAAABMI}
00231 \}\par
{\bkmkstart AAAAAAABMK}{\bkmkend AAAAAAABMK}
00232 \par
{\bkmkstart AAAAAAABMM}{\bkmkend AAAAAAABMM}
00233 TEST(BinaryTree, SizeCalculation)\{\par
{\bkmkstart AAAAAAABMR}{\bkmkend AAAAAAABMR}
00234     BinaryTree<int> tree;\par
{\bkmkstart AAAAAAABMU}{\bkmkend AAAAAAABMU}
00235     \par
{\bkmkstart AAAAAAABMX}{\bkmkend AAAAAAABMX}
00236     EXPECT_EQ(tree.size(), 0);\par
{\bkmkstart AAAAAAABNB}{\bkmkend AAAAAAABNB}
00237     \par
{\bkmkstart AAAAAAABND}{\bkmkend AAAAAAABND}
00238     tree.createRoot(10);\par
{\bkmkstart AAAAAAABNI}{\bkmkend AAAAAAABNI}
00239     EXPECT_EQ(tree.size(), 1);\par
{\bkmkstart AAAAAAABNK}{\bkmkend AAAAAAABNK}
00240     \par
{\bkmkstart AAAAAAABNN}{\bkmkend AAAAAAABNN}
00241     {\cf17 auto}* root = tree.root();\par
{\bkmkstart AAAAAAABNP}{\bkmkend AAAAAAABNP}
00242     root->left = {\cf17 new} TreeNode<int>(5);\par
{\bkmkstart AAAAAAABNR}{\bkmkend AAAAAAABNR}
00243     root->right = {\cf17 new} TreeNode<int>(15);\par
{\bkmkstart AAAAAAABNV}{\bkmkend AAAAAAABNV}
00244     EXPECT_EQ(tree.size(), 3);\par
{\bkmkstart AAAAAAABNY}{\bkmkend AAAAAAABNY}
00245     \par
{\bkmkstart AAAAAAABOA}{\bkmkend AAAAAAABOA}
00246     root->left->left = {\cf17 new} TreeNode<int>(3);\par
{\bkmkstart AAAAAAABOC}{\bkmkend AAAAAAABOC}
00247     root->left->right = {\cf17 new} TreeNode<int>(7);\par
{\bkmkstart AAAAAAABOF}{\bkmkend AAAAAAABOF}
00248     EXPECT_EQ(tree.size(), 5);\par
{\bkmkstart AAAAAAABOI}{\bkmkend AAAAAAABOI}
00249 \}\par
{\bkmkstart AAAAAAABOJ}{\bkmkend AAAAAAABOJ}
00250 \par
{\bkmkstart AAAAAAABOL}{\bkmkend AAAAAAABOL}
00251 TEST(BinaryTree, ComplexTree)\{\par
{\bkmkstart AAAAAAABOP}{\bkmkend AAAAAAABOP}
00252     BinaryTree<std::string> tree;\par
{\bkmkstart AAAAAAABOW}{\bkmkend AAAAAAABOW}
00253     \par
{\bkmkstart AAAAAAABOZ}{\bkmkend AAAAAAABOZ}
00254     {\cf20 // Build a more complex tree}\par
{\bkmkstart AAAAAAABPC}{\bkmkend AAAAAAABPC}
00255     {\cf20 //            "A"}\par
{\bkmkstart AAAAAAABPF}{\bkmkend AAAAAAABPF}
00256     {\cf20 //           /   \\}\par
{\bkmkstart AAAAAAABPH}{\bkmkend AAAAAAABPH}
00257 {\cf20     //         "B"   "C"}\par
{\bkmkstart AAAAAAABPJ}{\bkmkend AAAAAAABPJ}
00258     {\cf20 //        /   \\     \\}\par
{\bkmkstart AAAAAAABPM}{\bkmkend AAAAAAABPM}
00259 {\cf20     //      "D"   "E"   "F"}\par
{\bkmkstart AAAAAAABPP}{\bkmkend AAAAAAABPP}
00260     {\cf20 //             \\}\par
{\bkmkstart AAAAAAABPR}{\bkmkend AAAAAAABPR}
00261 {\cf20     //             "G"}\par
{\bkmkstart AAAAAAABPU}{\bkmkend AAAAAAABPU}
00262     \par
{\bkmkstart AAAAAAABPV}{\bkmkend AAAAAAABPV}
00263     {\cf17 auto}* root = tree.createRoot({\cf22 "A"});\par
{\bkmkstart AAAAAAABPY}{\bkmkend AAAAAAABPY}
00264     root->left = {\cf17 new} TreeNode<std::string>({\cf22 "B"});\par
{\bkmkstart AAAAAAABQE}{\bkmkend AAAAAAABQE}
00265     root->right = {\cf17 new} TreeNode<std::string>({\cf22 "C"});\par
{\bkmkstart AAAAAAABQI}{\bkmkend AAAAAAABQI}
00266     root->left->left = {\cf17 new} TreeNode<std::string>({\cf22 "D"});\par
{\bkmkstart AAAAAAABQO}{\bkmkend AAAAAAABQO}
00267     root->left->right = {\cf17 new} TreeNode<std::string>({\cf22 "E"});\par
{\bkmkstart AAAAAAABQT}{\bkmkend AAAAAAABQT}
00268     root->right->right = {\cf17 new} TreeNode<std::string>({\cf22 "F"});\par
{\bkmkstart AAAAAAABRG}{\bkmkend AAAAAAABRG}
00269     root->left->right->right = {\cf17 new} TreeNode<std::string>({\cf22 "G"});\par
{\bkmkstart AAAAAAABRK}{\bkmkend AAAAAAABRK}
00270     \par
{\bkmkstart AAAAAAABRL}{\bkmkend AAAAAAABRL}
00271     EXPECT_EQ(tree.size(), 7);\par
{\bkmkstart AAAAAAABRN}{\bkmkend AAAAAAABRN}
00272     EXPECT_EQ(tree.height(), 3);\par
{\bkmkstart AAAAAAABRQ}{\bkmkend AAAAAAABRQ}
00273     \par
{\bkmkstart AAAAAAABRS}{\bkmkend AAAAAAABRS}
00274     std::vector<std::string> inorder;\par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00275     tree.inorder([&inorder]({\cf17 const} std::string& val) \{\par
{\bkmkstart AAAAAAABSD}{\bkmkend AAAAAAABSD}
00276         inorder.push_back(val);\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00277     \});\par
{\bkmkstart AAAAAAABSI}{\bkmkend AAAAAAABSI}
00278     \par
{\bkmkstart AAAAAAABSK}{\bkmkend AAAAAAABSK}
00279     ASSERT_EQ(inorder.size(), 7u);\par
{\bkmkstart AAAAAAABSP}{\bkmkend AAAAAAABSP}
00280     {\cf20 // Inorder: D, B, E, G, A, C, F}\par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00281     EXPECT_EQ(inorder[0], {\cf22 "D"});\par
{\bkmkstart AAAAAAABST}{\bkmkend AAAAAAABST}
00282     EXPECT_EQ(inorder[1], {\cf22 "B"});\par
{\bkmkstart AAAAAAABSY}{\bkmkend AAAAAAABSY}
00283     EXPECT_EQ(inorder[2], {\cf22 "E"});\par
{\bkmkstart AAAAAAABTC}{\bkmkend AAAAAAABTC}
00284     EXPECT_EQ(inorder[3], {\cf22 "G"});\par
{\bkmkstart AAAAAAABTE}{\bkmkend AAAAAAABTE}
00285     EXPECT_EQ(inorder[4], {\cf22 "A"});\par
{\bkmkstart AAAAAAABTH}{\bkmkend AAAAAAABTH}
00286     EXPECT_EQ(inorder[5], {\cf22 "C"});\par
{\bkmkstart AAAAAAABTJ}{\bkmkend AAAAAAABTJ}
00287     EXPECT_EQ(inorder[6], {\cf22 "F"});\par
{\bkmkstart AAAAAAABTM}{\bkmkend AAAAAAABTM}
00288 \}\par
}
}