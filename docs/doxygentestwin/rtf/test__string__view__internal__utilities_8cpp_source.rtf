{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAAIRV}
{\bkmkend AAAAAAAIRV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAIRY" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAITE}{\bkmkend AAAAAAAITE}
00001 \par
{\bkmkstart AAAAAAAITL}{\bkmkend AAAAAAAITL}
00010 \par
{\bkmkstart AAAAAAAITM}{\bkmkend AAAAAAAITM}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAIUB}{\bkmkend AAAAAAAIUB}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAIUH}{\bkmkend AAAAAAAIUH}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAIUI}{\bkmkend AAAAAAAIUI}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAIUJ}{\bkmkend AAAAAAAIUJ}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAIUK}{\bkmkend AAAAAAAIUK}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAIUL}{\bkmkend AAAAAAAIUL}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAIUM}{\bkmkend AAAAAAAIUM}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAIUN}{\bkmkend AAAAAAAIUN}
00019 \par
{\bkmkstart AAAAAAAIUO}{\bkmkend AAAAAAAIUO}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAIUP}{\bkmkend AAAAAAAIUP}
00021 \par
{\bkmkstart AAAAAAAIUQ}{\bkmkend AAAAAAAIUQ}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAIUR}{\bkmkend AAAAAAAIUR}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAAIUS}{\bkmkend AAAAAAAIUS}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAIUT}{\bkmkend AAAAAAAIUT}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAIUU}{\bkmkend AAAAAAAIUU}
00030     \}\par
{\bkmkstart AAAAAAAIUV}{\bkmkend AAAAAAAIUV}
00031     \par
{\bkmkstart AAAAAAAIUW}{\bkmkend AAAAAAAIUW}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAIUX}{\bkmkend AAAAAAAIUX}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAIUY}{\bkmkend AAAAAAAIUY}
00034     \}\par
{\bkmkstart AAAAAAAIUZ}{\bkmkend AAAAAAAIUZ}
00035 \};\par
{\bkmkstart AAAAAAAIVA}{\bkmkend AAAAAAAIVA}
00036 \par
{\bkmkstart AAAAAAAIVB}{\bkmkend AAAAAAAIVB}
00041 TEST_F(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAAIVC}{\bkmkend AAAAAAAIVC}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAAIVD}{\bkmkend AAAAAAAIVD}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIVE}{\bkmkend AAAAAAAIVE}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAAIVF}{\bkmkend AAAAAAAIVF}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAAIVG}{\bkmkend AAAAAAAIVG}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAAIVH}{\bkmkend AAAAAAAIVH}
00047     \par
{\bkmkstart AAAAAAAIVI}{\bkmkend AAAAAAAIVI}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAIVJ}{\bkmkend AAAAAAAIVJ}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAAIVK}{\bkmkend AAAAAAAIVK}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAAIVL}{\bkmkend AAAAAAAIVL}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAAIVM}{\bkmkend AAAAAAAIVM}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAAIVN}{\bkmkend AAAAAAAIVN}
00053     \par
{\bkmkstart AAAAAAAIVO}{\bkmkend AAAAAAAIVO}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAIVP}{\bkmkend AAAAAAAIVP}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAAIVQ}{\bkmkend AAAAAAAIVQ}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAAIVR}{\bkmkend AAAAAAAIVR}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAAIVS}{\bkmkend AAAAAAAIVS}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAAIVT}{\bkmkend AAAAAAAIVT}
00059     \par
{\bkmkstart AAAAAAAIVU}{\bkmkend AAAAAAAIVU}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAAIVV}{\bkmkend AAAAAAAIVV}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAAIVW}{\bkmkend AAAAAAAIVW}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAAIVX}{\bkmkend AAAAAAAIVX}
00063     EXPECT_EQ(sv4.size(), 75);\par
{\bkmkstart AAAAAAAIVY}{\bkmkend AAAAAAAIVY}
00064     EXPECT_EQ(sv4.length(), 75);\par
{\bkmkstart AAAAAAAIVZ}{\bkmkend AAAAAAAIVZ}
00065     \par
{\bkmkstart AAAAAAAIWA}{\bkmkend AAAAAAAIWA}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAAIWB}{\bkmkend AAAAAAAIWB}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAAIWC}{\bkmkend AAAAAAAIWC}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAAIWD}{\bkmkend AAAAAAAIWD}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAAIWE}{\bkmkend AAAAAAAIWE}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAAIWF}{\bkmkend AAAAAAAIWF}
00071     \par
{\bkmkstart AAAAAAAIWG}{\bkmkend AAAAAAAIWG}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAIWH}{\bkmkend AAAAAAAIWH}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIWI}{\bkmkend AAAAAAAIWI}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAIWJ}{\bkmkend AAAAAAAIWJ}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAAIWK}{\bkmkend AAAAAAAIWK}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAAIWL}{\bkmkend AAAAAAAIWL}
00077     \par
{\bkmkstart AAAAAAAIWM}{\bkmkend AAAAAAAIWM}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAIWN}{\bkmkend AAAAAAAIWN}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIWO}{\bkmkend AAAAAAAIWO}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAIWP}{\bkmkend AAAAAAAIWP}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAAIWQ}{\bkmkend AAAAAAAIWQ}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAAIWR}{\bkmkend AAAAAAAIWR}
00083     \par
{\bkmkstart AAAAAAAIWS}{\bkmkend AAAAAAAIWS}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAIWT}{\bkmkend AAAAAAAIWT}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIWU}{\bkmkend AAAAAAAIWU}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAIWV}{\bkmkend AAAAAAAIWV}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAAIWW}{\bkmkend AAAAAAAIWW}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAAIWX}{\bkmkend AAAAAAAIWX}
00089 \}\par
{\bkmkstart AAAAAAAIWY}{\bkmkend AAAAAAAIWY}
00090 \par
{\bkmkstart AAAAAAAIWZ}{\bkmkend AAAAAAAIWZ}
00095 TEST_F(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAAIXA}{\bkmkend AAAAAAAIXA}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIXB}{\bkmkend AAAAAAAIXB}
00097     \par
{\bkmkstart AAAAAAAIXC}{\bkmkend AAAAAAAIXC}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAAIXD}{\bkmkend AAAAAAAIXD}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIXE}{\bkmkend AAAAAAAIXE}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAIXF}{\bkmkend AAAAAAAIXF}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAIXG}{\bkmkend AAAAAAAIXG}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIXH}{\bkmkend AAAAAAAIXH}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAAIXI}{\bkmkend AAAAAAAIXI}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAAIXJ}{\bkmkend AAAAAAAIXJ}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAIXK}{\bkmkend AAAAAAAIXK}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 9);\par
{\bkmkstart AAAAAAAIXL}{\bkmkend AAAAAAAIXL}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAIXM}{\bkmkend AAAAAAAIXM}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAIXN}{\bkmkend AAAAAAAIXN}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIXO}{\bkmkend AAAAAAAIXO}
00110     \par
{\bkmkstart AAAAAAAIXP}{\bkmkend AAAAAAAIXP}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAAIXQ}{\bkmkend AAAAAAAIXQ}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAIXR}{\bkmkend AAAAAAAIXR}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAAIXS}{\bkmkend AAAAAAAIXS}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAAIXT}{\bkmkend AAAAAAAIXT}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAAIXU}{\bkmkend AAAAAAAIXU}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAAIXV}{\bkmkend AAAAAAAIXV}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAAIXW}{\bkmkend AAAAAAAIXW}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAIXX}{\bkmkend AAAAAAAIXX}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAAIXY}{\bkmkend AAAAAAAIXY}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAAIXZ}{\bkmkend AAAAAAAIXZ}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAAIYA}{\bkmkend AAAAAAAIYA}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 11);\par
{\bkmkstart AAAAAAAIYB}{\bkmkend AAAAAAAIYB}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAAIYC}{\bkmkend AAAAAAAIYC}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIYD}{\bkmkend AAAAAAAIYD}
00125     \par
{\bkmkstart AAAAAAAIYE}{\bkmkend AAAAAAAIYE}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAAIYF}{\bkmkend AAAAAAAIYF}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAIYG}{\bkmkend AAAAAAAIYG}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAIYH}{\bkmkend AAAAAAAIYH}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAAIYI}{\bkmkend AAAAAAAIYI}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAAIYJ}{\bkmkend AAAAAAAIYJ}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAAIYK}{\bkmkend AAAAAAAIYK}
00132     \par
{\bkmkstart AAAAAAAIYL}{\bkmkend AAAAAAAIYL}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAIYM}{\bkmkend AAAAAAAIYM}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAIYN}{\bkmkend AAAAAAAIYN}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAIYO}{\bkmkend AAAAAAAIYO}
00136     \par
{\bkmkstart AAAAAAAIYP}{\bkmkend AAAAAAAIYP}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAAIYQ}{\bkmkend AAAAAAAIYQ}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAIYR}{\bkmkend AAAAAAAIYR}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAIYS}{\bkmkend AAAAAAAIYS}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAIYT}{\bkmkend AAAAAAAIYT}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAIYU}{\bkmkend AAAAAAAIYU}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAIYV}{\bkmkend AAAAAAAIYV}
00143     \par
{\bkmkstart AAAAAAAIYW}{\bkmkend AAAAAAAIYW}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAAIYX}{\bkmkend AAAAAAAIYX}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIYY}{\bkmkend AAAAAAAIYY}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIYZ}{\bkmkend AAAAAAAIYZ}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAIZA}{\bkmkend AAAAAAAIZA}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAIZB}{\bkmkend AAAAAAAIZB}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIZC}{\bkmkend AAAAAAAIZC}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAAIZD}{\bkmkend AAAAAAAIZD}
00151     \par
{\bkmkstart AAAAAAAIZE}{\bkmkend AAAAAAAIZE}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAAIZF}{\bkmkend AAAAAAAIZF}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIZG}{\bkmkend AAAAAAAIZG}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIZH}{\bkmkend AAAAAAAIZH}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAIZI}{\bkmkend AAAAAAAIZI}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAIZK}{\bkmkend AAAAAAAIZK}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIZL}{\bkmkend AAAAAAAIZL}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAAIZM}{\bkmkend AAAAAAAIZM}
00159     \par
{\bkmkstart AAAAAAAIZN}{\bkmkend AAAAAAAIZN}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAAIZO}{\bkmkend AAAAAAAIZO}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIZP}{\bkmkend AAAAAAAIZP}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIZR}{\bkmkend AAAAAAAIZR}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAIZS}{\bkmkend AAAAAAAIZS}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAIZT}{\bkmkend AAAAAAAIZT}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIZU}{\bkmkend AAAAAAAIZU}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAAIZV}{\bkmkend AAAAAAAIZV}
00167 \}\par
{\bkmkstart AAAAAAAIZW}{\bkmkend AAAAAAAIZW}
00168 \par
{\bkmkstart AAAAAAAIZX}{\bkmkend AAAAAAAIZX}
00173 TEST_F(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAAIZY}{\bkmkend AAAAAAAIZY}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAAIZZ}{\bkmkend AAAAAAAIZZ}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAAJAB}{\bkmkend AAAAAAAJAB}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAAJAC}{\bkmkend AAAAAAAJAC}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAAJAF}{\bkmkend AAAAAAAJAF}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAJAG}{\bkmkend AAAAAAAJAG}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAAJAH}{\bkmkend AAAAAAAJAH}
00180     \par
{\bkmkstart AAAAAAAJAI}{\bkmkend AAAAAAAJAI}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAAJAJ}{\bkmkend AAAAAAAJAJ}
00182     std::string str2;\par
{\bkmkstart AAAAAAAJAL}{\bkmkend AAAAAAAJAL}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAAJAM}{\bkmkend AAAAAAAJAM}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAAJAP}{\bkmkend AAAAAAAJAP}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAJAQ}{\bkmkend AAAAAAAJAQ}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAAJAR}{\bkmkend AAAAAAAJAR}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAAJAS}{\bkmkend AAAAAAAJAS}
00188     \par
{\bkmkstart AAAAAAAJAU}{\bkmkend AAAAAAAJAU}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAAJAV}{\bkmkend AAAAAAAJAV}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAAJAX}{\bkmkend AAAAAAAJAX}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAAJAZ}{\bkmkend AAAAAAAJAZ}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAAJBA}{\bkmkend AAAAAAAJBA}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAJBC}{\bkmkend AAAAAAAJBC}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAAJBE}{\bkmkend AAAAAAAJBE}
00195     \par
{\bkmkstart AAAAAAAJBF}{\bkmkend AAAAAAAJBF}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAAJBG}{\bkmkend AAAAAAAJBG}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAAJBH}{\bkmkend AAAAAAAJBH}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAAJBJ}{\bkmkend AAAAAAAJBJ}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAAJBN}{\bkmkend AAAAAAAJBN}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAAJBO}{\bkmkend AAAAAAAJBO}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAAJBQ}{\bkmkend AAAAAAAJBQ}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAAJBS}{\bkmkend AAAAAAAJBS}
00203     \par
{\bkmkstart AAAAAAAJBT}{\bkmkend AAAAAAAJBT}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAAJBV}{\bkmkend AAAAAAAJBV}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAAJBX}{\bkmkend AAAAAAAJBX}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAAJCA}{\bkmkend AAAAAAAJCA}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAAJCD}{\bkmkend AAAAAAAJCD}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAAJCG}{\bkmkend AAAAAAAJCG}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAAJCK}{\bkmkend AAAAAAAJCK}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAAJCN}{\bkmkend AAAAAAAJCN}
00211     \par
{\bkmkstart AAAAAAAJCP}{\bkmkend AAAAAAAJCP}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAJCR}{\bkmkend AAAAAAAJCR}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAAJCV}{\bkmkend AAAAAAAJCV}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAAJCX}{\bkmkend AAAAAAAJCX}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAAJCZ}{\bkmkend AAAAAAAJCZ}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAJDB}{\bkmkend AAAAAAAJDB}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAJDE}{\bkmkend AAAAAAAJDE}
00218     \par
{\bkmkstart AAAAAAAJDG}{\bkmkend AAAAAAAJDG}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAJDI}{\bkmkend AAAAAAAJDI}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAAJDK}{\bkmkend AAAAAAAJDK}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAAJDN}{\bkmkend AAAAAAAJDN}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAAJDP}{\bkmkend AAAAAAAJDP}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAJDQ}{\bkmkend AAAAAAAJDQ}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAJDR}{\bkmkend AAAAAAAJDR}
00225     \par
{\bkmkstart AAAAAAAJDT}{\bkmkend AAAAAAAJDT}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAJDV}{\bkmkend AAAAAAAJDV}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAAJDX}{\bkmkend AAAAAAAJDX}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAAJEB}{\bkmkend AAAAAAAJEB}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAAJEE}{\bkmkend AAAAAAAJEE}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAJEI}{\bkmkend AAAAAAAJEI}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAJEK}{\bkmkend AAAAAAAJEK}
00232 \}\par
{\bkmkstart AAAAAAAJEM}{\bkmkend AAAAAAAJEM}
00233 \par
{\bkmkstart AAAAAAAJEP}{\bkmkend AAAAAAAJEP}
00238 TEST_F(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAAJER}{\bkmkend AAAAAAAJER}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAAJET}{\bkmkend AAAAAAAJET}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAAJEW}{\bkmkend AAAAAAAJEW}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAAJFA}{\bkmkend AAAAAAAJFA}
00242     \par
{\bkmkstart AAAAAAAJFB}{\bkmkend AAAAAAAJFB}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAAJFE}{\bkmkend AAAAAAAJFE}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAAJFG}{\bkmkend AAAAAAAJFG}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAAJFI}{\bkmkend AAAAAAAJFI}
00246     \par
{\bkmkstart AAAAAAAJFK}{\bkmkend AAAAAAAJFK}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAAJFM}{\bkmkend AAAAAAAJFM}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAJFO}{\bkmkend AAAAAAAJFO}
00249     \par
{\bkmkstart AAAAAAAJFQ}{\bkmkend AAAAAAAJFQ}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAJFR}{\bkmkend AAAAAAAJFR}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAJFT}{\bkmkend AAAAAAAJFT}
00252     \par
{\bkmkstart AAAAAAAJFU}{\bkmkend AAAAAAAJFU}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAAJFW}{\bkmkend AAAAAAAJFW}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAAJFY}{\bkmkend AAAAAAAJFY}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAAJGB}{\bkmkend AAAAAAAJGB}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAAJGD}{\bkmkend AAAAAAAJGD}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAAJGF}{\bkmkend AAAAAAAJGF}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAAJGH}{\bkmkend AAAAAAAJGH}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 2);\par
{\bkmkstart AAAAAAAJGJ}{\bkmkend AAAAAAAJGJ}
00260     \par
{\bkmkstart AAAAAAAJGL}{\bkmkend AAAAAAAJGL}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAAJGN}{\bkmkend AAAAAAAJGN}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAAJGP}{\bkmkend AAAAAAAJGP}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAJGT}{\bkmkend AAAAAAAJGT}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAAJGV}{\bkmkend AAAAAAAJGV}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAAJGW}{\bkmkend AAAAAAAJGW}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAAJGZ}{\bkmkend AAAAAAAJGZ}
00267     \par
{\bkmkstart AAAAAAAJHA}{\bkmkend AAAAAAAJHA}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAAJHB}{\bkmkend AAAAAAAJHB}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAAJHF}{\bkmkend AAAAAAAJHF}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAJHJ}{\bkmkend AAAAAAAJHJ}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAAJHL}{\bkmkend AAAAAAAJHL}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAJHN}{\bkmkend AAAAAAAJHN}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAAJHQ}{\bkmkend AAAAAAAJHQ}
00274     \par
{\bkmkstart AAAAAAAJHS}{\bkmkend AAAAAAAJHS}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAAJHT}{\bkmkend AAAAAAAJHT}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAJHU}{\bkmkend AAAAAAAJHU}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAAJHW}{\bkmkend AAAAAAAJHW}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAJHZ}{\bkmkend AAAAAAAJHZ}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAJIA}{\bkmkend AAAAAAAJIA}
00280     \par
{\bkmkstart AAAAAAAJIB}{\bkmkend AAAAAAAJIB}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAAJID}{\bkmkend AAAAAAAJID}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAJIG}{\bkmkend AAAAAAAJIG}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAAJIJ}{\bkmkend AAAAAAAJIJ}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAJIM}{\bkmkend AAAAAAAJIM}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAJIN}{\bkmkend AAAAAAAJIN}
00286 \}\par
{\bkmkstart AAAAAAAJIO}{\bkmkend AAAAAAAJIO}
00287 \par
{\bkmkstart AAAAAAAJIP}{\bkmkend AAAAAAAJIP}
00292 TEST_F(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAAJIQ}{\bkmkend AAAAAAAJIQ}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAAJIR}{\bkmkend AAAAAAAJIR}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAJIS}{\bkmkend AAAAAAAJIS}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAJIT}{\bkmkend AAAAAAAJIT}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAAJIU}{\bkmkend AAAAAAAJIU}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAAJIV}{\bkmkend AAAAAAAJIV}
00298     \par
{\bkmkstart AAAAAAAJIW}{\bkmkend AAAAAAAJIW}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAAJIX}{\bkmkend AAAAAAAJIX}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAAJIY}{\bkmkend AAAAAAAJIY}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJIZ}{\bkmkend AAAAAAAJIZ}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAAJJA}{\bkmkend AAAAAAAJJA}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJJB}{\bkmkend AAAAAAAJJB}
00304     \par
{\bkmkstart AAAAAAAJJC}{\bkmkend AAAAAAAJJC}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAAJJD}{\bkmkend AAAAAAAJJD}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAAJJE}{\bkmkend AAAAAAAJJE}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAAJJF}{\bkmkend AAAAAAAJJF}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAAJJG}{\bkmkend AAAAAAAJJG}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAAJJH}{\bkmkend AAAAAAAJJH}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), std::string_view::npos); {\cf20 // String contains null characters, so "World" search fails}\par
{\bkmkstart AAAAAAAJJI}{\bkmkend AAAAAAAJJI}
00311     \par
{\bkmkstart AAAAAAAJJJ}{\bkmkend AAAAAAAJJJ}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAAJJK}{\bkmkend AAAAAAAJJK}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAAJJL}{\bkmkend AAAAAAAJJL}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAAJJM}{\bkmkend AAAAAAAJJM}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAAJJN}{\bkmkend AAAAAAAJJN}
00316     \}\par
{\bkmkstart AAAAAAAJJO}{\bkmkend AAAAAAAJJO}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAAJJP}{\bkmkend AAAAAAAJJP}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAAJJQ}{\bkmkend AAAAAAAJJQ}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAJJR}{\bkmkend AAAAAAAJJR}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAJJS}{\bkmkend AAAAAAAJJS}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAAJJT}{\bkmkend AAAAAAAJJT}
00322     \par
{\bkmkstart AAAAAAAJJU}{\bkmkend AAAAAAAJJU}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAJJV}{\bkmkend AAAAAAAJJV}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAJJW}{\bkmkend AAAAAAAJJW}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAJJX}{\bkmkend AAAAAAAJJX}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAAJJY}{\bkmkend AAAAAAAJJY}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAJJZ}{\bkmkend AAAAAAAJJZ}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJKA}{\bkmkend AAAAAAAJKA}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAJKB}{\bkmkend AAAAAAAJKB}
00330 \}\par
{\bkmkstart AAAAAAAJKC}{\bkmkend AAAAAAAJKC}
00331 \par
{\bkmkstart AAAAAAAJKD}{\bkmkend AAAAAAAJKD}
00336 TEST_F(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAAJKE}{\bkmkend AAAAAAAJKE}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAAJKF}{\bkmkend AAAAAAAJKF}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAAJKG}{\bkmkend AAAAAAAJKG}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAJKH}{\bkmkend AAAAAAAJKH}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAAJKI}{\bkmkend AAAAAAAJKI}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAAJKJ}{\bkmkend AAAAAAAJKJ}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAAJKK}{\bkmkend AAAAAAAJKK}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAAJKL}{\bkmkend AAAAAAAJKL}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAJKM}{\bkmkend AAAAAAAJKM}
00345     \par
{\bkmkstart AAAAAAAJKN}{\bkmkend AAAAAAAJKN}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAAJKO}{\bkmkend AAAAAAAJKO}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAAJKP}{\bkmkend AAAAAAAJKP}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAAJKQ}{\bkmkend AAAAAAAJKQ}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAAJKR}{\bkmkend AAAAAAAJKR}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAAJKS}{\bkmkend AAAAAAAJKS}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAAJKT}{\bkmkend AAAAAAAJKT}
00352     \par
{\bkmkstart AAAAAAAJKU}{\bkmkend AAAAAAAJKU}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAAJKV}{\bkmkend AAAAAAAJKV}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAAJKW}{\bkmkend AAAAAAAJKW}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAAJKX}{\bkmkend AAAAAAAJKX}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAAJKY}{\bkmkend AAAAAAAJKY}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAAJKZ}{\bkmkend AAAAAAAJKZ}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAJLA}{\bkmkend AAAAAAAJLA}
00359     \par
{\bkmkstart AAAAAAAJLB}{\bkmkend AAAAAAAJLB}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAAJLC}{\bkmkend AAAAAAAJLC}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAAJLD}{\bkmkend AAAAAAAJLD}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAAJLE}{\bkmkend AAAAAAAJLE}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAAJLF}{\bkmkend AAAAAAAJLF}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAAJLG}{\bkmkend AAAAAAAJLG}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAJLH}{\bkmkend AAAAAAAJLH}
00366     \par
{\bkmkstart AAAAAAAJLI}{\bkmkend AAAAAAAJLI}
00367     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAJLJ}{\bkmkend AAAAAAAJLJ}
00368     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAJLK}{\bkmkend AAAAAAAJLK}
00369     EXPECT_EQ(sv.length(), 14);\par
{\bkmkstart AAAAAAAJLL}{\bkmkend AAAAAAAJLL}
00370     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAJLM}{\bkmkend AAAAAAAJLM}
00371     EXPECT_EQ(sv.find({\cf23 'C'}), 0);\par
{\bkmkstart AAAAAAAJLN}{\bkmkend AAAAAAAJLN}
00372     EXPECT_EQ(sv.find({\cf22 "test"}), 10);\par
{\bkmkstart AAAAAAAJLO}{\bkmkend AAAAAAAJLO}
00373     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJLP}{\bkmkend AAAAAAAJLP}
00374     \par
{\bkmkstart AAAAAAAJLQ}{\bkmkend AAAAAAAJLQ}
00375     EXPECT_EQ(wsv.size(), 19);\par
{\bkmkstart AAAAAAAJLR}{\bkmkend AAAAAAAJLR}
00376     EXPECT_EQ(wsv.length(), 19);\par
{\bkmkstart AAAAAAAJLS}{\bkmkend AAAAAAAJLS}
00377     EXPECT_FALSE(wsv.empty());\par
{\bkmkstart AAAAAAAJLT}{\bkmkend AAAAAAAJLT}
00378     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAJLU}{\bkmkend AAAAAAAJLU}
00379     \par
{\bkmkstart AAAAAAAJLV}{\bkmkend AAAAAAAJLV}
00380     EXPECT_EQ(sv16.size(), 21);\par
{\bkmkstart AAAAAAAJLW}{\bkmkend AAAAAAAJLW}
00381     EXPECT_EQ(sv16.length(), 21);\par
{\bkmkstart AAAAAAAJLX}{\bkmkend AAAAAAAJLX}
00382     EXPECT_FALSE(sv16.empty());\par
{\bkmkstart AAAAAAAJLY}{\bkmkend AAAAAAAJLY}
00383     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAJLZ}{\bkmkend AAAAAAAJLZ}
00384     \par
{\bkmkstart AAAAAAAJMA}{\bkmkend AAAAAAAJMA}
00385     EXPECT_EQ(sv32.size(), 21);\par
{\bkmkstart AAAAAAAJMB}{\bkmkend AAAAAAAJMB}
00386     EXPECT_EQ(sv32.length(), 21);\par
{\bkmkstart AAAAAAAJMC}{\bkmkend AAAAAAAJMC}
00387     EXPECT_FALSE(sv32.empty());\par
{\bkmkstart AAAAAAAJMD}{\bkmkend AAAAAAAJMD}
00388     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAJME}{\bkmkend AAAAAAAJME}
00389 \}\par
{\bkmkstart AAAAAAAJMF}{\bkmkend AAAAAAAJMF}
00390 \par
{\bkmkstart AAAAAAAJMG}{\bkmkend AAAAAAAJMG}
00395 TEST_F(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAAJMH}{\bkmkend AAAAAAAJMH}
00396     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAAJMI}{\bkmkend AAAAAAAJMI}
00397     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAAJMJ}{\bkmkend AAAAAAAJMJ}
00398     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAAJMK}{\bkmkend AAAAAAAJMK}
00399     \par
{\bkmkstart AAAAAAAJML}{\bkmkend AAAAAAAJML}
00400     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAAJMM}{\bkmkend AAAAAAAJMM}
00401     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAAJMN}{\bkmkend AAAAAAAJMN}
00402     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAAJMO}{\bkmkend AAAAAAAJMO}
00403     \par
{\bkmkstart AAAAAAAJMP}{\bkmkend AAAAAAAJMP}
00404     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAAJMQ}{\bkmkend AAAAAAAJMQ}
00405     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAAJMR}{\bkmkend AAAAAAAJMR}
00406     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJMS}{\bkmkend AAAAAAAJMS}
00407     \par
{\bkmkstart AAAAAAAJMT}{\bkmkend AAAAAAAJMT}
00408     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAAJMU}{\bkmkend AAAAAAAJMU}
00409     std::string pattern_str;\par
{\bkmkstart AAAAAAAJMV}{\bkmkend AAAAAAAJMV}
00410     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAJMW}{\bkmkend AAAAAAAJMW}
00411         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAAJMX}{\bkmkend AAAAAAAJMX}
00412     \}\par
{\bkmkstart AAAAAAAJMY}{\bkmkend AAAAAAAJMY}
00413     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAAJMZ}{\bkmkend AAAAAAAJMZ}
00414     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAAJNA}{\bkmkend AAAAAAAJNA}
00415     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAAJNB}{\bkmkend AAAAAAAJNB}
00416     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAAJNC}{\bkmkend AAAAAAAJNC}
00417     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAAJND}{\bkmkend AAAAAAAJND}
00418     \par
{\bkmkstart AAAAAAAJNE}{\bkmkend AAAAAAAJNE}
00419     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAAJNF}{\bkmkend AAAAAAAJNF}
00420     std::string mixed_str;\par
{\bkmkstart AAAAAAAJNG}{\bkmkend AAAAAAAJNG}
00421     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAJNH}{\bkmkend AAAAAAAJNH}
00422         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAAJNI}{\bkmkend AAAAAAAJNI}
00423     \}\par
{\bkmkstart AAAAAAAJNJ}{\bkmkend AAAAAAAJNJ}
00424     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAAJNK}{\bkmkend AAAAAAAJNK}
00425     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAAJNL}{\bkmkend AAAAAAAJNL}
00426     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAJNM}{\bkmkend AAAAAAAJNM}
00427     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAJNN}{\bkmkend AAAAAAAJNN}
00428 \}\par
{\bkmkstart AAAAAAAJNO}{\bkmkend AAAAAAAJNO}
00429 \par
{\bkmkstart AAAAAAAJNP}{\bkmkend AAAAAAAJNP}
00430 \} {\cf20 // namespace}\par
}
}