{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAABOU}
{\bkmkend AAAAAAABOU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOV" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABPP}{\bkmkend AAAAAAABPP}
00001 \par
{\bkmkstart AAAAAAABPT}{\bkmkend AAAAAAABPT}
00010 \par
{\bkmkstart AAAAAAABPV}{\bkmkend AAAAAAABPV}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABPZ}{\bkmkend AAAAAAABPZ}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAABQB}{\bkmkend AAAAAAABQB}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAABQC}{\bkmkend AAAAAAABQC}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAABQE}{\bkmkend AAAAAAABQE}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAABQG}{\bkmkend AAAAAAABQG}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAABQI}{\bkmkend AAAAAAABQI}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAABQJ}{\bkmkend AAAAAAABQJ}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAABQK}{\bkmkend AAAAAAABQK}
00019 \par
{\bkmkstart AAAAAAABQL}{\bkmkend AAAAAAABQL}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAABQM}{\bkmkend AAAAAAABQM}
00021 \par
{\bkmkstart AAAAAAABQN}{\bkmkend AAAAAAABQN}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAABQO}{\bkmkend AAAAAAABQO}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAABQP}{\bkmkend AAAAAAABQP}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAABQQ}{\bkmkend AAAAAAABQQ}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAABQR}{\bkmkend AAAAAAABQR}
00030     \}\par
{\bkmkstart AAAAAAABQS}{\bkmkend AAAAAAABQS}
00031     \par
{\bkmkstart AAAAAAABQT}{\bkmkend AAAAAAABQT}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAABQU}{\bkmkend AAAAAAABQU}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAABQV}{\bkmkend AAAAAAABQV}
00034     \}\par
{\bkmkstart AAAAAAABQW}{\bkmkend AAAAAAABQW}
00035 \};\par
{\bkmkstart AAAAAAABQX}{\bkmkend AAAAAAABQX}
00036 \par
{\bkmkstart AAAAAAABQY}{\bkmkend AAAAAAABQY}
00041 TEST_F(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAABQZ}{\bkmkend AAAAAAABQZ}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAABRA}{\bkmkend AAAAAAABRA}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAABRB}{\bkmkend AAAAAAABRB}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAABRC}{\bkmkend AAAAAAABRC}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAABRD}{\bkmkend AAAAAAABRD}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAABRE}{\bkmkend AAAAAAABRE}
00047     \par
{\bkmkstart AAAAAAABRF}{\bkmkend AAAAAAABRF}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAABRG}{\bkmkend AAAAAAABRG}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAABRH}{\bkmkend AAAAAAABRH}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAABRI}{\bkmkend AAAAAAABRI}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAABRJ}{\bkmkend AAAAAAABRJ}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAABRK}{\bkmkend AAAAAAABRK}
00053     \par
{\bkmkstart AAAAAAABRL}{\bkmkend AAAAAAABRL}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAABRM}{\bkmkend AAAAAAABRM}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAABRN}{\bkmkend AAAAAAABRN}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAABRO}{\bkmkend AAAAAAABRO}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAABRP}{\bkmkend AAAAAAABRP}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAABRQ}{\bkmkend AAAAAAABRQ}
00059     \par
{\bkmkstart AAAAAAABRR}{\bkmkend AAAAAAABRR}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAABRS}{\bkmkend AAAAAAABRS}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAABRT}{\bkmkend AAAAAAABRT}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAABRU}{\bkmkend AAAAAAABRU}
00063     EXPECT_EQ(sv4.size(), 70);\par
{\bkmkstart AAAAAAABRV}{\bkmkend AAAAAAABRV}
00064     EXPECT_EQ(sv4.length(), 70);\par
{\bkmkstart AAAAAAABRW}{\bkmkend AAAAAAABRW}
00065     \par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAABRY}{\bkmkend AAAAAAABRY}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAABRZ}{\bkmkend AAAAAAABRZ}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAABSA}{\bkmkend AAAAAAABSA}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAABSB}{\bkmkend AAAAAAABSB}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAABSC}{\bkmkend AAAAAAABSC}
00071     \par
{\bkmkstart AAAAAAABSD}{\bkmkend AAAAAAABSD}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAABSE}{\bkmkend AAAAAAABSE}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAABSF}{\bkmkend AAAAAAABSF}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAABSH}{\bkmkend AAAAAAABSH}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAABSI}{\bkmkend AAAAAAABSI}
00077     \par
{\bkmkstart AAAAAAABSJ}{\bkmkend AAAAAAABSJ}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAABSK}{\bkmkend AAAAAAABSK}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAABSL}{\bkmkend AAAAAAABSL}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAABSM}{\bkmkend AAAAAAABSM}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAABSN}{\bkmkend AAAAAAABSN}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAABSO}{\bkmkend AAAAAAABSO}
00083     \par
{\bkmkstart AAAAAAABSP}{\bkmkend AAAAAAABSP}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAABSR}{\bkmkend AAAAAAABSR}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAABSS}{\bkmkend AAAAAAABSS}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAABST}{\bkmkend AAAAAAABST}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAABSU}{\bkmkend AAAAAAABSU}
00089 \}\par
{\bkmkstart AAAAAAABSV}{\bkmkend AAAAAAABSV}
00090 \par
{\bkmkstart AAAAAAABSW}{\bkmkend AAAAAAABSW}
00095 TEST_F(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAABSX}{\bkmkend AAAAAAABSX}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABSY}{\bkmkend AAAAAAABSY}
00097     \par
{\bkmkstart AAAAAAABSZ}{\bkmkend AAAAAAABSZ}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAABTA}{\bkmkend AAAAAAABTA}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABTB}{\bkmkend AAAAAAABTB}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAABTC}{\bkmkend AAAAAAABTC}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAABTD}{\bkmkend AAAAAAABTD}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAABTE}{\bkmkend AAAAAAABTE}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAABTF}{\bkmkend AAAAAAABTF}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAABTG}{\bkmkend AAAAAAABTG}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAABTH}{\bkmkend AAAAAAABTH}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 8);\par
{\bkmkstart AAAAAAABTJ}{\bkmkend AAAAAAABTJ}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAABTM}{\bkmkend AAAAAAABTM}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAABTO}{\bkmkend AAAAAAABTO}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAABTP}{\bkmkend AAAAAAABTP}
00110     \par
{\bkmkstart AAAAAAABTQ}{\bkmkend AAAAAAABTQ}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAABTS}{\bkmkend AAAAAAABTS}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAABTU}{\bkmkend AAAAAAABTU}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAABTW}{\bkmkend AAAAAAABTW}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAABUB}{\bkmkend AAAAAAABUB}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAABUE}{\bkmkend AAAAAAABUE}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAABUH}{\bkmkend AAAAAAABUH}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAABUI}{\bkmkend AAAAAAABUI}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAABUL}{\bkmkend AAAAAAABUL}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAABUN}{\bkmkend AAAAAAABUN}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAABUP}{\bkmkend AAAAAAABUP}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAABUR}{\bkmkend AAAAAAABUR}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 10);\par
{\bkmkstart AAAAAAABUU}{\bkmkend AAAAAAABUU}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAABUW}{\bkmkend AAAAAAABUW}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAABUY}{\bkmkend AAAAAAABUY}
00125     \par
{\bkmkstart AAAAAAABVA}{\bkmkend AAAAAAABVA}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAABVB}{\bkmkend AAAAAAABVB}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAABVD}{\bkmkend AAAAAAABVD}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAABVH}{\bkmkend AAAAAAABVH}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAABVJ}{\bkmkend AAAAAAABVJ}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAABVL}{\bkmkend AAAAAAABVL}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAABVP}{\bkmkend AAAAAAABVP}
00132     \par
{\bkmkstart AAAAAAABVQ}{\bkmkend AAAAAAABVQ}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAABVS}{\bkmkend AAAAAAABVS}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAABVT}{\bkmkend AAAAAAABVT}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAABVW}{\bkmkend AAAAAAABVW}
00136     \par
{\bkmkstart AAAAAAABVX}{\bkmkend AAAAAAABVX}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAABWB}{\bkmkend AAAAAAABWB}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAABWD}{\bkmkend AAAAAAABWD}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAABWF}{\bkmkend AAAAAAABWF}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAABWJ}{\bkmkend AAAAAAABWJ}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAABWK}{\bkmkend AAAAAAABWK}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAABWL}{\bkmkend AAAAAAABWL}
00143     \par
{\bkmkstart AAAAAAABWM}{\bkmkend AAAAAAABWM}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAABWN}{\bkmkend AAAAAAABWN}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABWP}{\bkmkend AAAAAAABWP}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABWQ}{\bkmkend AAAAAAABWQ}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAABWT}{\bkmkend AAAAAAABWT}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAABWV}{\bkmkend AAAAAAABWV}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAABWY}{\bkmkend AAAAAAABWY}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAABXB}{\bkmkend AAAAAAABXB}
00151     \par
{\bkmkstart AAAAAAABXD}{\bkmkend AAAAAAABXD}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAABXE}{\bkmkend AAAAAAABXE}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABXH}{\bkmkend AAAAAAABXH}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABXM}{\bkmkend AAAAAAABXM}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAABXO}{\bkmkend AAAAAAABXO}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAABXR}{\bkmkend AAAAAAABXR}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAABXT}{\bkmkend AAAAAAABXT}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAABXX}{\bkmkend AAAAAAABXX}
00159     \par
{\bkmkstart AAAAAAABXY}{\bkmkend AAAAAAABXY}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAABYA}{\bkmkend AAAAAAABYA}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABYD}{\bkmkend AAAAAAABYD}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABYG}{\bkmkend AAAAAAABYG}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAABYI}{\bkmkend AAAAAAABYI}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAABYK}{\bkmkend AAAAAAABYK}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAABYM}{\bkmkend AAAAAAABYM}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAABYQ}{\bkmkend AAAAAAABYQ}
00167 \}\par
{\bkmkstart AAAAAAABYR}{\bkmkend AAAAAAABYR}
00168 \par
{\bkmkstart AAAAAAABYS}{\bkmkend AAAAAAABYS}
00173 TEST_F(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAABYU}{\bkmkend AAAAAAABYU}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAABYV}{\bkmkend AAAAAAABYV}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAABYZ}{\bkmkend AAAAAAABYZ}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAABZB}{\bkmkend AAAAAAABZB}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAABZD}{\bkmkend AAAAAAABZD}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAABZF}{\bkmkend AAAAAAABZF}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAABZH}{\bkmkend AAAAAAABZH}
00180     \par
{\bkmkstart AAAAAAABZI}{\bkmkend AAAAAAABZI}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAABZL}{\bkmkend AAAAAAABZL}
00182     std::string str2;\par
{\bkmkstart AAAAAAABZN}{\bkmkend AAAAAAABZN}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAABZP}{\bkmkend AAAAAAABZP}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAABZR}{\bkmkend AAAAAAABZR}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAABZT}{\bkmkend AAAAAAABZT}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAABZY}{\bkmkend AAAAAAABZY}
00188     \par
{\bkmkstart AAAAAAACAA}{\bkmkend AAAAAAACAA}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAACAC}{\bkmkend AAAAAAACAC}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAACAE}{\bkmkend AAAAAAACAE}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAACAL}{\bkmkend AAAAAAACAL}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAACAN}{\bkmkend AAAAAAACAN}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAACAP}{\bkmkend AAAAAAACAP}
00195     \par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAACAS}{\bkmkend AAAAAAACAS}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAACAV}{\bkmkend AAAAAAACAV}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAACAX}{\bkmkend AAAAAAACAX}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAACAZ}{\bkmkend AAAAAAACAZ}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAACBC}{\bkmkend AAAAAAACBC}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAACBF}{\bkmkend AAAAAAACBF}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAACBH}{\bkmkend AAAAAAACBH}
00203     \par
{\bkmkstart AAAAAAACBI}{\bkmkend AAAAAAACBI}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAACBJ}{\bkmkend AAAAAAACBJ}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAACBL}{\bkmkend AAAAAAACBL}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAACBO}{\bkmkend AAAAAAACBO}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAACBQ}{\bkmkend AAAAAAACBQ}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAACBR}{\bkmkend AAAAAAACBR}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAACBV}{\bkmkend AAAAAAACBV}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAACBY}{\bkmkend AAAAAAACBY}
00211     \par
{\bkmkstart AAAAAAACBZ}{\bkmkend AAAAAAACBZ}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAACCB}{\bkmkend AAAAAAACCB}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAACCD}{\bkmkend AAAAAAACCD}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAACCH}{\bkmkend AAAAAAACCH}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAACCI}{\bkmkend AAAAAAACCI}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAACCL}{\bkmkend AAAAAAACCL}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAACCN}{\bkmkend AAAAAAACCN}
00218     \par
{\bkmkstart AAAAAAACCP}{\bkmkend AAAAAAACCP}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAACCR}{\bkmkend AAAAAAACCR}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAACCV}{\bkmkend AAAAAAACCV}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAACCY}{\bkmkend AAAAAAACCY}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAACDC}{\bkmkend AAAAAAACDC}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAACDE}{\bkmkend AAAAAAACDE}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAACDI}{\bkmkend AAAAAAACDI}
00225     \par
{\bkmkstart AAAAAAACDJ}{\bkmkend AAAAAAACDJ}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAACDK}{\bkmkend AAAAAAACDK}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAACDM}{\bkmkend AAAAAAACDM}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAACDO}{\bkmkend AAAAAAACDO}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAACDR}{\bkmkend AAAAAAACDR}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAACDT}{\bkmkend AAAAAAACDT}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAACDW}{\bkmkend AAAAAAACDW}
00232 \}\par
{\bkmkstart AAAAAAACDY}{\bkmkend AAAAAAACDY}
00233 \par
{\bkmkstart AAAAAAACDZ}{\bkmkend AAAAAAACDZ}
00238 TEST_F(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAACED}{\bkmkend AAAAAAACED}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAACEF}{\bkmkend AAAAAAACEF}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAACEH}{\bkmkend AAAAAAACEH}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAACEM}{\bkmkend AAAAAAACEM}
00242     \par
{\bkmkstart AAAAAAACEP}{\bkmkend AAAAAAACEP}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAACER}{\bkmkend AAAAAAACER}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAACET}{\bkmkend AAAAAAACET}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAACEW}{\bkmkend AAAAAAACEW}
00246     \par
{\bkmkstart AAAAAAACEX}{\bkmkend AAAAAAACEX}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAACEZ}{\bkmkend AAAAAAACEZ}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAACFB}{\bkmkend AAAAAAACFB}
00249     \par
{\bkmkstart AAAAAAACFC}{\bkmkend AAAAAAACFC}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAACFG}{\bkmkend AAAAAAACFG}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACFI}{\bkmkend AAAAAAACFI}
00252     \par
{\bkmkstart AAAAAAACFJ}{\bkmkend AAAAAAACFJ}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAACFK}{\bkmkend AAAAAAACFK}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAACFL}{\bkmkend AAAAAAACFL}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAACFM}{\bkmkend AAAAAAACFM}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAACFN}{\bkmkend AAAAAAACFN}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAACFO}{\bkmkend AAAAAAACFO}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAACFP}{\bkmkend AAAAAAACFP}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 20);\par
{\bkmkstart AAAAAAACFQ}{\bkmkend AAAAAAACFQ}
00260     \par
{\bkmkstart AAAAAAACFR}{\bkmkend AAAAAAACFR}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAACFS}{\bkmkend AAAAAAACFS}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAACFT}{\bkmkend AAAAAAACFT}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAACFV}{\bkmkend AAAAAAACFV}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAACFX}{\bkmkend AAAAAAACFX}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAACGA}{\bkmkend AAAAAAACGA}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAACGC}{\bkmkend AAAAAAACGC}
00267     \par
{\bkmkstart AAAAAAACGD}{\bkmkend AAAAAAACGD}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAACGF}{\bkmkend AAAAAAACGF}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAACGH}{\bkmkend AAAAAAACGH}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAACGK}{\bkmkend AAAAAAACGK}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAACGM}{\bkmkend AAAAAAACGM}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAACGP}{\bkmkend AAAAAAACGP}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAACGR}{\bkmkend AAAAAAACGR}
00274     \par
{\bkmkstart AAAAAAACGS}{\bkmkend AAAAAAACGS}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAACGU}{\bkmkend AAAAAAACGU}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAACGV}{\bkmkend AAAAAAACGV}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAACGY}{\bkmkend AAAAAAACGY}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAACHA}{\bkmkend AAAAAAACHA}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAACHC}{\bkmkend AAAAAAACHC}
00280     \par
{\bkmkstart AAAAAAACHE}{\bkmkend AAAAAAACHE}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAACHG}{\bkmkend AAAAAAACHG}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAACHJ}{\bkmkend AAAAAAACHJ}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAACHL}{\bkmkend AAAAAAACHL}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAACHN}{\bkmkend AAAAAAACHN}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAACHP}{\bkmkend AAAAAAACHP}
00286 \}\par
{\bkmkstart AAAAAAACHR}{\bkmkend AAAAAAACHR}
00287 \par
{\bkmkstart AAAAAAACHS}{\bkmkend AAAAAAACHS}
00292 TEST_F(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAACHV}{\bkmkend AAAAAAACHV}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAACHX}{\bkmkend AAAAAAACHX}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAACHZ}{\bkmkend AAAAAAACHZ}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAACIC}{\bkmkend AAAAAAACIC}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAACIF}{\bkmkend AAAAAAACIF}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAACIH}{\bkmkend AAAAAAACIH}
00298     \par
{\bkmkstart AAAAAAACIJ}{\bkmkend AAAAAAACIJ}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAACIL}{\bkmkend AAAAAAACIL}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAACIN}{\bkmkend AAAAAAACIN}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACIP}{\bkmkend AAAAAAACIP}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAACIR}{\bkmkend AAAAAAACIR}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACIU}{\bkmkend AAAAAAACIU}
00304     \par
{\bkmkstart AAAAAAACIV}{\bkmkend AAAAAAACIV}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAACIX}{\bkmkend AAAAAAACIX}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAACJA}{\bkmkend AAAAAAACJA}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAACJD}{\bkmkend AAAAAAACJD}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAACJF}{\bkmkend AAAAAAACJF}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAACJI}{\bkmkend AAAAAAACJI}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), 6);\par
{\bkmkstart AAAAAAACJK}{\bkmkend AAAAAAACJK}
00311     \par
{\bkmkstart AAAAAAACJM}{\bkmkend AAAAAAACJM}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAACJO}{\bkmkend AAAAAAACJO}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAACJQ}{\bkmkend AAAAAAACJQ}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAACJT}{\bkmkend AAAAAAACJT}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAACJW}{\bkmkend AAAAAAACJW}
00316     \}\par
{\bkmkstart AAAAAAACJX}{\bkmkend AAAAAAACJX}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAACJY}{\bkmkend AAAAAAACJY}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAACKA}{\bkmkend AAAAAAACKA}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAACKE}{\bkmkend AAAAAAACKE}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAACKG}{\bkmkend AAAAAAACKG}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAACKI}{\bkmkend AAAAAAACKI}
00322     \par
{\bkmkstart AAAAAAACKM}{\bkmkend AAAAAAACKM}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAACKO}{\bkmkend AAAAAAACKO}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACKQ}{\bkmkend AAAAAAACKQ}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAACKS}{\bkmkend AAAAAAACKS}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAACKV}{\bkmkend AAAAAAACKV}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACKX}{\bkmkend AAAAAAACKX}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACKZ}{\bkmkend AAAAAAACKZ}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACLD}{\bkmkend AAAAAAACLD}
00330 \}\par
{\bkmkstart AAAAAAACLF}{\bkmkend AAAAAAACLF}
00331 \par
{\bkmkstart AAAAAAACLG}{\bkmkend AAAAAAACLG}
00336 TEST_F(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAACLK}{\bkmkend AAAAAAACLK}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAACLM}{\bkmkend AAAAAAACLM}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAACLO}{\bkmkend AAAAAAACLO}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAACLR}{\bkmkend AAAAAAACLR}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAACLS}{\bkmkend AAAAAAACLS}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAACLV}{\bkmkend AAAAAAACLV}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAACLX}{\bkmkend AAAAAAACLX}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAACMB}{\bkmkend AAAAAAACMB}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAACME}{\bkmkend AAAAAAACME}
00345     \par
{\bkmkstart AAAAAAACMF}{\bkmkend AAAAAAACMF}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAACMG}{\bkmkend AAAAAAACMG}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAACMK}{\bkmkend AAAAAAACMK}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAACML}{\bkmkend AAAAAAACML}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAACMN}{\bkmkend AAAAAAACMN}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAACMO}{\bkmkend AAAAAAACMO}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAACMQ}{\bkmkend AAAAAAACMQ}
00352     \par
{\bkmkstart AAAAAAACMS}{\bkmkend AAAAAAACMS}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAACMT}{\bkmkend AAAAAAACMT}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAACMX}{\bkmkend AAAAAAACMX}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAACMY}{\bkmkend AAAAAAACMY}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAACNA}{\bkmkend AAAAAAACNA}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAACNB}{\bkmkend AAAAAAACNB}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAACND}{\bkmkend AAAAAAACND}
00359     \par
{\bkmkstart AAAAAAACNE}{\bkmkend AAAAAAACNE}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAACNG}{\bkmkend AAAAAAACNG}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAACNI}{\bkmkend AAAAAAACNI}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAACNJ}{\bkmkend AAAAAAACNJ}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAACNM}{\bkmkend AAAAAAACNM}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAACNO}{\bkmkend AAAAAAACNO}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAACNQ}{\bkmkend AAAAAAACNQ}
00366 \}\par
{\bkmkstart AAAAAAACNR}{\bkmkend AAAAAAACNR}
00367 \par
{\bkmkstart AAAAAAACNU}{\bkmkend AAAAAAACNU}
00372 TEST_F(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAACNW}{\bkmkend AAAAAAACNW}
00373     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAACNX}{\bkmkend AAAAAAACNX}
00374     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAACOB}{\bkmkend AAAAAAACOB}
00375     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAACOC}{\bkmkend AAAAAAACOC}
00376     \par
{\bkmkstart AAAAAAACOE}{\bkmkend AAAAAAACOE}
00377     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAACOF}{\bkmkend AAAAAAACOF}
00378     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAACOI}{\bkmkend AAAAAAACOI}
00379     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAACOL}{\bkmkend AAAAAAACOL}
00380     \par
{\bkmkstart AAAAAAACOM}{\bkmkend AAAAAAACOM}
00381     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAACON}{\bkmkend AAAAAAACON}
00382     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAACOP}{\bkmkend AAAAAAACOP}
00383     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACOT}{\bkmkend AAAAAAACOT}
00384     \par
{\bkmkstart AAAAAAACOV}{\bkmkend AAAAAAACOV}
00385     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAACOW}{\bkmkend AAAAAAACOW}
00386     std::string pattern_str;\par
{\bkmkstart AAAAAAACOZ}{\bkmkend AAAAAAACOZ}
00387     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAACPB}{\bkmkend AAAAAAACPB}
00388         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAACPE}{\bkmkend AAAAAAACPE}
00389     \}\par
{\bkmkstart AAAAAAACPF}{\bkmkend AAAAAAACPF}
00390     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAACPI}{\bkmkend AAAAAAACPI}
00391     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAACPL}{\bkmkend AAAAAAACPL}
00392     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAACPO}{\bkmkend AAAAAAACPO}
00393     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAACPQ}{\bkmkend AAAAAAACPQ}
00394     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAACPS}{\bkmkend AAAAAAACPS}
00395     \par
{\bkmkstart AAAAAAACPU}{\bkmkend AAAAAAACPU}
00396     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAACPW}{\bkmkend AAAAAAACPW}
00397     std::string mixed_str;\par
{\bkmkstart AAAAAAACPY}{\bkmkend AAAAAAACPY}
00398     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAACQB}{\bkmkend AAAAAAACQB}
00399         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAACQE}{\bkmkend AAAAAAACQE}
00400     \}\par
{\bkmkstart AAAAAAACQF}{\bkmkend AAAAAAACQF}
00401     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAACQI}{\bkmkend AAAAAAACQI}
00402     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAACQM}{\bkmkend AAAAAAACQM}
00403     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAACQP}{\bkmkend AAAAAAACQP}
00404     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAACQR}{\bkmkend AAAAAAACQR}
00405 \}\par
{\bkmkstart AAAAAAACQS}{\bkmkend AAAAAAACQS}
00406 \par
{\bkmkstart AAAAAAACQU}{\bkmkend AAAAAAACQU}
00407 \} {\cf20 // namespace}\par
}
}