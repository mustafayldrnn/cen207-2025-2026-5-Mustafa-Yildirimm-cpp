{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAAFSF}
{\bkmkend AAAAAAAFSF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFSG" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFTI}{\bkmkend AAAAAAAFTI}
00001 \par
{\bkmkstart AAAAAAAFTJ}{\bkmkend AAAAAAAFTJ}
00010 \par
{\bkmkstart AAAAAAAFTK}{\bkmkend AAAAAAAFTK}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAFTL}{\bkmkend AAAAAAAFTL}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAFTM}{\bkmkend AAAAAAAFTM}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAFTN}{\bkmkend AAAAAAAFTN}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAFTO}{\bkmkend AAAAAAAFTO}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAFTP}{\bkmkend AAAAAAAFTP}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAFTQ}{\bkmkend AAAAAAAFTQ}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAFTR}{\bkmkend AAAAAAAFTR}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAFTS}{\bkmkend AAAAAAAFTS}
00019 \par
{\bkmkstart AAAAAAAFTT}{\bkmkend AAAAAAAFTT}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAFTU}{\bkmkend AAAAAAAFTU}
00021 \par
{\bkmkstart AAAAAAAFTV}{\bkmkend AAAAAAAFTV}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAFTY}{\bkmkend AAAAAAAFTY}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAAFTZ}{\bkmkend AAAAAAAFTZ}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFUA}{\bkmkend AAAAAAAFUA}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAFUB}{\bkmkend AAAAAAAFUB}
00030     \}\par
{\bkmkstart AAAAAAAFUC}{\bkmkend AAAAAAAFUC}
00031     \par
{\bkmkstart AAAAAAAFUD}{\bkmkend AAAAAAAFUD}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFUE}{\bkmkend AAAAAAAFUE}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAFUF}{\bkmkend AAAAAAAFUF}
00034     \}\par
{\bkmkstart AAAAAAAFUG}{\bkmkend AAAAAAAFUG}
00035 \};\par
{\bkmkstart AAAAAAAFUH}{\bkmkend AAAAAAAFUH}
00036 \par
{\bkmkstart AAAAAAAFUI}{\bkmkend AAAAAAAFUI}
00041 TEST_F(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAAFUJ}{\bkmkend AAAAAAAFUJ}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAAFUK}{\bkmkend AAAAAAAFUK}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAFUL}{\bkmkend AAAAAAAFUL}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAAFUM}{\bkmkend AAAAAAAFUM}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAAFUN}{\bkmkend AAAAAAAFUN}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAAFUO}{\bkmkend AAAAAAAFUO}
00047     \par
{\bkmkstart AAAAAAAFUP}{\bkmkend AAAAAAAFUP}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAFUQ}{\bkmkend AAAAAAAFUQ}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAAFUR}{\bkmkend AAAAAAAFUR}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAAFUS}{\bkmkend AAAAAAAFUS}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAAFUT}{\bkmkend AAAAAAAFUT}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAAFUU}{\bkmkend AAAAAAAFUU}
00053     \par
{\bkmkstart AAAAAAAFUV}{\bkmkend AAAAAAAFUV}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAFUW}{\bkmkend AAAAAAAFUW}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAAFUX}{\bkmkend AAAAAAAFUX}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAAFUY}{\bkmkend AAAAAAAFUY}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAAFUZ}{\bkmkend AAAAAAAFUZ}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAAFVA}{\bkmkend AAAAAAAFVA}
00059     \par
{\bkmkstart AAAAAAAFVB}{\bkmkend AAAAAAAFVB}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAAFVD}{\bkmkend AAAAAAAFVD}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAAFVE}{\bkmkend AAAAAAAFVE}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAAFVF}{\bkmkend AAAAAAAFVF}
00063     EXPECT_EQ(sv4.size(), 75);\par
{\bkmkstart AAAAAAAFVG}{\bkmkend AAAAAAAFVG}
00064     EXPECT_EQ(sv4.length(), 75);\par
{\bkmkstart AAAAAAAFVH}{\bkmkend AAAAAAAFVH}
00065     \par
{\bkmkstart AAAAAAAFVI}{\bkmkend AAAAAAAFVI}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAAFVJ}{\bkmkend AAAAAAAFVJ}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAAFVK}{\bkmkend AAAAAAAFVK}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAAFVL}{\bkmkend AAAAAAAFVL}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAAFVM}{\bkmkend AAAAAAAFVM}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAAFVN}{\bkmkend AAAAAAAFVN}
00071     \par
{\bkmkstart AAAAAAAFVO}{\bkmkend AAAAAAAFVO}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAFVP}{\bkmkend AAAAAAAFVP}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAFVQ}{\bkmkend AAAAAAAFVQ}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAFVT}{\bkmkend AAAAAAAFVT}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAAFVU}{\bkmkend AAAAAAAFVU}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAAFVV}{\bkmkend AAAAAAAFVV}
00077     \par
{\bkmkstart AAAAAAAFVW}{\bkmkend AAAAAAAFVW}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAFVX}{\bkmkend AAAAAAAFVX}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAFVY}{\bkmkend AAAAAAAFVY}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAFVZ}{\bkmkend AAAAAAAFVZ}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAAFWA}{\bkmkend AAAAAAAFWA}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAAFWB}{\bkmkend AAAAAAAFWB}
00083     \par
{\bkmkstart AAAAAAAFWC}{\bkmkend AAAAAAAFWC}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAFWD}{\bkmkend AAAAAAAFWD}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAFWE}{\bkmkend AAAAAAAFWE}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAFWF}{\bkmkend AAAAAAAFWF}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAAFWG}{\bkmkend AAAAAAAFWG}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAAFWH}{\bkmkend AAAAAAAFWH}
00089 \}\par
{\bkmkstart AAAAAAAFWI}{\bkmkend AAAAAAAFWI}
00090 \par
{\bkmkstart AAAAAAAFWJ}{\bkmkend AAAAAAAFWJ}
00095 TEST_F(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAAFWK}{\bkmkend AAAAAAAFWK}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFWL}{\bkmkend AAAAAAAFWL}
00097     \par
{\bkmkstart AAAAAAAFWM}{\bkmkend AAAAAAAFWM}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAAFWN}{\bkmkend AAAAAAAFWN}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAFWP}{\bkmkend AAAAAAAFWP}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAFWQ}{\bkmkend AAAAAAAFWQ}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAFWR}{\bkmkend AAAAAAAFWR}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAFWS}{\bkmkend AAAAAAAFWS}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAAFWT}{\bkmkend AAAAAAAFWT}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAAFWU}{\bkmkend AAAAAAAFWU}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAFWV}{\bkmkend AAAAAAAFWV}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 9);\par
{\bkmkstart AAAAAAAFWW}{\bkmkend AAAAAAAFWW}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAFWX}{\bkmkend AAAAAAAFWX}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAFWY}{\bkmkend AAAAAAAFWY}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFWZ}{\bkmkend AAAAAAAFWZ}
00110     \par
{\bkmkstart AAAAAAAFXA}{\bkmkend AAAAAAAFXA}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAAFXC}{\bkmkend AAAAAAAFXC}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAFXD}{\bkmkend AAAAAAAFXD}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAAFXE}{\bkmkend AAAAAAAFXE}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAAFXF}{\bkmkend AAAAAAAFXF}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAAFXG}{\bkmkend AAAAAAAFXG}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAAFXH}{\bkmkend AAAAAAAFXH}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAAFXI}{\bkmkend AAAAAAAFXI}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAFXJ}{\bkmkend AAAAAAAFXJ}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAAFXK}{\bkmkend AAAAAAAFXK}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAAFXL}{\bkmkend AAAAAAAFXL}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAAFXO}{\bkmkend AAAAAAAFXO}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 11);\par
{\bkmkstart AAAAAAAFXP}{\bkmkend AAAAAAAFXP}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAAFXR}{\bkmkend AAAAAAAFXR}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFXU}{\bkmkend AAAAAAAFXU}
00125     \par
{\bkmkstart AAAAAAAFXW}{\bkmkend AAAAAAAFXW}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAAFXX}{\bkmkend AAAAAAAFXX}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAFXZ}{\bkmkend AAAAAAAFXZ}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAFYA}{\bkmkend AAAAAAAFYA}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAAFYB}{\bkmkend AAAAAAAFYB}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAAFYD}{\bkmkend AAAAAAAFYD}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAAFYE}{\bkmkend AAAAAAAFYE}
00132     \par
{\bkmkstart AAAAAAAFYG}{\bkmkend AAAAAAAFYG}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAFYI}{\bkmkend AAAAAAAFYI}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAFYJ}{\bkmkend AAAAAAAFYJ}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAFYK}{\bkmkend AAAAAAAFYK}
00136     \par
{\bkmkstart AAAAAAAFYL}{\bkmkend AAAAAAAFYL}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAAFYM}{\bkmkend AAAAAAAFYM}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAFYO}{\bkmkend AAAAAAAFYO}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAFYP}{\bkmkend AAAAAAAFYP}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAFYQ}{\bkmkend AAAAAAAFYQ}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAFYS}{\bkmkend AAAAAAAFYS}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAFYU}{\bkmkend AAAAAAAFYU}
00143     \par
{\bkmkstart AAAAAAAFYV}{\bkmkend AAAAAAAFYV}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAAFYW}{\bkmkend AAAAAAAFYW}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFYY}{\bkmkend AAAAAAAFYY}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAFZA}{\bkmkend AAAAAAAFZA}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAFZD}{\bkmkend AAAAAAAFZD}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAFZE}{\bkmkend AAAAAAAFZE}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAFZF}{\bkmkend AAAAAAAFZF}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAAFZG}{\bkmkend AAAAAAAFZG}
00151     \par
{\bkmkstart AAAAAAAFZI}{\bkmkend AAAAAAAFZI}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAAFZJ}{\bkmkend AAAAAAAFZJ}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFZK}{\bkmkend AAAAAAAFZK}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAFZN}{\bkmkend AAAAAAAFZN}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAFZP}{\bkmkend AAAAAAAFZP}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAFZQ}{\bkmkend AAAAAAAFZQ}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAFZU}{\bkmkend AAAAAAAFZU}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAAFZW}{\bkmkend AAAAAAAFZW}
00159     \par
{\bkmkstart AAAAAAAFZX}{\bkmkend AAAAAAAFZX}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAAFZY}{\bkmkend AAAAAAAFZY}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGAA}{\bkmkend AAAAAAAGAA}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGAB}{\bkmkend AAAAAAAGAB}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAGAC}{\bkmkend AAAAAAAGAC}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAGAF}{\bkmkend AAAAAAAGAF}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAGAH}{\bkmkend AAAAAAAGAH}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAAGAK}{\bkmkend AAAAAAAGAK}
00167 \}\par
{\bkmkstart AAAAAAAGAM}{\bkmkend AAAAAAAGAM}
00168 \par
{\bkmkstart AAAAAAAGAN}{\bkmkend AAAAAAAGAN}
00173 TEST_F(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAAGAR}{\bkmkend AAAAAAAGAR}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAAGAT}{\bkmkend AAAAAAAGAT}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAAGAV}{\bkmkend AAAAAAAGAV}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAAGAW}{\bkmkend AAAAAAAGAW}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAAGAY}{\bkmkend AAAAAAAGAY}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAGAZ}{\bkmkend AAAAAAAGAZ}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAAGBC}{\bkmkend AAAAAAAGBC}
00180     \par
{\bkmkstart AAAAAAAGBD}{\bkmkend AAAAAAAGBD}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAAGBF}{\bkmkend AAAAAAAGBF}
00182     std::string str2;\par
{\bkmkstart AAAAAAAGBG}{\bkmkend AAAAAAAGBG}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAAGBP}{\bkmkend AAAAAAAGBP}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAAGBQ}{\bkmkend AAAAAAAGBQ}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAGBT}{\bkmkend AAAAAAAGBT}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAAGBU}{\bkmkend AAAAAAAGBU}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAAGBX}{\bkmkend AAAAAAAGBX}
00188     \par
{\bkmkstart AAAAAAAGBZ}{\bkmkend AAAAAAAGBZ}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAAGCB}{\bkmkend AAAAAAAGCB}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAAGCE}{\bkmkend AAAAAAAGCE}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAAGCH}{\bkmkend AAAAAAAGCH}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAAGCJ}{\bkmkend AAAAAAAGCJ}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAGCK}{\bkmkend AAAAAAAGCK}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAAGCM}{\bkmkend AAAAAAAGCM}
00195     \par
{\bkmkstart AAAAAAAGCN}{\bkmkend AAAAAAAGCN}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAAGCO}{\bkmkend AAAAAAAGCO}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAAGCR}{\bkmkend AAAAAAAGCR}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAAGCU}{\bkmkend AAAAAAAGCU}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAAGCV}{\bkmkend AAAAAAAGCV}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAAGCW}{\bkmkend AAAAAAAGCW}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAAGCY}{\bkmkend AAAAAAAGCY}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAAGCZ}{\bkmkend AAAAAAAGCZ}
00203     \par
{\bkmkstart AAAAAAAGDA}{\bkmkend AAAAAAAGDA}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAAGDD}{\bkmkend AAAAAAAGDD}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAAGDF}{\bkmkend AAAAAAAGDF}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAAGDG}{\bkmkend AAAAAAAGDG}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAAGDI}{\bkmkend AAAAAAAGDI}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAAGDK}{\bkmkend AAAAAAAGDK}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAAGDN}{\bkmkend AAAAAAAGDN}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAAGDR}{\bkmkend AAAAAAAGDR}
00211     \par
{\bkmkstart AAAAAAAGDS}{\bkmkend AAAAAAAGDS}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAGDU}{\bkmkend AAAAAAAGDU}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAAGDV}{\bkmkend AAAAAAAGDV}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAAGDX}{\bkmkend AAAAAAAGDX}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAAGDZ}{\bkmkend AAAAAAAGDZ}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAGEB}{\bkmkend AAAAAAAGEB}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAGED}{\bkmkend AAAAAAAGED}
00218     \par
{\bkmkstart AAAAAAAGEF}{\bkmkend AAAAAAAGEF}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAGEH}{\bkmkend AAAAAAAGEH}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAAGEJ}{\bkmkend AAAAAAAGEJ}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAAGEL}{\bkmkend AAAAAAAGEL}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAAGEO}{\bkmkend AAAAAAAGEO}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAGEQ}{\bkmkend AAAAAAAGEQ}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAGER}{\bkmkend AAAAAAAGER}
00225     \par
{\bkmkstart AAAAAAAGES}{\bkmkend AAAAAAAGES}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAGEU}{\bkmkend AAAAAAAGEU}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAAGEX}{\bkmkend AAAAAAAGEX}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAAGEZ}{\bkmkend AAAAAAAGEZ}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAAGFA}{\bkmkend AAAAAAAGFA}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAGFC}{\bkmkend AAAAAAAGFC}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAGFE}{\bkmkend AAAAAAAGFE}
00232 \}\par
{\bkmkstart AAAAAAAGFG}{\bkmkend AAAAAAAGFG}
00233 \par
{\bkmkstart AAAAAAAGFJ}{\bkmkend AAAAAAAGFJ}
00238 TEST_F(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAAGFL}{\bkmkend AAAAAAAGFL}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAAGFM}{\bkmkend AAAAAAAGFM}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAAGFR}{\bkmkend AAAAAAAGFR}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAAGFT}{\bkmkend AAAAAAAGFT}
00242     \par
{\bkmkstart AAAAAAAGFU}{\bkmkend AAAAAAAGFU}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAAGFW}{\bkmkend AAAAAAAGFW}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAAGFX}{\bkmkend AAAAAAAGFX}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAAGFY}{\bkmkend AAAAAAAGFY}
00246     \par
{\bkmkstart AAAAAAAGFZ}{\bkmkend AAAAAAAGFZ}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAAGGA}{\bkmkend AAAAAAAGGA}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAGGC}{\bkmkend AAAAAAAGGC}
00249     \par
{\bkmkstart AAAAAAAGGD}{\bkmkend AAAAAAAGGD}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAGGF}{\bkmkend AAAAAAAGGF}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAGGG}{\bkmkend AAAAAAAGGG}
00252     \par
{\bkmkstart AAAAAAAGGH}{\bkmkend AAAAAAAGGH}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAAGGJ}{\bkmkend AAAAAAAGGJ}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAAGGK}{\bkmkend AAAAAAAGGK}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAAGGL}{\bkmkend AAAAAAAGGL}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAAGGN}{\bkmkend AAAAAAAGGN}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAAGGO}{\bkmkend AAAAAAAGGO}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAAGGQ}{\bkmkend AAAAAAAGGQ}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 2);\par
{\bkmkstart AAAAAAAGGR}{\bkmkend AAAAAAAGGR}
00260     \par
{\bkmkstart AAAAAAAGGS}{\bkmkend AAAAAAAGGS}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAAGGT}{\bkmkend AAAAAAAGGT}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAAGGV}{\bkmkend AAAAAAAGGV}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAGGW}{\bkmkend AAAAAAAGGW}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAAGGX}{\bkmkend AAAAAAAGGX}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAAGGY}{\bkmkend AAAAAAAGGY}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAAGGZ}{\bkmkend AAAAAAAGGZ}
00267     \par
{\bkmkstart AAAAAAAGHA}{\bkmkend AAAAAAAGHA}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAAGHB}{\bkmkend AAAAAAAGHB}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAAGHC}{\bkmkend AAAAAAAGHC}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAGHD}{\bkmkend AAAAAAAGHD}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAAGHE}{\bkmkend AAAAAAAGHE}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAGHF}{\bkmkend AAAAAAAGHF}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAAGHH}{\bkmkend AAAAAAAGHH}
00274     \par
{\bkmkstart AAAAAAAGHI}{\bkmkend AAAAAAAGHI}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAAGHJ}{\bkmkend AAAAAAAGHJ}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAGHL}{\bkmkend AAAAAAAGHL}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAAGHM}{\bkmkend AAAAAAAGHM}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAGHN}{\bkmkend AAAAAAAGHN}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAGHO}{\bkmkend AAAAAAAGHO}
00280     \par
{\bkmkstart AAAAAAAGHP}{\bkmkend AAAAAAAGHP}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAAGHQ}{\bkmkend AAAAAAAGHQ}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAGHR}{\bkmkend AAAAAAAGHR}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAAGHT}{\bkmkend AAAAAAAGHT}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAGHV}{\bkmkend AAAAAAAGHV}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAGHX}{\bkmkend AAAAAAAGHX}
00286 \}\par
{\bkmkstart AAAAAAAGHY}{\bkmkend AAAAAAAGHY}
00287 \par
{\bkmkstart AAAAAAAGHZ}{\bkmkend AAAAAAAGHZ}
00292 TEST_F(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAAGIA}{\bkmkend AAAAAAAGIA}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAAGIB}{\bkmkend AAAAAAAGIB}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAGIC}{\bkmkend AAAAAAAGIC}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAGID}{\bkmkend AAAAAAAGID}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAAGIE}{\bkmkend AAAAAAAGIE}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAAGIF}{\bkmkend AAAAAAAGIF}
00298     \par
{\bkmkstart AAAAAAAGIG}{\bkmkend AAAAAAAGIG}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAAGIH}{\bkmkend AAAAAAAGIH}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAAGII}{\bkmkend AAAAAAAGII}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGIJ}{\bkmkend AAAAAAAGIJ}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAAGIK}{\bkmkend AAAAAAAGIK}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGIL}{\bkmkend AAAAAAAGIL}
00304     \par
{\bkmkstart AAAAAAAGIM}{\bkmkend AAAAAAAGIM}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAAGIN}{\bkmkend AAAAAAAGIN}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAAGIO}{\bkmkend AAAAAAAGIO}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAAGIP}{\bkmkend AAAAAAAGIP}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAAGIQ}{\bkmkend AAAAAAAGIQ}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAAGIR}{\bkmkend AAAAAAAGIR}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), std::string_view::npos); {\cf20 // String contains null characters, so "World" search fails}\par
{\bkmkstart AAAAAAAGIS}{\bkmkend AAAAAAAGIS}
00311     \par
{\bkmkstart AAAAAAAGIT}{\bkmkend AAAAAAAGIT}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAAGIU}{\bkmkend AAAAAAAGIU}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAAGIV}{\bkmkend AAAAAAAGIV}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAAGIW}{\bkmkend AAAAAAAGIW}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAAGIX}{\bkmkend AAAAAAAGIX}
00316     \}\par
{\bkmkstart AAAAAAAGIY}{\bkmkend AAAAAAAGIY}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAAGIZ}{\bkmkend AAAAAAAGIZ}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAAGJA}{\bkmkend AAAAAAAGJA}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAGJB}{\bkmkend AAAAAAAGJB}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAGJC}{\bkmkend AAAAAAAGJC}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAAGJD}{\bkmkend AAAAAAAGJD}
00322     \par
{\bkmkstart AAAAAAAGJE}{\bkmkend AAAAAAAGJE}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAGJF}{\bkmkend AAAAAAAGJF}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGJG}{\bkmkend AAAAAAAGJG}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAGJH}{\bkmkend AAAAAAAGJH}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAAGJI}{\bkmkend AAAAAAAGJI}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAGJJ}{\bkmkend AAAAAAAGJJ}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGJK}{\bkmkend AAAAAAAGJK}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAGJL}{\bkmkend AAAAAAAGJL}
00330 \}\par
{\bkmkstart AAAAAAAGJM}{\bkmkend AAAAAAAGJM}
00331 \par
{\bkmkstart AAAAAAAGJN}{\bkmkend AAAAAAAGJN}
00336 TEST_F(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAAGJO}{\bkmkend AAAAAAAGJO}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAAGJP}{\bkmkend AAAAAAAGJP}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAAGJQ}{\bkmkend AAAAAAAGJQ}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAGJR}{\bkmkend AAAAAAAGJR}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAAGJS}{\bkmkend AAAAAAAGJS}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAAGJT}{\bkmkend AAAAAAAGJT}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAAGJU}{\bkmkend AAAAAAAGJU}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAAGJV}{\bkmkend AAAAAAAGJV}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAGJW}{\bkmkend AAAAAAAGJW}
00345     \par
{\bkmkstart AAAAAAAGJX}{\bkmkend AAAAAAAGJX}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAAGJY}{\bkmkend AAAAAAAGJY}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAAGJZ}{\bkmkend AAAAAAAGJZ}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAAGKA}{\bkmkend AAAAAAAGKA}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAAGKB}{\bkmkend AAAAAAAGKB}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAAGKC}{\bkmkend AAAAAAAGKC}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAAGKD}{\bkmkend AAAAAAAGKD}
00352     \par
{\bkmkstart AAAAAAAGKE}{\bkmkend AAAAAAAGKE}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAAGKF}{\bkmkend AAAAAAAGKF}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAAGKG}{\bkmkend AAAAAAAGKG}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAAGKH}{\bkmkend AAAAAAAGKH}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAAGKI}{\bkmkend AAAAAAAGKI}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAAGKJ}{\bkmkend AAAAAAAGKJ}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAGKK}{\bkmkend AAAAAAAGKK}
00359     \par
{\bkmkstart AAAAAAAGKL}{\bkmkend AAAAAAAGKL}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAAGKM}{\bkmkend AAAAAAAGKM}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAAGKN}{\bkmkend AAAAAAAGKN}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAAGKP}{\bkmkend AAAAAAAGKP}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAAGKQ}{\bkmkend AAAAAAAGKQ}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAAGKR}{\bkmkend AAAAAAAGKR}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAGKS}{\bkmkend AAAAAAAGKS}
00366     \par
{\bkmkstart AAAAAAAGKT}{\bkmkend AAAAAAAGKT}
00367     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAGKU}{\bkmkend AAAAAAAGKU}
00368     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAGKV}{\bkmkend AAAAAAAGKV}
00369     EXPECT_EQ(sv.length(), 14);\par
{\bkmkstart AAAAAAAGKW}{\bkmkend AAAAAAAGKW}
00370     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAGKX}{\bkmkend AAAAAAAGKX}
00371     EXPECT_EQ(sv.find({\cf23 'C'}), 0);\par
{\bkmkstart AAAAAAAGKZ}{\bkmkend AAAAAAAGKZ}
00372     EXPECT_EQ(sv.find({\cf22 "test"}), 10);\par
{\bkmkstart AAAAAAAGLA}{\bkmkend AAAAAAAGLA}
00373     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGLB}{\bkmkend AAAAAAAGLB}
00374     \par
{\bkmkstart AAAAAAAGLC}{\bkmkend AAAAAAAGLC}
00375     EXPECT_EQ(wsv.size(), 19);\par
{\bkmkstart AAAAAAAGLD}{\bkmkend AAAAAAAGLD}
00376     EXPECT_EQ(wsv.length(), 19);\par
{\bkmkstart AAAAAAAGLF}{\bkmkend AAAAAAAGLF}
00377     EXPECT_FALSE(wsv.empty());\par
{\bkmkstart AAAAAAAGLG}{\bkmkend AAAAAAAGLG}
00378     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAGLH}{\bkmkend AAAAAAAGLH}
00379     \par
{\bkmkstart AAAAAAAGLI}{\bkmkend AAAAAAAGLI}
00380     EXPECT_EQ(sv16.size(), 21);\par
{\bkmkstart AAAAAAAGLJ}{\bkmkend AAAAAAAGLJ}
00381     EXPECT_EQ(sv16.length(), 21);\par
{\bkmkstart AAAAAAAGLK}{\bkmkend AAAAAAAGLK}
00382     EXPECT_FALSE(sv16.empty());\par
{\bkmkstart AAAAAAAGLL}{\bkmkend AAAAAAAGLL}
00383     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAGLM}{\bkmkend AAAAAAAGLM}
00384     \par
{\bkmkstart AAAAAAAGLN}{\bkmkend AAAAAAAGLN}
00385     EXPECT_EQ(sv32.size(), 21);\par
{\bkmkstart AAAAAAAGLO}{\bkmkend AAAAAAAGLO}
00386     EXPECT_EQ(sv32.length(), 21);\par
{\bkmkstart AAAAAAAGLP}{\bkmkend AAAAAAAGLP}
00387     EXPECT_FALSE(sv32.empty());\par
{\bkmkstart AAAAAAAGLQ}{\bkmkend AAAAAAAGLQ}
00388     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAGLS}{\bkmkend AAAAAAAGLS}
00389 \}\par
{\bkmkstart AAAAAAAGLT}{\bkmkend AAAAAAAGLT}
00390 \par
{\bkmkstart AAAAAAAGLU}{\bkmkend AAAAAAAGLU}
00395 TEST_F(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAAGLV}{\bkmkend AAAAAAAGLV}
00396     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAAGLW}{\bkmkend AAAAAAAGLW}
00397     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAAGLX}{\bkmkend AAAAAAAGLX}
00398     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAAGLY}{\bkmkend AAAAAAAGLY}
00399     \par
{\bkmkstart AAAAAAAGLZ}{\bkmkend AAAAAAAGLZ}
00400     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAAGMA}{\bkmkend AAAAAAAGMA}
00401     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAAGMC}{\bkmkend AAAAAAAGMC}
00402     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAAGMD}{\bkmkend AAAAAAAGMD}
00403     \par
{\bkmkstart AAAAAAAGME}{\bkmkend AAAAAAAGME}
00404     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAAGMF}{\bkmkend AAAAAAAGMF}
00405     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAAGMG}{\bkmkend AAAAAAAGMG}
00406     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGMH}{\bkmkend AAAAAAAGMH}
00407     \par
{\bkmkstart AAAAAAAGMI}{\bkmkend AAAAAAAGMI}
00408     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAAGMJ}{\bkmkend AAAAAAAGMJ}
00409     std::string pattern_str;\par
{\bkmkstart AAAAAAAGMK}{\bkmkend AAAAAAAGMK}
00410     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAGMM}{\bkmkend AAAAAAAGMM}
00411         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAAGMN}{\bkmkend AAAAAAAGMN}
00412     \}\par
{\bkmkstart AAAAAAAGMO}{\bkmkend AAAAAAAGMO}
00413     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAAGMP}{\bkmkend AAAAAAAGMP}
00414     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAAGMQ}{\bkmkend AAAAAAAGMQ}
00415     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAAGMR}{\bkmkend AAAAAAAGMR}
00416     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAAGMT}{\bkmkend AAAAAAAGMT}
00417     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAAGMU}{\bkmkend AAAAAAAGMU}
00418     \par
{\bkmkstart AAAAAAAGMV}{\bkmkend AAAAAAAGMV}
00419     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAAGMW}{\bkmkend AAAAAAAGMW}
00420     std::string mixed_str;\par
{\bkmkstart AAAAAAAGMZ}{\bkmkend AAAAAAAGMZ}
00421     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAGNB}{\bkmkend AAAAAAAGNB}
00422         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAAGND}{\bkmkend AAAAAAAGND}
00423     \}\par
{\bkmkstart AAAAAAAGNE}{\bkmkend AAAAAAAGNE}
00424     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAAGNF}{\bkmkend AAAAAAAGNF}
00425     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAAGNH}{\bkmkend AAAAAAAGNH}
00426     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAGNJ}{\bkmkend AAAAAAAGNJ}
00427     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAGNK}{\bkmkend AAAAAAAGNK}
00428 \}\par
{\bkmkstart AAAAAAAGNL}{\bkmkend AAAAAAAGNL}
00429 \par
{\bkmkstart AAAAAAAGNM}{\bkmkend AAAAAAAGNM}
00430 \} {\cf20 // namespace}\par
}
}