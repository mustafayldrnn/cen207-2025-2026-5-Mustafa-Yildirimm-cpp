{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAAGVW}
{\bkmkend AAAAAAAGVW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVY" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGYO}{\bkmkend AAAAAAAGYO}
00001 \par
{\bkmkstart AAAAAAAGYW}{\bkmkend AAAAAAAGYW}
00010 \par
{\bkmkstart AAAAAAAGYY}{\bkmkend AAAAAAAGYY}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAHAL}{\bkmkend AAAAAAAHAL}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAHBK}{\bkmkend AAAAAAAHBK}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAHCD}{\bkmkend AAAAAAAHCD}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAHCU}{\bkmkend AAAAAAAHCU}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAHDH}{\bkmkend AAAAAAAHDH}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAHDT}{\bkmkend AAAAAAAHDT}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAHEM}{\bkmkend AAAAAAAHEM}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAHEU}{\bkmkend AAAAAAAHEU}
00019 \par
{\bkmkstart AAAAAAAHEW}{\bkmkend AAAAAAAHEW}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAHEZ}{\bkmkend AAAAAAAHEZ}
00021 \par
{\bkmkstart AAAAAAAHFB}{\bkmkend AAAAAAAHFB}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAHFF}{\bkmkend AAAAAAAHFF}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAAHFH}{\bkmkend AAAAAAAHFH}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAHFS}{\bkmkend AAAAAAAHFS}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAHFU}{\bkmkend AAAAAAAHFU}
00030     \}\par
{\bkmkstart AAAAAAAHFX}{\bkmkend AAAAAAAHFX}
00031     \par
{\bkmkstart AAAAAAAHGA}{\bkmkend AAAAAAAHGA}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAHGL}{\bkmkend AAAAAAAHGL}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAHGN}{\bkmkend AAAAAAAHGN}
00034     \}\par
{\bkmkstart AAAAAAAHGP}{\bkmkend AAAAAAAHGP}
00035 \};\par
{\bkmkstart AAAAAAAHGR}{\bkmkend AAAAAAAHGR}
00036 \par
{\bkmkstart AAAAAAAHGS}{\bkmkend AAAAAAAHGS}
00041 TEST_F(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAAHHI}{\bkmkend AAAAAAAHHI}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAAHHJ}{\bkmkend AAAAAAAHHJ}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAHHN}{\bkmkend AAAAAAAHHN}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAAHHS}{\bkmkend AAAAAAAHHS}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAAHHU}{\bkmkend AAAAAAAHHU}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAAHHV}{\bkmkend AAAAAAAHHV}
00047     \par
{\bkmkstart AAAAAAAHHX}{\bkmkend AAAAAAAHHX}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAHHY}{\bkmkend AAAAAAAHHY}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAAHHZ}{\bkmkend AAAAAAAHHZ}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAAHID}{\bkmkend AAAAAAAHID}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAAHIE}{\bkmkend AAAAAAAHIE}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAAHIG}{\bkmkend AAAAAAAHIG}
00053     \par
{\bkmkstart AAAAAAAHIH}{\bkmkend AAAAAAAHIH}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAHIJ}{\bkmkend AAAAAAAHIJ}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAAHIL}{\bkmkend AAAAAAAHIL}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAAHIO}{\bkmkend AAAAAAAHIO}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAAHIQ}{\bkmkend AAAAAAAHIQ}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAAHIT}{\bkmkend AAAAAAAHIT}
00059     \par
{\bkmkstart AAAAAAAHIU}{\bkmkend AAAAAAAHIU}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAAHIV}{\bkmkend AAAAAAAHIV}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAAHJA}{\bkmkend AAAAAAAHJA}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAAHJD}{\bkmkend AAAAAAAHJD}
00063     EXPECT_EQ(sv4.size(), 75);\par
{\bkmkstart AAAAAAAHJF}{\bkmkend AAAAAAAHJF}
00064     EXPECT_EQ(sv4.length(), 75);\par
{\bkmkstart AAAAAAAHJJ}{\bkmkend AAAAAAAHJJ}
00065     \par
{\bkmkstart AAAAAAAHJK}{\bkmkend AAAAAAAHJK}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAAHJM}{\bkmkend AAAAAAAHJM}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAAHJP}{\bkmkend AAAAAAAHJP}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAAHJS}{\bkmkend AAAAAAAHJS}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAAHJW}{\bkmkend AAAAAAAHJW}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAAHKA}{\bkmkend AAAAAAAHKA}
00071     \par
{\bkmkstart AAAAAAAHKC}{\bkmkend AAAAAAAHKC}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAHKE}{\bkmkend AAAAAAAHKE}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAHKI}{\bkmkend AAAAAAAHKI}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAHKN}{\bkmkend AAAAAAAHKN}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAAHKP}{\bkmkend AAAAAAAHKP}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAAHKS}{\bkmkend AAAAAAAHKS}
00077     \par
{\bkmkstart AAAAAAAHKT}{\bkmkend AAAAAAAHKT}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAHKW}{\bkmkend AAAAAAAHKW}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAHLA}{\bkmkend AAAAAAAHLA}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAHLE}{\bkmkend AAAAAAAHLE}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAAHLG}{\bkmkend AAAAAAAHLG}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAAHLI}{\bkmkend AAAAAAAHLI}
00083     \par
{\bkmkstart AAAAAAAHLJ}{\bkmkend AAAAAAAHLJ}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAHLM}{\bkmkend AAAAAAAHLM}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAHLQ}{\bkmkend AAAAAAAHLQ}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAHLW}{\bkmkend AAAAAAAHLW}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAAHMA}{\bkmkend AAAAAAAHMA}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAAHMF}{\bkmkend AAAAAAAHMF}
00089 \}\par
{\bkmkstart AAAAAAAHMG}{\bkmkend AAAAAAAHMG}
00090 \par
{\bkmkstart AAAAAAAHMJ}{\bkmkend AAAAAAAHMJ}
00095 TEST_F(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAAHMN}{\bkmkend AAAAAAAHMN}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHMS}{\bkmkend AAAAAAAHMS}
00097     \par
{\bkmkstart AAAAAAAHMU}{\bkmkend AAAAAAAHMU}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAAHMV}{\bkmkend AAAAAAAHMV}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHMZ}{\bkmkend AAAAAAAHMZ}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHND}{\bkmkend AAAAAAAHND}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHNH}{\bkmkend AAAAAAAHNH}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHNM}{\bkmkend AAAAAAAHNM}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAAHNR}{\bkmkend AAAAAAAHNR}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAAHNX}{\bkmkend AAAAAAAHNX}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAHNY}{\bkmkend AAAAAAAHNY}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 9);\par
{\bkmkstart AAAAAAAHOA}{\bkmkend AAAAAAAHOA}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAHOD}{\bkmkend AAAAAAAHOD}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAHOI}{\bkmkend AAAAAAAHOI}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAHOO}{\bkmkend AAAAAAAHOO}
00110     \par
{\bkmkstart AAAAAAAHOQ}{\bkmkend AAAAAAAHOQ}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAAHOT}{\bkmkend AAAAAAAHOT}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAHOY}{\bkmkend AAAAAAAHOY}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAAHPA}{\bkmkend AAAAAAAHPA}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAAHPD}{\bkmkend AAAAAAAHPD}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAAHPF}{\bkmkend AAAAAAAHPF}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAAHPI}{\bkmkend AAAAAAAHPI}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAAHPL}{\bkmkend AAAAAAAHPL}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAHPQ}{\bkmkend AAAAAAAHPQ}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAAHPU}{\bkmkend AAAAAAAHPU}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAAHPY}{\bkmkend AAAAAAAHPY}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAAHQE}{\bkmkend AAAAAAAHQE}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 11);\par
{\bkmkstart AAAAAAAHQH}{\bkmkend AAAAAAAHQH}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAAHQL}{\bkmkend AAAAAAAHQL}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAHQP}{\bkmkend AAAAAAAHQP}
00125     \par
{\bkmkstart AAAAAAAHQR}{\bkmkend AAAAAAAHQR}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAAHQT}{\bkmkend AAAAAAAHQT}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAHQW}{\bkmkend AAAAAAAHQW}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAHRA}{\bkmkend AAAAAAAHRA}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAAHRC}{\bkmkend AAAAAAAHRC}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAAHRG}{\bkmkend AAAAAAAHRG}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAAHRJ}{\bkmkend AAAAAAAHRJ}
00132     \par
{\bkmkstart AAAAAAAHRN}{\bkmkend AAAAAAAHRN}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAHRS}{\bkmkend AAAAAAAHRS}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAHRV}{\bkmkend AAAAAAAHRV}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAHSA}{\bkmkend AAAAAAAHSA}
00136     \par
{\bkmkstart AAAAAAAHSD}{\bkmkend AAAAAAAHSD}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAAHSG}{\bkmkend AAAAAAAHSG}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAHSL}{\bkmkend AAAAAAAHSL}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAHSO}{\bkmkend AAAAAAAHSO}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAHSR}{\bkmkend AAAAAAAHSR}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAHSV}{\bkmkend AAAAAAAHSV}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAHTD}{\bkmkend AAAAAAAHTD}
00143     \par
{\bkmkstart AAAAAAAHTF}{\bkmkend AAAAAAAHTF}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAAHTI}{\bkmkend AAAAAAAHTI}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHTO}{\bkmkend AAAAAAAHTO}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHTT}{\bkmkend AAAAAAAHTT}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHTW}{\bkmkend AAAAAAAHTW}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHTZ}{\bkmkend AAAAAAAHTZ}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHUG}{\bkmkend AAAAAAAHUG}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAAHUK}{\bkmkend AAAAAAAHUK}
00151     \par
{\bkmkstart AAAAAAAHUN}{\bkmkend AAAAAAAHUN}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAAHUP}{\bkmkend AAAAAAAHUP}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHUW}{\bkmkend AAAAAAAHUW}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHVA}{\bkmkend AAAAAAAHVA}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHVD}{\bkmkend AAAAAAAHVD}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHVH}{\bkmkend AAAAAAAHVH}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHVN}{\bkmkend AAAAAAAHVN}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAAHVS}{\bkmkend AAAAAAAHVS}
00159     \par
{\bkmkstart AAAAAAAHVT}{\bkmkend AAAAAAAHVT}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAAHVV}{\bkmkend AAAAAAAHVV}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHVY}{\bkmkend AAAAAAAHVY}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHWA}{\bkmkend AAAAAAAHWA}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHWD}{\bkmkend AAAAAAAHWD}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHWG}{\bkmkend AAAAAAAHWG}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHWJ}{\bkmkend AAAAAAAHWJ}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAAHWN}{\bkmkend AAAAAAAHWN}
00167 \}\par
{\bkmkstart AAAAAAAHWP}{\bkmkend AAAAAAAHWP}
00168 \par
{\bkmkstart AAAAAAAHWR}{\bkmkend AAAAAAAHWR}
00173 TEST_F(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAAHYK}{\bkmkend AAAAAAAHYK}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAAHYM}{\bkmkend AAAAAAAHYM}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAAHYQ}{\bkmkend AAAAAAAHYQ}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAAHYU}{\bkmkend AAAAAAAHYU}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAAHYX}{\bkmkend AAAAAAAHYX}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHZI}{\bkmkend AAAAAAAHZI}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHZK}{\bkmkend AAAAAAAHZK}
00180     \par
{\bkmkstart AAAAAAAHZM}{\bkmkend AAAAAAAHZM}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAAHZP}{\bkmkend AAAAAAAHZP}
00182     std::string str2;\par
{\bkmkstart AAAAAAAHZU}{\bkmkend AAAAAAAHZU}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAAHZW}{\bkmkend AAAAAAAHZW}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAAIAC}{\bkmkend AAAAAAAIAC}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAIAF}{\bkmkend AAAAAAAIAF}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAAIAH}{\bkmkend AAAAAAAIAH}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAAIAK}{\bkmkend AAAAAAAIAK}
00188     \par
{\bkmkstart AAAAAAAIAN}{\bkmkend AAAAAAAIAN}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAAIAQ}{\bkmkend AAAAAAAIAQ}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAAIBA}{\bkmkend AAAAAAAIBA}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAAIBE}{\bkmkend AAAAAAAIBE}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAAIBG}{\bkmkend AAAAAAAIBG}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAIBK}{\bkmkend AAAAAAAIBK}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAAIBO}{\bkmkend AAAAAAAIBO}
00195     \par
{\bkmkstart AAAAAAAIBQ}{\bkmkend AAAAAAAIBQ}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAAIBS}{\bkmkend AAAAAAAIBS}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAAIBW}{\bkmkend AAAAAAAIBW}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAAIBY}{\bkmkend AAAAAAAIBY}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAAICB}{\bkmkend AAAAAAAICB}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAAICD}{\bkmkend AAAAAAAICD}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAAICG}{\bkmkend AAAAAAAICG}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAAICI}{\bkmkend AAAAAAAICI}
00203     \par
{\bkmkstart AAAAAAAICJ}{\bkmkend AAAAAAAICJ}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAAICK}{\bkmkend AAAAAAAICK}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAAICO}{\bkmkend AAAAAAAICO}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAAICT}{\bkmkend AAAAAAAICT}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAAICW}{\bkmkend AAAAAAAICW}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAAICZ}{\bkmkend AAAAAAAICZ}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAAIDD}{\bkmkend AAAAAAAIDD}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAAIDG}{\bkmkend AAAAAAAIDG}
00211     \par
{\bkmkstart AAAAAAAIDJ}{\bkmkend AAAAAAAIDJ}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAIDM}{\bkmkend AAAAAAAIDM}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAAIDQ}{\bkmkend AAAAAAAIDQ}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAAIDR}{\bkmkend AAAAAAAIDR}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAAIDS}{\bkmkend AAAAAAAIDS}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAIDU}{\bkmkend AAAAAAAIDU}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAIDY}{\bkmkend AAAAAAAIDY}
00218     \par
{\bkmkstart AAAAAAAIEA}{\bkmkend AAAAAAAIEA}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAIEC}{\bkmkend AAAAAAAIEC}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAAIEF}{\bkmkend AAAAAAAIEF}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAAIEI}{\bkmkend AAAAAAAIEI}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAAIEK}{\bkmkend AAAAAAAIEK}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAIEM}{\bkmkend AAAAAAAIEM}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAIEN}{\bkmkend AAAAAAAIEN}
00225     \par
{\bkmkstart AAAAAAAIEQ}{\bkmkend AAAAAAAIEQ}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAIER}{\bkmkend AAAAAAAIER}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAAIET}{\bkmkend AAAAAAAIET}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAAIEV}{\bkmkend AAAAAAAIEV}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAAIEY}{\bkmkend AAAAAAAIEY}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAIFB}{\bkmkend AAAAAAAIFB}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAIFE}{\bkmkend AAAAAAAIFE}
00232 \}\par
{\bkmkstart AAAAAAAIFF}{\bkmkend AAAAAAAIFF}
00233 \par
{\bkmkstart AAAAAAAIFI}{\bkmkend AAAAAAAIFI}
00238 TEST_F(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAAIFN}{\bkmkend AAAAAAAIFN}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAAIFO}{\bkmkend AAAAAAAIFO}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAAIFR}{\bkmkend AAAAAAAIFR}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAAIFU}{\bkmkend AAAAAAAIFU}
00242     \par
{\bkmkstart AAAAAAAIFV}{\bkmkend AAAAAAAIFV}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAAIFX}{\bkmkend AAAAAAAIFX}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAAIGC}{\bkmkend AAAAAAAIGC}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAAIGE}{\bkmkend AAAAAAAIGE}
00246     \par
{\bkmkstart AAAAAAAIGG}{\bkmkend AAAAAAAIGG}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAAIGI}{\bkmkend AAAAAAAIGI}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAIGK}{\bkmkend AAAAAAAIGK}
00249     \par
{\bkmkstart AAAAAAAIGN}{\bkmkend AAAAAAAIGN}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAIGR}{\bkmkend AAAAAAAIGR}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAIGU}{\bkmkend AAAAAAAIGU}
00252     \par
{\bkmkstart AAAAAAAIGV}{\bkmkend AAAAAAAIGV}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAAIGZ}{\bkmkend AAAAAAAIGZ}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAAIHB}{\bkmkend AAAAAAAIHB}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAAIHE}{\bkmkend AAAAAAAIHE}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAAIHH}{\bkmkend AAAAAAAIHH}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAAIHJ}{\bkmkend AAAAAAAIHJ}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAAIHM}{\bkmkend AAAAAAAIHM}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 2);\par
{\bkmkstart AAAAAAAIHO}{\bkmkend AAAAAAAIHO}
00260     \par
{\bkmkstart AAAAAAAIHQ}{\bkmkend AAAAAAAIHQ}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAAIHS}{\bkmkend AAAAAAAIHS}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAAIHV}{\bkmkend AAAAAAAIHV}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAIHX}{\bkmkend AAAAAAAIHX}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAAIHZ}{\bkmkend AAAAAAAIHZ}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAAIIA}{\bkmkend AAAAAAAIIA}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAAIIE}{\bkmkend AAAAAAAIIE}
00267     \par
{\bkmkstart AAAAAAAIIF}{\bkmkend AAAAAAAIIF}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAAIIH}{\bkmkend AAAAAAAIIH}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAAIIJ}{\bkmkend AAAAAAAIIJ}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAIIK}{\bkmkend AAAAAAAIIK}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAAIIL}{\bkmkend AAAAAAAIIL}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAIIN}{\bkmkend AAAAAAAIIN}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAAIIR}{\bkmkend AAAAAAAIIR}
00274     \par
{\bkmkstart AAAAAAAIIS}{\bkmkend AAAAAAAIIS}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAAIIU}{\bkmkend AAAAAAAIIU}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAIIW}{\bkmkend AAAAAAAIIW}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAAIIY}{\bkmkend AAAAAAAIIY}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAIIZ}{\bkmkend AAAAAAAIIZ}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAIJA}{\bkmkend AAAAAAAIJA}
00280     \par
{\bkmkstart AAAAAAAIJB}{\bkmkend AAAAAAAIJB}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAAIJC}{\bkmkend AAAAAAAIJC}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAIJD}{\bkmkend AAAAAAAIJD}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAAIJJ}{\bkmkend AAAAAAAIJJ}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAIJK}{\bkmkend AAAAAAAIJK}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAIJL}{\bkmkend AAAAAAAIJL}
00286 \}\par
{\bkmkstart AAAAAAAIJP}{\bkmkend AAAAAAAIJP}
00287 \par
{\bkmkstart AAAAAAAIJR}{\bkmkend AAAAAAAIJR}
00292 TEST_F(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAAIJT}{\bkmkend AAAAAAAIJT}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAAIJU}{\bkmkend AAAAAAAIJU}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAIJW}{\bkmkend AAAAAAAIJW}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAIJZ}{\bkmkend AAAAAAAIJZ}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAAIKB}{\bkmkend AAAAAAAIKB}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAAIKC}{\bkmkend AAAAAAAIKC}
00298     \par
{\bkmkstart AAAAAAAIKE}{\bkmkend AAAAAAAIKE}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAAIKG}{\bkmkend AAAAAAAIKG}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAAIKL}{\bkmkend AAAAAAAIKL}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIKM}{\bkmkend AAAAAAAIKM}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAAIKN}{\bkmkend AAAAAAAIKN}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIKO}{\bkmkend AAAAAAAIKO}
00304     \par
{\bkmkstart AAAAAAAIKP}{\bkmkend AAAAAAAIKP}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAAIKQ}{\bkmkend AAAAAAAIKQ}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAAIKS}{\bkmkend AAAAAAAIKS}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAAIKT}{\bkmkend AAAAAAAIKT}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAAIKV}{\bkmkend AAAAAAAIKV}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAAIKY}{\bkmkend AAAAAAAIKY}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), std::string_view::npos); {\cf20 // String contains null characters, so "World" search fails}\par
{\bkmkstart AAAAAAAILA}{\bkmkend AAAAAAAILA}
00311     \par
{\bkmkstart AAAAAAAILC}{\bkmkend AAAAAAAILC}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAAILD}{\bkmkend AAAAAAAILD}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAAILF}{\bkmkend AAAAAAAILF}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAAILI}{\bkmkend AAAAAAAILI}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAAIMD}{\bkmkend AAAAAAAIMD}
00316     \}\par
{\bkmkstart AAAAAAAIMF}{\bkmkend AAAAAAAIMF}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAAIMI}{\bkmkend AAAAAAAIMI}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAAIMQ}{\bkmkend AAAAAAAIMQ}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAIMU}{\bkmkend AAAAAAAIMU}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAIMW}{\bkmkend AAAAAAAIMW}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAAINH}{\bkmkend AAAAAAAINH}
00322     \par
{\bkmkstart AAAAAAAINK}{\bkmkend AAAAAAAINK}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAINL}{\bkmkend AAAAAAAINL}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAINO}{\bkmkend AAAAAAAINO}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAINR}{\bkmkend AAAAAAAINR}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAAINU}{\bkmkend AAAAAAAINU}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAINX}{\bkmkend AAAAAAAINX}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIOA}{\bkmkend AAAAAAAIOA}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAIOE}{\bkmkend AAAAAAAIOE}
00330 \}\par
{\bkmkstart AAAAAAAIOG}{\bkmkend AAAAAAAIOG}
00331 \par
{\bkmkstart AAAAAAAIOI}{\bkmkend AAAAAAAIOI}
00336 TEST_F(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAAION}{\bkmkend AAAAAAAION}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAAIOQ}{\bkmkend AAAAAAAIOQ}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAAISV}{\bkmkend AAAAAAAISV}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAIYB}{\bkmkend AAAAAAAIYB}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAAIYM}{\bkmkend AAAAAAAIYM}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAAIZN}{\bkmkend AAAAAAAIZN}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAAJBP}{\bkmkend AAAAAAAJBP}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAAJDJ}{\bkmkend AAAAAAAJDJ}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAJEW}{\bkmkend AAAAAAAJEW}
00345     \par
{\bkmkstart AAAAAAAJEY}{\bkmkend AAAAAAAJEY}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAAJFA}{\bkmkend AAAAAAAJFA}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAAJGC}{\bkmkend AAAAAAAJGC}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAAJHQ}{\bkmkend AAAAAAAJHQ}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAAJJC}{\bkmkend AAAAAAAJJC}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAAJJD}{\bkmkend AAAAAAAJJD}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAAJJJ}{\bkmkend AAAAAAAJJJ}
00352     \par
{\bkmkstart AAAAAAAJJK}{\bkmkend AAAAAAAJJK}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAAJJL}{\bkmkend AAAAAAAJJL}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAAJJN}{\bkmkend AAAAAAAJJN}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAAJJO}{\bkmkend AAAAAAAJJO}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAAJJP}{\bkmkend AAAAAAAJJP}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAAJJQ}{\bkmkend AAAAAAAJJQ}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAJJR}{\bkmkend AAAAAAAJJR}
00359     \par
{\bkmkstart AAAAAAAJJS}{\bkmkend AAAAAAAJJS}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAAJJT}{\bkmkend AAAAAAAJJT}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAAJJU}{\bkmkend AAAAAAAJJU}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAAJJV}{\bkmkend AAAAAAAJJV}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAAJJW}{\bkmkend AAAAAAAJJW}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAAJJX}{\bkmkend AAAAAAAJJX}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAJJY}{\bkmkend AAAAAAAJJY}
00366     \par
{\bkmkstart AAAAAAAJJZ}{\bkmkend AAAAAAAJJZ}
00367     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAJKA}{\bkmkend AAAAAAAJKA}
00368     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAJKB}{\bkmkend AAAAAAAJKB}
00369     EXPECT_EQ(sv.length(), 14);\par
{\bkmkstart AAAAAAAJKC}{\bkmkend AAAAAAAJKC}
00370     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAJKD}{\bkmkend AAAAAAAJKD}
00371     EXPECT_EQ(sv.find({\cf23 'C'}), 0);\par
{\bkmkstart AAAAAAAJKE}{\bkmkend AAAAAAAJKE}
00372     EXPECT_EQ(sv.find({\cf22 "test"}), 10);\par
{\bkmkstart AAAAAAAJKF}{\bkmkend AAAAAAAJKF}
00373     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJKG}{\bkmkend AAAAAAAJKG}
00374     \par
{\bkmkstart AAAAAAAJKH}{\bkmkend AAAAAAAJKH}
00375     EXPECT_EQ(wsv.size(), 19);\par
{\bkmkstart AAAAAAAJKI}{\bkmkend AAAAAAAJKI}
00376     EXPECT_EQ(wsv.length(), 19);\par
{\bkmkstart AAAAAAAJKJ}{\bkmkend AAAAAAAJKJ}
00377     EXPECT_FALSE(wsv.empty());\par
{\bkmkstart AAAAAAAJKK}{\bkmkend AAAAAAAJKK}
00378     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAJKL}{\bkmkend AAAAAAAJKL}
00379     \par
{\bkmkstart AAAAAAAJKM}{\bkmkend AAAAAAAJKM}
00380     EXPECT_EQ(sv16.size(), 21);\par
{\bkmkstart AAAAAAAJKN}{\bkmkend AAAAAAAJKN}
00381     EXPECT_EQ(sv16.length(), 21);\par
{\bkmkstart AAAAAAAJKO}{\bkmkend AAAAAAAJKO}
00382     EXPECT_FALSE(sv16.empty());\par
{\bkmkstart AAAAAAAJKP}{\bkmkend AAAAAAAJKP}
00383     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAJKQ}{\bkmkend AAAAAAAJKQ}
00384     \par
{\bkmkstart AAAAAAAJKR}{\bkmkend AAAAAAAJKR}
00385     EXPECT_EQ(sv32.size(), 21);\par
{\bkmkstart AAAAAAAJKT}{\bkmkend AAAAAAAJKT}
00386     EXPECT_EQ(sv32.length(), 21);\par
{\bkmkstart AAAAAAAJKU}{\bkmkend AAAAAAAJKU}
00387     EXPECT_FALSE(sv32.empty());\par
{\bkmkstart AAAAAAAJKV}{\bkmkend AAAAAAAJKV}
00388     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAJKW}{\bkmkend AAAAAAAJKW}
00389 \}\par
{\bkmkstart AAAAAAAJKX}{\bkmkend AAAAAAAJKX}
00390 \par
{\bkmkstart AAAAAAAJKY}{\bkmkend AAAAAAAJKY}
00395 TEST_F(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAAJKZ}{\bkmkend AAAAAAAJKZ}
00396     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAAJLA}{\bkmkend AAAAAAAJLA}
00397     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAAJLB}{\bkmkend AAAAAAAJLB}
00398     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAAJLC}{\bkmkend AAAAAAAJLC}
00399     \par
{\bkmkstart AAAAAAAJLD}{\bkmkend AAAAAAAJLD}
00400     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAAJLE}{\bkmkend AAAAAAAJLE}
00401     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAAJLF}{\bkmkend AAAAAAAJLF}
00402     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAAJLG}{\bkmkend AAAAAAAJLG}
00403     \par
{\bkmkstart AAAAAAAJLH}{\bkmkend AAAAAAAJLH}
00404     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAAJLI}{\bkmkend AAAAAAAJLI}
00405     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAAJLL}{\bkmkend AAAAAAAJLL}
00406     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJLM}{\bkmkend AAAAAAAJLM}
00407     \par
{\bkmkstart AAAAAAAJLN}{\bkmkend AAAAAAAJLN}
00408     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAAJLO}{\bkmkend AAAAAAAJLO}
00409     std::string pattern_str;\par
{\bkmkstart AAAAAAAJLP}{\bkmkend AAAAAAAJLP}
00410     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAJLQ}{\bkmkend AAAAAAAJLQ}
00411         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAAJLR}{\bkmkend AAAAAAAJLR}
00412     \}\par
{\bkmkstart AAAAAAAJLS}{\bkmkend AAAAAAAJLS}
00413     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAAJLT}{\bkmkend AAAAAAAJLT}
00414     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAAJLV}{\bkmkend AAAAAAAJLV}
00415     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAAJLW}{\bkmkend AAAAAAAJLW}
00416     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAAJLY}{\bkmkend AAAAAAAJLY}
00417     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAAJMA}{\bkmkend AAAAAAAJMA}
00418     \par
{\bkmkstart AAAAAAAJMB}{\bkmkend AAAAAAAJMB}
00419     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAAJMC}{\bkmkend AAAAAAAJMC}
00420     std::string mixed_str;\par
{\bkmkstart AAAAAAAJMD}{\bkmkend AAAAAAAJMD}
00421     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAJME}{\bkmkend AAAAAAAJME}
00422         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAAJMF}{\bkmkend AAAAAAAJMF}
00423     \}\par
{\bkmkstart AAAAAAAJMG}{\bkmkend AAAAAAAJMG}
00424     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAAJMH}{\bkmkend AAAAAAAJMH}
00425     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAAJMI}{\bkmkend AAAAAAAJMI}
00426     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAJMJ}{\bkmkend AAAAAAAJMJ}
00427     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAJMK}{\bkmkend AAAAAAAJMK}
00428 \}\par
{\bkmkstart AAAAAAAJML}{\bkmkend AAAAAAAJML}
00429 \par
{\bkmkstart AAAAAAAJMM}{\bkmkend AAAAAAAJMM}
00430 \} {\cf20 // namespace}\par
}
}