{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAADCS}
{\bkmkend AAAAAAADCS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADCT" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADDM}{\bkmkend AAAAAAADDM}
00001 \par
{\bkmkstart AAAAAAADDT}{\bkmkend AAAAAAADDT}
00010 \par
{\bkmkstart AAAAAAADDV}{\bkmkend AAAAAAADDV}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAADEK}{\bkmkend AAAAAAADEK}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAADEW}{\bkmkend AAAAAAADEW}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAADFR}{\bkmkend AAAAAAADFR}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAADGH}{\bkmkend AAAAAAADGH}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAADGY}{\bkmkend AAAAAAADGY}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAADHP}{\bkmkend AAAAAAADHP}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAADIM}{\bkmkend AAAAAAADIM}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAADJE}{\bkmkend AAAAAAADJE}
00019 \par
{\bkmkstart AAAAAAADJG}{\bkmkend AAAAAAADJG}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAADJJ}{\bkmkend AAAAAAADJJ}
00021 \par
{\bkmkstart AAAAAAADJM}{\bkmkend AAAAAAADJM}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAADJR}{\bkmkend AAAAAAADJR}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAADJS}{\bkmkend AAAAAAADJS}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAADKD}{\bkmkend AAAAAAADKD}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAADKF}{\bkmkend AAAAAAADKF}
00030     \}\par
{\bkmkstart AAAAAAADKI}{\bkmkend AAAAAAADKI}
00031     \par
{\bkmkstart AAAAAAADKK}{\bkmkend AAAAAAADKK}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAADKR}{\bkmkend AAAAAAADKR}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAADKT}{\bkmkend AAAAAAADKT}
00034     \}\par
{\bkmkstart AAAAAAADKV}{\bkmkend AAAAAAADKV}
00035 \};\par
{\bkmkstart AAAAAAADKX}{\bkmkend AAAAAAADKX}
00036 \par
{\bkmkstart AAAAAAADKY}{\bkmkend AAAAAAADKY}
00041 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAAEDA}{\bkmkend AAAAAAAEDA}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAAEDB}{\bkmkend AAAAAAAEDB}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEDC}{\bkmkend AAAAAAAEDC}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAAEDD}{\bkmkend AAAAAAAEDD}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAAEDE}{\bkmkend AAAAAAAEDE}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAAEDF}{\bkmkend AAAAAAAEDF}
00047     \par
{\bkmkstart AAAAAAAEDG}{\bkmkend AAAAAAAEDG}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAEDH}{\bkmkend AAAAAAAEDH}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAAEDI}{\bkmkend AAAAAAAEDI}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAAEDJ}{\bkmkend AAAAAAAEDJ}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAAEDK}{\bkmkend AAAAAAAEDK}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAAEDL}{\bkmkend AAAAAAAEDL}
00053     \par
{\bkmkstart AAAAAAAEDM}{\bkmkend AAAAAAAEDM}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAEDN}{\bkmkend AAAAAAAEDN}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAAEDO}{\bkmkend AAAAAAAEDO}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAAEDP}{\bkmkend AAAAAAAEDP}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAAEDQ}{\bkmkend AAAAAAAEDQ}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAAEDR}{\bkmkend AAAAAAAEDR}
00059     \par
{\bkmkstart AAAAAAAEDS}{\bkmkend AAAAAAAEDS}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAAEDT}{\bkmkend AAAAAAAEDT}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAAEDU}{\bkmkend AAAAAAAEDU}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAAEDV}{\bkmkend AAAAAAAEDV}
00063     EXPECT_EQ(sv4.size(), 75);\par
{\bkmkstart AAAAAAAEDW}{\bkmkend AAAAAAAEDW}
00064     EXPECT_EQ(sv4.length(), 75);\par
{\bkmkstart AAAAAAAEDX}{\bkmkend AAAAAAAEDX}
00065     \par
{\bkmkstart AAAAAAAEDY}{\bkmkend AAAAAAAEDY}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAAEDZ}{\bkmkend AAAAAAAEDZ}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAAEEA}{\bkmkend AAAAAAAEEA}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAAEEB}{\bkmkend AAAAAAAEEB}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAAEEC}{\bkmkend AAAAAAAEEC}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAAEED}{\bkmkend AAAAAAAEED}
00071     \par
{\bkmkstart AAAAAAAEEE}{\bkmkend AAAAAAAEEE}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAEEF}{\bkmkend AAAAAAAEEF}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEEG}{\bkmkend AAAAAAAEEG}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAEEH}{\bkmkend AAAAAAAEEH}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAAEEI}{\bkmkend AAAAAAAEEI}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAAEEJ}{\bkmkend AAAAAAAEEJ}
00077     \par
{\bkmkstart AAAAAAAEEK}{\bkmkend AAAAAAAEEK}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAEEL}{\bkmkend AAAAAAAEEL}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEEM}{\bkmkend AAAAAAAEEM}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAEEO}{\bkmkend AAAAAAAEEO}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAAEEQ}{\bkmkend AAAAAAAEEQ}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAAEER}{\bkmkend AAAAAAAEER}
00083     \par
{\bkmkstart AAAAAAAEES}{\bkmkend AAAAAAAEES}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAEEU}{\bkmkend AAAAAAAEEU}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEEW}{\bkmkend AAAAAAAEEW}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAEEY}{\bkmkend AAAAAAAEEY}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAAEEZ}{\bkmkend AAAAAAAEEZ}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAAEFA}{\bkmkend AAAAAAAEFA}
00089 \}\par
{\bkmkstart AAAAAAAEFB}{\bkmkend AAAAAAAEFB}
00090 \par
{\bkmkstart AAAAAAAEFD}{\bkmkend AAAAAAAEFD}
00095 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAAEFG}{\bkmkend AAAAAAAEFG}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEFJ}{\bkmkend AAAAAAAEFJ}
00097     \par
{\bkmkstart AAAAAAAEFK}{\bkmkend AAAAAAAEFK}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAAEFM}{\bkmkend AAAAAAAEFM}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEFO}{\bkmkend AAAAAAAEFO}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAEFQ}{\bkmkend AAAAAAAEFQ}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAEFR}{\bkmkend AAAAAAAEFR}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAEFU}{\bkmkend AAAAAAAEFU}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAAEFW}{\bkmkend AAAAAAAEFW}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAAEFY}{\bkmkend AAAAAAAEFY}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAEGB}{\bkmkend AAAAAAAEGB}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 9);\par
{\bkmkstart AAAAAAAEGE}{\bkmkend AAAAAAAEGE}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAEGG}{\bkmkend AAAAAAAEGG}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAEGH}{\bkmkend AAAAAAAEGH}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEGT}{\bkmkend AAAAAAAEGT}
00110     \par
{\bkmkstart AAAAAAAEGU}{\bkmkend AAAAAAAEGU}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAAEGV}{\bkmkend AAAAAAAEGV}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAEGW}{\bkmkend AAAAAAAEGW}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAAEGX}{\bkmkend AAAAAAAEGX}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAAEGY}{\bkmkend AAAAAAAEGY}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAAEHA}{\bkmkend AAAAAAAEHA}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAAEHD}{\bkmkend AAAAAAAEHD}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAAEHE}{\bkmkend AAAAAAAEHE}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAEHG}{\bkmkend AAAAAAAEHG}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAAEHH}{\bkmkend AAAAAAAEHH}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAAEHJ}{\bkmkend AAAAAAAEHJ}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAAEHL}{\bkmkend AAAAAAAEHL}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 11);\par
{\bkmkstart AAAAAAAEHN}{\bkmkend AAAAAAAEHN}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAAEHO}{\bkmkend AAAAAAAEHO}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEHR}{\bkmkend AAAAAAAEHR}
00125     \par
{\bkmkstart AAAAAAAEHS}{\bkmkend AAAAAAAEHS}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAAEHT}{\bkmkend AAAAAAAEHT}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAEHU}{\bkmkend AAAAAAAEHU}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAEHW}{\bkmkend AAAAAAAEHW}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAAEHY}{\bkmkend AAAAAAAEHY}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAAEIB}{\bkmkend AAAAAAAEIB}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAAEID}{\bkmkend AAAAAAAEID}
00132     \par
{\bkmkstart AAAAAAAEIF}{\bkmkend AAAAAAAEIF}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAEIG}{\bkmkend AAAAAAAEIG}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEIL}{\bkmkend AAAAAAAEIL}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAEIM}{\bkmkend AAAAAAAEIM}
00136     \par
{\bkmkstart AAAAAAAEIN}{\bkmkend AAAAAAAEIN}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAAEIO}{\bkmkend AAAAAAAEIO}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAEIQ}{\bkmkend AAAAAAAEIQ}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAEIS}{\bkmkend AAAAAAAEIS}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAEIV}{\bkmkend AAAAAAAEIV}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAEIW}{\bkmkend AAAAAAAEIW}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAEIZ}{\bkmkend AAAAAAAEIZ}
00143     \par
{\bkmkstart AAAAAAAEJA}{\bkmkend AAAAAAAEJA}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAAEJC}{\bkmkend AAAAAAAEJC}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEJF}{\bkmkend AAAAAAAEJF}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEJH}{\bkmkend AAAAAAAEJH}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAEJK}{\bkmkend AAAAAAAEJK}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAEJM}{\bkmkend AAAAAAAEJM}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAEJO}{\bkmkend AAAAAAAEJO}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAAEJQ}{\bkmkend AAAAAAAEJQ}
00151     \par
{\bkmkstart AAAAAAAEJS}{\bkmkend AAAAAAAEJS}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAAEJT}{\bkmkend AAAAAAAEJT}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEJW}{\bkmkend AAAAAAAEJW}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEJX}{\bkmkend AAAAAAAEJX}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAEKA}{\bkmkend AAAAAAAEKA}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAEKC}{\bkmkend AAAAAAAEKC}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAEKE}{\bkmkend AAAAAAAEKE}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAAEKG}{\bkmkend AAAAAAAEKG}
00159     \par
{\bkmkstart AAAAAAAEKH}{\bkmkend AAAAAAAEKH}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAAEKJ}{\bkmkend AAAAAAAEKJ}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEKM}{\bkmkend AAAAAAAEKM}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEKO}{\bkmkend AAAAAAAEKO}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAEKP}{\bkmkend AAAAAAAEKP}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAEKR}{\bkmkend AAAAAAAEKR}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAEKU}{\bkmkend AAAAAAAEKU}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAAEKX}{\bkmkend AAAAAAAEKX}
00167 \}\par
{\bkmkstart AAAAAAAEKZ}{\bkmkend AAAAAAAEKZ}
00168 \par
{\bkmkstart AAAAAAAELB}{\bkmkend AAAAAAAELB}
00173 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAAELG}{\bkmkend AAAAAAAELG}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAAELH}{\bkmkend AAAAAAAELH}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAAELJ}{\bkmkend AAAAAAAELJ}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAAELM}{\bkmkend AAAAAAAELM}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAAELO}{\bkmkend AAAAAAAELO}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAELP}{\bkmkend AAAAAAAELP}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAAELS}{\bkmkend AAAAAAAELS}
00180     \par
{\bkmkstart AAAAAAAELT}{\bkmkend AAAAAAAELT}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAAELV}{\bkmkend AAAAAAAELV}
00182     std::string str2;\par
{\bkmkstart AAAAAAAELW}{\bkmkend AAAAAAAELW}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAAELY}{\bkmkend AAAAAAAELY}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAAEMB}{\bkmkend AAAAAAAEMB}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAEMG}{\bkmkend AAAAAAAEMG}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAAEMI}{\bkmkend AAAAAAAEMI}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAAEMK}{\bkmkend AAAAAAAEMK}
00188     \par
{\bkmkstart AAAAAAAEMM}{\bkmkend AAAAAAAEMM}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAAEMN}{\bkmkend AAAAAAAEMN}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAAEMR}{\bkmkend AAAAAAAEMR}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAAEMV}{\bkmkend AAAAAAAEMV}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAAEMX}{\bkmkend AAAAAAAEMX}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAEMZ}{\bkmkend AAAAAAAEMZ}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAAENA}{\bkmkend AAAAAAAENA}
00195     \par
{\bkmkstart AAAAAAAENC}{\bkmkend AAAAAAAENC}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAAENE}{\bkmkend AAAAAAAENE}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAAENF}{\bkmkend AAAAAAAENF}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAAENJ}{\bkmkend AAAAAAAENJ}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAAENM}{\bkmkend AAAAAAAENM}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAAENO}{\bkmkend AAAAAAAENO}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAAENQ}{\bkmkend AAAAAAAENQ}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAAENS}{\bkmkend AAAAAAAENS}
00203     \par
{\bkmkstart AAAAAAAENU}{\bkmkend AAAAAAAENU}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAAENW}{\bkmkend AAAAAAAENW}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAAENX}{\bkmkend AAAAAAAENX}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAAENZ}{\bkmkend AAAAAAAENZ}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAAEOD}{\bkmkend AAAAAAAEOD}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAAEOF}{\bkmkend AAAAAAAEOF}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAAEOH}{\bkmkend AAAAAAAEOH}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAAEOJ}{\bkmkend AAAAAAAEOJ}
00211     \par
{\bkmkstart AAAAAAAEOK}{\bkmkend AAAAAAAEOK}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAEOM}{\bkmkend AAAAAAAEOM}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAAEOP}{\bkmkend AAAAAAAEOP}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAAEOS}{\bkmkend AAAAAAAEOS}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAAEOV}{\bkmkend AAAAAAAEOV}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAEOX}{\bkmkend AAAAAAAEOX}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAEOZ}{\bkmkend AAAAAAAEOZ}
00218     \par
{\bkmkstart AAAAAAAEPA}{\bkmkend AAAAAAAEPA}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAEPC}{\bkmkend AAAAAAAEPC}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAAEPF}{\bkmkend AAAAAAAEPF}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAAEPH}{\bkmkend AAAAAAAEPH}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAAEPI}{\bkmkend AAAAAAAEPI}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAEPM}{\bkmkend AAAAAAAEPM}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAEPO}{\bkmkend AAAAAAAEPO}
00225     \par
{\bkmkstart AAAAAAAEPP}{\bkmkend AAAAAAAEPP}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAEPR}{\bkmkend AAAAAAAEPR}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAAEPT}{\bkmkend AAAAAAAEPT}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAAEPX}{\bkmkend AAAAAAAEPX}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAAEPY}{\bkmkend AAAAAAAEPY}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAEPZ}{\bkmkend AAAAAAAEPZ}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAEQB}{\bkmkend AAAAAAAEQB}
00232 \}\par
{\bkmkstart AAAAAAAEQC}{\bkmkend AAAAAAAEQC}
00233 \par
{\bkmkstart AAAAAAAEQE}{\bkmkend AAAAAAAEQE}
00238 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAAEQJ}{\bkmkend AAAAAAAEQJ}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAAEQK}{\bkmkend AAAAAAAEQK}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAAEQN}{\bkmkend AAAAAAAEQN}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAAEQP}{\bkmkend AAAAAAAEQP}
00242     \par
{\bkmkstart AAAAAAAEQQ}{\bkmkend AAAAAAAEQQ}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAAEQS}{\bkmkend AAAAAAAEQS}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAAEQV}{\bkmkend AAAAAAAEQV}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAAEQW}{\bkmkend AAAAAAAEQW}
00246     \par
{\bkmkstart AAAAAAAEQY}{\bkmkend AAAAAAAEQY}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAAERA}{\bkmkend AAAAAAAERA}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAERC}{\bkmkend AAAAAAAERC}
00249     \par
{\bkmkstart AAAAAAAERD}{\bkmkend AAAAAAAERD}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAERG}{\bkmkend AAAAAAAERG}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAERK}{\bkmkend AAAAAAAERK}
00252     \par
{\bkmkstart AAAAAAAERL}{\bkmkend AAAAAAAERL}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAAERN}{\bkmkend AAAAAAAERN}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAAERP}{\bkmkend AAAAAAAERP}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAAERR}{\bkmkend AAAAAAAERR}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAAERT}{\bkmkend AAAAAAAERT}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAAERU}{\bkmkend AAAAAAAERU}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAAERX}{\bkmkend AAAAAAAERX}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 2);\par
{\bkmkstart AAAAAAAERZ}{\bkmkend AAAAAAAERZ}
00260     \par
{\bkmkstart AAAAAAAESB}{\bkmkend AAAAAAAESB}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAAESD}{\bkmkend AAAAAAAESD}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAAESE}{\bkmkend AAAAAAAESE}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAESG}{\bkmkend AAAAAAAESG}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAAESL}{\bkmkend AAAAAAAESL}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAAESM}{\bkmkend AAAAAAAESM}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAAESO}{\bkmkend AAAAAAAESO}
00267     \par
{\bkmkstart AAAAAAAESQ}{\bkmkend AAAAAAAESQ}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAAESS}{\bkmkend AAAAAAAESS}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAAESU}{\bkmkend AAAAAAAESU}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAESX}{\bkmkend AAAAAAAESX}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAAETA}{\bkmkend AAAAAAAETA}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAETC}{\bkmkend AAAAAAAETC}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAAETF}{\bkmkend AAAAAAAETF}
00274     \par
{\bkmkstart AAAAAAAETH}{\bkmkend AAAAAAAETH}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAAETJ}{\bkmkend AAAAAAAETJ}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAETN}{\bkmkend AAAAAAAETN}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAAETO}{\bkmkend AAAAAAAETO}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAETR}{\bkmkend AAAAAAAETR}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAETS}{\bkmkend AAAAAAAETS}
00280     \par
{\bkmkstart AAAAAAAETT}{\bkmkend AAAAAAAETT}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAAETV}{\bkmkend AAAAAAAETV}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAETY}{\bkmkend AAAAAAAETY}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAAETZ}{\bkmkend AAAAAAAETZ}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAEUA}{\bkmkend AAAAAAAEUA}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAEUC}{\bkmkend AAAAAAAEUC}
00286 \}\par
{\bkmkstart AAAAAAAEUD}{\bkmkend AAAAAAAEUD}
00287 \par
{\bkmkstart AAAAAAAEUE}{\bkmkend AAAAAAAEUE}
00292 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAAEUG}{\bkmkend AAAAAAAEUG}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAAEUH}{\bkmkend AAAAAAAEUH}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAEUL}{\bkmkend AAAAAAAEUL}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAEUN}{\bkmkend AAAAAAAEUN}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAAEUP}{\bkmkend AAAAAAAEUP}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAAEUQ}{\bkmkend AAAAAAAEUQ}
00298     \par
{\bkmkstart AAAAAAAEUR}{\bkmkend AAAAAAAEUR}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAAEUU}{\bkmkend AAAAAAAEUU}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAAEUW}{\bkmkend AAAAAAAEUW}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEUY}{\bkmkend AAAAAAAEUY}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAAEVA}{\bkmkend AAAAAAAEVA}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEVD}{\bkmkend AAAAAAAEVD}
00304     \par
{\bkmkstart AAAAAAAEVF}{\bkmkend AAAAAAAEVF}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAAEVG}{\bkmkend AAAAAAAEVG}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAAEVI}{\bkmkend AAAAAAAEVI}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAAEVJ}{\bkmkend AAAAAAAEVJ}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAAEVK}{\bkmkend AAAAAAAEVK}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAAEVM}{\bkmkend AAAAAAAEVM}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), std::string_view::npos); {\cf20 // String contains null characters, so "World" search fails}\par
{\bkmkstart AAAAAAAEVO}{\bkmkend AAAAAAAEVO}
00311     \par
{\bkmkstart AAAAAAAEVP}{\bkmkend AAAAAAAEVP}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAAEVR}{\bkmkend AAAAAAAEVR}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAAEVT}{\bkmkend AAAAAAAEVT}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAAEWH}{\bkmkend AAAAAAAEWH}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAAEWJ}{\bkmkend AAAAAAAEWJ}
00316     \}\par
{\bkmkstart AAAAAAAEWK}{\bkmkend AAAAAAAEWK}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAAEWM}{\bkmkend AAAAAAAEWM}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAAEWP}{\bkmkend AAAAAAAEWP}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAEWT}{\bkmkend AAAAAAAEWT}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAEWV}{\bkmkend AAAAAAAEWV}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAAEWW}{\bkmkend AAAAAAAEWW}
00322     \par
{\bkmkstart AAAAAAAEWY}{\bkmkend AAAAAAAEWY}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAEXA}{\bkmkend AAAAAAAEXA}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEXC}{\bkmkend AAAAAAAEXC}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAEXE}{\bkmkend AAAAAAAEXE}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAAEXF}{\bkmkend AAAAAAAEXF}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAEXH}{\bkmkend AAAAAAAEXH}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEXK}{\bkmkend AAAAAAAEXK}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEXM}{\bkmkend AAAAAAAEXM}
00330 \}\par
{\bkmkstart AAAAAAAEXO}{\bkmkend AAAAAAAEXO}
00331 \par
{\bkmkstart AAAAAAAEXQ}{\bkmkend AAAAAAAEXQ}
00336 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAAEXU}{\bkmkend AAAAAAAEXU}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAAEXW}{\bkmkend AAAAAAAEXW}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAAEXX}{\bkmkend AAAAAAAEXX}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAEYC}{\bkmkend AAAAAAAEYC}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAAEYF}{\bkmkend AAAAAAAEYF}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAAEYH}{\bkmkend AAAAAAAEYH}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAAEYJ}{\bkmkend AAAAAAAEYJ}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAAEYL}{\bkmkend AAAAAAAEYL}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAEYO}{\bkmkend AAAAAAAEYO}
00345     \par
{\bkmkstart AAAAAAAEYQ}{\bkmkend AAAAAAAEYQ}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAAEYR}{\bkmkend AAAAAAAEYR}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAAEYT}{\bkmkend AAAAAAAEYT}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAAEYV}{\bkmkend AAAAAAAEYV}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAAEYX}{\bkmkend AAAAAAAEYX}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAAEYZ}{\bkmkend AAAAAAAEYZ}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAAEZB}{\bkmkend AAAAAAAEZB}
00352     \par
{\bkmkstart AAAAAAAEZC}{\bkmkend AAAAAAAEZC}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAAEZD}{\bkmkend AAAAAAAEZD}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAAEZH}{\bkmkend AAAAAAAEZH}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAAEZJ}{\bkmkend AAAAAAAEZJ}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAAEZL}{\bkmkend AAAAAAAEZL}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAAEZM}{\bkmkend AAAAAAAEZM}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAEZS}{\bkmkend AAAAAAAEZS}
00359     \par
{\bkmkstart AAAAAAAEZT}{\bkmkend AAAAAAAEZT}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAAEZU}{\bkmkend AAAAAAAEZU}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAAEZX}{\bkmkend AAAAAAAEZX}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAAEZZ}{\bkmkend AAAAAAAEZZ}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAAFAB}{\bkmkend AAAAAAAFAB}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAAFAD}{\bkmkend AAAAAAAFAD}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAFAF}{\bkmkend AAAAAAAFAF}
00366     \par
{\bkmkstart AAAAAAAFAG}{\bkmkend AAAAAAAFAG}
00367     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAFAH}{\bkmkend AAAAAAAFAH}
00368     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAFAK}{\bkmkend AAAAAAAFAK}
00369     EXPECT_EQ(sv.length(), 14);\par
{\bkmkstart AAAAAAAFAL}{\bkmkend AAAAAAAFAL}
00370     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAFAN}{\bkmkend AAAAAAAFAN}
00371     EXPECT_EQ(sv.find({\cf23 'C'}), 0);\par
{\bkmkstart AAAAAAAFAP}{\bkmkend AAAAAAAFAP}
00372     EXPECT_EQ(sv.find({\cf22 "test"}), 10);\par
{\bkmkstart AAAAAAAFAR}{\bkmkend AAAAAAAFAR}
00373     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFAT}{\bkmkend AAAAAAAFAT}
00374     \par
{\bkmkstart AAAAAAAFAU}{\bkmkend AAAAAAAFAU}
00375     EXPECT_EQ(wsv.size(), 19);\par
{\bkmkstart AAAAAAAFAX}{\bkmkend AAAAAAAFAX}
00376     EXPECT_EQ(wsv.length(), 19);\par
{\bkmkstart AAAAAAAFAY}{\bkmkend AAAAAAAFAY}
00377     EXPECT_FALSE(wsv.empty());\par
{\bkmkstart AAAAAAAFBA}{\bkmkend AAAAAAAFBA}
00378     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAFBB}{\bkmkend AAAAAAAFBB}
00379     \par
{\bkmkstart AAAAAAAFBC}{\bkmkend AAAAAAAFBC}
00380     EXPECT_EQ(sv16.size(), 21);\par
{\bkmkstart AAAAAAAFBE}{\bkmkend AAAAAAAFBE}
00381     EXPECT_EQ(sv16.length(), 21);\par
{\bkmkstart AAAAAAAFBG}{\bkmkend AAAAAAAFBG}
00382     EXPECT_FALSE(sv16.empty());\par
{\bkmkstart AAAAAAAFBH}{\bkmkend AAAAAAAFBH}
00383     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAFBJ}{\bkmkend AAAAAAAFBJ}
00384     \par
{\bkmkstart AAAAAAAFBK}{\bkmkend AAAAAAAFBK}
00385     EXPECT_EQ(sv32.size(), 21);\par
{\bkmkstart AAAAAAAFBM}{\bkmkend AAAAAAAFBM}
00386     EXPECT_EQ(sv32.length(), 21);\par
{\bkmkstart AAAAAAAFBP}{\bkmkend AAAAAAAFBP}
00387     EXPECT_FALSE(sv32.empty());\par
{\bkmkstart AAAAAAAFBQ}{\bkmkend AAAAAAAFBQ}
00388     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAFBR}{\bkmkend AAAAAAAFBR}
00389 \}\par
{\bkmkstart AAAAAAAFBS}{\bkmkend AAAAAAAFBS}
00390 \par
{\bkmkstart AAAAAAAFBT}{\bkmkend AAAAAAAFBT}
00395 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAAFBU}{\bkmkend AAAAAAAFBU}
00396     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAAFBV}{\bkmkend AAAAAAAFBV}
00397     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAAFBW}{\bkmkend AAAAAAAFBW}
00398     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAAFBX}{\bkmkend AAAAAAAFBX}
00399     \par
{\bkmkstart AAAAAAAFBY}{\bkmkend AAAAAAAFBY}
00400     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAAFBZ}{\bkmkend AAAAAAAFBZ}
00401     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAAFCA}{\bkmkend AAAAAAAFCA}
00402     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAAFCB}{\bkmkend AAAAAAAFCB}
00403     \par
{\bkmkstart AAAAAAAFCC}{\bkmkend AAAAAAAFCC}
00404     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAAFCD}{\bkmkend AAAAAAAFCD}
00405     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAAFCE}{\bkmkend AAAAAAAFCE}
00406     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFCF}{\bkmkend AAAAAAAFCF}
00407     \par
{\bkmkstart AAAAAAAFCG}{\bkmkend AAAAAAAFCG}
00408     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAAFCK}{\bkmkend AAAAAAAFCK}
00409     std::string pattern_str;\par
{\bkmkstart AAAAAAAFDB}{\bkmkend AAAAAAAFDB}
00410     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAFDC}{\bkmkend AAAAAAAFDC}
00411         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAAFDD}{\bkmkend AAAAAAAFDD}
00412     \}\par
{\bkmkstart AAAAAAAFDE}{\bkmkend AAAAAAAFDE}
00413     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAAFDF}{\bkmkend AAAAAAAFDF}
00414     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAAFDG}{\bkmkend AAAAAAAFDG}
00415     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAAFDH}{\bkmkend AAAAAAAFDH}
00416     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAAFDI}{\bkmkend AAAAAAAFDI}
00417     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAAFDJ}{\bkmkend AAAAAAAFDJ}
00418     \par
{\bkmkstart AAAAAAAFDK}{\bkmkend AAAAAAAFDK}
00419     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAAFDL}{\bkmkend AAAAAAAFDL}
00420     std::string mixed_str;\par
{\bkmkstart AAAAAAAFDM}{\bkmkend AAAAAAAFDM}
00421     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAFDN}{\bkmkend AAAAAAAFDN}
00422         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAAFDO}{\bkmkend AAAAAAAFDO}
00423     \}\par
{\bkmkstart AAAAAAAFDP}{\bkmkend AAAAAAAFDP}
00424     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAAFDQ}{\bkmkend AAAAAAAFDQ}
00425     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAAFDR}{\bkmkend AAAAAAAFDR}
00426     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAFDS}{\bkmkend AAAAAAAFDS}
00427     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAFDT}{\bkmkend AAAAAAAFDT}
00428 \}\par
{\bkmkstart AAAAAAAFDU}{\bkmkend AAAAAAAFDU}
00429 \par
{\bkmkstart AAAAAAAFDV}{\bkmkend AAAAAAAFDV}
00430 \} {\cf20 // namespace}\par
}
}