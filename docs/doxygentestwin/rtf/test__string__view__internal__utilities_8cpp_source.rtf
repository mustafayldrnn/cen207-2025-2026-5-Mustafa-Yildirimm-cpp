{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAAGSC}
{\bkmkend AAAAAAAGSC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSE" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGSX}{\bkmkend AAAAAAAGSX}
00001 \par
{\bkmkstart AAAAAAAGSY}{\bkmkend AAAAAAAGSY}
00010 \par
{\bkmkstart AAAAAAAGSZ}{\bkmkend AAAAAAAGSZ}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAGTQ}{\bkmkend AAAAAAAGTQ}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAGTZ}{\bkmkend AAAAAAAGTZ}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAGUO}{\bkmkend AAAAAAAGUO}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAGVI}{\bkmkend AAAAAAAGVI}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAGVS}{\bkmkend AAAAAAAGVS}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAGVZ}{\bkmkend AAAAAAAGVZ}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAGWH}{\bkmkend AAAAAAAGWH}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAGWI}{\bkmkend AAAAAAAGWI}
00019 \par
{\bkmkstart AAAAAAAGWJ}{\bkmkend AAAAAAAGWJ}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAGWK}{\bkmkend AAAAAAAGWK}
00021 \par
{\bkmkstart AAAAAAAGWL}{\bkmkend AAAAAAAGWL}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAGWM}{\bkmkend AAAAAAAGWM}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAAGWN}{\bkmkend AAAAAAAGWN}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGWO}{\bkmkend AAAAAAAGWO}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAGWP}{\bkmkend AAAAAAAGWP}
00030     \}\par
{\bkmkstart AAAAAAAGWQ}{\bkmkend AAAAAAAGWQ}
00031     \par
{\bkmkstart AAAAAAAGWR}{\bkmkend AAAAAAAGWR}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGWS}{\bkmkend AAAAAAAGWS}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAGWT}{\bkmkend AAAAAAAGWT}
00034     \}\par
{\bkmkstart AAAAAAAGWU}{\bkmkend AAAAAAAGWU}
00035 \};\par
{\bkmkstart AAAAAAAGWV}{\bkmkend AAAAAAAGWV}
00036 \par
{\bkmkstart AAAAAAAGWW}{\bkmkend AAAAAAAGWW}
00041 TEST_F(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAAGWX}{\bkmkend AAAAAAAGWX}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAAGWY}{\bkmkend AAAAAAAGWY}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGWZ}{\bkmkend AAAAAAAGWZ}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAAGXB}{\bkmkend AAAAAAAGXB}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAAGXD}{\bkmkend AAAAAAAGXD}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAAGXE}{\bkmkend AAAAAAAGXE}
00047     \par
{\bkmkstart AAAAAAAGXF}{\bkmkend AAAAAAAGXF}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAGXG}{\bkmkend AAAAAAAGXG}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAAGXH}{\bkmkend AAAAAAAGXH}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAAGXI}{\bkmkend AAAAAAAGXI}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAAGXJ}{\bkmkend AAAAAAAGXJ}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAAGXK}{\bkmkend AAAAAAAGXK}
00053     \par
{\bkmkstart AAAAAAAGXL}{\bkmkend AAAAAAAGXL}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAGXM}{\bkmkend AAAAAAAGXM}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAAGXN}{\bkmkend AAAAAAAGXN}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAAGXO}{\bkmkend AAAAAAAGXO}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAAGXP}{\bkmkend AAAAAAAGXP}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAAGXQ}{\bkmkend AAAAAAAGXQ}
00059     \par
{\bkmkstart AAAAAAAGXR}{\bkmkend AAAAAAAGXR}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAAGXS}{\bkmkend AAAAAAAGXS}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAAGXT}{\bkmkend AAAAAAAGXT}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAAGXU}{\bkmkend AAAAAAAGXU}
00063     EXPECT_EQ(sv4.size(), 75);\par
{\bkmkstart AAAAAAAGXV}{\bkmkend AAAAAAAGXV}
00064     EXPECT_EQ(sv4.length(), 75);\par
{\bkmkstart AAAAAAAGXW}{\bkmkend AAAAAAAGXW}
00065     \par
{\bkmkstart AAAAAAAGXX}{\bkmkend AAAAAAAGXX}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAAGXY}{\bkmkend AAAAAAAGXY}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAAGXZ}{\bkmkend AAAAAAAGXZ}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAAGYA}{\bkmkend AAAAAAAGYA}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAAGYB}{\bkmkend AAAAAAAGYB}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAAGYC}{\bkmkend AAAAAAAGYC}
00071     \par
{\bkmkstart AAAAAAAGYD}{\bkmkend AAAAAAAGYD}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAGYE}{\bkmkend AAAAAAAGYE}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGYF}{\bkmkend AAAAAAAGYF}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAGYG}{\bkmkend AAAAAAAGYG}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAAGYH}{\bkmkend AAAAAAAGYH}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAAGYI}{\bkmkend AAAAAAAGYI}
00077     \par
{\bkmkstart AAAAAAAGYJ}{\bkmkend AAAAAAAGYJ}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAGYK}{\bkmkend AAAAAAAGYK}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGYL}{\bkmkend AAAAAAAGYL}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAGYM}{\bkmkend AAAAAAAGYM}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAAGYO}{\bkmkend AAAAAAAGYO}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAAGYP}{\bkmkend AAAAAAAGYP}
00083     \par
{\bkmkstart AAAAAAAGYQ}{\bkmkend AAAAAAAGYQ}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAGYR}{\bkmkend AAAAAAAGYR}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGYS}{\bkmkend AAAAAAAGYS}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAGYV}{\bkmkend AAAAAAAGYV}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAAGYW}{\bkmkend AAAAAAAGYW}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAAGYX}{\bkmkend AAAAAAAGYX}
00089 \}\par
{\bkmkstart AAAAAAAGYY}{\bkmkend AAAAAAAGYY}
00090 \par
{\bkmkstart AAAAAAAGYZ}{\bkmkend AAAAAAAGYZ}
00095 TEST_F(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAAGZA}{\bkmkend AAAAAAAGZA}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGZB}{\bkmkend AAAAAAAGZB}
00097     \par
{\bkmkstart AAAAAAAGZC}{\bkmkend AAAAAAAGZC}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAAGZD}{\bkmkend AAAAAAAGZD}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGZE}{\bkmkend AAAAAAAGZE}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAGZF}{\bkmkend AAAAAAAGZF}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAGZG}{\bkmkend AAAAAAAGZG}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAGZH}{\bkmkend AAAAAAAGZH}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAAGZI}{\bkmkend AAAAAAAGZI}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAAGZJ}{\bkmkend AAAAAAAGZJ}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAGZL}{\bkmkend AAAAAAAGZL}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 9);\par
{\bkmkstart AAAAAAAGZM}{\bkmkend AAAAAAAGZM}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAGZN}{\bkmkend AAAAAAAGZN}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAGZO}{\bkmkend AAAAAAAGZO}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGZP}{\bkmkend AAAAAAAGZP}
00110     \par
{\bkmkstart AAAAAAAGZQ}{\bkmkend AAAAAAAGZQ}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAAGZR}{\bkmkend AAAAAAAGZR}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGZS}{\bkmkend AAAAAAAGZS}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAAGZT}{\bkmkend AAAAAAAGZT}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAAGZU}{\bkmkend AAAAAAAGZU}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAAGZW}{\bkmkend AAAAAAAGZW}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAAGZX}{\bkmkend AAAAAAAGZX}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAAGZY}{\bkmkend AAAAAAAGZY}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAGZZ}{\bkmkend AAAAAAAGZZ}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAAHAA}{\bkmkend AAAAAAAHAA}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAAHAB}{\bkmkend AAAAAAAHAB}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAAHAC}{\bkmkend AAAAAAAHAC}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 11);\par
{\bkmkstart AAAAAAAHAD}{\bkmkend AAAAAAAHAD}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAAHAE}{\bkmkend AAAAAAAHAE}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAHAG}{\bkmkend AAAAAAAHAG}
00125     \par
{\bkmkstart AAAAAAAHAH}{\bkmkend AAAAAAAHAH}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAAHAI}{\bkmkend AAAAAAAHAI}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAHAJ}{\bkmkend AAAAAAAHAJ}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAHBI}{\bkmkend AAAAAAAHBI}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAAHBK}{\bkmkend AAAAAAAHBK}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAAHBN}{\bkmkend AAAAAAAHBN}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAAHBP}{\bkmkend AAAAAAAHBP}
00132     \par
{\bkmkstart AAAAAAAHBR}{\bkmkend AAAAAAAHBR}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAHBS}{\bkmkend AAAAAAAHBS}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAHBT}{\bkmkend AAAAAAAHBT}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAHBV}{\bkmkend AAAAAAAHBV}
00136     \par
{\bkmkstart AAAAAAAHBZ}{\bkmkend AAAAAAAHBZ}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAAHCA}{\bkmkend AAAAAAAHCA}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAHCE}{\bkmkend AAAAAAAHCE}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAHCG}{\bkmkend AAAAAAAHCG}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAHCJ}{\bkmkend AAAAAAAHCJ}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAHCK}{\bkmkend AAAAAAAHCK}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAHCM}{\bkmkend AAAAAAAHCM}
00143     \par
{\bkmkstart AAAAAAAHDS}{\bkmkend AAAAAAAHDS}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAAHDU}{\bkmkend AAAAAAAHDU}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHDZ}{\bkmkend AAAAAAAHDZ}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHEB}{\bkmkend AAAAAAAHEB}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHEC}{\bkmkend AAAAAAAHEC}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHEF}{\bkmkend AAAAAAAHEF}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHEH}{\bkmkend AAAAAAAHEH}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAAHEJ}{\bkmkend AAAAAAAHEJ}
00151     \par
{\bkmkstart AAAAAAAHEK}{\bkmkend AAAAAAAHEK}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAAHEM}{\bkmkend AAAAAAAHEM}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHEO}{\bkmkend AAAAAAAHEO}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHES}{\bkmkend AAAAAAAHES}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHET}{\bkmkend AAAAAAAHET}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHEV}{\bkmkend AAAAAAAHEV}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHEW}{\bkmkend AAAAAAAHEW}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAAHFA}{\bkmkend AAAAAAAHFA}
00159     \par
{\bkmkstart AAAAAAAHFB}{\bkmkend AAAAAAAHFB}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAAHFC}{\bkmkend AAAAAAAHFC}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHFE}{\bkmkend AAAAAAAHFE}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAHFF}{\bkmkend AAAAAAAHFF}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHFH}{\bkmkend AAAAAAAHFH}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHFI}{\bkmkend AAAAAAAHFI}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHFM}{\bkmkend AAAAAAAHFM}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAAHFN}{\bkmkend AAAAAAAHFN}
00167 \}\par
{\bkmkstart AAAAAAAHFO}{\bkmkend AAAAAAAHFO}
00168 \par
{\bkmkstart AAAAAAAHFQ}{\bkmkend AAAAAAAHFQ}
00173 TEST_F(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAAHFU}{\bkmkend AAAAAAAHFU}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAAHFV}{\bkmkend AAAAAAAHFV}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAAHFW}{\bkmkend AAAAAAAHFW}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAAHFY}{\bkmkend AAAAAAAHFY}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAAHFZ}{\bkmkend AAAAAAAHFZ}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHGA}{\bkmkend AAAAAAAHGA}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHGB}{\bkmkend AAAAAAAHGB}
00180     \par
{\bkmkstart AAAAAAAHGD}{\bkmkend AAAAAAAHGD}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAAHGE}{\bkmkend AAAAAAAHGE}
00182     std::string str2;\par
{\bkmkstart AAAAAAAHGG}{\bkmkend AAAAAAAHGG}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAAHGH}{\bkmkend AAAAAAAHGH}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAAHGI}{\bkmkend AAAAAAAHGI}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAHGJ}{\bkmkend AAAAAAAHGJ}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAAHGK}{\bkmkend AAAAAAAHGK}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAAHGL}{\bkmkend AAAAAAAHGL}
00188     \par
{\bkmkstart AAAAAAAHGM}{\bkmkend AAAAAAAHGM}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAAHGN}{\bkmkend AAAAAAAHGN}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAAHGO}{\bkmkend AAAAAAAHGO}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAAHGP}{\bkmkend AAAAAAAHGP}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAAHGQ}{\bkmkend AAAAAAAHGQ}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAHGR}{\bkmkend AAAAAAAHGR}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAAHGS}{\bkmkend AAAAAAAHGS}
00195     \par
{\bkmkstart AAAAAAAHGT}{\bkmkend AAAAAAAHGT}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAAHGV}{\bkmkend AAAAAAAHGV}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAAHGY}{\bkmkend AAAAAAAHGY}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAAHGZ}{\bkmkend AAAAAAAHGZ}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAAHHA}{\bkmkend AAAAAAAHHA}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAAHHC}{\bkmkend AAAAAAAHHC}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAAHHD}{\bkmkend AAAAAAAHHD}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAAHHG}{\bkmkend AAAAAAAHHG}
00203     \par
{\bkmkstart AAAAAAAHHI}{\bkmkend AAAAAAAHHI}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAAHHJ}{\bkmkend AAAAAAAHHJ}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAAHHK}{\bkmkend AAAAAAAHHK}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAAHHM}{\bkmkend AAAAAAAHHM}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAAHHQ}{\bkmkend AAAAAAAHHQ}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAAHHR}{\bkmkend AAAAAAAHHR}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAAHHW}{\bkmkend AAAAAAAHHW}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAAHHY}{\bkmkend AAAAAAAHHY}
00211     \par
{\bkmkstart AAAAAAAHHZ}{\bkmkend AAAAAAAHHZ}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAAHIA}{\bkmkend AAAAAAAHIA}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAAHID}{\bkmkend AAAAAAAHID}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAAHIE}{\bkmkend AAAAAAAHIE}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAAHIF}{\bkmkend AAAAAAAHIF}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAHIH}{\bkmkend AAAAAAAHIH}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAAHII}{\bkmkend AAAAAAAHII}
00218     \par
{\bkmkstart AAAAAAAHIJ}{\bkmkend AAAAAAAHIJ}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAAHIL}{\bkmkend AAAAAAAHIL}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAAHIN}{\bkmkend AAAAAAAHIN}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAAHIP}{\bkmkend AAAAAAAHIP}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAAHIQ}{\bkmkend AAAAAAAHIQ}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAHIR}{\bkmkend AAAAAAAHIR}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAAHIS}{\bkmkend AAAAAAAHIS}
00225     \par
{\bkmkstart AAAAAAAHIT}{\bkmkend AAAAAAAHIT}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAAHIU}{\bkmkend AAAAAAAHIU}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAAHIV}{\bkmkend AAAAAAAHIV}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAAHIW}{\bkmkend AAAAAAAHIW}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAAHJA}{\bkmkend AAAAAAAHJA}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAHJB}{\bkmkend AAAAAAAHJB}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAAHJD}{\bkmkend AAAAAAAHJD}
00232 \}\par
{\bkmkstart AAAAAAAHJF}{\bkmkend AAAAAAAHJF}
00233 \par
{\bkmkstart AAAAAAAHJG}{\bkmkend AAAAAAAHJG}
00238 TEST_F(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAAHJH}{\bkmkend AAAAAAAHJH}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAAHJI}{\bkmkend AAAAAAAHJI}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAAHJL}{\bkmkend AAAAAAAHJL}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAAHJO}{\bkmkend AAAAAAAHJO}
00242     \par
{\bkmkstart AAAAAAAHJP}{\bkmkend AAAAAAAHJP}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAAHJQ}{\bkmkend AAAAAAAHJQ}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAAHJR}{\bkmkend AAAAAAAHJR}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAAHJU}{\bkmkend AAAAAAAHJU}
00246     \par
{\bkmkstart AAAAAAAHJW}{\bkmkend AAAAAAAHJW}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAAHJZ}{\bkmkend AAAAAAAHJZ}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAHKB}{\bkmkend AAAAAAAHKB}
00249     \par
{\bkmkstart AAAAAAAHKC}{\bkmkend AAAAAAAHKC}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAHKD}{\bkmkend AAAAAAAHKD}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAHKE}{\bkmkend AAAAAAAHKE}
00252     \par
{\bkmkstart AAAAAAAHKF}{\bkmkend AAAAAAAHKF}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAAHKG}{\bkmkend AAAAAAAHKG}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAAHKH}{\bkmkend AAAAAAAHKH}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAAHKI}{\bkmkend AAAAAAAHKI}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAAHKJ}{\bkmkend AAAAAAAHKJ}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAAHKK}{\bkmkend AAAAAAAHKK}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAAHKL}{\bkmkend AAAAAAAHKL}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 2);\par
{\bkmkstart AAAAAAAHKN}{\bkmkend AAAAAAAHKN}
00260     \par
{\bkmkstart AAAAAAAHKP}{\bkmkend AAAAAAAHKP}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAAHKQ}{\bkmkend AAAAAAAHKQ}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAAHKS}{\bkmkend AAAAAAAHKS}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAHKU}{\bkmkend AAAAAAAHKU}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAAHKW}{\bkmkend AAAAAAAHKW}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAAHKY}{\bkmkend AAAAAAAHKY}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAAHLB}{\bkmkend AAAAAAAHLB}
00267     \par
{\bkmkstart AAAAAAAHLC}{\bkmkend AAAAAAAHLC}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAAHLE}{\bkmkend AAAAAAAHLE}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAAHLG}{\bkmkend AAAAAAAHLG}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAHLI}{\bkmkend AAAAAAAHLI}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAAHLK}{\bkmkend AAAAAAAHLK}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAHLP}{\bkmkend AAAAAAAHLP}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAAHLQ}{\bkmkend AAAAAAAHLQ}
00274     \par
{\bkmkstart AAAAAAAHLR}{\bkmkend AAAAAAAHLR}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAAHLS}{\bkmkend AAAAAAAHLS}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAHLT}{\bkmkend AAAAAAAHLT}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAAHLU}{\bkmkend AAAAAAAHLU}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAHLV}{\bkmkend AAAAAAAHLV}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAHLW}{\bkmkend AAAAAAAHLW}
00280     \par
{\bkmkstart AAAAAAAHLX}{\bkmkend AAAAAAAHLX}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAAHLY}{\bkmkend AAAAAAAHLY}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAHLZ}{\bkmkend AAAAAAAHLZ}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAAHMA}{\bkmkend AAAAAAAHMA}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAHMB}{\bkmkend AAAAAAAHMB}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAHMC}{\bkmkend AAAAAAAHMC}
00286 \}\par
{\bkmkstart AAAAAAAHMD}{\bkmkend AAAAAAAHMD}
00287 \par
{\bkmkstart AAAAAAAHME}{\bkmkend AAAAAAAHME}
00292 TEST_F(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAAHMF}{\bkmkend AAAAAAAHMF}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAAHMG}{\bkmkend AAAAAAAHMG}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAHMH}{\bkmkend AAAAAAAHMH}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAHMI}{\bkmkend AAAAAAAHMI}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAAHMJ}{\bkmkend AAAAAAAHMJ}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAAHMK}{\bkmkend AAAAAAAHMK}
00298     \par
{\bkmkstart AAAAAAAHML}{\bkmkend AAAAAAAHML}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAAHMM}{\bkmkend AAAAAAAHMM}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAAHMN}{\bkmkend AAAAAAAHMN}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAHMO}{\bkmkend AAAAAAAHMO}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAAHMP}{\bkmkend AAAAAAAHMP}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAHMQ}{\bkmkend AAAAAAAHMQ}
00304     \par
{\bkmkstart AAAAAAAHMR}{\bkmkend AAAAAAAHMR}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAAHMS}{\bkmkend AAAAAAAHMS}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAAHMT}{\bkmkend AAAAAAAHMT}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAAHMU}{\bkmkend AAAAAAAHMU}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAAHMV}{\bkmkend AAAAAAAHMV}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAAHMW}{\bkmkend AAAAAAAHMW}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), std::string_view::npos); {\cf20 // String contains null characters, so "World" search fails}\par
{\bkmkstart AAAAAAAHMX}{\bkmkend AAAAAAAHMX}
00311     \par
{\bkmkstart AAAAAAAHMY}{\bkmkend AAAAAAAHMY}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAAHMZ}{\bkmkend AAAAAAAHMZ}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAAHNA}{\bkmkend AAAAAAAHNA}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAAHNB}{\bkmkend AAAAAAAHNB}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAAHNC}{\bkmkend AAAAAAAHNC}
00316     \}\par
{\bkmkstart AAAAAAAHND}{\bkmkend AAAAAAAHND}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAAHNE}{\bkmkend AAAAAAAHNE}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAAHNF}{\bkmkend AAAAAAAHNF}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAHNG}{\bkmkend AAAAAAAHNG}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAHNH}{\bkmkend AAAAAAAHNH}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAAHNI}{\bkmkend AAAAAAAHNI}
00322     \par
{\bkmkstart AAAAAAAHNJ}{\bkmkend AAAAAAAHNJ}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAHNK}{\bkmkend AAAAAAAHNK}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAHNL}{\bkmkend AAAAAAAHNL}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAHNM}{\bkmkend AAAAAAAHNM}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAAHNN}{\bkmkend AAAAAAAHNN}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAHNO}{\bkmkend AAAAAAAHNO}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAHNP}{\bkmkend AAAAAAAHNP}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAHNQ}{\bkmkend AAAAAAAHNQ}
00330 \}\par
{\bkmkstart AAAAAAAHNR}{\bkmkend AAAAAAAHNR}
00331 \par
{\bkmkstart AAAAAAAHNS}{\bkmkend AAAAAAAHNS}
00336 TEST_F(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAAHNT}{\bkmkend AAAAAAAHNT}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAAHNU}{\bkmkend AAAAAAAHNU}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAAHNV}{\bkmkend AAAAAAAHNV}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAHXO}{\bkmkend AAAAAAAHXO}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAAHXR}{\bkmkend AAAAAAAHXR}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAAHXT}{\bkmkend AAAAAAAHXT}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAAHXW}{\bkmkend AAAAAAAHXW}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAAHXZ}{\bkmkend AAAAAAAHXZ}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAHYC}{\bkmkend AAAAAAAHYC}
00345     \par
{\bkmkstart AAAAAAAHYD}{\bkmkend AAAAAAAHYD}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAAHYF}{\bkmkend AAAAAAAHYF}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAAHYJ}{\bkmkend AAAAAAAHYJ}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAAHYK}{\bkmkend AAAAAAAHYK}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAAHYN}{\bkmkend AAAAAAAHYN}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAAHYO}{\bkmkend AAAAAAAHYO}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAAHYR}{\bkmkend AAAAAAAHYR}
00352     \par
{\bkmkstart AAAAAAAHYS}{\bkmkend AAAAAAAHYS}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAAHYV}{\bkmkend AAAAAAAHYV}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAAHYY}{\bkmkend AAAAAAAHYY}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAAHYZ}{\bkmkend AAAAAAAHYZ}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAAHZB}{\bkmkend AAAAAAAHZB}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAAHZD}{\bkmkend AAAAAAAHZD}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAHZF}{\bkmkend AAAAAAAHZF}
00359     \par
{\bkmkstart AAAAAAAHZH}{\bkmkend AAAAAAAHZH}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAAHZI}{\bkmkend AAAAAAAHZI}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAAHZK}{\bkmkend AAAAAAAHZK}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAAHZL}{\bkmkend AAAAAAAHZL}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAAHZP}{\bkmkend AAAAAAAHZP}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAAHZR}{\bkmkend AAAAAAAHZR}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAHZT}{\bkmkend AAAAAAAHZT}
00366     \par
{\bkmkstart AAAAAAAHZV}{\bkmkend AAAAAAAHZV}
00367     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAHZW}{\bkmkend AAAAAAAHZW}
00368     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAHZY}{\bkmkend AAAAAAAHZY}
00369     EXPECT_EQ(sv.length(), 14);\par
{\bkmkstart AAAAAAAIAA}{\bkmkend AAAAAAAIAA}
00370     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAIAE}{\bkmkend AAAAAAAIAE}
00371     EXPECT_EQ(sv.find({\cf23 'C'}), 0);\par
{\bkmkstart AAAAAAAIAG}{\bkmkend AAAAAAAIAG}
00372     EXPECT_EQ(sv.find({\cf22 "test"}), 10);\par
{\bkmkstart AAAAAAAIAI}{\bkmkend AAAAAAAIAI}
00373     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIAL}{\bkmkend AAAAAAAIAL}
00374     \par
{\bkmkstart AAAAAAAIAN}{\bkmkend AAAAAAAIAN}
00375     EXPECT_EQ(wsv.size(), 19);\par
{\bkmkstart AAAAAAAIAO}{\bkmkend AAAAAAAIAO}
00376     EXPECT_EQ(wsv.length(), 19);\par
{\bkmkstart AAAAAAAIAQ}{\bkmkend AAAAAAAIAQ}
00377     EXPECT_FALSE(wsv.empty());\par
{\bkmkstart AAAAAAAIAT}{\bkmkend AAAAAAAIAT}
00378     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAIAV}{\bkmkend AAAAAAAIAV}
00379     \par
{\bkmkstart AAAAAAAIAW}{\bkmkend AAAAAAAIAW}
00380     EXPECT_EQ(sv16.size(), 21);\par
{\bkmkstart AAAAAAAIAX}{\bkmkend AAAAAAAIAX}
00381     EXPECT_EQ(sv16.length(), 21);\par
{\bkmkstart AAAAAAAIAY}{\bkmkend AAAAAAAIAY}
00382     EXPECT_FALSE(sv16.empty());\par
{\bkmkstart AAAAAAAIBX}{\bkmkend AAAAAAAIBX}
00383     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAICB}{\bkmkend AAAAAAAICB}
00384     \par
{\bkmkstart AAAAAAAICD}{\bkmkend AAAAAAAICD}
00385     EXPECT_EQ(sv32.size(), 21);\par
{\bkmkstart AAAAAAAICG}{\bkmkend AAAAAAAICG}
00386     EXPECT_EQ(sv32.length(), 21);\par
{\bkmkstart AAAAAAAICI}{\bkmkend AAAAAAAICI}
00387     EXPECT_FALSE(sv32.empty());\par
{\bkmkstart AAAAAAAICJ}{\bkmkend AAAAAAAICJ}
00388     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAICL}{\bkmkend AAAAAAAICL}
00389 \}\par
{\bkmkstart AAAAAAAICN}{\bkmkend AAAAAAAICN}
00390 \par
{\bkmkstart AAAAAAAICP}{\bkmkend AAAAAAAICP}
00395 TEST_F(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAAICQ}{\bkmkend AAAAAAAICQ}
00396     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAAICS}{\bkmkend AAAAAAAICS}
00397     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAAICV}{\bkmkend AAAAAAAICV}
00398     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAAICY}{\bkmkend AAAAAAAICY}
00399     \par
{\bkmkstart AAAAAAAICZ}{\bkmkend AAAAAAAICZ}
00400     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAAIDB}{\bkmkend AAAAAAAIDB}
00401     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAAIDD}{\bkmkend AAAAAAAIDD}
00402     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAAIDG}{\bkmkend AAAAAAAIDG}
00403     \par
{\bkmkstart AAAAAAAIDI}{\bkmkend AAAAAAAIDI}
00404     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAAIDJ}{\bkmkend AAAAAAAIDJ}
00405     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAAIDL}{\bkmkend AAAAAAAIDL}
00406     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIDO}{\bkmkend AAAAAAAIDO}
00407     \par
{\bkmkstart AAAAAAAIDP}{\bkmkend AAAAAAAIDP}
00408     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAAIDR}{\bkmkend AAAAAAAIDR}
00409     std::string pattern_str;\par
{\bkmkstart AAAAAAAIGV}{\bkmkend AAAAAAAIGV}
00410     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAIGX}{\bkmkend AAAAAAAIGX}
00411         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAAIHJ}{\bkmkend AAAAAAAIHJ}
00412     \}\par
{\bkmkstart AAAAAAAIHK}{\bkmkend AAAAAAAIHK}
00413     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAAIHP}{\bkmkend AAAAAAAIHP}
00414     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAAIHR}{\bkmkend AAAAAAAIHR}
00415     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAAIHT}{\bkmkend AAAAAAAIHT}
00416     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAAIJD}{\bkmkend AAAAAAAIJD}
00417     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAAIJE}{\bkmkend AAAAAAAIJE}
00418     \par
{\bkmkstart AAAAAAAIJF}{\bkmkend AAAAAAAIJF}
00419     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAAIJG}{\bkmkend AAAAAAAIJG}
00420     std::string mixed_str;\par
{\bkmkstart AAAAAAAIJH}{\bkmkend AAAAAAAIJH}
00421     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAIJI}{\bkmkend AAAAAAAIJI}
00422         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAAIJJ}{\bkmkend AAAAAAAIJJ}
00423     \}\par
{\bkmkstart AAAAAAAIJK}{\bkmkend AAAAAAAIJK}
00424     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAAIJL}{\bkmkend AAAAAAAIJL}
00425     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAAIJM}{\bkmkend AAAAAAAIJM}
00426     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAIJN}{\bkmkend AAAAAAAIJN}
00427     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAIJO}{\bkmkend AAAAAAAIJO}
00428 \}\par
{\bkmkstart AAAAAAAIJP}{\bkmkend AAAAAAAIJP}
00429 \par
{\bkmkstart AAAAAAAIJQ}{\bkmkend AAAAAAAIJQ}
00430 \} {\cf20 // namespace}\par
}
}