{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAADIB}
{\bkmkend AAAAAAADIB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADIC" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADII}{\bkmkend AAAAAAADII}
00001 \par
{\bkmkstart AAAAAAADIJ}{\bkmkend AAAAAAADIJ}
00010 \par
{\bkmkstart AAAAAAADIK}{\bkmkend AAAAAAADIK}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAADIM}{\bkmkend AAAAAAADIM}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAADIP}{\bkmkend AAAAAAADIP}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAADIQ}{\bkmkend AAAAAAADIQ}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAADIR}{\bkmkend AAAAAAADIR}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAADIS}{\bkmkend AAAAAAADIS}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAADIT}{\bkmkend AAAAAAADIT}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAADIU}{\bkmkend AAAAAAADIU}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAADIV}{\bkmkend AAAAAAADIV}
00019 \par
{\bkmkstart AAAAAAADIW}{\bkmkend AAAAAAADIW}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAADIX}{\bkmkend AAAAAAADIX}
00021 \par
{\bkmkstart AAAAAAADIY}{\bkmkend AAAAAAADIY}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAADIZ}{\bkmkend AAAAAAADIZ}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAADJA}{\bkmkend AAAAAAADJA}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAADJB}{\bkmkend AAAAAAADJB}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAADJC}{\bkmkend AAAAAAADJC}
00030     \}\par
{\bkmkstart AAAAAAADJD}{\bkmkend AAAAAAADJD}
00031     \par
{\bkmkstart AAAAAAADJE}{\bkmkend AAAAAAADJE}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAADJG}{\bkmkend AAAAAAADJG}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAADJH}{\bkmkend AAAAAAADJH}
00034     \}\par
{\bkmkstart AAAAAAADJI}{\bkmkend AAAAAAADJI}
00035 \};\par
{\bkmkstart AAAAAAADJJ}{\bkmkend AAAAAAADJJ}
00036 \par
{\bkmkstart AAAAAAADJK}{\bkmkend AAAAAAADJK}
00041 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAADKE}{\bkmkend AAAAAAADKE}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAADKF}{\bkmkend AAAAAAADKF}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAADKH}{\bkmkend AAAAAAADKH}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAADKJ}{\bkmkend AAAAAAADKJ}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAADKM}{\bkmkend AAAAAAADKM}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAADKO}{\bkmkend AAAAAAADKO}
00047     \par
{\bkmkstart AAAAAAADKQ}{\bkmkend AAAAAAADKQ}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAADKR}{\bkmkend AAAAAAADKR}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAADKU}{\bkmkend AAAAAAADKU}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAADKX}{\bkmkend AAAAAAADKX}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAADKZ}{\bkmkend AAAAAAADKZ}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAADLC}{\bkmkend AAAAAAADLC}
00053     \par
{\bkmkstart AAAAAAADLD}{\bkmkend AAAAAAADLD}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAADLE}{\bkmkend AAAAAAADLE}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAADLG}{\bkmkend AAAAAAADLG}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAADLI}{\bkmkend AAAAAAADLI}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAADLM}{\bkmkend AAAAAAADLM}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAADLN}{\bkmkend AAAAAAADLN}
00059     \par
{\bkmkstart AAAAAAADLP}{\bkmkend AAAAAAADLP}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAADLQ}{\bkmkend AAAAAAADLQ}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAADLS}{\bkmkend AAAAAAADLS}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAADLW}{\bkmkend AAAAAAADLW}
00063     EXPECT_EQ(sv4.size(), 75);\par
{\bkmkstart AAAAAAADLY}{\bkmkend AAAAAAADLY}
00064     EXPECT_EQ(sv4.length(), 75);\par
{\bkmkstart AAAAAAADMA}{\bkmkend AAAAAAADMA}
00065     \par
{\bkmkstart AAAAAAADMB}{\bkmkend AAAAAAADMB}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAADMD}{\bkmkend AAAAAAADMD}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAADMG}{\bkmkend AAAAAAADMG}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAADMI}{\bkmkend AAAAAAADMI}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAADMK}{\bkmkend AAAAAAADMK}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAADMN}{\bkmkend AAAAAAADMN}
00071     \par
{\bkmkstart AAAAAAADMP}{\bkmkend AAAAAAADMP}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAADMQ}{\bkmkend AAAAAAADMQ}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAADMS}{\bkmkend AAAAAAADMS}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAADMV}{\bkmkend AAAAAAADMV}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAADMX}{\bkmkend AAAAAAADMX}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAADMZ}{\bkmkend AAAAAAADMZ}
00077     \par
{\bkmkstart AAAAAAADNA}{\bkmkend AAAAAAADNA}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAADNC}{\bkmkend AAAAAAADNC}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAADNF}{\bkmkend AAAAAAADNF}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAADNG}{\bkmkend AAAAAAADNG}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAADNH}{\bkmkend AAAAAAADNH}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAADNJ}{\bkmkend AAAAAAADNJ}
00083     \par
{\bkmkstart AAAAAAADNK}{\bkmkend AAAAAAADNK}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAADNM}{\bkmkend AAAAAAADNM}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAADNO}{\bkmkend AAAAAAADNO}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAADNQ}{\bkmkend AAAAAAADNQ}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAADNR}{\bkmkend AAAAAAADNR}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAADNT}{\bkmkend AAAAAAADNT}
00089 \}\par
{\bkmkstart AAAAAAADNU}{\bkmkend AAAAAAADNU}
00090 \par
{\bkmkstart AAAAAAADNW}{\bkmkend AAAAAAADNW}
00095 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAADNZ}{\bkmkend AAAAAAADNZ}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADOC}{\bkmkend AAAAAAADOC}
00097     \par
{\bkmkstart AAAAAAADOD}{\bkmkend AAAAAAADOD}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAADOE}{\bkmkend AAAAAAADOE}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADOF}{\bkmkend AAAAAAADOF}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAADOG}{\bkmkend AAAAAAADOG}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAADOH}{\bkmkend AAAAAAADOH}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAADOK}{\bkmkend AAAAAAADOK}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAADOM}{\bkmkend AAAAAAADOM}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAADOO}{\bkmkend AAAAAAADOO}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAADOQ}{\bkmkend AAAAAAADOQ}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 9);\par
{\bkmkstart AAAAAAADOS}{\bkmkend AAAAAAADOS}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAADOU}{\bkmkend AAAAAAADOU}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAADOW}{\bkmkend AAAAAAADOW}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADPA}{\bkmkend AAAAAAADPA}
00110     \par
{\bkmkstart AAAAAAADPC}{\bkmkend AAAAAAADPC}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAADPD}{\bkmkend AAAAAAADPD}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAADPF}{\bkmkend AAAAAAADPF}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAADPH}{\bkmkend AAAAAAADPH}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAADPI}{\bkmkend AAAAAAADPI}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAADPK}{\bkmkend AAAAAAADPK}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAADPM}{\bkmkend AAAAAAADPM}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAADPO}{\bkmkend AAAAAAADPO}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAADPP}{\bkmkend AAAAAAADPP}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAADPQ}{\bkmkend AAAAAAADPQ}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAADPR}{\bkmkend AAAAAAADPR}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAADPT}{\bkmkend AAAAAAADPT}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 11);\par
{\bkmkstart AAAAAAADPU}{\bkmkend AAAAAAADPU}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAADPW}{\bkmkend AAAAAAADPW}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADQA}{\bkmkend AAAAAAADQA}
00125     \par
{\bkmkstart AAAAAAADQB}{\bkmkend AAAAAAADQB}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAADQD}{\bkmkend AAAAAAADQD}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAADQF}{\bkmkend AAAAAAADQF}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAADQH}{\bkmkend AAAAAAADQH}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAADQJ}{\bkmkend AAAAAAADQJ}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAADQM}{\bkmkend AAAAAAADQM}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAADQO}{\bkmkend AAAAAAADQO}
00132     \par
{\bkmkstart AAAAAAADQQ}{\bkmkend AAAAAAADQQ}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAADQR}{\bkmkend AAAAAAADQR}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAADQW}{\bkmkend AAAAAAADQW}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAADQY}{\bkmkend AAAAAAADQY}
00136     \par
{\bkmkstart AAAAAAADQZ}{\bkmkend AAAAAAADQZ}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAADRB}{\bkmkend AAAAAAADRB}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAADRE}{\bkmkend AAAAAAADRE}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAADRG}{\bkmkend AAAAAAADRG}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAADRI}{\bkmkend AAAAAAADRI}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAADRK}{\bkmkend AAAAAAADRK}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAADRM}{\bkmkend AAAAAAADRM}
00143     \par
{\bkmkstart AAAAAAADRO}{\bkmkend AAAAAAADRO}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAADRP}{\bkmkend AAAAAAADRP}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADRS}{\bkmkend AAAAAAADRS}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADRT}{\bkmkend AAAAAAADRT}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAADRU}{\bkmkend AAAAAAADRU}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAADRX}{\bkmkend AAAAAAADRX}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAADRZ}{\bkmkend AAAAAAADRZ}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAADSB}{\bkmkend AAAAAAADSB}
00151     \par
{\bkmkstart AAAAAAADSC}{\bkmkend AAAAAAADSC}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAADSE}{\bkmkend AAAAAAADSE}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADSJ}{\bkmkend AAAAAAADSJ}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADSK}{\bkmkend AAAAAAADSK}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAADSL}{\bkmkend AAAAAAADSL}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAADSN}{\bkmkend AAAAAAADSN}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAADSQ}{\bkmkend AAAAAAADSQ}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAADSS}{\bkmkend AAAAAAADSS}
00159     \par
{\bkmkstart AAAAAAADST}{\bkmkend AAAAAAADST}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAADSV}{\bkmkend AAAAAAADSV}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADSX}{\bkmkend AAAAAAADSX}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADTB}{\bkmkend AAAAAAADTB}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAADTC}{\bkmkend AAAAAAADTC}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAADTE}{\bkmkend AAAAAAADTE}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAADTF}{\bkmkend AAAAAAADTF}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAADTH}{\bkmkend AAAAAAADTH}
00167 \}\par
{\bkmkstart AAAAAAADTJ}{\bkmkend AAAAAAADTJ}
00168 \par
{\bkmkstart AAAAAAADTM}{\bkmkend AAAAAAADTM}
00173 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAADTP}{\bkmkend AAAAAAADTP}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAADTQ}{\bkmkend AAAAAAADTQ}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAADTU}{\bkmkend AAAAAAADTU}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAADTV}{\bkmkend AAAAAAADTV}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAADTX}{\bkmkend AAAAAAADTX}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAADUA}{\bkmkend AAAAAAADUA}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAADUC}{\bkmkend AAAAAAADUC}
00180     \par
{\bkmkstart AAAAAAADUE}{\bkmkend AAAAAAADUE}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAADUF}{\bkmkend AAAAAAADUF}
00182     std::string str2;\par
{\bkmkstart AAAAAAADUG}{\bkmkend AAAAAAADUG}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAADUJ}{\bkmkend AAAAAAADUJ}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAADUL}{\bkmkend AAAAAAADUL}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAADUO}{\bkmkend AAAAAAADUO}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAADUP}{\bkmkend AAAAAAADUP}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAADUQ}{\bkmkend AAAAAAADUQ}
00188     \par
{\bkmkstart AAAAAAADUR}{\bkmkend AAAAAAADUR}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAADUS}{\bkmkend AAAAAAADUS}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAADUT}{\bkmkend AAAAAAADUT}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAADUU}{\bkmkend AAAAAAADUU}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAADUV}{\bkmkend AAAAAAADUV}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAADUX}{\bkmkend AAAAAAADUX}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAADUY}{\bkmkend AAAAAAADUY}
00195     \par
{\bkmkstart AAAAAAADUZ}{\bkmkend AAAAAAADUZ}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAADVB}{\bkmkend AAAAAAADVB}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAADVD}{\bkmkend AAAAAAADVD}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAADVE}{\bkmkend AAAAAAADVE}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAADVG}{\bkmkend AAAAAAADVG}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAADVJ}{\bkmkend AAAAAAADVJ}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAADVL}{\bkmkend AAAAAAADVL}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAADVM}{\bkmkend AAAAAAADVM}
00203     \par
{\bkmkstart AAAAAAADVO}{\bkmkend AAAAAAADVO}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAADVP}{\bkmkend AAAAAAADVP}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAADVQ}{\bkmkend AAAAAAADVQ}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAADVR}{\bkmkend AAAAAAADVR}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAADVV}{\bkmkend AAAAAAADVV}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAADVY}{\bkmkend AAAAAAADVY}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAADWB}{\bkmkend AAAAAAADWB}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAADWD}{\bkmkend AAAAAAADWD}
00211     \par
{\bkmkstart AAAAAAADWE}{\bkmkend AAAAAAADWE}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAADWG}{\bkmkend AAAAAAADWG}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAADWJ}{\bkmkend AAAAAAADWJ}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAADWM}{\bkmkend AAAAAAADWM}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAADWO}{\bkmkend AAAAAAADWO}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAADWQ}{\bkmkend AAAAAAADWQ}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAADWR}{\bkmkend AAAAAAADWR}
00218     \par
{\bkmkstart AAAAAAADWT}{\bkmkend AAAAAAADWT}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAADWV}{\bkmkend AAAAAAADWV}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAADWX}{\bkmkend AAAAAAADWX}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAADWY}{\bkmkend AAAAAAADWY}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAADWZ}{\bkmkend AAAAAAADWZ}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAADXB}{\bkmkend AAAAAAADXB}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAADXD}{\bkmkend AAAAAAADXD}
00225     \par
{\bkmkstart AAAAAAADXF}{\bkmkend AAAAAAADXF}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAADXH}{\bkmkend AAAAAAADXH}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAADXL}{\bkmkend AAAAAAADXL}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAADXO}{\bkmkend AAAAAAADXO}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAADXQ}{\bkmkend AAAAAAADXQ}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAADXT}{\bkmkend AAAAAAADXT}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAADXV}{\bkmkend AAAAAAADXV}
00232 \}\par
{\bkmkstart AAAAAAADXW}{\bkmkend AAAAAAADXW}
00233 \par
{\bkmkstart AAAAAAADXY}{\bkmkend AAAAAAADXY}
00238 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAADYC}{\bkmkend AAAAAAADYC}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAADYD}{\bkmkend AAAAAAADYD}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAADYF}{\bkmkend AAAAAAADYF}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAADYH}{\bkmkend AAAAAAADYH}
00242     \par
{\bkmkstart AAAAAAADYI}{\bkmkend AAAAAAADYI}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAADYK}{\bkmkend AAAAAAADYK}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAADYM}{\bkmkend AAAAAAADYM}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAADYP}{\bkmkend AAAAAAADYP}
00246     \par
{\bkmkstart AAAAAAADYQ}{\bkmkend AAAAAAADYQ}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAADYS}{\bkmkend AAAAAAADYS}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAADYU}{\bkmkend AAAAAAADYU}
00249     \par
{\bkmkstart AAAAAAADYV}{\bkmkend AAAAAAADYV}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAADYX}{\bkmkend AAAAAAADYX}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADYZ}{\bkmkend AAAAAAADYZ}
00252     \par
{\bkmkstart AAAAAAADZA}{\bkmkend AAAAAAADZA}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAADZC}{\bkmkend AAAAAAADZC}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAADZF}{\bkmkend AAAAAAADZF}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAADZG}{\bkmkend AAAAAAADZG}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAADZI}{\bkmkend AAAAAAADZI}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAADZK}{\bkmkend AAAAAAADZK}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAADZN}{\bkmkend AAAAAAADZN}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 2);\par
{\bkmkstart AAAAAAADZP}{\bkmkend AAAAAAADZP}
00260     \par
{\bkmkstart AAAAAAADZQ}{\bkmkend AAAAAAADZQ}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAADZS}{\bkmkend AAAAAAADZS}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAADZU}{\bkmkend AAAAAAADZU}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAADZW}{\bkmkend AAAAAAADZW}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAADZX}{\bkmkend AAAAAAADZX}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAAEAA}{\bkmkend AAAAAAAEAA}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAAEAC}{\bkmkend AAAAAAAEAC}
00267     \par
{\bkmkstart AAAAAAAEAE}{\bkmkend AAAAAAAEAE}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAAEAF}{\bkmkend AAAAAAAEAF}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAAEAJ}{\bkmkend AAAAAAAEAJ}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAAEAL}{\bkmkend AAAAAAAEAL}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAAEAO}{\bkmkend AAAAAAAEAO}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAEAQ}{\bkmkend AAAAAAAEAQ}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAAEAS}{\bkmkend AAAAAAAEAS}
00274     \par
{\bkmkstart AAAAAAAEAT}{\bkmkend AAAAAAAEAT}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAAEAW}{\bkmkend AAAAAAAEAW}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAAEAZ}{\bkmkend AAAAAAAEAZ}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAAEBB}{\bkmkend AAAAAAAEBB}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAEBD}{\bkmkend AAAAAAAEBD}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAEBE}{\bkmkend AAAAAAAEBE}
00280     \par
{\bkmkstart AAAAAAAEBG}{\bkmkend AAAAAAAEBG}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAAEBJ}{\bkmkend AAAAAAAEBJ}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAAEBK}{\bkmkend AAAAAAAEBK}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAAEBM}{\bkmkend AAAAAAAEBM}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAEBQ}{\bkmkend AAAAAAAEBQ}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAAEBS}{\bkmkend AAAAAAAEBS}
00286 \}\par
{\bkmkstart AAAAAAAEBT}{\bkmkend AAAAAAAEBT}
00287 \par
{\bkmkstart AAAAAAAEBU}{\bkmkend AAAAAAAEBU}
00292 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAAEBY}{\bkmkend AAAAAAAEBY}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAAECA}{\bkmkend AAAAAAAECA}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAECC}{\bkmkend AAAAAAAECC}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAECF}{\bkmkend AAAAAAAECF}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAAECH}{\bkmkend AAAAAAAECH}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAAECK}{\bkmkend AAAAAAAECK}
00298     \par
{\bkmkstart AAAAAAAECL}{\bkmkend AAAAAAAECL}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAAECM}{\bkmkend AAAAAAAECM}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAAECP}{\bkmkend AAAAAAAECP}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAECR}{\bkmkend AAAAAAAECR}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAAECT}{\bkmkend AAAAAAAECT}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAECV}{\bkmkend AAAAAAAECV}
00304     \par
{\bkmkstart AAAAAAAECW}{\bkmkend AAAAAAAECW}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAAECZ}{\bkmkend AAAAAAAECZ}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAAEDB}{\bkmkend AAAAAAAEDB}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAAEDD}{\bkmkend AAAAAAAEDD}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAAEDF}{\bkmkend AAAAAAAEDF}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAAEDH}{\bkmkend AAAAAAAEDH}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), std::string_view::npos); {\cf20 // String contains null characters, so "World" search fails}\par
{\bkmkstart AAAAAAAEDK}{\bkmkend AAAAAAAEDK}
00311     \par
{\bkmkstart AAAAAAAEDM}{\bkmkend AAAAAAAEDM}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAAEDN}{\bkmkend AAAAAAAEDN}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAAEDO}{\bkmkend AAAAAAAEDO}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAAEDR}{\bkmkend AAAAAAAEDR}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAAEDU}{\bkmkend AAAAAAAEDU}
00316     \}\par
{\bkmkstart AAAAAAAEDW}{\bkmkend AAAAAAAEDW}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAAEEA}{\bkmkend AAAAAAAEEA}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAAEED}{\bkmkend AAAAAAAEED}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAEEL}{\bkmkend AAAAAAAEEL}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAEEO}{\bkmkend AAAAAAAEEO}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAAEER}{\bkmkend AAAAAAAEER}
00322     \par
{\bkmkstart AAAAAAAEES}{\bkmkend AAAAAAAEES}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAEET}{\bkmkend AAAAAAAEET}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEEW}{\bkmkend AAAAAAAEEW}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAEEX}{\bkmkend AAAAAAAEEX}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAAEEZ}{\bkmkend AAAAAAAEEZ}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAEFC}{\bkmkend AAAAAAAEFC}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEFE}{\bkmkend AAAAAAAEFE}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEFF}{\bkmkend AAAAAAAEFF}
00330 \}\par
{\bkmkstart AAAAAAAEFG}{\bkmkend AAAAAAAEFG}
00331 \par
{\bkmkstart AAAAAAAEFI}{\bkmkend AAAAAAAEFI}
00336 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAAEFL}{\bkmkend AAAAAAAEFL}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAAEFN}{\bkmkend AAAAAAAEFN}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAAEFP}{\bkmkend AAAAAAAEFP}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAEFT}{\bkmkend AAAAAAAEFT}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAAEFV}{\bkmkend AAAAAAAEFV}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAAEFW}{\bkmkend AAAAAAAEFW}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAAEFX}{\bkmkend AAAAAAAEFX}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAAEFY}{\bkmkend AAAAAAAEFY}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAEFZ}{\bkmkend AAAAAAAEFZ}
00345     \par
{\bkmkstart AAAAAAAEGA}{\bkmkend AAAAAAAEGA}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAAEGB}{\bkmkend AAAAAAAEGB}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAAEGC}{\bkmkend AAAAAAAEGC}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAAEGD}{\bkmkend AAAAAAAEGD}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAAEGE}{\bkmkend AAAAAAAEGE}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAAEGF}{\bkmkend AAAAAAAEGF}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAAEGG}{\bkmkend AAAAAAAEGG}
00352     \par
{\bkmkstart AAAAAAAEGH}{\bkmkend AAAAAAAEGH}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAAEGI}{\bkmkend AAAAAAAEGI}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAAEGJ}{\bkmkend AAAAAAAEGJ}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAAEGK}{\bkmkend AAAAAAAEGK}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAAEGL}{\bkmkend AAAAAAAEGL}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAAEGM}{\bkmkend AAAAAAAEGM}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAEGN}{\bkmkend AAAAAAAEGN}
00359     \par
{\bkmkstart AAAAAAAEGO}{\bkmkend AAAAAAAEGO}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAAEGP}{\bkmkend AAAAAAAEGP}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAAEGQ}{\bkmkend AAAAAAAEGQ}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAAEGR}{\bkmkend AAAAAAAEGR}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAAEGS}{\bkmkend AAAAAAAEGS}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAAEGT}{\bkmkend AAAAAAAEGT}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAAEGU}{\bkmkend AAAAAAAEGU}
00366     \par
{\bkmkstart AAAAAAAEGV}{\bkmkend AAAAAAAEGV}
00367     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAEGW}{\bkmkend AAAAAAAEGW}
00368     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAEGX}{\bkmkend AAAAAAAEGX}
00369     EXPECT_EQ(sv.length(), 14);\par
{\bkmkstart AAAAAAAEGY}{\bkmkend AAAAAAAEGY}
00370     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAEGZ}{\bkmkend AAAAAAAEGZ}
00371     EXPECT_EQ(sv.find({\cf23 'C'}), 0);\par
{\bkmkstart AAAAAAAEHA}{\bkmkend AAAAAAAEHA}
00372     EXPECT_EQ(sv.find({\cf22 "test"}), 10);\par
{\bkmkstart AAAAAAAEHB}{\bkmkend AAAAAAAEHB}
00373     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEHC}{\bkmkend AAAAAAAEHC}
00374     \par
{\bkmkstart AAAAAAAEHD}{\bkmkend AAAAAAAEHD}
00375     EXPECT_EQ(wsv.size(), 19);\par
{\bkmkstart AAAAAAAEHE}{\bkmkend AAAAAAAEHE}
00376     EXPECT_EQ(wsv.length(), 19);\par
{\bkmkstart AAAAAAAEHF}{\bkmkend AAAAAAAEHF}
00377     EXPECT_FALSE(wsv.empty());\par
{\bkmkstart AAAAAAAEHG}{\bkmkend AAAAAAAEHG}
00378     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAAEHJ}{\bkmkend AAAAAAAEHJ}
00379     \par
{\bkmkstart AAAAAAAEHK}{\bkmkend AAAAAAAEHK}
00380     EXPECT_EQ(sv16.size(), 21);\par
{\bkmkstart AAAAAAAEHL}{\bkmkend AAAAAAAEHL}
00381     EXPECT_EQ(sv16.length(), 21);\par
{\bkmkstart AAAAAAAEHM}{\bkmkend AAAAAAAEHM}
00382     EXPECT_FALSE(sv16.empty());\par
{\bkmkstart AAAAAAAEHN}{\bkmkend AAAAAAAEHN}
00383     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAEHO}{\bkmkend AAAAAAAEHO}
00384     \par
{\bkmkstart AAAAAAAEHP}{\bkmkend AAAAAAAEHP}
00385     EXPECT_EQ(sv32.size(), 21);\par
{\bkmkstart AAAAAAAEHQ}{\bkmkend AAAAAAAEHQ}
00386     EXPECT_EQ(sv32.length(), 21);\par
{\bkmkstart AAAAAAAEHR}{\bkmkend AAAAAAAEHR}
00387     EXPECT_FALSE(sv32.empty());\par
{\bkmkstart AAAAAAAEHS}{\bkmkend AAAAAAAEHS}
00388     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAAEHT}{\bkmkend AAAAAAAEHT}
00389 \}\par
{\bkmkstart AAAAAAAEHU}{\bkmkend AAAAAAAEHU}
00390 \par
{\bkmkstart AAAAAAAEHV}{\bkmkend AAAAAAAEHV}
00395 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAAEHW}{\bkmkend AAAAAAAEHW}
00396     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAAEHX}{\bkmkend AAAAAAAEHX}
00397     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAAEHY}{\bkmkend AAAAAAAEHY}
00398     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAAEHZ}{\bkmkend AAAAAAAEHZ}
00399     \par
{\bkmkstart AAAAAAAEIA}{\bkmkend AAAAAAAEIA}
00400     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAAEIB}{\bkmkend AAAAAAAEIB}
00401     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAAEIC}{\bkmkend AAAAAAAEIC}
00402     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAAEID}{\bkmkend AAAAAAAEID}
00403     \par
{\bkmkstart AAAAAAAEIE}{\bkmkend AAAAAAAEIE}
00404     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAAEIF}{\bkmkend AAAAAAAEIF}
00405     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAAEIG}{\bkmkend AAAAAAAEIG}
00406     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEIH}{\bkmkend AAAAAAAEIH}
00407     \par
{\bkmkstart AAAAAAAEII}{\bkmkend AAAAAAAEII}
00408     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAAEIJ}{\bkmkend AAAAAAAEIJ}
00409     std::string pattern_str;\par
{\bkmkstart AAAAAAAEIK}{\bkmkend AAAAAAAEIK}
00410     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAEIL}{\bkmkend AAAAAAAEIL}
00411         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAAEIM}{\bkmkend AAAAAAAEIM}
00412     \}\par
{\bkmkstart AAAAAAAEIN}{\bkmkend AAAAAAAEIN}
00413     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAAEIO}{\bkmkend AAAAAAAEIO}
00414     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAAEIP}{\bkmkend AAAAAAAEIP}
00415     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAAEIQ}{\bkmkend AAAAAAAEIQ}
00416     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAAEIR}{\bkmkend AAAAAAAEIR}
00417     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAAEIS}{\bkmkend AAAAAAAEIS}
00418     \par
{\bkmkstart AAAAAAAEIT}{\bkmkend AAAAAAAEIT}
00419     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAAEIU}{\bkmkend AAAAAAAEIU}
00420     std::string mixed_str;\par
{\bkmkstart AAAAAAAEIV}{\bkmkend AAAAAAAEIV}
00421     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAEIW}{\bkmkend AAAAAAAEIW}
00422         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAAEIX}{\bkmkend AAAAAAAEIX}
00423     \}\par
{\bkmkstart AAAAAAAEIY}{\bkmkend AAAAAAAEIY}
00424     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAAEIZ}{\bkmkend AAAAAAAEIZ}
00425     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAAEJA}{\bkmkend AAAAAAAEJA}
00426     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAAEJB}{\bkmkend AAAAAAAEJB}
00427     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAAEJC}{\bkmkend AAAAAAAEJC}
00428 \}\par
{\bkmkstart AAAAAAAEJD}{\bkmkend AAAAAAAEJD}
00429 \par
{\bkmkstart AAAAAAAEJE}{\bkmkend AAAAAAAEJE}
00430 \} {\cf20 // namespace}\par
}
}