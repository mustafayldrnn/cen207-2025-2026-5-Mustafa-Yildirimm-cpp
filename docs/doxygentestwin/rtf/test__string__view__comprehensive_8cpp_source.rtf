{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_comprehensive.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\bkmkstart AAAAAAAFLR}
{\bkmkend AAAAAAAFLR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFLS" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFMA}{\bkmkend AAAAAAAFMA}
00001 \par
{\bkmkstart AAAAAAAFMC}{\bkmkend AAAAAAAFMC}
00008 \par
{\bkmkstart AAAAAAAFMD}{\bkmkend AAAAAAAFMD}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAFMH}{\bkmkend AAAAAAAFMH}
00010 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAFML}{\bkmkend AAAAAAAFML}
00011 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAFMO}{\bkmkend AAAAAAAFMO}
00012 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAFMR}{\bkmkend AAAAAAAFMR}
00013 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAFMV}{\bkmkend AAAAAAAFMV}
00014 \par
{\bkmkstart AAAAAAAFMW}{\bkmkend AAAAAAAFMW}
00015 {\cf20 // Mock StringView implementation for testing}\par
{\bkmkstart AAAAAAAFMX}{\bkmkend AAAAAAAFMX}
00016 {\cf17 class }StringView \{\par
{\bkmkstart AAAAAAAFMY}{\bkmkend AAAAAAAFMY}
00017 {\cf17 private}:\par
{\bkmkstart AAAAAAAFMZ}{\bkmkend AAAAAAAFMZ}
00018     {\cf17 const} {\cf18 char}* data_;\par
{\bkmkstart AAAAAAAFNA}{\bkmkend AAAAAAAFNA}
00019     {\cf18 size_t} size_;\par
{\bkmkstart AAAAAAAFNB}{\bkmkend AAAAAAAFNB}
00020 \par
{\bkmkstart AAAAAAAFND}{\bkmkend AAAAAAAFND}
00021 {\cf17 public}:\par
{\bkmkstart AAAAAAAFNE}{\bkmkend AAAAAAAFNE}
00022     StringView() : data_(nullptr), size_(0) \{\}\par
{\bkmkstart AAAAAAAFNH}{\bkmkend AAAAAAAFNH}
00023     \par
{\bkmkstart AAAAAAAFNI}{\bkmkend AAAAAAAFNI}
00024     StringView({\cf17 const} {\cf18 char}* str) : data_(str), size_(str ? std::strlen(str) : 0) \{\}\par
{\bkmkstart AAAAAAAFNN}{\bkmkend AAAAAAAFNN}
00025     \par
{\bkmkstart AAAAAAAFNO}{\bkmkend AAAAAAAFNO}
00026     StringView({\cf17 const} {\cf18 char}* str, {\cf18 size_t} len) : data_(str), size_(len) \{\}\par
{\bkmkstart AAAAAAAFNR}{\bkmkend AAAAAAAFNR}
00027     \par
{\bkmkstart AAAAAAAFNT}{\bkmkend AAAAAAAFNT}
00028     StringView({\cf17 const} std::string& str) : data_(str.c_str()), size_(str.size()) \{\}\par
{\bkmkstart AAAAAAAFNW}{\bkmkend AAAAAAAFNW}
00029     \par
{\bkmkstart AAAAAAAFNY}{\bkmkend AAAAAAAFNY}
00030     {\cf17 const} {\cf18 char}* data(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAFOE}{\bkmkend AAAAAAAFOE}
00031     {\cf18 size_t} size(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAFOG}{\bkmkend AAAAAAAFOG}
00032     {\cf18 size_t} length(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAFOK}{\bkmkend AAAAAAAFOK}
00033     {\cf18 bool} empty(){\cf17  const }\{ {\cf19 return} size_ == 0; \}\par
{\bkmkstart AAAAAAAFON}{\bkmkend AAAAAAAFON}
00034     \par
{\bkmkstart AAAAAAAFOO}{\bkmkend AAAAAAAFOO}
00035     {\cf18 char} operator[]({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAFOR}{\bkmkend AAAAAAAFOR}
00036         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAFOY}{\bkmkend AAAAAAAFOY}
00037         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAFPA}{\bkmkend AAAAAAAFPA}
00038     \}\par
{\bkmkstart AAAAAAAFPB}{\bkmkend AAAAAAAFPB}
00039     \par
{\bkmkstart AAAAAAAFPC}{\bkmkend AAAAAAAFPC}
00040     {\cf18 char} at({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAFPI}{\bkmkend AAAAAAAFPI}
00041         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAFPN}{\bkmkend AAAAAAAFPN}
00042         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAFPP}{\bkmkend AAAAAAAFPP}
00043     \}\par
{\bkmkstart AAAAAAAFPR}{\bkmkend AAAAAAAFPR}
00044     \par
{\bkmkstart AAAAAAAFPS}{\bkmkend AAAAAAAFPS}
00045     StringView substr({\cf18 size_t} pos = 0, {\cf18 size_t} len = std::string::npos){\cf17  const }\{\par
{\bkmkstart AAAAAAAFPW}{\bkmkend AAAAAAAFPW}
00046         {\cf19 if} (pos > size_) {\cf19 throw} std::out_of_range({\cf22 "Position out of range"});\par
{\bkmkstart AAAAAAAFQA}{\bkmkend AAAAAAAFQA}
00047         {\cf18 size_t} actual_len = std::min(len, size_ - pos);\par
{\bkmkstart AAAAAAAFQE}{\bkmkend AAAAAAAFQE}
00048         {\cf19 return} StringView(data_ + pos, actual_len);\par
{\bkmkstart AAAAAAAFQH}{\bkmkend AAAAAAAFQH}
00049     \}\par
{\bkmkstart AAAAAAAFQJ}{\bkmkend AAAAAAAFQJ}
00050     \par
{\bkmkstart AAAAAAAFQK}{\bkmkend AAAAAAAFQK}
00051     {\cf18 size_t} find({\cf18 char} c, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAFQS}{\bkmkend AAAAAAAFQS}
00052         {\cf19 for} ({\cf18 size_t} i = pos; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAFQZ}{\bkmkend AAAAAAAFQZ}
00053             {\cf19 if} (data_[i] == c) {\cf19 return} i;\par
{\bkmkstart AAAAAAAFRE}{\bkmkend AAAAAAAFRE}
00054         \}\par
{\bkmkstart AAAAAAAFRF}{\bkmkend AAAAAAAFRF}
00055         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAGKH}{\bkmkend AAAAAAAGKH}
00056     \}\par
{\bkmkstart AAAAAAAGKM}{\bkmkend AAAAAAAGKM}
00057     \par
{\bkmkstart AAAAAAAGKO}{\bkmkend AAAAAAAGKO}
00058     {\cf18 size_t} find({\cf17 const} StringView& str, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAGKU}{\bkmkend AAAAAAAGKU}
00059         {\cf19 if} (str.size() > size_ - pos) {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAGKZ}{\bkmkend AAAAAAAGKZ}
00060         {\cf19 for} ({\cf18 size_t} i = pos; i <= size_ - str.size(); ++i) \{\par
{\bkmkstart AAAAAAAGLE}{\bkmkend AAAAAAAGLE}
00061             {\cf19 if} (std::memcmp(data_ + i, str.data_, str.size_) == 0) \{\par
{\bkmkstart AAAAAAAGLI}{\bkmkend AAAAAAAGLI}
00062                 {\cf19 return} i;\par
{\bkmkstart AAAAAAAGLL}{\bkmkend AAAAAAAGLL}
00063             \}\par
{\bkmkstart AAAAAAAGLN}{\bkmkend AAAAAAAGLN}
00064         \}\par
{\bkmkstart AAAAAAAGLO}{\bkmkend AAAAAAAGLO}
00065         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAGLQ}{\bkmkend AAAAAAAGLQ}
00066     \}\par
{\bkmkstart AAAAAAAGLS}{\bkmkend AAAAAAAGLS}
00067     \par
{\bkmkstart AAAAAAAGLT}{\bkmkend AAAAAAAGLT}
00068     {\cf18 bool} starts_with({\cf17 const} StringView& prefix){\cf17  const }\{\par
{\bkmkstart AAAAAAAGLY}{\bkmkend AAAAAAAGLY}
00069         {\cf19 if} (prefix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAGMA}{\bkmkend AAAAAAAGMA}
00070         {\cf19 return} std::memcmp(data_, prefix.data_, prefix.size_) == 0;\par
{\bkmkstart AAAAAAAGME}{\bkmkend AAAAAAAGME}
00071     \}\par
{\bkmkstart AAAAAAAGMG}{\bkmkend AAAAAAAGMG}
00072     \par
{\bkmkstart AAAAAAAGMI}{\bkmkend AAAAAAAGMI}
00073     {\cf18 bool} ends_with({\cf17 const} StringView& suffix){\cf17  const }\{\par
{\bkmkstart AAAAAAAGMK}{\bkmkend AAAAAAAGMK}
00074         {\cf19 if} (suffix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAGMM}{\bkmkend AAAAAAAGMM}
00075         {\cf19 return} std::memcmp(data_ + size_ - suffix.size(), suffix.data_, suffix.size_) == 0;\par
{\bkmkstart AAAAAAAGMR}{\bkmkend AAAAAAAGMR}
00076     \}\par
{\bkmkstart AAAAAAAGMS}{\bkmkend AAAAAAAGMS}
00077     \par
{\bkmkstart AAAAAAAGMT}{\bkmkend AAAAAAAGMT}
00078     {\cf18 bool} contains({\cf17 const} StringView& str){\cf17  const }\{\par
{\bkmkstart AAAAAAAGMY}{\bkmkend AAAAAAAGMY}
00079         {\cf19 return} find(str) != std::string::npos;\par
{\bkmkstart AAAAAAAGMZ}{\bkmkend AAAAAAAGMZ}
00080     \}\par
{\bkmkstart AAAAAAAGNA}{\bkmkend AAAAAAAGNA}
00081     \par
{\bkmkstart AAAAAAAGNB}{\bkmkend AAAAAAAGNB}
00082     {\cf18 void} remove_prefix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAGNC}{\bkmkend AAAAAAAGNC}
00083         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAGND}{\bkmkend AAAAAAAGND}
00084         data_ += n;\par
{\bkmkstart AAAAAAAGNE}{\bkmkend AAAAAAAGNE}
00085         size_ -= n;\par
{\bkmkstart AAAAAAAGNG}{\bkmkend AAAAAAAGNG}
00086     \}\par
{\bkmkstart AAAAAAAGNH}{\bkmkend AAAAAAAGNH}
00087     \par
{\bkmkstart AAAAAAAGNI}{\bkmkend AAAAAAAGNI}
00088     {\cf18 void} remove_suffix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAGNK}{\bkmkend AAAAAAAGNK}
00089         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAGNM}{\bkmkend AAAAAAAGNM}
00090         size_ -= n;\par
{\bkmkstart AAAAAAAGNO}{\bkmkend AAAAAAAGNO}
00091     \}\par
{\bkmkstart AAAAAAAGNQ}{\bkmkend AAAAAAAGNQ}
00092     \par
{\bkmkstart AAAAAAAGNR}{\bkmkend AAAAAAAGNR}
00093     std::string to_string(){\cf17  const }\{\par
{\bkmkstart AAAAAAAGNU}{\bkmkend AAAAAAAGNU}
00094         {\cf19 return} std::string(data_, size_);\par
{\bkmkstart AAAAAAAGNX}{\bkmkend AAAAAAAGNX}
00095     \}\par
{\bkmkstart AAAAAAAGNZ}{\bkmkend AAAAAAAGNZ}
00096     \par
{\bkmkstart AAAAAAAGOA}{\bkmkend AAAAAAAGOA}
00097     {\cf20 // Iterator support}\par
{\bkmkstart AAAAAAAGOB}{\bkmkend AAAAAAAGOB}
00098     {\cf17 const} {\cf18 char}* begin(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAGOI}{\bkmkend AAAAAAAGOI}
00099     {\cf17 const} {\cf18 char}* end(){\cf17  const }\{ {\cf19 return} data_ + size_; \}\par
{\bkmkstart AAAAAAAGOM}{\bkmkend AAAAAAAGOM}
00100     \par
{\bkmkstart AAAAAAAGON}{\bkmkend AAAAAAAGON}
00101     {\cf20 // Comparison operators}\par
{\bkmkstart AAAAAAAGOQ}{\bkmkend AAAAAAAGOQ}
00102     {\cf18 bool} operator==({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAGOS}{\bkmkend AAAAAAAGOS}
00103         {\cf19 if} (size_ != other.size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAGOW}{\bkmkend AAAAAAAGOW}
00104         {\cf19 return} std::memcmp(data_, other.data_, size_) == 0;\par
{\bkmkstart AAAAAAAGOX}{\bkmkend AAAAAAAGOX}
00105     \}\par
{\bkmkstart AAAAAAAGOZ}{\bkmkend AAAAAAAGOZ}
00106     \par
{\bkmkstart AAAAAAAGPA}{\bkmkend AAAAAAAGPA}
00107     {\cf18 bool} operator!=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAGPB}{\bkmkend AAAAAAAGPB}
00108         {\cf19 return} !(*{\cf17 this} == other);\par
{\bkmkstart AAAAAAAGQC}{\bkmkend AAAAAAAGQC}
00109     \}\par
{\bkmkstart AAAAAAAGQD}{\bkmkend AAAAAAAGQD}
00110     \par
{\bkmkstart AAAAAAAGQF}{\bkmkend AAAAAAAGQF}
00111     {\cf18 bool} operator<({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAGQN}{\bkmkend AAAAAAAGQN}
00112         {\cf18 int} result = std::memcmp(data_, other.data_, std::min(size_, other.size_));\par
{\bkmkstart AAAAAAAGQY}{\bkmkend AAAAAAAGQY}
00113         {\cf19 if} (result != 0) {\cf19 return} result < 0;\par
{\bkmkstart AAAAAAAGRC}{\bkmkend AAAAAAAGRC}
00114         {\cf19 return} size_ < other.size_;\par
{\bkmkstart AAAAAAAGRF}{\bkmkend AAAAAAAGRF}
00115     \}\par
{\bkmkstart AAAAAAAGRG}{\bkmkend AAAAAAAGRG}
00116     \par
{\bkmkstart AAAAAAAGRI}{\bkmkend AAAAAAAGRI}
00117     {\cf18 bool} operator<=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAGRN}{\bkmkend AAAAAAAGRN}
00118         {\cf19 return} *{\cf17 this} < other || *{\cf17 this} == other;\par
{\bkmkstart AAAAAAAGRP}{\bkmkend AAAAAAAGRP}
00119     \}\par
{\bkmkstart AAAAAAAGRR}{\bkmkend AAAAAAAGRR}
00120     \par
{\bkmkstart AAAAAAAGRS}{\bkmkend AAAAAAAGRS}
00121     {\cf18 bool} operator>({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAGRW}{\bkmkend AAAAAAAGRW}
00122         {\cf19 return} !(*{\cf17 this} <= other);\par
{\bkmkstart AAAAAAAGRX}{\bkmkend AAAAAAAGRX}
00123     \}\par
{\bkmkstart AAAAAAAGRZ}{\bkmkend AAAAAAAGRZ}
00124     \par
{\bkmkstart AAAAAAAGSA}{\bkmkend AAAAAAAGSA}
00125     {\cf18 bool} operator>=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAGSE}{\bkmkend AAAAAAAGSE}
00126         {\cf19 return} !(*{\cf17 this} < other);\par
{\bkmkstart AAAAAAAGSG}{\bkmkend AAAAAAAGSG}
00127     \}\par
{\bkmkstart AAAAAAAGSH}{\bkmkend AAAAAAAGSH}
00128     \par
{\bkmkstart AAAAAAAGSI}{\bkmkend AAAAAAAGSI}
00129     {\cf20 // Hash function}\par
{\bkmkstart AAAAAAAGSL}{\bkmkend AAAAAAAGSL}
00130     {\cf18 size_t} hash(){\cf17  const }\{\par
{\bkmkstart AAAAAAAGSO}{\bkmkend AAAAAAAGSO}
00131         {\cf18 size_t} result = 0;\par
{\bkmkstart AAAAAAAGSQ}{\bkmkend AAAAAAAGSQ}
00132         {\cf19 for} ({\cf18 size_t} i = 0; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAGSR}{\bkmkend AAAAAAAGSR}
00133             result = result * 31 + {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(data_[i]);\par
{\bkmkstart AAAAAAAGSS}{\bkmkend AAAAAAAGSS}
00134         \}\par
{\bkmkstart AAAAAAAGST}{\bkmkend AAAAAAAGST}
00135         {\cf19 return} result;\par
{\bkmkstart AAAAAAAGSU}{\bkmkend AAAAAAAGSU}
00136     \}\par
{\bkmkstart AAAAAAAGSV}{\bkmkend AAAAAAAGSV}
00137 \};\par
{\bkmkstart AAAAAAAGSW}{\bkmkend AAAAAAAGSW}
00138 \par
{\bkmkstart AAAAAAAGSX}{\bkmkend AAAAAAAGSX}
00139 {\cf17 class }StringViewComprehensiveTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAGSY}{\bkmkend AAAAAAAGSY}
00140 {\cf17 protected}:\par
{\bkmkstart AAAAAAAGSZ}{\bkmkend AAAAAAAGSZ}
00141     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGTA}{\bkmkend AAAAAAAGTA}
00142         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAGTB}{\bkmkend AAAAAAAGTB}
00143     \}\par
{\bkmkstart AAAAAAAGTC}{\bkmkend AAAAAAAGTC}
00144     \par
{\bkmkstart AAAAAAAGTD}{\bkmkend AAAAAAAGTD}
00145     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGTE}{\bkmkend AAAAAAAGTE}
00146         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAGTF}{\bkmkend AAAAAAAGTF}
00147     \}\par
{\bkmkstart AAAAAAAGTG}{\bkmkend AAAAAAAGTG}
00148 \};\par
{\bkmkstart AAAAAAAGTH}{\bkmkend AAAAAAAGTH}
00149 \par
{\bkmkstart AAAAAAAGTI}{\bkmkend AAAAAAAGTI}
00150 {\cf20 // Test basic construction}\par
{\bkmkstart AAAAAAAGTJ}{\bkmkend AAAAAAAGTJ}
00151 TEST_F(StringViewComprehensiveTest, TestConstruction) \{\par
{\bkmkstart AAAAAAAGTR}{\bkmkend AAAAAAAGTR}
00152     {\cf20 // Default construction}\par
{\bkmkstart AAAAAAAGTS}{\bkmkend AAAAAAAGTS}
00153     StringView sv1;\par
{\bkmkstart AAAAAAAGTU}{\bkmkend AAAAAAAGTU}
00154     EXPECT_TRUE(sv1.empty());\par
{\bkmkstart AAAAAAAGTV}{\bkmkend AAAAAAAGTV}
00155     EXPECT_EQ(sv1.size(), 0);\par
{\bkmkstart AAAAAAAGTY}{\bkmkend AAAAAAAGTY}
00156     EXPECT_EQ(sv1.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAGUA}{\bkmkend AAAAAAAGUA}
00157     \par
{\bkmkstart AAAAAAAGUC}{\bkmkend AAAAAAAGUC}
00158     {\cf20 // Construction from C-string}\par
{\bkmkstart AAAAAAAGUD}{\bkmkend AAAAAAAGUD}
00159     {\cf17 const} {\cf18 char}* str = {\cf22 "hello"};\par
{\bkmkstart AAAAAAAGUF}{\bkmkend AAAAAAAGUF}
00160     StringView sv2(str);\par
{\bkmkstart AAAAAAAGUI}{\bkmkend AAAAAAAGUI}
00161     EXPECT_FALSE(sv2.empty());\par
{\bkmkstart AAAAAAAGUK}{\bkmkend AAAAAAAGUK}
00162     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAGUL}{\bkmkend AAAAAAAGUL}
00163     EXPECT_EQ(sv2.data(), str);\par
{\bkmkstart AAAAAAAGWB}{\bkmkend AAAAAAAGWB}
00164     \par
{\bkmkstart AAAAAAAGWD}{\bkmkend AAAAAAAGWD}
00165     {\cf20 // Construction from C-string with length}\par
{\bkmkstart AAAAAAAGWE}{\bkmkend AAAAAAAGWE}
00166     StringView sv3(str, 3);\par
{\bkmkstart AAAAAAAGWG}{\bkmkend AAAAAAAGWG}
00167     EXPECT_FALSE(sv3.empty());\par
{\bkmkstart AAAAAAAGWM}{\bkmkend AAAAAAAGWM}
00168     EXPECT_EQ(sv3.size(), 3);\par
{\bkmkstart AAAAAAAGWO}{\bkmkend AAAAAAAGWO}
00169     EXPECT_EQ(sv3.data(), str);\par
{\bkmkstart AAAAAAAGWQ}{\bkmkend AAAAAAAGWQ}
00170     \par
{\bkmkstart AAAAAAAGWS}{\bkmkend AAAAAAAGWS}
00171     {\cf20 // Construction from std::string}\par
{\bkmkstart AAAAAAAGWT}{\bkmkend AAAAAAAGWT}
00172     std::string s = {\cf22 "world"};\par
{\bkmkstart AAAAAAAGWX}{\bkmkend AAAAAAAGWX}
00173     StringView sv4(s);\par
{\bkmkstart AAAAAAAGWY}{\bkmkend AAAAAAAGWY}
00174     EXPECT_FALSE(sv4.empty());\par
{\bkmkstart AAAAAAAGXA}{\bkmkend AAAAAAAGXA}
00175     EXPECT_EQ(sv4.size(), 5);\par
{\bkmkstart AAAAAAAGXC}{\bkmkend AAAAAAAGXC}
00176     EXPECT_EQ(sv4.data(), s.c_str());\par
{\bkmkstart AAAAAAAGXE}{\bkmkend AAAAAAAGXE}
00177     \par
{\bkmkstart AAAAAAAGXF}{\bkmkend AAAAAAAGXF}
00178     {\cf20 // Construction from null pointer}\par
{\bkmkstart AAAAAAAGXG}{\bkmkend AAAAAAAGXG}
00179     StringView sv5({\cf17 nullptr});\par
{\bkmkstart AAAAAAAGXI}{\bkmkend AAAAAAAGXI}
00180     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAGZA}{\bkmkend AAAAAAAGZA}
00181     EXPECT_EQ(sv5.size(), 0);\par
{\bkmkstart AAAAAAAGZD}{\bkmkend AAAAAAAGZD}
00182     EXPECT_EQ(sv5.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAGZH}{\bkmkend AAAAAAAGZH}
00183 \}\par
{\bkmkstart AAAAAAAGZI}{\bkmkend AAAAAAAGZI}
00184 \par
{\bkmkstart AAAAAAAGZJ}{\bkmkend AAAAAAAGZJ}
00185 {\cf20 // Test access methods}\par
{\bkmkstart AAAAAAAGZL}{\bkmkend AAAAAAAGZL}
00186 TEST_F(StringViewComprehensiveTest, TestAccess) \{\par
{\bkmkstart AAAAAAAGZP}{\bkmkend AAAAAAAGZP}
00187     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAGZT}{\bkmkend AAAAAAAGZT}
00188     \par
{\bkmkstart AAAAAAAGZU}{\bkmkend AAAAAAAGZU}
00189     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAGZW}{\bkmkend AAAAAAAGZW}
00190     EXPECT_EQ(sv[0], {\cf23 'h'});\par
{\bkmkstart AAAAAAAGZX}{\bkmkend AAAAAAAGZX}
00191     EXPECT_EQ(sv[1], {\cf23 'e'});\par
{\bkmkstart AAAAAAAGZZ}{\bkmkend AAAAAAAGZZ}
00192     EXPECT_EQ(sv[2], {\cf23 'l'});\par
{\bkmkstart AAAAAAAHAA}{\bkmkend AAAAAAAHAA}
00193     EXPECT_EQ(sv[3], {\cf23 'l'});\par
{\bkmkstart AAAAAAAHAB}{\bkmkend AAAAAAAHAB}
00194     EXPECT_EQ(sv[4], {\cf23 'o'});\par
{\bkmkstart AAAAAAAHAD}{\bkmkend AAAAAAAHAD}
00195     \par
{\bkmkstart AAAAAAAHAE}{\bkmkend AAAAAAAHAE}
00196     {\cf20 // Test at()}\par
{\bkmkstart AAAAAAAHAF}{\bkmkend AAAAAAAHAF}
00197     EXPECT_EQ(sv.at(0), {\cf23 'h'});\par
{\bkmkstart AAAAAAAHAG}{\bkmkend AAAAAAAHAG}
00198     EXPECT_EQ(sv.at(1), {\cf23 'e'});\par
{\bkmkstart AAAAAAAHAH}{\bkmkend AAAAAAAHAH}
00199     EXPECT_EQ(sv.at(2), {\cf23 'l'});\par
{\bkmkstart AAAAAAAHAJ}{\bkmkend AAAAAAAHAJ}
00200     EXPECT_EQ(sv.at(3), {\cf23 'l'});\par
{\bkmkstart AAAAAAAHAL}{\bkmkend AAAAAAAHAL}
00201     EXPECT_EQ(sv.at(4), {\cf23 'o'});\par
{\bkmkstart AAAAAAAHAN}{\bkmkend AAAAAAAHAN}
00202     \par
{\bkmkstart AAAAAAAHAO}{\bkmkend AAAAAAAHAO}
00203     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAHAP}{\bkmkend AAAAAAAHAP}
00204     EXPECT_THROW(sv[5], std::out_of_range);\par
{\bkmkstart AAAAAAAHAR}{\bkmkend AAAAAAAHAR}
00205     EXPECT_THROW(sv.at(5), std::out_of_range);\par
{\bkmkstart AAAAAAAHAT}{\bkmkend AAAAAAAHAT}
00206     EXPECT_THROW(sv[-1], std::out_of_range);\par
{\bkmkstart AAAAAAAHAV}{\bkmkend AAAAAAAHAV}
00207     EXPECT_THROW(sv.at(-1), std::out_of_range);\par
{\bkmkstart AAAAAAAHAY}{\bkmkend AAAAAAAHAY}
00208 \}\par
{\bkmkstart AAAAAAAHBA}{\bkmkend AAAAAAAHBA}
00209 \par
{\bkmkstart AAAAAAAHBB}{\bkmkend AAAAAAAHBB}
00210 {\cf20 // Test substring operations}\par
{\bkmkstart AAAAAAAHBC}{\bkmkend AAAAAAAHBC}
00211 TEST_F(StringViewComprehensiveTest, TestSubstr) \{\par
{\bkmkstart AAAAAAAHBD}{\bkmkend AAAAAAAHBD}
00212     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHBF}{\bkmkend AAAAAAAHBF}
00213     \par
{\bkmkstart AAAAAAAHBG}{\bkmkend AAAAAAAHBG}
00214     {\cf20 // Test full substring}\par
{\bkmkstart AAAAAAAHBH}{\bkmkend AAAAAAAHBH}
00215     StringView sv1 = sv.substr();\par
{\bkmkstart AAAAAAAHBJ}{\bkmkend AAAAAAAHBJ}
00216     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAHBM}{\bkmkend AAAAAAAHBM}
00217     \par
{\bkmkstart AAAAAAAHBN}{\bkmkend AAAAAAAHBN}
00218     {\cf20 // Test substring from beginning}\par
{\bkmkstart AAAAAAAHBQ}{\bkmkend AAAAAAAHBQ}
00219     StringView sv2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAHBS}{\bkmkend AAAAAAAHBS}
00220     EXPECT_EQ(sv2, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAHBU}{\bkmkend AAAAAAAHBU}
00221     \par
{\bkmkstart AAAAAAAHBW}{\bkmkend AAAAAAAHBW}
00222     {\cf20 // Test substring from middle}\par
{\bkmkstart AAAAAAAHBY}{\bkmkend AAAAAAAHBY}
00223     StringView sv3 = sv.substr(6, 5);\par
{\bkmkstart AAAAAAAHCA}{\bkmkend AAAAAAAHCA}
00224     EXPECT_EQ(sv3, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAHCC}{\bkmkend AAAAAAAHCC}
00225     \par
{\bkmkstart AAAAAAAHCD}{\bkmkend AAAAAAAHCD}
00226     {\cf20 // Test substring with npos}\par
{\bkmkstart AAAAAAAHCF}{\bkmkend AAAAAAAHCF}
00227     StringView sv4 = sv.substr(6);\par
{\bkmkstart AAAAAAAHCG}{\bkmkend AAAAAAAHCG}
00228     EXPECT_EQ(sv4, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAHCJ}{\bkmkend AAAAAAAHCJ}
00229     \par
{\bkmkstart AAAAAAAHCL}{\bkmkend AAAAAAAHCL}
00230     {\cf20 // Test empty substring}\par
{\bkmkstart AAAAAAAHCR}{\bkmkend AAAAAAAHCR}
00231     StringView sv5 = sv.substr(5, 0);\par
{\bkmkstart AAAAAAAHCU}{\bkmkend AAAAAAAHCU}
00232     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAHCW}{\bkmkend AAAAAAAHCW}
00233     \par
{\bkmkstart AAAAAAAHCY}{\bkmkend AAAAAAAHCY}
00234     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAHCZ}{\bkmkend AAAAAAAHCZ}
00235     EXPECT_THROW(sv.substr(20), std::out_of_range);\par
{\bkmkstart AAAAAAAHDB}{\bkmkend AAAAAAAHDB}
00236     EXPECT_THROW(sv.substr(5, 20), std::out_of_range);\par
{\bkmkstart AAAAAAAHDE}{\bkmkend AAAAAAAHDE}
00237 \}\par
{\bkmkstart AAAAAAAHDG}{\bkmkend AAAAAAAHDG}
00238 \par
{\bkmkstart AAAAAAAHDH}{\bkmkend AAAAAAAHDH}
00239 {\cf20 // Test find operations}\par
{\bkmkstart AAAAAAAHDI}{\bkmkend AAAAAAAHDI}
00240 TEST_F(StringViewComprehensiveTest, TestFind) \{\par
{\bkmkstart AAAAAAAHDK}{\bkmkend AAAAAAAHDK}
00241     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHDM}{\bkmkend AAAAAAAHDM}
00242     \par
{\bkmkstart AAAAAAAHDN}{\bkmkend AAAAAAAHDN}
00243     {\cf20 // Test find character}\par
{\bkmkstart AAAAAAAHDP}{\bkmkend AAAAAAAHDP}
00244     EXPECT_EQ(sv.find({\cf23 'h'}), 0);\par
{\bkmkstart AAAAAAAHDR}{\bkmkend AAAAAAAHDR}
00245     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHDT}{\bkmkend AAAAAAAHDT}
00246     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHDW}{\bkmkend AAAAAAAHDW}
00247     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHDX}{\bkmkend AAAAAAAHDX}
00248     EXPECT_EQ(sv.find({\cf23 'w'}), 6);\par
{\bkmkstart AAAAAAAHDY}{\bkmkend AAAAAAAHDY}
00249     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAAHDZ}{\bkmkend AAAAAAAHDZ}
00250     EXPECT_EQ(sv.find({\cf23 'x'}), std::string::npos);\par
{\bkmkstart AAAAAAAHEA}{\bkmkend AAAAAAAHEA}
00251     \par
{\bkmkstart AAAAAAAHEB}{\bkmkend AAAAAAAHEB}
00252     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAHEC}{\bkmkend AAAAAAAHEC}
00253     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAHED}{\bkmkend AAAAAAAHED}
00254     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAHEE}{\bkmkend AAAAAAAHEE}
00255     EXPECT_EQ(sv.find({\cf23 'l'}, 10), std::string::npos);\par
{\bkmkstart AAAAAAAHEF}{\bkmkend AAAAAAAHEF}
00256     \par
{\bkmkstart AAAAAAAHEG}{\bkmkend AAAAAAAHEG}
00257     {\cf20 // Test find string}\par
{\bkmkstart AAAAAAAHEH}{\bkmkend AAAAAAAHEH}
00258     EXPECT_EQ(sv.find(StringView({\cf22 "hello"})), 0);\par
{\bkmkstart AAAAAAAHEI}{\bkmkend AAAAAAAHEI}
00259     EXPECT_EQ(sv.find(StringView({\cf22 "world"})), 6);\par
{\bkmkstart AAAAAAAHEL}{\bkmkend AAAAAAAHEL}
00260     EXPECT_EQ(sv.find(StringView({\cf22 "lo"})), 3);\par
{\bkmkstart AAAAAAAHEN}{\bkmkend AAAAAAAHEN}
00261     EXPECT_EQ(sv.find(StringView({\cf22 "xyz"})), std::string::npos);\par
{\bkmkstart AAAAAAAHEP}{\bkmkend AAAAAAAHEP}
00262     \par
{\bkmkstart AAAAAAAHEQ}{\bkmkend AAAAAAAHEQ}
00263     {\cf20 // Test find empty string}\par
{\bkmkstart AAAAAAAHES}{\bkmkend AAAAAAAHES}
00264     EXPECT_EQ(sv.find(StringView({\cf22 ""})), 0);\par
{\bkmkstart AAAAAAAHEV}{\bkmkend AAAAAAAHEV}
00265     \par
{\bkmkstart AAAAAAAHEW}{\bkmkend AAAAAAAHEW}
00266     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAHEX}{\bkmkend AAAAAAAHEX}
00267     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 2), 3);\par
{\bkmkstart AAAAAAAHEY}{\bkmkend AAAAAAAHEY}
00268     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 4), std::string::npos);\par
{\bkmkstart AAAAAAAHFB}{\bkmkend AAAAAAAHFB}
00269 \}\par
{\bkmkstart AAAAAAAHFC}{\bkmkend AAAAAAAHFC}
00270 \par
{\bkmkstart AAAAAAAHFD}{\bkmkend AAAAAAAHFD}
00271 {\cf20 // Test prefix/suffix operations}\par
{\bkmkstart AAAAAAAHFF}{\bkmkend AAAAAAAHFF}
00272 TEST_F(StringViewComprehensiveTest, TestPrefixSuffix) \{\par
{\bkmkstart AAAAAAAHFI}{\bkmkend AAAAAAAHFI}
00273     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHFK}{\bkmkend AAAAAAAHFK}
00274     \par
{\bkmkstart AAAAAAAHFL}{\bkmkend AAAAAAAHFL}
00275     {\cf20 // Test starts_with}\par
{\bkmkstart AAAAAAAHFM}{\bkmkend AAAAAAAHFM}
00276     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAHFP}{\bkmkend AAAAAAAHFP}
00277     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "he"})));\par
{\bkmkstart AAAAAAAHFQ}{\bkmkend AAAAAAAHFQ}
00278     EXPECT_TRUE(sv.starts_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAHFS}{\bkmkend AAAAAAAHFS}
00279     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAHFV}{\bkmkend AAAAAAAHFV}
00280     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAHFY}{\bkmkend AAAAAAAHFY}
00281     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAHGA}{\bkmkend AAAAAAAHGA}
00282     \par
{\bkmkstart AAAAAAAHGB}{\bkmkend AAAAAAAHGB}
00283     {\cf20 // Test ends_with}\par
{\bkmkstart AAAAAAAHGD}{\bkmkend AAAAAAAHGD}
00284     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAHGG}{\bkmkend AAAAAAAHGG}
00285     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "ld"})));\par
{\bkmkstart AAAAAAAHGH}{\bkmkend AAAAAAAHGH}
00286     EXPECT_TRUE(sv.ends_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAHGN}{\bkmkend AAAAAAAHGN}
00287     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAHGQ}{\bkmkend AAAAAAAHGQ}
00288     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAHGT}{\bkmkend AAAAAAAHGT}
00289     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "!hello world"})));\par
{\bkmkstart AAAAAAAHGW}{\bkmkend AAAAAAAHGW}
00290     \par
{\bkmkstart AAAAAAAHGX}{\bkmkend AAAAAAAHGX}
00291     {\cf20 // Test contains}\par
{\bkmkstart AAAAAAAHGY}{\bkmkend AAAAAAAHGY}
00292     EXPECT_TRUE(sv.contains(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAHHB}{\bkmkend AAAAAAAHHB}
00293     EXPECT_TRUE(sv.contains(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAHHD}{\bkmkend AAAAAAAHHD}
00294     EXPECT_TRUE(sv.contains(StringView({\cf22 "lo wo"})));\par
{\bkmkstart AAAAAAAHHF}{\bkmkend AAAAAAAHHF}
00295     EXPECT_TRUE(sv.contains(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAHHH}{\bkmkend AAAAAAAHHH}
00296     EXPECT_FALSE(sv.contains(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAHHM}{\bkmkend AAAAAAAHHM}
00297     EXPECT_FALSE(sv.contains(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAHHO}{\bkmkend AAAAAAAHHO}
00298 \}\par
{\bkmkstart AAAAAAAHHP}{\bkmkend AAAAAAAHHP}
00299 \par
{\bkmkstart AAAAAAAHHQ}{\bkmkend AAAAAAAHHQ}
00300 {\cf20 // Test remove operations}\par
{\bkmkstart AAAAAAAHHR}{\bkmkend AAAAAAAHHR}
00301 TEST_F(StringViewComprehensiveTest, TestRemove) \{\par
{\bkmkstart AAAAAAAHHT}{\bkmkend AAAAAAAHHT}
00302     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHHX}{\bkmkend AAAAAAAHHX}
00303     \par
{\bkmkstart AAAAAAAHHY}{\bkmkend AAAAAAAHHY}
00304     {\cf20 // Test remove_prefix}\par
{\bkmkstart AAAAAAAHHZ}{\bkmkend AAAAAAAHHZ}
00305     StringView sv1 = sv;\par
{\bkmkstart AAAAAAAHIA}{\bkmkend AAAAAAAHIA}
00306     sv1.remove_prefix(0);\par
{\bkmkstart AAAAAAAHID}{\bkmkend AAAAAAAHID}
00307     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAHIF}{\bkmkend AAAAAAAHIF}
00308     \par
{\bkmkstart AAAAAAAHIG}{\bkmkend AAAAAAAHIG}
00309     StringView sv2 = sv;\par
{\bkmkstart AAAAAAAHII}{\bkmkend AAAAAAAHII}
00310     sv2.remove_prefix(6);\par
{\bkmkstart AAAAAAAHIJ}{\bkmkend AAAAAAAHIJ}
00311     EXPECT_EQ(sv2, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAHIK}{\bkmkend AAAAAAAHIK}
00312     \par
{\bkmkstart AAAAAAAHIM}{\bkmkend AAAAAAAHIM}
00313     StringView sv3 = sv;\par
{\bkmkstart AAAAAAAHIO}{\bkmkend AAAAAAAHIO}
00314     sv3.remove_prefix(11);\par
{\bkmkstart AAAAAAAHIP}{\bkmkend AAAAAAAHIP}
00315     EXPECT_TRUE(sv3.empty());\par
{\bkmkstart AAAAAAAHIQ}{\bkmkend AAAAAAAHIQ}
00316     \par
{\bkmkstart AAAAAAAHIS}{\bkmkend AAAAAAAHIS}
00317     StringView sv4 = sv;\par
{\bkmkstart AAAAAAAHIT}{\bkmkend AAAAAAAHIT}
00318     sv4.remove_prefix(20);\par
{\bkmkstart AAAAAAAHIV}{\bkmkend AAAAAAAHIV}
00319     EXPECT_TRUE(sv4.empty());\par
{\bkmkstart AAAAAAAHIY}{\bkmkend AAAAAAAHIY}
00320     \par
{\bkmkstart AAAAAAAHIZ}{\bkmkend AAAAAAAHIZ}
00321     {\cf20 // Test remove_suffix}\par
{\bkmkstart AAAAAAAHJA}{\bkmkend AAAAAAAHJA}
00322     StringView sv5 = sv;\par
{\bkmkstart AAAAAAAHJC}{\bkmkend AAAAAAAHJC}
00323     sv5.remove_suffix(0);\par
{\bkmkstart AAAAAAAHJD}{\bkmkend AAAAAAAHJD}
00324     EXPECT_EQ(sv5, sv);\par
{\bkmkstart AAAAAAAHJE}{\bkmkend AAAAAAAHJE}
00325     \par
{\bkmkstart AAAAAAAHJF}{\bkmkend AAAAAAAHJF}
00326     StringView sv6 = sv;\par
{\bkmkstart AAAAAAAHJJ}{\bkmkend AAAAAAAHJJ}
00327     sv6.remove_suffix(6);\par
{\bkmkstart AAAAAAAHJK}{\bkmkend AAAAAAAHJK}
00328     EXPECT_EQ(sv6, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAHJO}{\bkmkend AAAAAAAHJO}
00329     \par
{\bkmkstart AAAAAAAHJP}{\bkmkend AAAAAAAHJP}
00330     StringView sv7 = sv;\par
{\bkmkstart AAAAAAAHJQ}{\bkmkend AAAAAAAHJQ}
00331     sv7.remove_suffix(11);\par
{\bkmkstart AAAAAAAHJR}{\bkmkend AAAAAAAHJR}
00332     EXPECT_TRUE(sv7.empty());\par
{\bkmkstart AAAAAAAHJS}{\bkmkend AAAAAAAHJS}
00333     \par
{\bkmkstart AAAAAAAHJT}{\bkmkend AAAAAAAHJT}
00334     StringView sv8 = sv;\par
{\bkmkstart AAAAAAAHJU}{\bkmkend AAAAAAAHJU}
00335     sv8.remove_suffix(20);\par
{\bkmkstart AAAAAAAHJV}{\bkmkend AAAAAAAHJV}
00336     EXPECT_TRUE(sv8.empty());\par
{\bkmkstart AAAAAAAHJW}{\bkmkend AAAAAAAHJW}
00337 \}\par
{\bkmkstart AAAAAAAHJX}{\bkmkend AAAAAAAHJX}
00338 \par
{\bkmkstart AAAAAAAHJY}{\bkmkend AAAAAAAHJY}
00339 {\cf20 // Test conversion}\par
{\bkmkstart AAAAAAAHJZ}{\bkmkend AAAAAAAHJZ}
00340 TEST_F(StringViewComprehensiveTest, TestConversion) \{\par
{\bkmkstart AAAAAAAHKA}{\bkmkend AAAAAAAHKA}
00341     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHKB}{\bkmkend AAAAAAAHKB}
00342     \par
{\bkmkstart AAAAAAAHKC}{\bkmkend AAAAAAAHKC}
00343     {\cf20 // Test to_string}\par
{\bkmkstart AAAAAAAHKD}{\bkmkend AAAAAAAHKD}
00344     std::string str = sv.to_string();\par
{\bkmkstart AAAAAAAHKE}{\bkmkend AAAAAAAHKE}
00345     EXPECT_EQ(str, {\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHKF}{\bkmkend AAAAAAAHKF}
00346     \par
{\bkmkstart AAAAAAAHKG}{\bkmkend AAAAAAAHKG}
00347     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAHKH}{\bkmkend AAAAAAAHKH}
00348     StringView empty;\par
{\bkmkstart AAAAAAAHKI}{\bkmkend AAAAAAAHKI}
00349     std::string empty_str = empty.to_string();\par
{\bkmkstart AAAAAAAHKJ}{\bkmkend AAAAAAAHKJ}
00350     EXPECT_TRUE(empty_str.empty());\par
{\bkmkstart AAAAAAAHKK}{\bkmkend AAAAAAAHKK}
00351 \}\par
{\bkmkstart AAAAAAAHKL}{\bkmkend AAAAAAAHKL}
00352 \par
{\bkmkstart AAAAAAAHKM}{\bkmkend AAAAAAAHKM}
00353 {\cf20 // Test iterators}\par
{\bkmkstart AAAAAAAHKN}{\bkmkend AAAAAAAHKN}
00354 TEST_F(StringViewComprehensiveTest, TestIterators) \{\par
{\bkmkstart AAAAAAAHKO}{\bkmkend AAAAAAAHKO}
00355     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHKP}{\bkmkend AAAAAAAHKP}
00356     \par
{\bkmkstart AAAAAAAHKQ}{\bkmkend AAAAAAAHKQ}
00357     {\cf20 // Test begin/end}\par
{\bkmkstart AAAAAAAHKR}{\bkmkend AAAAAAAHKR}
00358     {\cf17 const} {\cf18 char}* begin = sv.begin();\par
{\bkmkstart AAAAAAAHKS}{\bkmkend AAAAAAAHKS}
00359     {\cf17 const} {\cf18 char}* end = sv.end();\par
{\bkmkstart AAAAAAAHKT}{\bkmkend AAAAAAAHKT}
00360     EXPECT_EQ(end - begin, 5);\par
{\bkmkstart AAAAAAAHKU}{\bkmkend AAAAAAAHKU}
00361     \par
{\bkmkstart AAAAAAAHKV}{\bkmkend AAAAAAAHKV}
00362     {\cf20 // Test iteration}\par
{\bkmkstart AAAAAAAHKW}{\bkmkend AAAAAAAHKW}
00363     std::string result;\par
{\bkmkstart AAAAAAAHKX}{\bkmkend AAAAAAAHKX}
00364     {\cf19 for} ({\cf17 auto} it = sv.begin(); it != sv.end(); ++it) \{\par
{\bkmkstart AAAAAAAHKY}{\bkmkend AAAAAAAHKY}
00365         result += *it;\par
{\bkmkstart AAAAAAAHKZ}{\bkmkend AAAAAAAHKZ}
00366     \}\par
{\bkmkstart AAAAAAAHLA}{\bkmkend AAAAAAAHLA}
00367     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAHLB}{\bkmkend AAAAAAAHLB}
00368     \par
{\bkmkstart AAAAAAAHLC}{\bkmkend AAAAAAAHLC}
00369     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAHLD}{\bkmkend AAAAAAAHLD}
00370     result.clear();\par
{\bkmkstart AAAAAAAHLE}{\bkmkend AAAAAAAHLE}
00371     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAHLF}{\bkmkend AAAAAAAHLF}
00372         result += c;\par
{\bkmkstart AAAAAAAHLG}{\bkmkend AAAAAAAHLG}
00373     \}\par
{\bkmkstart AAAAAAAHLH}{\bkmkend AAAAAAAHLH}
00374     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAHLI}{\bkmkend AAAAAAAHLI}
00375 \}\par
{\bkmkstart AAAAAAAHLJ}{\bkmkend AAAAAAAHLJ}
00376 \par
{\bkmkstart AAAAAAAHLK}{\bkmkend AAAAAAAHLK}
00377 {\cf20 // Test comparison operators}\par
{\bkmkstart AAAAAAAHLL}{\bkmkend AAAAAAAHLL}
00378 TEST_F(StringViewComprehensiveTest, TestComparison) \{\par
{\bkmkstart AAAAAAAHLM}{\bkmkend AAAAAAAHLM}
00379     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHLN}{\bkmkend AAAAAAAHLN}
00380     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHLO}{\bkmkend AAAAAAAHLO}
00381     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAHLP}{\bkmkend AAAAAAAHLP}
00382     StringView sv4({\cf22 "hell"});\par
{\bkmkstart AAAAAAAHLQ}{\bkmkend AAAAAAAHLQ}
00383     StringView sv5({\cf22 "helloo"});\par
{\bkmkstart AAAAAAAHLR}{\bkmkend AAAAAAAHLR}
00384     \par
{\bkmkstart AAAAAAAHLS}{\bkmkend AAAAAAAHLS}
00385     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAHLT}{\bkmkend AAAAAAAHLT}
00386     EXPECT_TRUE(sv1 == sv2);\par
{\bkmkstart AAAAAAAHLU}{\bkmkend AAAAAAAHLU}
00387     EXPECT_FALSE(sv1 == sv3);\par
{\bkmkstart AAAAAAAHLV}{\bkmkend AAAAAAAHLV}
00388     EXPECT_FALSE(sv1 == sv4);\par
{\bkmkstart AAAAAAAHLW}{\bkmkend AAAAAAAHLW}
00389     EXPECT_FALSE(sv1 == sv5);\par
{\bkmkstart AAAAAAAHLX}{\bkmkend AAAAAAAHLX}
00390     \par
{\bkmkstart AAAAAAAHLY}{\bkmkend AAAAAAAHLY}
00391     {\cf20 // Test inequality}\par
{\bkmkstart AAAAAAAHLZ}{\bkmkend AAAAAAAHLZ}
00392     EXPECT_FALSE(sv1 != sv2);\par
{\bkmkstart AAAAAAAHMA}{\bkmkend AAAAAAAHMA}
00393     EXPECT_TRUE(sv1 != sv3);\par
{\bkmkstart AAAAAAAHMB}{\bkmkend AAAAAAAHMB}
00394     EXPECT_TRUE(sv1 != sv4);\par
{\bkmkstart AAAAAAAHMC}{\bkmkend AAAAAAAHMC}
00395     EXPECT_TRUE(sv1 != sv5);\par
{\bkmkstart AAAAAAAHMD}{\bkmkend AAAAAAAHMD}
00396     \par
{\bkmkstart AAAAAAAHME}{\bkmkend AAAAAAAHME}
00397     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAHMF}{\bkmkend AAAAAAAHMF}
00398     EXPECT_TRUE(sv1 < sv3);\par
{\bkmkstart AAAAAAAHMG}{\bkmkend AAAAAAAHMG}
00399     EXPECT_FALSE(sv1 < sv2);\par
{\bkmkstart AAAAAAAHMH}{\bkmkend AAAAAAAHMH}
00400     EXPECT_FALSE(sv1 < sv4);\par
{\bkmkstart AAAAAAAHMI}{\bkmkend AAAAAAAHMI}
00401     EXPECT_TRUE(sv1 < sv5);\par
{\bkmkstart AAAAAAAHMJ}{\bkmkend AAAAAAAHMJ}
00402     \par
{\bkmkstart AAAAAAAHMK}{\bkmkend AAAAAAAHMK}
00403     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAHML}{\bkmkend AAAAAAAHML}
00404     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAAHMM}{\bkmkend AAAAAAAHMM}
00405     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAAHMN}{\bkmkend AAAAAAAHMN}
00406     EXPECT_FALSE(sv1 <= sv4);\par
{\bkmkstart AAAAAAAHMO}{\bkmkend AAAAAAAHMO}
00407     EXPECT_TRUE(sv1 <= sv5);\par
{\bkmkstart AAAAAAAHMP}{\bkmkend AAAAAAAHMP}
00408     \par
{\bkmkstart AAAAAAAHMQ}{\bkmkend AAAAAAAHMQ}
00409     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAHMR}{\bkmkend AAAAAAAHMR}
00410     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAAHMS}{\bkmkend AAAAAAAHMS}
00411     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAAHMT}{\bkmkend AAAAAAAHMT}
00412     EXPECT_TRUE(sv1 > sv4);\par
{\bkmkstart AAAAAAAHMU}{\bkmkend AAAAAAAHMU}
00413     EXPECT_FALSE(sv1 > sv5);\par
{\bkmkstart AAAAAAAHMV}{\bkmkend AAAAAAAHMV}
00414     \par
{\bkmkstart AAAAAAAHMW}{\bkmkend AAAAAAAHMW}
00415     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAHMX}{\bkmkend AAAAAAAHMX}
00416     EXPECT_TRUE(sv1 >= sv2);\par
{\bkmkstart AAAAAAAHMY}{\bkmkend AAAAAAAHMY}
00417     EXPECT_FALSE(sv1 >= sv3);\par
{\bkmkstart AAAAAAAHMZ}{\bkmkend AAAAAAAHMZ}
00418     EXPECT_TRUE(sv1 >= sv4);\par
{\bkmkstart AAAAAAAHNA}{\bkmkend AAAAAAAHNA}
00419     EXPECT_FALSE(sv1 >= sv5);\par
{\bkmkstart AAAAAAAHNB}{\bkmkend AAAAAAAHNB}
00420 \}\par
{\bkmkstart AAAAAAAHNC}{\bkmkend AAAAAAAHNC}
00421 \par
{\bkmkstart AAAAAAAHND}{\bkmkend AAAAAAAHND}
00422 {\cf20 // Test hash function}\par
{\bkmkstart AAAAAAAHNE}{\bkmkend AAAAAAAHNE}
00423 TEST_F(StringViewComprehensiveTest, TestHash) \{\par
{\bkmkstart AAAAAAAHNF}{\bkmkend AAAAAAAHNF}
00424     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHNG}{\bkmkend AAAAAAAHNG}
00425     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHNH}{\bkmkend AAAAAAAHNH}
00426     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAHNI}{\bkmkend AAAAAAAHNI}
00427     \par
{\bkmkstart AAAAAAAHNJ}{\bkmkend AAAAAAAHNJ}
00428     {\cf20 // Test same strings have same hash}\par
{\bkmkstart AAAAAAAHNK}{\bkmkend AAAAAAAHNK}
00429     EXPECT_EQ(sv1.hash(), sv2.hash());\par
{\bkmkstart AAAAAAAHNL}{\bkmkend AAAAAAAHNL}
00430     \par
{\bkmkstart AAAAAAAHNM}{\bkmkend AAAAAAAHNM}
00431     {\cf20 // Test different strings have different hash (very likely)}\par
{\bkmkstart AAAAAAAHNN}{\bkmkend AAAAAAAHNN}
00432     EXPECT_NE(sv1.hash(), sv3.hash());\par
{\bkmkstart AAAAAAAHNO}{\bkmkend AAAAAAAHNO}
00433     \par
{\bkmkstart AAAAAAAHNP}{\bkmkend AAAAAAAHNP}
00434     {\cf20 // Test empty string hash}\par
{\bkmkstart AAAAAAAHNQ}{\bkmkend AAAAAAAHNQ}
00435     StringView empty;\par
{\bkmkstart AAAAAAAHNR}{\bkmkend AAAAAAAHNR}
00436     EXPECT_EQ(empty.hash(), 0);\par
{\bkmkstart AAAAAAAHNS}{\bkmkend AAAAAAAHNS}
00437 \}\par
{\bkmkstart AAAAAAAHNT}{\bkmkend AAAAAAAHNT}
00438 \par
{\bkmkstart AAAAAAAHNU}{\bkmkend AAAAAAAHNU}
00439 {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAAHNV}{\bkmkend AAAAAAAHNV}
00440 TEST_F(StringViewComprehensiveTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAHNW}{\bkmkend AAAAAAAHNW}
00441     {\cf20 // Test empty string}\par
{\bkmkstart AAAAAAAHNX}{\bkmkend AAAAAAAHNX}
00442     StringView empty({\cf22 ""});\par
{\bkmkstart AAAAAAAHNY}{\bkmkend AAAAAAAHNY}
00443     EXPECT_TRUE(empty.empty());\par
{\bkmkstart AAAAAAAHNZ}{\bkmkend AAAAAAAHNZ}
00444     EXPECT_EQ(empty.size(), 0);\par
{\bkmkstart AAAAAAAHOA}{\bkmkend AAAAAAAHOA}
00445     EXPECT_EQ(empty.data(), {\cf22 ""});\par
{\bkmkstart AAAAAAAHOB}{\bkmkend AAAAAAAHOB}
00446     \par
{\bkmkstart AAAAAAAHOC}{\bkmkend AAAAAAAHOC}
00447     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAAHOD}{\bkmkend AAAAAAAHOD}
00448     StringView single({\cf22 "a"});\par
{\bkmkstart AAAAAAAHOE}{\bkmkend AAAAAAAHOE}
00449     EXPECT_FALSE(single.empty());\par
{\bkmkstart AAAAAAAHOF}{\bkmkend AAAAAAAHOF}
00450     EXPECT_EQ(single.size(), 1);\par
{\bkmkstart AAAAAAAHOG}{\bkmkend AAAAAAAHOG}
00451     EXPECT_EQ(single[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAHOH}{\bkmkend AAAAAAAHOH}
00452     \par
{\bkmkstart AAAAAAAHOI}{\bkmkend AAAAAAAHOI}
00453     {\cf20 // Test very long string}\par
{\bkmkstart AAAAAAAHOJ}{\bkmkend AAAAAAAHOJ}
00454     std::string long_str(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAHOK}{\bkmkend AAAAAAAHOK}
00455     StringView long_sv(long_str);\par
{\bkmkstart AAAAAAAHOL}{\bkmkend AAAAAAAHOL}
00456     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAHOM}{\bkmkend AAAAAAAHOM}
00457     EXPECT_EQ(long_sv[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAHON}{\bkmkend AAAAAAAHON}
00458     EXPECT_EQ(long_sv[999], {\cf23 'a'});\par
{\bkmkstart AAAAAAAHOO}{\bkmkend AAAAAAAHOO}
00459     \par
{\bkmkstart AAAAAAAHOP}{\bkmkend AAAAAAAHOP}
00460     {\cf20 // Test string with null characters}\par
{\bkmkstart AAAAAAAHOQ}{\bkmkend AAAAAAAHOQ}
00461     std::string null_str = {\cf22 "hello\\0world"};\par
{\bkmkstart AAAAAAAHOR}{\bkmkend AAAAAAAHOR}
00462     StringView null_sv(null_str.c_str(), 11);\par
{\bkmkstart AAAAAAAHOS}{\bkmkend AAAAAAAHOS}
00463     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAHOT}{\bkmkend AAAAAAAHOT}
00464     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAHOU}{\bkmkend AAAAAAAHOU}
00465     EXPECT_EQ(null_sv[6], {\cf23 'w'});\par
{\bkmkstart AAAAAAAHOV}{\bkmkend AAAAAAAHOV}
00466 \}\par
{\bkmkstart AAAAAAAHOW}{\bkmkend AAAAAAAHOW}
00467 \par
{\bkmkstart AAAAAAAHOX}{\bkmkend AAAAAAAHOX}
00468 {\cf20 // Test performance}\par
{\bkmkstart AAAAAAAHOY}{\bkmkend AAAAAAAHOY}
00469 TEST_F(StringViewComprehensiveTest, TestPerformance) \{\par
{\bkmkstart AAAAAAAHOZ}{\bkmkend AAAAAAAHOZ}
00470     std::string large_string(10000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAHPA}{\bkmkend AAAAAAAHPA}
00471     StringView sv(large_string);\par
{\bkmkstart AAAAAAAHPB}{\bkmkend AAAAAAAHPB}
00472     \par
{\bkmkstart AAAAAAAHPC}{\bkmkend AAAAAAAHPC}
00473     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAHPD}{\bkmkend AAAAAAAHPD}
00474     \par
{\bkmkstart AAAAAAAHPE}{\bkmkend AAAAAAAHPE}
00475     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAHPF}{\bkmkend AAAAAAAHPF}
00476     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAHPG}{\bkmkend AAAAAAAHPG}
00477         StringView substr = sv.substr(i % 1000, 100);\par
{\bkmkstart AAAAAAAHPH}{\bkmkend AAAAAAAHPH}
00478         {\cf18 size_t} pos = substr.find({\cf23 'a'});\par
{\bkmkstart AAAAAAAHPI}{\bkmkend AAAAAAAHPI}
00479         {\cf18 bool} starts = substr.starts_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAHPJ}{\bkmkend AAAAAAAHPJ}
00480         {\cf18 bool} ends = substr.ends_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAHPK}{\bkmkend AAAAAAAHPK}
00481         {\cf18 bool} contains = substr.contains(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAHPL}{\bkmkend AAAAAAAHPL}
00482         std::string str = substr.to_string();\par
{\bkmkstart AAAAAAAHPM}{\bkmkend AAAAAAAHPM}
00483     \}\par
{\bkmkstart AAAAAAAHPN}{\bkmkend AAAAAAAHPN}
00484     \par
{\bkmkstart AAAAAAAHPO}{\bkmkend AAAAAAAHPO}
00485     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAHPP}{\bkmkend AAAAAAAHPP}
00486     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAHPQ}{\bkmkend AAAAAAAHPQ}
00487     \par
{\bkmkstart AAAAAAAHPR}{\bkmkend AAAAAAAHPR}
00488     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAHPS}{\bkmkend AAAAAAAHPS}
00489     EXPECT_LT(duration.count(), 1000);\par
{\bkmkstart AAAAAAAHPT}{\bkmkend AAAAAAAHPT}
00490 \}\par
{\bkmkstart AAAAAAAHPU}{\bkmkend AAAAAAAHPU}
00491 \par
{\bkmkstart AAAAAAAHPV}{\bkmkend AAAAAAAHPV}
00492 {\cf20 // Test constexpr functionality}\par
{\bkmkstart AAAAAAAHPW}{\bkmkend AAAAAAAHPW}
00493 TEST_F(StringViewComprehensiveTest, TestConstexpr) \{\par
{\bkmkstart AAAAAAAHPX}{\bkmkend AAAAAAAHPX}
00494     {\cf17 constexpr} StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHPY}{\bkmkend AAAAAAAHPY}
00495     {\cf17 static_assert}(sv.size() == 5, {\cf22 "Size should be 5"});\par
{\bkmkstart AAAAAAAHPZ}{\bkmkend AAAAAAAHPZ}
00496     {\cf17 static_assert}(sv[0] == {\cf23 'h'}, {\cf22 "First character should be 'h'"});\par
{\bkmkstart AAAAAAAHQA}{\bkmkend AAAAAAAHQA}
00497     {\cf17 static_assert}(sv[4] == {\cf23 'o'}, {\cf22 "Last character should be 'o'"});\par
{\bkmkstart AAAAAAAHQB}{\bkmkend AAAAAAAHQB}
00498     {\cf17 static_assert}(!sv.empty(), {\cf22 "Should not be empty"});\par
{\bkmkstart AAAAAAAHQC}{\bkmkend AAAAAAAHQC}
00499     \par
{\bkmkstart AAAAAAAHQD}{\bkmkend AAAAAAAHQD}
00500     {\cf17 constexpr} StringView empty;\par
{\bkmkstart AAAAAAAHQE}{\bkmkend AAAAAAAHQE}
00501     {\cf17 static_assert}(empty.empty(), {\cf22 "Should be empty"});\par
{\bkmkstart AAAAAAAHQF}{\bkmkend AAAAAAAHQF}
00502     {\cf17 static_assert}(empty.size() == 0, {\cf22 "Size should be 0"});\par
{\bkmkstart AAAAAAAHQG}{\bkmkend AAAAAAAHQG}
00503 \}\par
{\bkmkstart AAAAAAAHQH}{\bkmkend AAAAAAAHQH}
00504 \par
{\bkmkstart AAAAAAAHQI}{\bkmkend AAAAAAAHQI}
00505 {\cf20 // Test copy and move semantics}\par
{\bkmkstart AAAAAAAHQJ}{\bkmkend AAAAAAAHQJ}
00506 TEST_F(StringViewComprehensiveTest, TestCopyMove) \{\par
{\bkmkstart AAAAAAAHQK}{\bkmkend AAAAAAAHQK}
00507     StringView original({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHQL}{\bkmkend AAAAAAAHQL}
00508     \par
{\bkmkstart AAAAAAAHQM}{\bkmkend AAAAAAAHQM}
00509     {\cf20 // Test copy construction}\par
{\bkmkstart AAAAAAAHQN}{\bkmkend AAAAAAAHQN}
00510     StringView copy(original);\par
{\bkmkstart AAAAAAAHQO}{\bkmkend AAAAAAAHQO}
00511     EXPECT_EQ(copy, original);\par
{\bkmkstart AAAAAAAHQP}{\bkmkend AAAAAAAHQP}
00512     EXPECT_EQ(copy.data(), original.data());\par
{\bkmkstart AAAAAAAHQQ}{\bkmkend AAAAAAAHQQ}
00513     EXPECT_EQ(copy.size(), original.size());\par
{\bkmkstart AAAAAAAHQR}{\bkmkend AAAAAAAHQR}
00514     \par
{\bkmkstart AAAAAAAHQS}{\bkmkend AAAAAAAHQS}
00515     {\cf20 // Test copy assignment}\par
{\bkmkstart AAAAAAAHQT}{\bkmkend AAAAAAAHQT}
00516     StringView assigned;\par
{\bkmkstart AAAAAAAHQU}{\bkmkend AAAAAAAHQU}
00517     assigned = original;\par
{\bkmkstart AAAAAAAHQV}{\bkmkend AAAAAAAHQV}
00518     EXPECT_EQ(assigned, original);\par
{\bkmkstart AAAAAAAHQW}{\bkmkend AAAAAAAHQW}
00519     EXPECT_EQ(assigned.data(), original.data());\par
{\bkmkstart AAAAAAAHQX}{\bkmkend AAAAAAAHQX}
00520     EXPECT_EQ(assigned.size(), original.size());\par
{\bkmkstart AAAAAAAHQY}{\bkmkend AAAAAAAHQY}
00521     \par
{\bkmkstart AAAAAAAHQZ}{\bkmkend AAAAAAAHQZ}
00522     {\cf20 // Test move construction}\par
{\bkmkstart AAAAAAAHRA}{\bkmkend AAAAAAAHRA}
00523     StringView moved(std::move(original));\par
{\bkmkstart AAAAAAAHRB}{\bkmkend AAAAAAAHRB}
00524     EXPECT_EQ(moved, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAHRC}{\bkmkend AAAAAAAHRC}
00525     \par
{\bkmkstart AAAAAAAHRD}{\bkmkend AAAAAAAHRD}
00526     {\cf20 // Test move assignment}\par
{\bkmkstart AAAAAAAHRE}{\bkmkend AAAAAAAHRE}
00527     StringView move_assigned;\par
{\bkmkstart AAAAAAAHRF}{\bkmkend AAAAAAAHRF}
00528     move_assigned = std::move(moved);\par
{\bkmkstart AAAAAAAHRG}{\bkmkend AAAAAAAHRG}
00529     EXPECT_EQ(move_assigned, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAHRH}{\bkmkend AAAAAAAHRH}
00530 \}\par
}
}