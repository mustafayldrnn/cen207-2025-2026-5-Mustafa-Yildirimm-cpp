{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_comprehensive.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\bkmkstart AAAAAAAEGY}
{\bkmkend AAAAAAAEGY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHA" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEIL}{\bkmkend AAAAAAAEIL}
00001 \par
{\bkmkstart AAAAAAAEIP}{\bkmkend AAAAAAAEIP}
00008 \par
{\bkmkstart AAAAAAAEIR}{\bkmkend AAAAAAAEIR}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAEJH}{\bkmkend AAAAAAAEJH}
00010 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAEJR}{\bkmkend AAAAAAAEJR}
00011 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAEJZ}{\bkmkend AAAAAAAEJZ}
00012 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAEKK}{\bkmkend AAAAAAAEKK}
00013 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAEKP}{\bkmkend AAAAAAAEKP}
00014 \par
{\bkmkstart AAAAAAAEKQ}{\bkmkend AAAAAAAEKQ}
00015 {\cf20 // Mock StringView implementation for testing}\par
{\bkmkstart AAAAAAAEKR}{\bkmkend AAAAAAAEKR}
00016 {\cf17 class }StringView \{\par
{\bkmkstart AAAAAAAEKU}{\bkmkend AAAAAAAEKU}
00017 {\cf17 private}:\par
{\bkmkstart AAAAAAAEKV}{\bkmkend AAAAAAAEKV}
00018     {\cf17 const} {\cf18 char}* data_;\par
{\bkmkstart AAAAAAAEKY}{\bkmkend AAAAAAAEKY}
00019     {\cf18 size_t} size_;\par
{\bkmkstart AAAAAAAELA}{\bkmkend AAAAAAAELA}
00020 \par
{\bkmkstart AAAAAAAELB}{\bkmkend AAAAAAAELB}
00021 {\cf17 public}:\par
{\bkmkstart AAAAAAAELD}{\bkmkend AAAAAAAELD}
00022     StringView() : data_(nullptr), size_(0) \{\}\par
{\bkmkstart AAAAAAAELI}{\bkmkend AAAAAAAELI}
00023     \par
{\bkmkstart AAAAAAAELJ}{\bkmkend AAAAAAAELJ}
00024     StringView({\cf17 const} {\cf18 char}* str) : data_(str), size_(str ? std::strlen(str) : 0) \{\}\par
{\bkmkstart AAAAAAAELP}{\bkmkend AAAAAAAELP}
00025     \par
{\bkmkstart AAAAAAAELQ}{\bkmkend AAAAAAAELQ}
00026     StringView({\cf17 const} {\cf18 char}* str, {\cf18 size_t} len) : data_(str), size_(len) \{\}\par
{\bkmkstart AAAAAAAELV}{\bkmkend AAAAAAAELV}
00027     \par
{\bkmkstart AAAAAAAELW}{\bkmkend AAAAAAAELW}
00028     StringView({\cf17 const} std::string& str) : data_(str.c_str()), size_(str.size()) \{\}\par
{\bkmkstart AAAAAAAEMC}{\bkmkend AAAAAAAEMC}
00029     \par
{\bkmkstart AAAAAAAEMD}{\bkmkend AAAAAAAEMD}
00030     {\cf17 const} {\cf18 char}* data(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAEMF}{\bkmkend AAAAAAAEMF}
00031     {\cf18 size_t} size(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAEMI}{\bkmkend AAAAAAAEMI}
00032     {\cf18 size_t} length(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAEML}{\bkmkend AAAAAAAEML}
00033     {\cf18 bool} empty(){\cf17  const }\{ {\cf19 return} size_ == 0; \}\par
{\bkmkstart AAAAAAAEMO}{\bkmkend AAAAAAAEMO}
00034     \par
{\bkmkstart AAAAAAAEMP}{\bkmkend AAAAAAAEMP}
00035     {\cf18 char} operator[]({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAEMS}{\bkmkend AAAAAAAEMS}
00036         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAEMW}{\bkmkend AAAAAAAEMW}
00037         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAEMY}{\bkmkend AAAAAAAEMY}
00038     \}\par
{\bkmkstart AAAAAAAEMZ}{\bkmkend AAAAAAAEMZ}
00039     \par
{\bkmkstart AAAAAAAENA}{\bkmkend AAAAAAAENA}
00040     {\cf18 char} at({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAENC}{\bkmkend AAAAAAAENC}
00041         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAENG}{\bkmkend AAAAAAAENG}
00042         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAENI}{\bkmkend AAAAAAAENI}
00043     \}\par
{\bkmkstart AAAAAAAENK}{\bkmkend AAAAAAAENK}
00044     \par
{\bkmkstart AAAAAAAENL}{\bkmkend AAAAAAAENL}
00045     StringView substr({\cf18 size_t} pos = 0, {\cf18 size_t} len = std::string::npos){\cf17  const }\{\par
{\bkmkstart AAAAAAAENO}{\bkmkend AAAAAAAENO}
00046         {\cf19 if} (pos > size_) {\cf19 throw} std::out_of_range({\cf22 "Position out of range"});\par
{\bkmkstart AAAAAAAENS}{\bkmkend AAAAAAAENS}
00047         {\cf18 size_t} actual_len = std::min(len, size_ - pos);\par
{\bkmkstart AAAAAAAENV}{\bkmkend AAAAAAAENV}
00048         {\cf19 return} StringView(data_ + pos, actual_len);\par
{\bkmkstart AAAAAAAENW}{\bkmkend AAAAAAAENW}
00049     \}\par
{\bkmkstart AAAAAAAENX}{\bkmkend AAAAAAAENX}
00050     \par
{\bkmkstart AAAAAAAENY}{\bkmkend AAAAAAAENY}
00051     {\cf18 size_t} find({\cf18 char} c, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAEOC}{\bkmkend AAAAAAAEOC}
00052         {\cf19 for} ({\cf18 size_t} i = pos; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAEOE}{\bkmkend AAAAAAAEOE}
00053             {\cf19 if} (data_[i] == c) {\cf19 return} i;\par
{\bkmkstart AAAAAAAEOJ}{\bkmkend AAAAAAAEOJ}
00054         \}\par
{\bkmkstart AAAAAAAEOL}{\bkmkend AAAAAAAEOL}
00055         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAEOO}{\bkmkend AAAAAAAEOO}
00056     \}\par
{\bkmkstart AAAAAAAEOQ}{\bkmkend AAAAAAAEOQ}
00057     \par
{\bkmkstart AAAAAAAEOR}{\bkmkend AAAAAAAEOR}
00058     {\cf18 size_t} find({\cf17 const} StringView& str, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAEOU}{\bkmkend AAAAAAAEOU}
00059         {\cf19 if} (str.size() > size_ - pos) {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAEOX}{\bkmkend AAAAAAAEOX}
00060         {\cf19 for} ({\cf18 size_t} i = pos; i <= size_ - str.size(); ++i) \{\par
{\bkmkstart AAAAAAAEPC}{\bkmkend AAAAAAAEPC}
00061             {\cf19 if} (std::memcmp(data_ + i, str.data_, str.size_) == 0) \{\par
{\bkmkstart AAAAAAAEPI}{\bkmkend AAAAAAAEPI}
00062                 {\cf19 return} i;\par
{\bkmkstart AAAAAAAEPJ}{\bkmkend AAAAAAAEPJ}
00063             \}\par
{\bkmkstart AAAAAAAEPL}{\bkmkend AAAAAAAEPL}
00064         \}\par
{\bkmkstart AAAAAAAEPN}{\bkmkend AAAAAAAEPN}
00065         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAEPP}{\bkmkend AAAAAAAEPP}
00066     \}\par
{\bkmkstart AAAAAAAEPR}{\bkmkend AAAAAAAEPR}
00067     \par
{\bkmkstart AAAAAAAEPS}{\bkmkend AAAAAAAEPS}
00068     {\cf18 bool} starts_with({\cf17 const} StringView& prefix){\cf17  const }\{\par
{\bkmkstart AAAAAAAEPV}{\bkmkend AAAAAAAEPV}
00069         {\cf19 if} (prefix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAEQE}{\bkmkend AAAAAAAEQE}
00070         {\cf19 return} std::memcmp(data_, prefix.data_, prefix.size_) == 0;\par
{\bkmkstart AAAAAAAEQN}{\bkmkend AAAAAAAEQN}
00071     \}\par
{\bkmkstart AAAAAAAEQO}{\bkmkend AAAAAAAEQO}
00072     \par
{\bkmkstart AAAAAAAEQP}{\bkmkend AAAAAAAEQP}
00073     {\cf18 bool} ends_with({\cf17 const} StringView& suffix){\cf17  const }\{\par
{\bkmkstart AAAAAAAEQV}{\bkmkend AAAAAAAEQV}
00074         {\cf19 if} (suffix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAERA}{\bkmkend AAAAAAAERA}
00075         {\cf19 return} std::memcmp(data_ + size_ - suffix.size(), suffix.data_, suffix.size_) == 0;\par
{\bkmkstart AAAAAAAERF}{\bkmkend AAAAAAAERF}
00076     \}\par
{\bkmkstart AAAAAAAERH}{\bkmkend AAAAAAAERH}
00077     \par
{\bkmkstart AAAAAAAERJ}{\bkmkend AAAAAAAERJ}
00078     {\cf18 bool} contains({\cf17 const} StringView& str){\cf17  const }\{\par
{\bkmkstart AAAAAAAERN}{\bkmkend AAAAAAAERN}
00079         {\cf19 return} find(str) != std::string::npos;\par
{\bkmkstart AAAAAAAERP}{\bkmkend AAAAAAAERP}
00080     \}\par
{\bkmkstart AAAAAAAERQ}{\bkmkend AAAAAAAERQ}
00081     \par
{\bkmkstart AAAAAAAERS}{\bkmkend AAAAAAAERS}
00082     {\cf18 void} remove_prefix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAERU}{\bkmkend AAAAAAAERU}
00083         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAERX}{\bkmkend AAAAAAAERX}
00084         data_ += n;\par
{\bkmkstart AAAAAAAERY}{\bkmkend AAAAAAAERY}
00085         size_ -= n;\par
{\bkmkstart AAAAAAAESB}{\bkmkend AAAAAAAESB}
00086     \}\par
{\bkmkstart AAAAAAAESC}{\bkmkend AAAAAAAESC}
00087     \par
{\bkmkstart AAAAAAAESD}{\bkmkend AAAAAAAESD}
00088     {\cf18 void} remove_suffix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAESG}{\bkmkend AAAAAAAESG}
00089         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAESJ}{\bkmkend AAAAAAAESJ}
00090         size_ -= n;\par
{\bkmkstart AAAAAAAESL}{\bkmkend AAAAAAAESL}
00091     \}\par
{\bkmkstart AAAAAAAESM}{\bkmkend AAAAAAAESM}
00092     \par
{\bkmkstart AAAAAAAESO}{\bkmkend AAAAAAAESO}
00093     std::string to_string(){\cf17  const }\{\par
{\bkmkstart AAAAAAAESQ}{\bkmkend AAAAAAAESQ}
00094         {\cf19 return} std::string(data_, size_);\par
{\bkmkstart AAAAAAAESS}{\bkmkend AAAAAAAESS}
00095     \}\par
{\bkmkstart AAAAAAAESU}{\bkmkend AAAAAAAESU}
00096     \par
{\bkmkstart AAAAAAAESW}{\bkmkend AAAAAAAESW}
00097     {\cf20 // Iterator support}\par
{\bkmkstart AAAAAAAESY}{\bkmkend AAAAAAAESY}
00098     {\cf17 const} {\cf18 char}* begin(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAETA}{\bkmkend AAAAAAAETA}
00099     {\cf17 const} {\cf18 char}* end(){\cf17  const }\{ {\cf19 return} data_ + size_; \}\par
{\bkmkstart AAAAAAAETC}{\bkmkend AAAAAAAETC}
00100     \par
{\bkmkstart AAAAAAAETD}{\bkmkend AAAAAAAETD}
00101     {\cf20 // Comparison operators}\par
{\bkmkstart AAAAAAAETF}{\bkmkend AAAAAAAETF}
00102     {\cf18 bool} operator==({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAETH}{\bkmkend AAAAAAAETH}
00103         {\cf19 if} (size_ != other.size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAETK}{\bkmkend AAAAAAAETK}
00104         {\cf19 return} std::memcmp(data_, other.data_, size_) == 0;\par
{\bkmkstart AAAAAAAETN}{\bkmkend AAAAAAAETN}
00105     \}\par
{\bkmkstart AAAAAAAETO}{\bkmkend AAAAAAAETO}
00106     \par
{\bkmkstart AAAAAAAETP}{\bkmkend AAAAAAAETP}
00107     {\cf18 bool} operator!=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAETV}{\bkmkend AAAAAAAETV}
00108         {\cf19 return} !(*{\cf17 this} == other);\par
{\bkmkstart AAAAAAAETY}{\bkmkend AAAAAAAETY}
00109     \}\par
{\bkmkstart AAAAAAAETZ}{\bkmkend AAAAAAAETZ}
00110     \par
{\bkmkstart AAAAAAAEUB}{\bkmkend AAAAAAAEUB}
00111     {\cf18 bool} operator<({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAEUF}{\bkmkend AAAAAAAEUF}
00112         {\cf18 int} result = std::memcmp(data_, other.data_, std::min(size_, other.size_));\par
{\bkmkstart AAAAAAAEUI}{\bkmkend AAAAAAAEUI}
00113         {\cf19 if} (result != 0) {\cf19 return} result < 0;\par
{\bkmkstart AAAAAAAEUL}{\bkmkend AAAAAAAEUL}
00114         {\cf19 return} size_ < other.size_;\par
{\bkmkstart AAAAAAAEUR}{\bkmkend AAAAAAAEUR}
00115     \}\par
{\bkmkstart AAAAAAAEUS}{\bkmkend AAAAAAAEUS}
00116     \par
{\bkmkstart AAAAAAAEUU}{\bkmkend AAAAAAAEUU}
00117     {\cf18 bool} operator<=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAEUY}{\bkmkend AAAAAAAEUY}
00118         {\cf19 return} *{\cf17 this} < other || *{\cf17 this} == other;\par
{\bkmkstart AAAAAAAEVB}{\bkmkend AAAAAAAEVB}
00119     \}\par
{\bkmkstart AAAAAAAEVC}{\bkmkend AAAAAAAEVC}
00120     \par
{\bkmkstart AAAAAAAEVE}{\bkmkend AAAAAAAEVE}
00121     {\cf18 bool} operator>({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAEVG}{\bkmkend AAAAAAAEVG}
00122         {\cf19 return} !(*{\cf17 this} <= other);\par
{\bkmkstart AAAAAAAEVI}{\bkmkend AAAAAAAEVI}
00123     \}\par
{\bkmkstart AAAAAAAEVJ}{\bkmkend AAAAAAAEVJ}
00124     \par
{\bkmkstart AAAAAAAEVK}{\bkmkend AAAAAAAEVK}
00125     {\cf18 bool} operator>=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAEVO}{\bkmkend AAAAAAAEVO}
00126         {\cf19 return} !(*{\cf17 this} < other);\par
{\bkmkstart AAAAAAAEVQ}{\bkmkend AAAAAAAEVQ}
00127     \}\par
{\bkmkstart AAAAAAAEVR}{\bkmkend AAAAAAAEVR}
00128     \par
{\bkmkstart AAAAAAAEVS}{\bkmkend AAAAAAAEVS}
00129     {\cf20 // Hash function}\par
{\bkmkstart AAAAAAAEVU}{\bkmkend AAAAAAAEVU}
00130     {\cf18 size_t} hash(){\cf17  const }\{\par
{\bkmkstart AAAAAAAEVW}{\bkmkend AAAAAAAEVW}
00131         {\cf18 size_t} result = 0;\par
{\bkmkstart AAAAAAAEVZ}{\bkmkend AAAAAAAEVZ}
00132         {\cf19 for} ({\cf18 size_t} i = 0; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAEWE}{\bkmkend AAAAAAAEWE}
00133             result = result * 31 + {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(data_[i]);\par
{\bkmkstart AAAAAAAEWJ}{\bkmkend AAAAAAAEWJ}
00134         \}\par
{\bkmkstart AAAAAAAEWK}{\bkmkend AAAAAAAEWK}
00135         {\cf19 return} result;\par
{\bkmkstart AAAAAAAEWM}{\bkmkend AAAAAAAEWM}
00136     \}\par
{\bkmkstart AAAAAAAEWP}{\bkmkend AAAAAAAEWP}
00137 \};\par
{\bkmkstart AAAAAAAEWR}{\bkmkend AAAAAAAEWR}
00138 \par
{\bkmkstart AAAAAAAEWT}{\bkmkend AAAAAAAEWT}
00139 {\cf17 class }StringViewComprehensiveTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAEWW}{\bkmkend AAAAAAAEWW}
00140 {\cf17 protected}:\par
{\bkmkstart AAAAAAAEWX}{\bkmkend AAAAAAAEWX}
00141     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEWZ}{\bkmkend AAAAAAAEWZ}
00142         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAEXA}{\bkmkend AAAAAAAEXA}
00143     \}\par
{\bkmkstart AAAAAAAEXC}{\bkmkend AAAAAAAEXC}
00144     \par
{\bkmkstart AAAAAAAEXD}{\bkmkend AAAAAAAEXD}
00145     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEXF}{\bkmkend AAAAAAAEXF}
00146         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAEXH}{\bkmkend AAAAAAAEXH}
00147     \}\par
{\bkmkstart AAAAAAAEXJ}{\bkmkend AAAAAAAEXJ}
00148 \};\par
{\bkmkstart AAAAAAAEXK}{\bkmkend AAAAAAAEXK}
00149 \par
{\bkmkstart AAAAAAAEXL}{\bkmkend AAAAAAAEXL}
00150 {\cf20 // Test basic construction}\par
{\bkmkstart AAAAAAAEXM}{\bkmkend AAAAAAAEXM}
00151 TEST_F(StringViewComprehensiveTest, TestConstruction) \{\par
{\bkmkstart AAAAAAAEXU}{\bkmkend AAAAAAAEXU}
00152     {\cf20 // Default construction}\par
{\bkmkstart AAAAAAAEXV}{\bkmkend AAAAAAAEXV}
00153     StringView sv1;\par
{\bkmkstart AAAAAAAEXW}{\bkmkend AAAAAAAEXW}
00154     EXPECT_TRUE(sv1.empty());\par
{\bkmkstart AAAAAAAEYA}{\bkmkend AAAAAAAEYA}
00155     EXPECT_EQ(sv1.size(), 0);\par
{\bkmkstart AAAAAAAEYD}{\bkmkend AAAAAAAEYD}
00156     EXPECT_EQ(sv1.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAEYG}{\bkmkend AAAAAAAEYG}
00157     \par
{\bkmkstart AAAAAAAEYH}{\bkmkend AAAAAAAEYH}
00158     {\cf20 // Construction from C-string}\par
{\bkmkstart AAAAAAAEYJ}{\bkmkend AAAAAAAEYJ}
00159     {\cf17 const} {\cf18 char}* str = {\cf22 "hello"};\par
{\bkmkstart AAAAAAAEYM}{\bkmkend AAAAAAAEYM}
00160     StringView sv2(str);\par
{\bkmkstart AAAAAAAEYO}{\bkmkend AAAAAAAEYO}
00161     EXPECT_FALSE(sv2.empty());\par
{\bkmkstart AAAAAAAEYQ}{\bkmkend AAAAAAAEYQ}
00162     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAEYS}{\bkmkend AAAAAAAEYS}
00163     EXPECT_EQ(sv2.data(), str);\par
{\bkmkstart AAAAAAAEYV}{\bkmkend AAAAAAAEYV}
00164     \par
{\bkmkstart AAAAAAAEYW}{\bkmkend AAAAAAAEYW}
00165     {\cf20 // Construction from C-string with length}\par
{\bkmkstart AAAAAAAEYX}{\bkmkend AAAAAAAEYX}
00166     StringView sv3(str, 3);\par
{\bkmkstart AAAAAAAEZA}{\bkmkend AAAAAAAEZA}
00167     EXPECT_FALSE(sv3.empty());\par
{\bkmkstart AAAAAAAEZC}{\bkmkend AAAAAAAEZC}
00168     EXPECT_EQ(sv3.size(), 3);\par
{\bkmkstart AAAAAAAEZD}{\bkmkend AAAAAAAEZD}
00169     EXPECT_EQ(sv3.data(), str);\par
{\bkmkstart AAAAAAAEZF}{\bkmkend AAAAAAAEZF}
00170     \par
{\bkmkstart AAAAAAAEZI}{\bkmkend AAAAAAAEZI}
00171     {\cf20 // Construction from std::string}\par
{\bkmkstart AAAAAAAEZK}{\bkmkend AAAAAAAEZK}
00172     std::string s = {\cf22 "world"};\par
{\bkmkstart AAAAAAAEZM}{\bkmkend AAAAAAAEZM}
00173     StringView sv4(s);\par
{\bkmkstart AAAAAAAEZO}{\bkmkend AAAAAAAEZO}
00174     EXPECT_FALSE(sv4.empty());\par
{\bkmkstart AAAAAAAEZQ}{\bkmkend AAAAAAAEZQ}
00175     EXPECT_EQ(sv4.size(), 5);\par
{\bkmkstart AAAAAAAEZT}{\bkmkend AAAAAAAEZT}
00176     EXPECT_EQ(sv4.data(), s.c_str());\par
{\bkmkstart AAAAAAAEZV}{\bkmkend AAAAAAAEZV}
00177     \par
{\bkmkstart AAAAAAAEZW}{\bkmkend AAAAAAAEZW}
00178     {\cf20 // Construction from null pointer}\par
{\bkmkstart AAAAAAAEZY}{\bkmkend AAAAAAAEZY}
00179     StringView sv5({\cf17 nullptr});\par
{\bkmkstart AAAAAAAFAA}{\bkmkend AAAAAAAFAA}
00180     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAFAC}{\bkmkend AAAAAAAFAC}
00181     EXPECT_EQ(sv5.size(), 0);\par
{\bkmkstart AAAAAAAFAD}{\bkmkend AAAAAAAFAD}
00182     EXPECT_EQ(sv5.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAFAF}{\bkmkend AAAAAAAFAF}
00183 \}\par
{\bkmkstart AAAAAAAFAG}{\bkmkend AAAAAAAFAG}
00184 \par
{\bkmkstart AAAAAAAFAI}{\bkmkend AAAAAAAFAI}
00185 {\cf20 // Test access methods}\par
{\bkmkstart AAAAAAAFAK}{\bkmkend AAAAAAAFAK}
00186 TEST_F(StringViewComprehensiveTest, TestAccess) \{\par
{\bkmkstart AAAAAAAFAM}{\bkmkend AAAAAAAFAM}
00187     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFAO}{\bkmkend AAAAAAAFAO}
00188     \par
{\bkmkstart AAAAAAAFAP}{\bkmkend AAAAAAAFAP}
00189     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAFAR}{\bkmkend AAAAAAAFAR}
00190     EXPECT_EQ(sv[0], {\cf23 'h'});\par
{\bkmkstart AAAAAAAFAV}{\bkmkend AAAAAAAFAV}
00191     EXPECT_EQ(sv[1], {\cf23 'e'});\par
{\bkmkstart AAAAAAAFAY}{\bkmkend AAAAAAAFAY}
00192     EXPECT_EQ(sv[2], {\cf23 'l'});\par
{\bkmkstart AAAAAAAFAZ}{\bkmkend AAAAAAAFAZ}
00193     EXPECT_EQ(sv[3], {\cf23 'l'});\par
{\bkmkstart AAAAAAAFBB}{\bkmkend AAAAAAAFBB}
00194     EXPECT_EQ(sv[4], {\cf23 'o'});\par
{\bkmkstart AAAAAAAFBD}{\bkmkend AAAAAAAFBD}
00195     \par
{\bkmkstart AAAAAAAFBF}{\bkmkend AAAAAAAFBF}
00196     {\cf20 // Test at()}\par
{\bkmkstart AAAAAAAFBG}{\bkmkend AAAAAAAFBG}
00197     EXPECT_EQ(sv.at(0), {\cf23 'h'});\par
{\bkmkstart AAAAAAAFBJ}{\bkmkend AAAAAAAFBJ}
00198     EXPECT_EQ(sv.at(1), {\cf23 'e'});\par
{\bkmkstart AAAAAAAFBL}{\bkmkend AAAAAAAFBL}
00199     EXPECT_EQ(sv.at(2), {\cf23 'l'});\par
{\bkmkstart AAAAAAAFBM}{\bkmkend AAAAAAAFBM}
00200     EXPECT_EQ(sv.at(3), {\cf23 'l'});\par
{\bkmkstart AAAAAAAFBP}{\bkmkend AAAAAAAFBP}
00201     EXPECT_EQ(sv.at(4), {\cf23 'o'});\par
{\bkmkstart AAAAAAAFBQ}{\bkmkend AAAAAAAFBQ}
00202     \par
{\bkmkstart AAAAAAAFBR}{\bkmkend AAAAAAAFBR}
00203     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAFBT}{\bkmkend AAAAAAAFBT}
00204     EXPECT_THROW(sv[5], std::out_of_range);\par
{\bkmkstart AAAAAAAFBW}{\bkmkend AAAAAAAFBW}
00205     EXPECT_THROW(sv.at(5), std::out_of_range);\par
{\bkmkstart AAAAAAAFBZ}{\bkmkend AAAAAAAFBZ}
00206     EXPECT_THROW(sv[-1], std::out_of_range);\par
{\bkmkstart AAAAAAAFCB}{\bkmkend AAAAAAAFCB}
00207     EXPECT_THROW(sv.at(-1), std::out_of_range);\par
{\bkmkstart AAAAAAAFCC}{\bkmkend AAAAAAAFCC}
00208 \}\par
{\bkmkstart AAAAAAAFCE}{\bkmkend AAAAAAAFCE}
00209 \par
{\bkmkstart AAAAAAAFCF}{\bkmkend AAAAAAAFCF}
00210 {\cf20 // Test substring operations}\par
{\bkmkstart AAAAAAAFCH}{\bkmkend AAAAAAAFCH}
00211 TEST_F(StringViewComprehensiveTest, TestSubstr) \{\par
{\bkmkstart AAAAAAAFCJ}{\bkmkend AAAAAAAFCJ}
00212     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFCL}{\bkmkend AAAAAAAFCL}
00213     \par
{\bkmkstart AAAAAAAFCN}{\bkmkend AAAAAAAFCN}
00214     {\cf20 // Test full substring}\par
{\bkmkstart AAAAAAAFCP}{\bkmkend AAAAAAAFCP}
00215     StringView sv1 = sv.substr();\par
{\bkmkstart AAAAAAAFCQ}{\bkmkend AAAAAAAFCQ}
00216     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAFCV}{\bkmkend AAAAAAAFCV}
00217     \par
{\bkmkstart AAAAAAAFCX}{\bkmkend AAAAAAAFCX}
00218     {\cf20 // Test substring from beginning}\par
{\bkmkstart AAAAAAAFCY}{\bkmkend AAAAAAAFCY}
00219     StringView sv2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAFDD}{\bkmkend AAAAAAAFDD}
00220     EXPECT_EQ(sv2, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAFDG}{\bkmkend AAAAAAAFDG}
00221     \par
{\bkmkstart AAAAAAAFDI}{\bkmkend AAAAAAAFDI}
00222     {\cf20 // Test substring from middle}\par
{\bkmkstart AAAAAAAFDJ}{\bkmkend AAAAAAAFDJ}
00223     StringView sv3 = sv.substr(6, 5);\par
{\bkmkstart AAAAAAAFDL}{\bkmkend AAAAAAAFDL}
00224     EXPECT_EQ(sv3, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAFDO}{\bkmkend AAAAAAAFDO}
00225     \par
{\bkmkstart AAAAAAAFDQ}{\bkmkend AAAAAAAFDQ}
00226     {\cf20 // Test substring with npos}\par
{\bkmkstart AAAAAAAFDR}{\bkmkend AAAAAAAFDR}
00227     StringView sv4 = sv.substr(6);\par
{\bkmkstart AAAAAAAFDT}{\bkmkend AAAAAAAFDT}
00228     EXPECT_EQ(sv4, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAFDV}{\bkmkend AAAAAAAFDV}
00229     \par
{\bkmkstart AAAAAAAFDW}{\bkmkend AAAAAAAFDW}
00230     {\cf20 // Test empty substring}\par
{\bkmkstart AAAAAAAFDX}{\bkmkend AAAAAAAFDX}
00231     StringView sv5 = sv.substr(5, 0);\par
{\bkmkstart AAAAAAAFDZ}{\bkmkend AAAAAAAFDZ}
00232     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAFEB}{\bkmkend AAAAAAAFEB}
00233     \par
{\bkmkstart AAAAAAAFED}{\bkmkend AAAAAAAFED}
00234     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAFEE}{\bkmkend AAAAAAAFEE}
00235     EXPECT_THROW(sv.substr(20), std::out_of_range);\par
{\bkmkstart AAAAAAAFEG}{\bkmkend AAAAAAAFEG}
00236     EXPECT_THROW(sv.substr(5, 20), std::out_of_range);\par
{\bkmkstart AAAAAAAFEK}{\bkmkend AAAAAAAFEK}
00237 \}\par
{\bkmkstart AAAAAAAFEL}{\bkmkend AAAAAAAFEL}
00238 \par
{\bkmkstart AAAAAAAFEM}{\bkmkend AAAAAAAFEM}
00239 {\cf20 // Test find operations}\par
{\bkmkstart AAAAAAAFEN}{\bkmkend AAAAAAAFEN}
00240 TEST_F(StringViewComprehensiveTest, TestFind) \{\par
{\bkmkstart AAAAAAAFEP}{\bkmkend AAAAAAAFEP}
00241     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFEQ}{\bkmkend AAAAAAAFEQ}
00242     \par
{\bkmkstart AAAAAAAFER}{\bkmkend AAAAAAAFER}
00243     {\cf20 // Test find character}\par
{\bkmkstart AAAAAAAFET}{\bkmkend AAAAAAAFET}
00244     EXPECT_EQ(sv.find({\cf23 'h'}), 0);\par
{\bkmkstart AAAAAAAFEV}{\bkmkend AAAAAAAFEV}
00245     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAFEW}{\bkmkend AAAAAAAFEW}
00246     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAFEX}{\bkmkend AAAAAAAFEX}
00247     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAFEZ}{\bkmkend AAAAAAAFEZ}
00248     EXPECT_EQ(sv.find({\cf23 'w'}), 6);\par
{\bkmkstart AAAAAAAFFA}{\bkmkend AAAAAAAFFA}
00249     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAAFFC}{\bkmkend AAAAAAAFFC}
00250     EXPECT_EQ(sv.find({\cf23 'x'}), std::string::npos);\par
{\bkmkstart AAAAAAAFFF}{\bkmkend AAAAAAAFFF}
00251     \par
{\bkmkstart AAAAAAAFFG}{\bkmkend AAAAAAAFFG}
00252     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAFFH}{\bkmkend AAAAAAAFFH}
00253     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAFFI}{\bkmkend AAAAAAAFFI}
00254     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAFFK}{\bkmkend AAAAAAAFFK}
00255     EXPECT_EQ(sv.find({\cf23 'l'}, 10), std::string::npos);\par
{\bkmkstart AAAAAAAFFL}{\bkmkend AAAAAAAFFL}
00256     \par
{\bkmkstart AAAAAAAFFM}{\bkmkend AAAAAAAFFM}
00257     {\cf20 // Test find string}\par
{\bkmkstart AAAAAAAFFO}{\bkmkend AAAAAAAFFO}
00258     EXPECT_EQ(sv.find(StringView({\cf22 "hello"})), 0);\par
{\bkmkstart AAAAAAAFFR}{\bkmkend AAAAAAAFFR}
00259     EXPECT_EQ(sv.find(StringView({\cf22 "world"})), 6);\par
{\bkmkstart AAAAAAAFFV}{\bkmkend AAAAAAAFFV}
00260     EXPECT_EQ(sv.find(StringView({\cf22 "lo"})), 3);\par
{\bkmkstart AAAAAAAFFW}{\bkmkend AAAAAAAFFW}
00261     EXPECT_EQ(sv.find(StringView({\cf22 "xyz"})), std::string::npos);\par
{\bkmkstart AAAAAAAFFX}{\bkmkend AAAAAAAFFX}
00262     \par
{\bkmkstart AAAAAAAFFY}{\bkmkend AAAAAAAFFY}
00263     {\cf20 // Test find empty string}\par
{\bkmkstart AAAAAAAFFZ}{\bkmkend AAAAAAAFFZ}
00264     EXPECT_EQ(sv.find(StringView({\cf22 ""})), 0);\par
{\bkmkstart AAAAAAAFGA}{\bkmkend AAAAAAAFGA}
00265     \par
{\bkmkstart AAAAAAAFGB}{\bkmkend AAAAAAAFGB}
00266     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAFGC}{\bkmkend AAAAAAAFGC}
00267     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 2), 3);\par
{\bkmkstart AAAAAAAFGD}{\bkmkend AAAAAAAFGD}
00268     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 4), std::string::npos);\par
{\bkmkstart AAAAAAAFGE}{\bkmkend AAAAAAAFGE}
00269 \}\par
{\bkmkstart AAAAAAAFGF}{\bkmkend AAAAAAAFGF}
00270 \par
{\bkmkstart AAAAAAAFGG}{\bkmkend AAAAAAAFGG}
00271 {\cf20 // Test prefix/suffix operations}\par
{\bkmkstart AAAAAAAFGH}{\bkmkend AAAAAAAFGH}
00272 TEST_F(StringViewComprehensiveTest, TestPrefixSuffix) \{\par
{\bkmkstart AAAAAAAFGI}{\bkmkend AAAAAAAFGI}
00273     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFGJ}{\bkmkend AAAAAAAFGJ}
00274     \par
{\bkmkstart AAAAAAAFGK}{\bkmkend AAAAAAAFGK}
00275     {\cf20 // Test starts_with}\par
{\bkmkstart AAAAAAAFGL}{\bkmkend AAAAAAAFGL}
00276     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAFGM}{\bkmkend AAAAAAAFGM}
00277     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "he"})));\par
{\bkmkstart AAAAAAAFGN}{\bkmkend AAAAAAAFGN}
00278     EXPECT_TRUE(sv.starts_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAFGO}{\bkmkend AAAAAAAFGO}
00279     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAFGP}{\bkmkend AAAAAAAFGP}
00280     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAFGQ}{\bkmkend AAAAAAAFGQ}
00281     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAFGR}{\bkmkend AAAAAAAFGR}
00282     \par
{\bkmkstart AAAAAAAFGS}{\bkmkend AAAAAAAFGS}
00283     {\cf20 // Test ends_with}\par
{\bkmkstart AAAAAAAFGT}{\bkmkend AAAAAAAFGT}
00284     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAFGU}{\bkmkend AAAAAAAFGU}
00285     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "ld"})));\par
{\bkmkstart AAAAAAAFGV}{\bkmkend AAAAAAAFGV}
00286     EXPECT_TRUE(sv.ends_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAFGW}{\bkmkend AAAAAAAFGW}
00287     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAFGX}{\bkmkend AAAAAAAFGX}
00288     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAFGY}{\bkmkend AAAAAAAFGY}
00289     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "!hello world"})));\par
{\bkmkstart AAAAAAAFGZ}{\bkmkend AAAAAAAFGZ}
00290     \par
{\bkmkstart AAAAAAAFHA}{\bkmkend AAAAAAAFHA}
00291     {\cf20 // Test contains}\par
{\bkmkstart AAAAAAAFHB}{\bkmkend AAAAAAAFHB}
00292     EXPECT_TRUE(sv.contains(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAFHC}{\bkmkend AAAAAAAFHC}
00293     EXPECT_TRUE(sv.contains(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAFHD}{\bkmkend AAAAAAAFHD}
00294     EXPECT_TRUE(sv.contains(StringView({\cf22 "lo wo"})));\par
{\bkmkstart AAAAAAAFHE}{\bkmkend AAAAAAAFHE}
00295     EXPECT_TRUE(sv.contains(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAFHF}{\bkmkend AAAAAAAFHF}
00296     EXPECT_FALSE(sv.contains(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAFHG}{\bkmkend AAAAAAAFHG}
00297     EXPECT_FALSE(sv.contains(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAFHH}{\bkmkend AAAAAAAFHH}
00298 \}\par
{\bkmkstart AAAAAAAFHI}{\bkmkend AAAAAAAFHI}
00299 \par
{\bkmkstart AAAAAAAFHJ}{\bkmkend AAAAAAAFHJ}
00300 {\cf20 // Test remove operations}\par
{\bkmkstart AAAAAAAFHK}{\bkmkend AAAAAAAFHK}
00301 TEST_F(StringViewComprehensiveTest, TestRemove) \{\par
{\bkmkstart AAAAAAAFHL}{\bkmkend AAAAAAAFHL}
00302     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFHM}{\bkmkend AAAAAAAFHM}
00303     \par
{\bkmkstart AAAAAAAFHN}{\bkmkend AAAAAAAFHN}
00304     {\cf20 // Test remove_prefix}\par
{\bkmkstart AAAAAAAFHO}{\bkmkend AAAAAAAFHO}
00305     StringView sv1 = sv;\par
{\bkmkstart AAAAAAAFHP}{\bkmkend AAAAAAAFHP}
00306     sv1.remove_prefix(0);\par
{\bkmkstart AAAAAAAFHQ}{\bkmkend AAAAAAAFHQ}
00307     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAFHR}{\bkmkend AAAAAAAFHR}
00308     \par
{\bkmkstart AAAAAAAFHS}{\bkmkend AAAAAAAFHS}
00309     StringView sv2 = sv;\par
{\bkmkstart AAAAAAAFHT}{\bkmkend AAAAAAAFHT}
00310     sv2.remove_prefix(6);\par
{\bkmkstart AAAAAAAFHU}{\bkmkend AAAAAAAFHU}
00311     EXPECT_EQ(sv2, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAFHV}{\bkmkend AAAAAAAFHV}
00312     \par
{\bkmkstart AAAAAAAFHW}{\bkmkend AAAAAAAFHW}
00313     StringView sv3 = sv;\par
{\bkmkstart AAAAAAAFHX}{\bkmkend AAAAAAAFHX}
00314     sv3.remove_prefix(11);\par
{\bkmkstart AAAAAAAFHY}{\bkmkend AAAAAAAFHY}
00315     EXPECT_TRUE(sv3.empty());\par
{\bkmkstart AAAAAAAFHZ}{\bkmkend AAAAAAAFHZ}
00316     \par
{\bkmkstart AAAAAAAFIA}{\bkmkend AAAAAAAFIA}
00317     StringView sv4 = sv;\par
{\bkmkstart AAAAAAAFIB}{\bkmkend AAAAAAAFIB}
00318     sv4.remove_prefix(20);\par
{\bkmkstart AAAAAAAFIC}{\bkmkend AAAAAAAFIC}
00319     EXPECT_TRUE(sv4.empty());\par
{\bkmkstart AAAAAAAFID}{\bkmkend AAAAAAAFID}
00320     \par
{\bkmkstart AAAAAAAFIE}{\bkmkend AAAAAAAFIE}
00321     {\cf20 // Test remove_suffix}\par
{\bkmkstart AAAAAAAFIF}{\bkmkend AAAAAAAFIF}
00322     StringView sv5 = sv;\par
{\bkmkstart AAAAAAAFIG}{\bkmkend AAAAAAAFIG}
00323     sv5.remove_suffix(0);\par
{\bkmkstart AAAAAAAFIH}{\bkmkend AAAAAAAFIH}
00324     EXPECT_EQ(sv5, sv);\par
{\bkmkstart AAAAAAAFII}{\bkmkend AAAAAAAFII}
00325     \par
{\bkmkstart AAAAAAAFIJ}{\bkmkend AAAAAAAFIJ}
00326     StringView sv6 = sv;\par
{\bkmkstart AAAAAAAFIK}{\bkmkend AAAAAAAFIK}
00327     sv6.remove_suffix(6);\par
{\bkmkstart AAAAAAAFIL}{\bkmkend AAAAAAAFIL}
00328     EXPECT_EQ(sv6, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAFIM}{\bkmkend AAAAAAAFIM}
00329     \par
{\bkmkstart AAAAAAAFIN}{\bkmkend AAAAAAAFIN}
00330     StringView sv7 = sv;\par
{\bkmkstart AAAAAAAFIO}{\bkmkend AAAAAAAFIO}
00331     sv7.remove_suffix(11);\par
{\bkmkstart AAAAAAAFIP}{\bkmkend AAAAAAAFIP}
00332     EXPECT_TRUE(sv7.empty());\par
{\bkmkstart AAAAAAAFIQ}{\bkmkend AAAAAAAFIQ}
00333     \par
{\bkmkstart AAAAAAAFIR}{\bkmkend AAAAAAAFIR}
00334     StringView sv8 = sv;\par
{\bkmkstart AAAAAAAFIS}{\bkmkend AAAAAAAFIS}
00335     sv8.remove_suffix(20);\par
{\bkmkstart AAAAAAAFIT}{\bkmkend AAAAAAAFIT}
00336     EXPECT_TRUE(sv8.empty());\par
{\bkmkstart AAAAAAAFIU}{\bkmkend AAAAAAAFIU}
00337 \}\par
{\bkmkstart AAAAAAAFIV}{\bkmkend AAAAAAAFIV}
00338 \par
{\bkmkstart AAAAAAAFIW}{\bkmkend AAAAAAAFIW}
00339 {\cf20 // Test conversion}\par
{\bkmkstart AAAAAAAFIX}{\bkmkend AAAAAAAFIX}
00340 TEST_F(StringViewComprehensiveTest, TestConversion) \{\par
{\bkmkstart AAAAAAAFIY}{\bkmkend AAAAAAAFIY}
00341     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFIZ}{\bkmkend AAAAAAAFIZ}
00342     \par
{\bkmkstart AAAAAAAFJA}{\bkmkend AAAAAAAFJA}
00343     {\cf20 // Test to_string}\par
{\bkmkstart AAAAAAAFJB}{\bkmkend AAAAAAAFJB}
00344     std::string str = sv.to_string();\par
{\bkmkstart AAAAAAAFJC}{\bkmkend AAAAAAAFJC}
00345     EXPECT_EQ(str, {\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFJD}{\bkmkend AAAAAAAFJD}
00346     \par
{\bkmkstart AAAAAAAFJE}{\bkmkend AAAAAAAFJE}
00347     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAFJF}{\bkmkend AAAAAAAFJF}
00348     StringView empty;\par
{\bkmkstart AAAAAAAFJG}{\bkmkend AAAAAAAFJG}
00349     std::string empty_str = empty.to_string();\par
{\bkmkstart AAAAAAAFJH}{\bkmkend AAAAAAAFJH}
00350     EXPECT_TRUE(empty_str.empty());\par
{\bkmkstart AAAAAAAFJI}{\bkmkend AAAAAAAFJI}
00351 \}\par
{\bkmkstart AAAAAAAFJJ}{\bkmkend AAAAAAAFJJ}
00352 \par
{\bkmkstart AAAAAAAFJK}{\bkmkend AAAAAAAFJK}
00353 {\cf20 // Test iterators}\par
{\bkmkstart AAAAAAAFJL}{\bkmkend AAAAAAAFJL}
00354 TEST_F(StringViewComprehensiveTest, TestIterators) \{\par
{\bkmkstart AAAAAAAFJM}{\bkmkend AAAAAAAFJM}
00355     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFJN}{\bkmkend AAAAAAAFJN}
00356     \par
{\bkmkstart AAAAAAAFJO}{\bkmkend AAAAAAAFJO}
00357     {\cf20 // Test begin/end}\par
{\bkmkstart AAAAAAAFJP}{\bkmkend AAAAAAAFJP}
00358     {\cf17 const} {\cf18 char}* begin = sv.begin();\par
{\bkmkstart AAAAAAAFJQ}{\bkmkend AAAAAAAFJQ}
00359     {\cf17 const} {\cf18 char}* end = sv.end();\par
{\bkmkstart AAAAAAAFJR}{\bkmkend AAAAAAAFJR}
00360     EXPECT_EQ(end - begin, 5);\par
{\bkmkstart AAAAAAAFJS}{\bkmkend AAAAAAAFJS}
00361     \par
{\bkmkstart AAAAAAAFJT}{\bkmkend AAAAAAAFJT}
00362     {\cf20 // Test iteration}\par
{\bkmkstart AAAAAAAFJU}{\bkmkend AAAAAAAFJU}
00363     std::string result;\par
{\bkmkstart AAAAAAAFJV}{\bkmkend AAAAAAAFJV}
00364     {\cf19 for} ({\cf17 auto} it = sv.begin(); it != sv.end(); ++it) \{\par
{\bkmkstart AAAAAAAFJW}{\bkmkend AAAAAAAFJW}
00365         result += *it;\par
{\bkmkstart AAAAAAAFJX}{\bkmkend AAAAAAAFJX}
00366     \}\par
{\bkmkstart AAAAAAAFJY}{\bkmkend AAAAAAAFJY}
00367     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAFJZ}{\bkmkend AAAAAAAFJZ}
00368     \par
{\bkmkstart AAAAAAAFKA}{\bkmkend AAAAAAAFKA}
00369     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAFKB}{\bkmkend AAAAAAAFKB}
00370     result.clear();\par
{\bkmkstart AAAAAAAFKC}{\bkmkend AAAAAAAFKC}
00371     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAFKD}{\bkmkend AAAAAAAFKD}
00372         result += c;\par
{\bkmkstart AAAAAAAFKE}{\bkmkend AAAAAAAFKE}
00373     \}\par
{\bkmkstart AAAAAAAFKF}{\bkmkend AAAAAAAFKF}
00374     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAFKG}{\bkmkend AAAAAAAFKG}
00375 \}\par
{\bkmkstart AAAAAAAFKH}{\bkmkend AAAAAAAFKH}
00376 \par
{\bkmkstart AAAAAAAFKI}{\bkmkend AAAAAAAFKI}
00377 {\cf20 // Test comparison operators}\par
{\bkmkstart AAAAAAAFKJ}{\bkmkend AAAAAAAFKJ}
00378 TEST_F(StringViewComprehensiveTest, TestComparison) \{\par
{\bkmkstart AAAAAAAFKK}{\bkmkend AAAAAAAFKK}
00379     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFKL}{\bkmkend AAAAAAAFKL}
00380     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFKM}{\bkmkend AAAAAAAFKM}
00381     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAFKN}{\bkmkend AAAAAAAFKN}
00382     StringView sv4({\cf22 "hell"});\par
{\bkmkstart AAAAAAAFKO}{\bkmkend AAAAAAAFKO}
00383     StringView sv5({\cf22 "helloo"});\par
{\bkmkstart AAAAAAAFKP}{\bkmkend AAAAAAAFKP}
00384     \par
{\bkmkstart AAAAAAAFKQ}{\bkmkend AAAAAAAFKQ}
00385     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAFKR}{\bkmkend AAAAAAAFKR}
00386     EXPECT_TRUE(sv1 == sv2);\par
{\bkmkstart AAAAAAAFKS}{\bkmkend AAAAAAAFKS}
00387     EXPECT_FALSE(sv1 == sv3);\par
{\bkmkstart AAAAAAAFKT}{\bkmkend AAAAAAAFKT}
00388     EXPECT_FALSE(sv1 == sv4);\par
{\bkmkstart AAAAAAAFKU}{\bkmkend AAAAAAAFKU}
00389     EXPECT_FALSE(sv1 == sv5);\par
{\bkmkstart AAAAAAAFKV}{\bkmkend AAAAAAAFKV}
00390     \par
{\bkmkstart AAAAAAAFKW}{\bkmkend AAAAAAAFKW}
00391     {\cf20 // Test inequality}\par
{\bkmkstart AAAAAAAFKX}{\bkmkend AAAAAAAFKX}
00392     EXPECT_FALSE(sv1 != sv2);\par
{\bkmkstart AAAAAAAFKY}{\bkmkend AAAAAAAFKY}
00393     EXPECT_TRUE(sv1 != sv3);\par
{\bkmkstart AAAAAAAFKZ}{\bkmkend AAAAAAAFKZ}
00394     EXPECT_TRUE(sv1 != sv4);\par
{\bkmkstart AAAAAAAFLA}{\bkmkend AAAAAAAFLA}
00395     EXPECT_TRUE(sv1 != sv5);\par
{\bkmkstart AAAAAAAFLB}{\bkmkend AAAAAAAFLB}
00396     \par
{\bkmkstart AAAAAAAFLC}{\bkmkend AAAAAAAFLC}
00397     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAFLD}{\bkmkend AAAAAAAFLD}
00398     EXPECT_TRUE(sv1 < sv3);\par
{\bkmkstart AAAAAAAFLE}{\bkmkend AAAAAAAFLE}
00399     EXPECT_FALSE(sv1 < sv2);\par
{\bkmkstart AAAAAAAFLF}{\bkmkend AAAAAAAFLF}
00400     EXPECT_FALSE(sv1 < sv4);\par
{\bkmkstart AAAAAAAFLG}{\bkmkend AAAAAAAFLG}
00401     EXPECT_TRUE(sv1 < sv5);\par
{\bkmkstart AAAAAAAFLH}{\bkmkend AAAAAAAFLH}
00402     \par
{\bkmkstart AAAAAAAFLI}{\bkmkend AAAAAAAFLI}
00403     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAFLJ}{\bkmkend AAAAAAAFLJ}
00404     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAAFLK}{\bkmkend AAAAAAAFLK}
00405     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAAFLL}{\bkmkend AAAAAAAFLL}
00406     EXPECT_FALSE(sv1 <= sv4);\par
{\bkmkstart AAAAAAAFLM}{\bkmkend AAAAAAAFLM}
00407     EXPECT_TRUE(sv1 <= sv5);\par
{\bkmkstart AAAAAAAFLN}{\bkmkend AAAAAAAFLN}
00408     \par
{\bkmkstart AAAAAAAFLO}{\bkmkend AAAAAAAFLO}
00409     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAFLP}{\bkmkend AAAAAAAFLP}
00410     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAAFLQ}{\bkmkend AAAAAAAFLQ}
00411     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAAFLR}{\bkmkend AAAAAAAFLR}
00412     EXPECT_TRUE(sv1 > sv4);\par
{\bkmkstart AAAAAAAFLS}{\bkmkend AAAAAAAFLS}
00413     EXPECT_FALSE(sv1 > sv5);\par
{\bkmkstart AAAAAAAFLT}{\bkmkend AAAAAAAFLT}
00414     \par
{\bkmkstart AAAAAAAFLU}{\bkmkend AAAAAAAFLU}
00415     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAFLV}{\bkmkend AAAAAAAFLV}
00416     EXPECT_TRUE(sv1 >= sv2);\par
{\bkmkstart AAAAAAAFLW}{\bkmkend AAAAAAAFLW}
00417     EXPECT_FALSE(sv1 >= sv3);\par
{\bkmkstart AAAAAAAFLX}{\bkmkend AAAAAAAFLX}
00418     EXPECT_TRUE(sv1 >= sv4);\par
{\bkmkstart AAAAAAAFLY}{\bkmkend AAAAAAAFLY}
00419     EXPECT_FALSE(sv1 >= sv5);\par
{\bkmkstart AAAAAAAFLZ}{\bkmkend AAAAAAAFLZ}
00420 \}\par
{\bkmkstart AAAAAAAFMA}{\bkmkend AAAAAAAFMA}
00421 \par
{\bkmkstart AAAAAAAFMB}{\bkmkend AAAAAAAFMB}
00422 {\cf20 // Test hash function}\par
{\bkmkstart AAAAAAAFMC}{\bkmkend AAAAAAAFMC}
00423 TEST_F(StringViewComprehensiveTest, TestHash) \{\par
{\bkmkstart AAAAAAAFMD}{\bkmkend AAAAAAAFMD}
00424     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFME}{\bkmkend AAAAAAAFME}
00425     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFMF}{\bkmkend AAAAAAAFMF}
00426     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAFMG}{\bkmkend AAAAAAAFMG}
00427     \par
{\bkmkstart AAAAAAAFMH}{\bkmkend AAAAAAAFMH}
00428     {\cf20 // Test same strings have same hash}\par
{\bkmkstart AAAAAAAFMI}{\bkmkend AAAAAAAFMI}
00429     EXPECT_EQ(sv1.hash(), sv2.hash());\par
{\bkmkstart AAAAAAAFMJ}{\bkmkend AAAAAAAFMJ}
00430     \par
{\bkmkstart AAAAAAAFMK}{\bkmkend AAAAAAAFMK}
00431     {\cf20 // Test different strings have different hash (very likely)}\par
{\bkmkstart AAAAAAAFML}{\bkmkend AAAAAAAFML}
00432     EXPECT_NE(sv1.hash(), sv3.hash());\par
{\bkmkstart AAAAAAAFMN}{\bkmkend AAAAAAAFMN}
00433     \par
{\bkmkstart AAAAAAAFMP}{\bkmkend AAAAAAAFMP}
00434     {\cf20 // Test empty string hash}\par
{\bkmkstart AAAAAAAFMQ}{\bkmkend AAAAAAAFMQ}
00435     StringView empty;\par
{\bkmkstart AAAAAAAFMR}{\bkmkend AAAAAAAFMR}
00436     EXPECT_EQ(empty.hash(), 0);\par
{\bkmkstart AAAAAAAFMS}{\bkmkend AAAAAAAFMS}
00437 \}\par
{\bkmkstart AAAAAAAFMT}{\bkmkend AAAAAAAFMT}
00438 \par
{\bkmkstart AAAAAAAFMU}{\bkmkend AAAAAAAFMU}
00439 {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAAFMV}{\bkmkend AAAAAAAFMV}
00440 TEST_F(StringViewComprehensiveTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAFMW}{\bkmkend AAAAAAAFMW}
00441     {\cf20 // Test empty string}\par
{\bkmkstart AAAAAAAFMX}{\bkmkend AAAAAAAFMX}
00442     StringView empty({\cf22 ""});\par
{\bkmkstart AAAAAAAFMY}{\bkmkend AAAAAAAFMY}
00443     EXPECT_TRUE(empty.empty());\par
{\bkmkstart AAAAAAAFMZ}{\bkmkend AAAAAAAFMZ}
00444     EXPECT_EQ(empty.size(), 0);\par
{\bkmkstart AAAAAAAFNA}{\bkmkend AAAAAAAFNA}
00445     EXPECT_EQ(empty.data(), {\cf22 ""});\par
{\bkmkstart AAAAAAAFNB}{\bkmkend AAAAAAAFNB}
00446     \par
{\bkmkstart AAAAAAAFNC}{\bkmkend AAAAAAAFNC}
00447     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAAFND}{\bkmkend AAAAAAAFND}
00448     StringView single({\cf22 "a"});\par
{\bkmkstart AAAAAAAFNE}{\bkmkend AAAAAAAFNE}
00449     EXPECT_FALSE(single.empty());\par
{\bkmkstart AAAAAAAFNF}{\bkmkend AAAAAAAFNF}
00450     EXPECT_EQ(single.size(), 1);\par
{\bkmkstart AAAAAAAFNG}{\bkmkend AAAAAAAFNG}
00451     EXPECT_EQ(single[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAFNH}{\bkmkend AAAAAAAFNH}
00452     \par
{\bkmkstart AAAAAAAFNI}{\bkmkend AAAAAAAFNI}
00453     {\cf20 // Test very long string}\par
{\bkmkstart AAAAAAAFNJ}{\bkmkend AAAAAAAFNJ}
00454     std::string long_str(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAFNK}{\bkmkend AAAAAAAFNK}
00455     StringView long_sv(long_str);\par
{\bkmkstart AAAAAAAFNL}{\bkmkend AAAAAAAFNL}
00456     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAFNM}{\bkmkend AAAAAAAFNM}
00457     EXPECT_EQ(long_sv[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAFNN}{\bkmkend AAAAAAAFNN}
00458     EXPECT_EQ(long_sv[999], {\cf23 'a'});\par
{\bkmkstart AAAAAAAFNO}{\bkmkend AAAAAAAFNO}
00459     \par
{\bkmkstart AAAAAAAFNP}{\bkmkend AAAAAAAFNP}
00460     {\cf20 // Test string with null characters}\par
{\bkmkstart AAAAAAAFNQ}{\bkmkend AAAAAAAFNQ}
00461     std::string null_str = {\cf22 "hello\\0world"};\par
{\bkmkstart AAAAAAAFNR}{\bkmkend AAAAAAAFNR}
00462     StringView null_sv(null_str.c_str(), 11);\par
{\bkmkstart AAAAAAAFNS}{\bkmkend AAAAAAAFNS}
00463     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAFNT}{\bkmkend AAAAAAAFNT}
00464     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAFNU}{\bkmkend AAAAAAAFNU}
00465     EXPECT_EQ(null_sv[6], {\cf23 'w'});\par
{\bkmkstart AAAAAAAFNV}{\bkmkend AAAAAAAFNV}
00466 \}\par
{\bkmkstart AAAAAAAFNW}{\bkmkend AAAAAAAFNW}
00467 \par
{\bkmkstart AAAAAAAFNX}{\bkmkend AAAAAAAFNX}
00468 {\cf20 // Test performance}\par
{\bkmkstart AAAAAAAFNY}{\bkmkend AAAAAAAFNY}
00469 TEST_F(StringViewComprehensiveTest, TestPerformance) \{\par
{\bkmkstart AAAAAAAFNZ}{\bkmkend AAAAAAAFNZ}
00470     std::string large_string(10000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAFOA}{\bkmkend AAAAAAAFOA}
00471     StringView sv(large_string);\par
{\bkmkstart AAAAAAAFOB}{\bkmkend AAAAAAAFOB}
00472     \par
{\bkmkstart AAAAAAAFOC}{\bkmkend AAAAAAAFOC}
00473     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFOD}{\bkmkend AAAAAAAFOD}
00474     \par
{\bkmkstart AAAAAAAFOE}{\bkmkend AAAAAAAFOE}
00475     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAFOF}{\bkmkend AAAAAAAFOF}
00476     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAFOG}{\bkmkend AAAAAAAFOG}
00477         StringView substr = sv.substr(i % 1000, 100);\par
{\bkmkstart AAAAAAAFOI}{\bkmkend AAAAAAAFOI}
00478         {\cf18 size_t} pos = substr.find({\cf23 'a'});\par
{\bkmkstart AAAAAAAFOL}{\bkmkend AAAAAAAFOL}
00479         {\cf18 bool} starts = substr.starts_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAFOM}{\bkmkend AAAAAAAFOM}
00480         {\cf18 bool} ends = substr.ends_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAFON}{\bkmkend AAAAAAAFON}
00481         {\cf18 bool} contains = substr.contains(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAFOO}{\bkmkend AAAAAAAFOO}
00482         std::string str = substr.to_string();\par
{\bkmkstart AAAAAAAFOP}{\bkmkend AAAAAAAFOP}
00483     \}\par
{\bkmkstart AAAAAAAFOQ}{\bkmkend AAAAAAAFOQ}
00484     \par
{\bkmkstart AAAAAAAFOR}{\bkmkend AAAAAAAFOR}
00485     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFOS}{\bkmkend AAAAAAAFOS}
00486     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAFOT}{\bkmkend AAAAAAAFOT}
00487     \par
{\bkmkstart AAAAAAAFOU}{\bkmkend AAAAAAAFOU}
00488     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAFOV}{\bkmkend AAAAAAAFOV}
00489     EXPECT_LT(duration.count(), 1000);\par
{\bkmkstart AAAAAAAFOW}{\bkmkend AAAAAAAFOW}
00490 \}\par
{\bkmkstart AAAAAAAFOX}{\bkmkend AAAAAAAFOX}
00491 \par
{\bkmkstart AAAAAAAFOY}{\bkmkend AAAAAAAFOY}
00492 {\cf20 // Test constexpr functionality}\par
{\bkmkstart AAAAAAAFOZ}{\bkmkend AAAAAAAFOZ}
00493 TEST_F(StringViewComprehensiveTest, TestConstexpr) \{\par
{\bkmkstart AAAAAAAFPA}{\bkmkend AAAAAAAFPA}
00494     {\cf17 constexpr} StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFPB}{\bkmkend AAAAAAAFPB}
00495     {\cf17 static_assert}(sv.size() == 5, {\cf22 "Size should be 5"});\par
{\bkmkstart AAAAAAAFPC}{\bkmkend AAAAAAAFPC}
00496     {\cf17 static_assert}(sv[0] == {\cf23 'h'}, {\cf22 "First character should be 'h'"});\par
{\bkmkstart AAAAAAAFPD}{\bkmkend AAAAAAAFPD}
00497     {\cf17 static_assert}(sv[4] == {\cf23 'o'}, {\cf22 "Last character should be 'o'"});\par
{\bkmkstart AAAAAAAFPE}{\bkmkend AAAAAAAFPE}
00498     {\cf17 static_assert}(!sv.empty(), {\cf22 "Should not be empty"});\par
{\bkmkstart AAAAAAAFPF}{\bkmkend AAAAAAAFPF}
00499     \par
{\bkmkstart AAAAAAAFPG}{\bkmkend AAAAAAAFPG}
00500     {\cf17 constexpr} StringView empty;\par
{\bkmkstart AAAAAAAFPH}{\bkmkend AAAAAAAFPH}
00501     {\cf17 static_assert}(empty.empty(), {\cf22 "Should be empty"});\par
{\bkmkstart AAAAAAAFPI}{\bkmkend AAAAAAAFPI}
00502     {\cf17 static_assert}(empty.size() == 0, {\cf22 "Size should be 0"});\par
{\bkmkstart AAAAAAAFPJ}{\bkmkend AAAAAAAFPJ}
00503 \}\par
{\bkmkstart AAAAAAAFPK}{\bkmkend AAAAAAAFPK}
00504 \par
{\bkmkstart AAAAAAAFPL}{\bkmkend AAAAAAAFPL}
00505 {\cf20 // Test copy and move semantics}\par
{\bkmkstart AAAAAAAFPM}{\bkmkend AAAAAAAFPM}
00506 TEST_F(StringViewComprehensiveTest, TestCopyMove) \{\par
{\bkmkstart AAAAAAAFPN}{\bkmkend AAAAAAAFPN}
00507     StringView original({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFPO}{\bkmkend AAAAAAAFPO}
00508     \par
{\bkmkstart AAAAAAAFPP}{\bkmkend AAAAAAAFPP}
00509     {\cf20 // Test copy construction}\par
{\bkmkstart AAAAAAAFPQ}{\bkmkend AAAAAAAFPQ}
00510     StringView copy(original);\par
{\bkmkstart AAAAAAAFPR}{\bkmkend AAAAAAAFPR}
00511     EXPECT_EQ(copy, original);\par
{\bkmkstart AAAAAAAFPS}{\bkmkend AAAAAAAFPS}
00512     EXPECT_EQ(copy.data(), original.data());\par
{\bkmkstart AAAAAAAFPT}{\bkmkend AAAAAAAFPT}
00513     EXPECT_EQ(copy.size(), original.size());\par
{\bkmkstart AAAAAAAFPU}{\bkmkend AAAAAAAFPU}
00514     \par
{\bkmkstart AAAAAAAFPV}{\bkmkend AAAAAAAFPV}
00515     {\cf20 // Test copy assignment}\par
{\bkmkstart AAAAAAAFPW}{\bkmkend AAAAAAAFPW}
00516     StringView assigned;\par
{\bkmkstart AAAAAAAFPX}{\bkmkend AAAAAAAFPX}
00517     assigned = original;\par
{\bkmkstart AAAAAAAFPY}{\bkmkend AAAAAAAFPY}
00518     EXPECT_EQ(assigned, original);\par
{\bkmkstart AAAAAAAFPZ}{\bkmkend AAAAAAAFPZ}
00519     EXPECT_EQ(assigned.data(), original.data());\par
{\bkmkstart AAAAAAAFQA}{\bkmkend AAAAAAAFQA}
00520     EXPECT_EQ(assigned.size(), original.size());\par
{\bkmkstart AAAAAAAFQB}{\bkmkend AAAAAAAFQB}
00521     \par
{\bkmkstart AAAAAAAFQC}{\bkmkend AAAAAAAFQC}
00522     {\cf20 // Test move construction}\par
{\bkmkstart AAAAAAAFQD}{\bkmkend AAAAAAAFQD}
00523     StringView moved(std::move(original));\par
{\bkmkstart AAAAAAAFQE}{\bkmkend AAAAAAAFQE}
00524     EXPECT_EQ(moved, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAFQF}{\bkmkend AAAAAAAFQF}
00525     \par
{\bkmkstart AAAAAAAFQG}{\bkmkend AAAAAAAFQG}
00526     {\cf20 // Test move assignment}\par
{\bkmkstart AAAAAAAFQH}{\bkmkend AAAAAAAFQH}
00527     StringView move_assigned;\par
{\bkmkstart AAAAAAAFQI}{\bkmkend AAAAAAAFQI}
00528     move_assigned = std::move(moved);\par
{\bkmkstart AAAAAAAFQJ}{\bkmkend AAAAAAAFQJ}
00529     EXPECT_EQ(move_assigned, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAFQK}{\bkmkend AAAAAAAFQK}
00530 \}\par
}
}