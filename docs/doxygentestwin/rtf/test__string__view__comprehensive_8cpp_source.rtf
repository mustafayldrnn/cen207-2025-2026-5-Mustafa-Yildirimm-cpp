{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_comprehensive.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\bkmkstart AAAAAAAGXA}
{\bkmkend AAAAAAAGXA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXC" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGYN}{\bkmkend AAAAAAAGYN}
00001 \par
{\bkmkstart AAAAAAAGYT}{\bkmkend AAAAAAAGYT}
00008 \par
{\bkmkstart AAAAAAAGYU}{\bkmkend AAAAAAAGYU}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAGZK}{\bkmkend AAAAAAAGZK}
00010 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAGZV}{\bkmkend AAAAAAAGZV}
00011 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAHAF}{\bkmkend AAAAAAAHAF}
00012 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAHAK}{\bkmkend AAAAAAAHAK}
00013 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAHAL}{\bkmkend AAAAAAAHAL}
00014 \par
{\bkmkstart AAAAAAAHAM}{\bkmkend AAAAAAAHAM}
00015 {\cf20 // Mock StringView implementation for testing}\par
{\bkmkstart AAAAAAAHAN}{\bkmkend AAAAAAAHAN}
00016 {\cf17 class }StringView \{\par
{\bkmkstart AAAAAAAHAO}{\bkmkend AAAAAAAHAO}
00017 {\cf17 private}:\par
{\bkmkstart AAAAAAAHAP}{\bkmkend AAAAAAAHAP}
00018     {\cf17 const} {\cf18 char}* data_;\par
{\bkmkstart AAAAAAAHAQ}{\bkmkend AAAAAAAHAQ}
00019     {\cf18 size_t} size_;\par
{\bkmkstart AAAAAAAHAR}{\bkmkend AAAAAAAHAR}
00020 \par
{\bkmkstart AAAAAAAHAS}{\bkmkend AAAAAAAHAS}
00021 {\cf17 public}:\par
{\bkmkstart AAAAAAAHAT}{\bkmkend AAAAAAAHAT}
00022     StringView() : data_(nullptr), size_(0) \{\}\par
{\bkmkstart AAAAAAAHAU}{\bkmkend AAAAAAAHAU}
00023     \par
{\bkmkstart AAAAAAAHAV}{\bkmkend AAAAAAAHAV}
00024     StringView({\cf17 const} {\cf18 char}* str) : data_(str), size_(str ? std::strlen(str) : 0) \{\}\par
{\bkmkstart AAAAAAAHAW}{\bkmkend AAAAAAAHAW}
00025     \par
{\bkmkstart AAAAAAAHAX}{\bkmkend AAAAAAAHAX}
00026     StringView({\cf17 const} {\cf18 char}* str, {\cf18 size_t} len) : data_(str), size_(len) \{\}\par
{\bkmkstart AAAAAAAHAY}{\bkmkend AAAAAAAHAY}
00027     \par
{\bkmkstart AAAAAAAHAZ}{\bkmkend AAAAAAAHAZ}
00028     StringView({\cf17 const} std::string& str) : data_(str.c_str()), size_(str.size()) \{\}\par
{\bkmkstart AAAAAAAHBA}{\bkmkend AAAAAAAHBA}
00029     \par
{\bkmkstart AAAAAAAHBB}{\bkmkend AAAAAAAHBB}
00030     {\cf17 const} {\cf18 char}* data(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAHBC}{\bkmkend AAAAAAAHBC}
00031     {\cf18 size_t} size(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAHBD}{\bkmkend AAAAAAAHBD}
00032     {\cf18 size_t} length(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAHBE}{\bkmkend AAAAAAAHBE}
00033     {\cf18 bool} empty(){\cf17  const }\{ {\cf19 return} size_ == 0; \}\par
{\bkmkstart AAAAAAAHBF}{\bkmkend AAAAAAAHBF}
00034     \par
{\bkmkstart AAAAAAAHBG}{\bkmkend AAAAAAAHBG}
00035     {\cf18 char} operator[]({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAHBH}{\bkmkend AAAAAAAHBH}
00036         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAHBJ}{\bkmkend AAAAAAAHBJ}
00037         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAHBL}{\bkmkend AAAAAAAHBL}
00038     \}\par
{\bkmkstart AAAAAAAHBM}{\bkmkend AAAAAAAHBM}
00039     \par
{\bkmkstart AAAAAAAHBO}{\bkmkend AAAAAAAHBO}
00040     {\cf18 char} at({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAHBQ}{\bkmkend AAAAAAAHBQ}
00041         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAHBU}{\bkmkend AAAAAAAHBU}
00042         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAHBW}{\bkmkend AAAAAAAHBW}
00043     \}\par
{\bkmkstart AAAAAAAHBX}{\bkmkend AAAAAAAHBX}
00044     \par
{\bkmkstart AAAAAAAHBY}{\bkmkend AAAAAAAHBY}
00045     StringView substr({\cf18 size_t} pos = 0, {\cf18 size_t} len = std::string::npos){\cf17  const }\{\par
{\bkmkstart AAAAAAAHCB}{\bkmkend AAAAAAAHCB}
00046         {\cf19 if} (pos > size_) {\cf19 throw} std::out_of_range({\cf22 "Position out of range"});\par
{\bkmkstart AAAAAAAHCC}{\bkmkend AAAAAAAHCC}
00047         {\cf18 size_t} actual_len = std::min(len, size_ - pos);\par
{\bkmkstart AAAAAAAHCD}{\bkmkend AAAAAAAHCD}
00048         {\cf19 return} StringView(data_ + pos, actual_len);\par
{\bkmkstart AAAAAAAHCF}{\bkmkend AAAAAAAHCF}
00049     \}\par
{\bkmkstart AAAAAAAHCH}{\bkmkend AAAAAAAHCH}
00050     \par
{\bkmkstart AAAAAAAHCI}{\bkmkend AAAAAAAHCI}
00051     {\cf18 size_t} find({\cf18 char} c, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAHCL}{\bkmkend AAAAAAAHCL}
00052         {\cf19 for} ({\cf18 size_t} i = pos; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAHCN}{\bkmkend AAAAAAAHCN}
00053             {\cf19 if} (data_[i] == c) {\cf19 return} i;\par
{\bkmkstart AAAAAAAHCO}{\bkmkend AAAAAAAHCO}
00054         \}\par
{\bkmkstart AAAAAAAHCP}{\bkmkend AAAAAAAHCP}
00055         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAHCQ}{\bkmkend AAAAAAAHCQ}
00056     \}\par
{\bkmkstart AAAAAAAHCR}{\bkmkend AAAAAAAHCR}
00057     \par
{\bkmkstart AAAAAAAHCS}{\bkmkend AAAAAAAHCS}
00058     {\cf18 size_t} find({\cf17 const} StringView& str, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAHCT}{\bkmkend AAAAAAAHCT}
00059         {\cf19 if} (str.size() > size_ - pos) {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAHCU}{\bkmkend AAAAAAAHCU}
00060         {\cf19 for} ({\cf18 size_t} i = pos; i <= size_ - str.size(); ++i) \{\par
{\bkmkstart AAAAAAAHCV}{\bkmkend AAAAAAAHCV}
00061             {\cf19 if} (std::memcmp(data_ + i, str.data_, str.size_) == 0) \{\par
{\bkmkstart AAAAAAAHCW}{\bkmkend AAAAAAAHCW}
00062                 {\cf19 return} i;\par
{\bkmkstart AAAAAAAHCX}{\bkmkend AAAAAAAHCX}
00063             \}\par
{\bkmkstart AAAAAAAHCY}{\bkmkend AAAAAAAHCY}
00064         \}\par
{\bkmkstart AAAAAAAHCZ}{\bkmkend AAAAAAAHCZ}
00065         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAHDA}{\bkmkend AAAAAAAHDA}
00066     \}\par
{\bkmkstart AAAAAAAHDB}{\bkmkend AAAAAAAHDB}
00067     \par
{\bkmkstart AAAAAAAHDC}{\bkmkend AAAAAAAHDC}
00068     {\cf18 bool} starts_with({\cf17 const} StringView& prefix){\cf17  const }\{\par
{\bkmkstart AAAAAAAHDD}{\bkmkend AAAAAAAHDD}
00069         {\cf19 if} (prefix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAHDE}{\bkmkend AAAAAAAHDE}
00070         {\cf19 return} std::memcmp(data_, prefix.data_, prefix.size_) == 0;\par
{\bkmkstart AAAAAAAHDF}{\bkmkend AAAAAAAHDF}
00071     \}\par
{\bkmkstart AAAAAAAHDG}{\bkmkend AAAAAAAHDG}
00072     \par
{\bkmkstart AAAAAAAHDH}{\bkmkend AAAAAAAHDH}
00073     {\cf18 bool} ends_with({\cf17 const} StringView& suffix){\cf17  const }\{\par
{\bkmkstart AAAAAAAHDI}{\bkmkend AAAAAAAHDI}
00074         {\cf19 if} (suffix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAHDJ}{\bkmkend AAAAAAAHDJ}
00075         {\cf19 return} std::memcmp(data_ + size_ - suffix.size(), suffix.data_, suffix.size_) == 0;\par
{\bkmkstart AAAAAAAHDK}{\bkmkend AAAAAAAHDK}
00076     \}\par
{\bkmkstart AAAAAAAHDL}{\bkmkend AAAAAAAHDL}
00077     \par
{\bkmkstart AAAAAAAHDM}{\bkmkend AAAAAAAHDM}
00078     {\cf18 bool} contains({\cf17 const} StringView& str){\cf17  const }\{\par
{\bkmkstart AAAAAAAHDN}{\bkmkend AAAAAAAHDN}
00079         {\cf19 return} find(str) != std::string::npos;\par
{\bkmkstart AAAAAAAHDO}{\bkmkend AAAAAAAHDO}
00080     \}\par
{\bkmkstart AAAAAAAHDP}{\bkmkend AAAAAAAHDP}
00081     \par
{\bkmkstart AAAAAAAHDQ}{\bkmkend AAAAAAAHDQ}
00082     {\cf18 void} remove_prefix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAHDR}{\bkmkend AAAAAAAHDR}
00083         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAHDT}{\bkmkend AAAAAAAHDT}
00084         data_ += n;\par
{\bkmkstart AAAAAAAHDV}{\bkmkend AAAAAAAHDV}
00085         size_ -= n;\par
{\bkmkstart AAAAAAAHDW}{\bkmkend AAAAAAAHDW}
00086     \}\par
{\bkmkstart AAAAAAAHDX}{\bkmkend AAAAAAAHDX}
00087     \par
{\bkmkstart AAAAAAAHDY}{\bkmkend AAAAAAAHDY}
00088     {\cf18 void} remove_suffix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAHEA}{\bkmkend AAAAAAAHEA}
00089         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAHED}{\bkmkend AAAAAAAHED}
00090         size_ -= n;\par
{\bkmkstart AAAAAAAHEE}{\bkmkend AAAAAAAHEE}
00091     \}\par
{\bkmkstart AAAAAAAHEG}{\bkmkend AAAAAAAHEG}
00092     \par
{\bkmkstart AAAAAAAHEI}{\bkmkend AAAAAAAHEI}
00093     std::string to_string(){\cf17  const }\{\par
{\bkmkstart AAAAAAAHEL}{\bkmkend AAAAAAAHEL}
00094         {\cf19 return} std::string(data_, size_);\par
{\bkmkstart AAAAAAAHEN}{\bkmkend AAAAAAAHEN}
00095     \}\par
{\bkmkstart AAAAAAAHEP}{\bkmkend AAAAAAAHEP}
00096     \par
{\bkmkstart AAAAAAAHEQ}{\bkmkend AAAAAAAHEQ}
00097     {\cf20 // Iterator support}\par
{\bkmkstart AAAAAAAHER}{\bkmkend AAAAAAAHER}
00098     {\cf17 const} {\cf18 char}* begin(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAHEU}{\bkmkend AAAAAAAHEU}
00099     {\cf17 const} {\cf18 char}* end(){\cf17  const }\{ {\cf19 return} data_ + size_; \}\par
{\bkmkstart AAAAAAAHEX}{\bkmkend AAAAAAAHEX}
00100     \par
{\bkmkstart AAAAAAAHEY}{\bkmkend AAAAAAAHEY}
00101     {\cf20 // Comparison operators}\par
{\bkmkstart AAAAAAAHEZ}{\bkmkend AAAAAAAHEZ}
00102     {\cf18 bool} operator==({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHFD}{\bkmkend AAAAAAAHFD}
00103         {\cf19 if} (size_ != other.size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAHFG}{\bkmkend AAAAAAAHFG}
00104         {\cf19 return} std::memcmp(data_, other.data_, size_) == 0;\par
{\bkmkstart AAAAAAAHFJ}{\bkmkend AAAAAAAHFJ}
00105     \}\par
{\bkmkstart AAAAAAAHFK}{\bkmkend AAAAAAAHFK}
00106     \par
{\bkmkstart AAAAAAAHFL}{\bkmkend AAAAAAAHFL}
00107     {\cf18 bool} operator!=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHFP}{\bkmkend AAAAAAAHFP}
00108         {\cf19 return} !(*{\cf17 this} == other);\par
{\bkmkstart AAAAAAAHFR}{\bkmkend AAAAAAAHFR}
00109     \}\par
{\bkmkstart AAAAAAAHFS}{\bkmkend AAAAAAAHFS}
00110     \par
{\bkmkstart AAAAAAAHFT}{\bkmkend AAAAAAAHFT}
00111     {\cf18 bool} operator<({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHFX}{\bkmkend AAAAAAAHFX}
00112         {\cf18 int} result = std::memcmp(data_, other.data_, std::min(size_, other.size_));\par
{\bkmkstart AAAAAAAHGC}{\bkmkend AAAAAAAHGC}
00113         {\cf19 if} (result != 0) {\cf19 return} result < 0;\par
{\bkmkstart AAAAAAAHGF}{\bkmkend AAAAAAAHGF}
00114         {\cf19 return} size_ < other.size_;\par
{\bkmkstart AAAAAAAHGU}{\bkmkend AAAAAAAHGU}
00115     \}\par
{\bkmkstart AAAAAAAHGW}{\bkmkend AAAAAAAHGW}
00116     \par
{\bkmkstart AAAAAAAHGX}{\bkmkend AAAAAAAHGX}
00117     {\cf18 bool} operator<=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHHB}{\bkmkend AAAAAAAHHB}
00118         {\cf19 return} *{\cf17 this} < other || *{\cf17 this} == other;\par
{\bkmkstart AAAAAAAHHE}{\bkmkend AAAAAAAHHE}
00119     \}\par
{\bkmkstart AAAAAAAHHF}{\bkmkend AAAAAAAHHF}
00120     \par
{\bkmkstart AAAAAAAHHH}{\bkmkend AAAAAAAHHH}
00121     {\cf18 bool} operator>({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHHL}{\bkmkend AAAAAAAHHL}
00122         {\cf19 return} !(*{\cf17 this} <= other);\par
{\bkmkstart AAAAAAAHHN}{\bkmkend AAAAAAAHHN}
00123     \}\par
{\bkmkstart AAAAAAAHHO}{\bkmkend AAAAAAAHHO}
00124     \par
{\bkmkstart AAAAAAAHHP}{\bkmkend AAAAAAAHHP}
00125     {\cf18 bool} operator>=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHHS}{\bkmkend AAAAAAAHHS}
00126         {\cf19 return} !(*{\cf17 this} < other);\par
{\bkmkstart AAAAAAAHHT}{\bkmkend AAAAAAAHHT}
00127     \}\par
{\bkmkstart AAAAAAAHHU}{\bkmkend AAAAAAAHHU}
00128     \par
{\bkmkstart AAAAAAAHHV}{\bkmkend AAAAAAAHHV}
00129     {\cf20 // Hash function}\par
{\bkmkstart AAAAAAAHHX}{\bkmkend AAAAAAAHHX}
00130     {\cf18 size_t} hash(){\cf17  const }\{\par
{\bkmkstart AAAAAAAHIB}{\bkmkend AAAAAAAHIB}
00131         {\cf18 size_t} result = 0;\par
{\bkmkstart AAAAAAAHIC}{\bkmkend AAAAAAAHIC}
00132         {\cf19 for} ({\cf18 size_t} i = 0; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAHIG}{\bkmkend AAAAAAAHIG}
00133             result = result * 31 + {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(data_[i]);\par
{\bkmkstart AAAAAAAHIK}{\bkmkend AAAAAAAHIK}
00134         \}\par
{\bkmkstart AAAAAAAHIM}{\bkmkend AAAAAAAHIM}
00135         {\cf19 return} result;\par
{\bkmkstart AAAAAAAHIO}{\bkmkend AAAAAAAHIO}
00136     \}\par
{\bkmkstart AAAAAAAHIX}{\bkmkend AAAAAAAHIX}
00137 \};\par
{\bkmkstart AAAAAAAHIY}{\bkmkend AAAAAAAHIY}
00138 \par
{\bkmkstart AAAAAAAHIZ}{\bkmkend AAAAAAAHIZ}
00139 {\cf17 class }StringViewComprehensiveTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAHJC}{\bkmkend AAAAAAAHJC}
00140 {\cf17 protected}:\par
{\bkmkstart AAAAAAAHJE}{\bkmkend AAAAAAAHJE}
00141     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAHJJ}{\bkmkend AAAAAAAHJJ}
00142         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAHJK}{\bkmkend AAAAAAAHJK}
00143     \}\par
{\bkmkstart AAAAAAAHJM}{\bkmkend AAAAAAAHJM}
00144     \par
{\bkmkstart AAAAAAAHJN}{\bkmkend AAAAAAAHJN}
00145     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAHJS}{\bkmkend AAAAAAAHJS}
00146         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAHJT}{\bkmkend AAAAAAAHJT}
00147     \}\par
{\bkmkstart AAAAAAAHJV}{\bkmkend AAAAAAAHJV}
00148 \};\par
{\bkmkstart AAAAAAAHJX}{\bkmkend AAAAAAAHJX}
00149 \par
{\bkmkstart AAAAAAAHJY}{\bkmkend AAAAAAAHJY}
00150 {\cf20 // Test basic construction}\par
{\bkmkstart AAAAAAAHKA}{\bkmkend AAAAAAAHKA}
00151 TEST_F(StringViewComprehensiveTest, TestConstruction) \{\par
{\bkmkstart AAAAAAAHKM}{\bkmkend AAAAAAAHKM}
00152     {\cf20 // Default construction}\par
{\bkmkstart AAAAAAAHKO}{\bkmkend AAAAAAAHKO}
00153     StringView sv1;\par
{\bkmkstart AAAAAAAHKR}{\bkmkend AAAAAAAHKR}
00154     EXPECT_TRUE(sv1.empty());\par
{\bkmkstart AAAAAAAHKT}{\bkmkend AAAAAAAHKT}
00155     EXPECT_EQ(sv1.size(), 0);\par
{\bkmkstart AAAAAAAHKV}{\bkmkend AAAAAAAHKV}
00156     EXPECT_EQ(sv1.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAHKX}{\bkmkend AAAAAAAHKX}
00157     \par
{\bkmkstart AAAAAAAHKZ}{\bkmkend AAAAAAAHKZ}
00158     {\cf20 // Construction from C-string}\par
{\bkmkstart AAAAAAAHLA}{\bkmkend AAAAAAAHLA}
00159     {\cf17 const} {\cf18 char}* str = {\cf22 "hello"};\par
{\bkmkstart AAAAAAAHLD}{\bkmkend AAAAAAAHLD}
00160     StringView sv2(str);\par
{\bkmkstart AAAAAAAHLF}{\bkmkend AAAAAAAHLF}
00161     EXPECT_FALSE(sv2.empty());\par
{\bkmkstart AAAAAAAHLH}{\bkmkend AAAAAAAHLH}
00162     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAHLJ}{\bkmkend AAAAAAAHLJ}
00163     EXPECT_EQ(sv2.data(), str);\par
{\bkmkstart AAAAAAAHLL}{\bkmkend AAAAAAAHLL}
00164     \par
{\bkmkstart AAAAAAAHLM}{\bkmkend AAAAAAAHLM}
00165     {\cf20 // Construction from C-string with length}\par
{\bkmkstart AAAAAAAHLN}{\bkmkend AAAAAAAHLN}
00166     StringView sv3(str, 3);\par
{\bkmkstart AAAAAAAHLO}{\bkmkend AAAAAAAHLO}
00167     EXPECT_FALSE(sv3.empty());\par
{\bkmkstart AAAAAAAHQS}{\bkmkend AAAAAAAHQS}
00168     EXPECT_EQ(sv3.size(), 3);\par
{\bkmkstart AAAAAAAHQU}{\bkmkend AAAAAAAHQU}
00169     EXPECT_EQ(sv3.data(), str);\par
{\bkmkstart AAAAAAAHQX}{\bkmkend AAAAAAAHQX}
00170     \par
{\bkmkstart AAAAAAAHQZ}{\bkmkend AAAAAAAHQZ}
00171     {\cf20 // Construction from std::string}\par
{\bkmkstart AAAAAAAHRA}{\bkmkend AAAAAAAHRA}
00172     std::string s = {\cf22 "world"};\par
{\bkmkstart AAAAAAAHRB}{\bkmkend AAAAAAAHRB}
00173     StringView sv4(s);\par
{\bkmkstart AAAAAAAHRE}{\bkmkend AAAAAAAHRE}
00174     EXPECT_FALSE(sv4.empty());\par
{\bkmkstart AAAAAAAHRF}{\bkmkend AAAAAAAHRF}
00175     EXPECT_EQ(sv4.size(), 5);\par
{\bkmkstart AAAAAAAHRH}{\bkmkend AAAAAAAHRH}
00176     EXPECT_EQ(sv4.data(), s.c_str());\par
{\bkmkstart AAAAAAAHRL}{\bkmkend AAAAAAAHRL}
00177     \par
{\bkmkstart AAAAAAAHRM}{\bkmkend AAAAAAAHRM}
00178     {\cf20 // Construction from null pointer}\par
{\bkmkstart AAAAAAAHRN}{\bkmkend AAAAAAAHRN}
00179     StringView sv5({\cf17 nullptr});\par
{\bkmkstart AAAAAAAHRP}{\bkmkend AAAAAAAHRP}
00180     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAHRR}{\bkmkend AAAAAAAHRR}
00181     EXPECT_EQ(sv5.size(), 0);\par
{\bkmkstart AAAAAAAHRU}{\bkmkend AAAAAAAHRU}
00182     EXPECT_EQ(sv5.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAHRW}{\bkmkend AAAAAAAHRW}
00183 \}\par
{\bkmkstart AAAAAAAHRX}{\bkmkend AAAAAAAHRX}
00184 \par
{\bkmkstart AAAAAAAHRZ}{\bkmkend AAAAAAAHRZ}
00185 {\cf20 // Test access methods}\par
{\bkmkstart AAAAAAAHSA}{\bkmkend AAAAAAAHSA}
00186 TEST_F(StringViewComprehensiveTest, TestAccess) \{\par
{\bkmkstart AAAAAAAHSE}{\bkmkend AAAAAAAHSE}
00187     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAHSG}{\bkmkend AAAAAAAHSG}
00188     \par
{\bkmkstart AAAAAAAHSH}{\bkmkend AAAAAAAHSH}
00189     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAHSJ}{\bkmkend AAAAAAAHSJ}
00190     EXPECT_EQ(sv[0], {\cf23 'h'});\par
{\bkmkstart AAAAAAAHSM}{\bkmkend AAAAAAAHSM}
00191     EXPECT_EQ(sv[1], {\cf23 'e'});\par
{\bkmkstart AAAAAAAHSP}{\bkmkend AAAAAAAHSP}
00192     EXPECT_EQ(sv[2], {\cf23 'l'});\par
{\bkmkstart AAAAAAAHSQ}{\bkmkend AAAAAAAHSQ}
00193     EXPECT_EQ(sv[3], {\cf23 'l'});\par
{\bkmkstart AAAAAAAHSR}{\bkmkend AAAAAAAHSR}
00194     EXPECT_EQ(sv[4], {\cf23 'o'});\par
{\bkmkstart AAAAAAAHSS}{\bkmkend AAAAAAAHSS}
00195     \par
{\bkmkstart AAAAAAAHST}{\bkmkend AAAAAAAHST}
00196     {\cf20 // Test at()}\par
{\bkmkstart AAAAAAAHSU}{\bkmkend AAAAAAAHSU}
00197     EXPECT_EQ(sv.at(0), {\cf23 'h'});\par
{\bkmkstart AAAAAAAHSV}{\bkmkend AAAAAAAHSV}
00198     EXPECT_EQ(sv.at(1), {\cf23 'e'});\par
{\bkmkstart AAAAAAAHSW}{\bkmkend AAAAAAAHSW}
00199     EXPECT_EQ(sv.at(2), {\cf23 'l'});\par
{\bkmkstart AAAAAAAHSX}{\bkmkend AAAAAAAHSX}
00200     EXPECT_EQ(sv.at(3), {\cf23 'l'});\par
{\bkmkstart AAAAAAAHSY}{\bkmkend AAAAAAAHSY}
00201     EXPECT_EQ(sv.at(4), {\cf23 'o'});\par
{\bkmkstart AAAAAAAHSZ}{\bkmkend AAAAAAAHSZ}
00202     \par
{\bkmkstart AAAAAAAHTA}{\bkmkend AAAAAAAHTA}
00203     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAHTB}{\bkmkend AAAAAAAHTB}
00204     EXPECT_THROW(sv[5], std::out_of_range);\par
{\bkmkstart AAAAAAAHTC}{\bkmkend AAAAAAAHTC}
00205     EXPECT_THROW(sv.at(5), std::out_of_range);\par
{\bkmkstart AAAAAAAHTD}{\bkmkend AAAAAAAHTD}
00206     EXPECT_THROW(sv[-1], std::out_of_range);\par
{\bkmkstart AAAAAAAHTE}{\bkmkend AAAAAAAHTE}
00207     EXPECT_THROW(sv.at(-1), std::out_of_range);\par
{\bkmkstart AAAAAAAHTI}{\bkmkend AAAAAAAHTI}
00208 \}\par
{\bkmkstart AAAAAAAHTK}{\bkmkend AAAAAAAHTK}
00209 \par
{\bkmkstart AAAAAAAHTL}{\bkmkend AAAAAAAHTL}
00210 {\cf20 // Test substring operations}\par
{\bkmkstart AAAAAAAHTM}{\bkmkend AAAAAAAHTM}
00211 TEST_F(StringViewComprehensiveTest, TestSubstr) \{\par
{\bkmkstart AAAAAAAHTP}{\bkmkend AAAAAAAHTP}
00212     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHTS}{\bkmkend AAAAAAAHTS}
00213     \par
{\bkmkstart AAAAAAAHTV}{\bkmkend AAAAAAAHTV}
00214     {\cf20 // Test full substring}\par
{\bkmkstart AAAAAAAHTX}{\bkmkend AAAAAAAHTX}
00215     StringView sv1 = sv.substr();\par
{\bkmkstart AAAAAAAHTZ}{\bkmkend AAAAAAAHTZ}
00216     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAHUC}{\bkmkend AAAAAAAHUC}
00217     \par
{\bkmkstart AAAAAAAHUE}{\bkmkend AAAAAAAHUE}
00218     {\cf20 // Test substring from beginning}\par
{\bkmkstart AAAAAAAHUG}{\bkmkend AAAAAAAHUG}
00219     StringView sv2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAHUJ}{\bkmkend AAAAAAAHUJ}
00220     EXPECT_EQ(sv2, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAHUK}{\bkmkend AAAAAAAHUK}
00221     \par
{\bkmkstart AAAAAAAHUL}{\bkmkend AAAAAAAHUL}
00222     {\cf20 // Test substring from middle}\par
{\bkmkstart AAAAAAAHUM}{\bkmkend AAAAAAAHUM}
00223     StringView sv3 = sv.substr(6, 5);\par
{\bkmkstart AAAAAAAHUN}{\bkmkend AAAAAAAHUN}
00224     EXPECT_EQ(sv3, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAHUO}{\bkmkend AAAAAAAHUO}
00225     \par
{\bkmkstart AAAAAAAHUP}{\bkmkend AAAAAAAHUP}
00226     {\cf20 // Test substring with npos}\par
{\bkmkstart AAAAAAAHUQ}{\bkmkend AAAAAAAHUQ}
00227     StringView sv4 = sv.substr(6);\par
{\bkmkstart AAAAAAAHUR}{\bkmkend AAAAAAAHUR}
00228     EXPECT_EQ(sv4, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAHUS}{\bkmkend AAAAAAAHUS}
00229     \par
{\bkmkstart AAAAAAAHUT}{\bkmkend AAAAAAAHUT}
00230     {\cf20 // Test empty substring}\par
{\bkmkstart AAAAAAAHUU}{\bkmkend AAAAAAAHUU}
00231     StringView sv5 = sv.substr(5, 0);\par
{\bkmkstart AAAAAAAHUV}{\bkmkend AAAAAAAHUV}
00232     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAHUW}{\bkmkend AAAAAAAHUW}
00233     \par
{\bkmkstart AAAAAAAHUX}{\bkmkend AAAAAAAHUX}
00234     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAHUY}{\bkmkend AAAAAAAHUY}
00235     EXPECT_THROW(sv.substr(20), std::out_of_range);\par
{\bkmkstart AAAAAAAHUZ}{\bkmkend AAAAAAAHUZ}
00236     EXPECT_THROW(sv.substr(5, 20), std::out_of_range);\par
{\bkmkstart AAAAAAAHVA}{\bkmkend AAAAAAAHVA}
00237 \}\par
{\bkmkstart AAAAAAAHVB}{\bkmkend AAAAAAAHVB}
00238 \par
{\bkmkstart AAAAAAAHVC}{\bkmkend AAAAAAAHVC}
00239 {\cf20 // Test find operations}\par
{\bkmkstart AAAAAAAHVD}{\bkmkend AAAAAAAHVD}
00240 TEST_F(StringViewComprehensiveTest, TestFind) \{\par
{\bkmkstart AAAAAAAHVE}{\bkmkend AAAAAAAHVE}
00241     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHVF}{\bkmkend AAAAAAAHVF}
00242     \par
{\bkmkstart AAAAAAAHVG}{\bkmkend AAAAAAAHVG}
00243     {\cf20 // Test find character}\par
{\bkmkstart AAAAAAAHVH}{\bkmkend AAAAAAAHVH}
00244     EXPECT_EQ(sv.find({\cf23 'h'}), 0);\par
{\bkmkstart AAAAAAAHVI}{\bkmkend AAAAAAAHVI}
00245     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAHVJ}{\bkmkend AAAAAAAHVJ}
00246     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAHVK}{\bkmkend AAAAAAAHVK}
00247     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAHVL}{\bkmkend AAAAAAAHVL}
00248     EXPECT_EQ(sv.find({\cf23 'w'}), 6);\par
{\bkmkstart AAAAAAAHVM}{\bkmkend AAAAAAAHVM}
00249     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAAHVN}{\bkmkend AAAAAAAHVN}
00250     EXPECT_EQ(sv.find({\cf23 'x'}), std::string::npos);\par
{\bkmkstart AAAAAAAHVO}{\bkmkend AAAAAAAHVO}
00251     \par
{\bkmkstart AAAAAAAHVP}{\bkmkend AAAAAAAHVP}
00252     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAHVQ}{\bkmkend AAAAAAAHVQ}
00253     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAHVR}{\bkmkend AAAAAAAHVR}
00254     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAHVS}{\bkmkend AAAAAAAHVS}
00255     EXPECT_EQ(sv.find({\cf23 'l'}, 10), std::string::npos);\par
{\bkmkstart AAAAAAAHVT}{\bkmkend AAAAAAAHVT}
00256     \par
{\bkmkstart AAAAAAAHVU}{\bkmkend AAAAAAAHVU}
00257     {\cf20 // Test find string}\par
{\bkmkstart AAAAAAAHVV}{\bkmkend AAAAAAAHVV}
00258     EXPECT_EQ(sv.find(StringView({\cf22 "hello"})), 0);\par
{\bkmkstart AAAAAAAHVW}{\bkmkend AAAAAAAHVW}
00259     EXPECT_EQ(sv.find(StringView({\cf22 "world"})), 6);\par
{\bkmkstart AAAAAAAHVX}{\bkmkend AAAAAAAHVX}
00260     EXPECT_EQ(sv.find(StringView({\cf22 "lo"})), 3);\par
{\bkmkstart AAAAAAAHVY}{\bkmkend AAAAAAAHVY}
00261     EXPECT_EQ(sv.find(StringView({\cf22 "xyz"})), std::string::npos);\par
{\bkmkstart AAAAAAAHVZ}{\bkmkend AAAAAAAHVZ}
00262     \par
{\bkmkstart AAAAAAAHWA}{\bkmkend AAAAAAAHWA}
00263     {\cf20 // Test find empty string}\par
{\bkmkstart AAAAAAAHWB}{\bkmkend AAAAAAAHWB}
00264     EXPECT_EQ(sv.find(StringView({\cf22 ""})), 0);\par
{\bkmkstart AAAAAAAHWC}{\bkmkend AAAAAAAHWC}
00265     \par
{\bkmkstart AAAAAAAHWD}{\bkmkend AAAAAAAHWD}
00266     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAHWE}{\bkmkend AAAAAAAHWE}
00267     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 2), 3);\par
{\bkmkstart AAAAAAAHWF}{\bkmkend AAAAAAAHWF}
00268     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 4), std::string::npos);\par
{\bkmkstart AAAAAAAHWG}{\bkmkend AAAAAAAHWG}
00269 \}\par
{\bkmkstart AAAAAAAHWH}{\bkmkend AAAAAAAHWH}
00270 \par
{\bkmkstart AAAAAAAHWI}{\bkmkend AAAAAAAHWI}
00271 {\cf20 // Test prefix/suffix operations}\par
{\bkmkstart AAAAAAAHWJ}{\bkmkend AAAAAAAHWJ}
00272 TEST_F(StringViewComprehensiveTest, TestPrefixSuffix) \{\par
{\bkmkstart AAAAAAAHWK}{\bkmkend AAAAAAAHWK}
00273     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHWL}{\bkmkend AAAAAAAHWL}
00274     \par
{\bkmkstart AAAAAAAHWM}{\bkmkend AAAAAAAHWM}
00275     {\cf20 // Test starts_with}\par
{\bkmkstart AAAAAAAHWN}{\bkmkend AAAAAAAHWN}
00276     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAHWO}{\bkmkend AAAAAAAHWO}
00277     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "he"})));\par
{\bkmkstart AAAAAAAHWP}{\bkmkend AAAAAAAHWP}
00278     EXPECT_TRUE(sv.starts_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAHWQ}{\bkmkend AAAAAAAHWQ}
00279     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAHWR}{\bkmkend AAAAAAAHWR}
00280     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAHWS}{\bkmkend AAAAAAAHWS}
00281     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAHWT}{\bkmkend AAAAAAAHWT}
00282     \par
{\bkmkstart AAAAAAAHWU}{\bkmkend AAAAAAAHWU}
00283     {\cf20 // Test ends_with}\par
{\bkmkstart AAAAAAAHWV}{\bkmkend AAAAAAAHWV}
00284     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAHWW}{\bkmkend AAAAAAAHWW}
00285     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "ld"})));\par
{\bkmkstart AAAAAAAHWX}{\bkmkend AAAAAAAHWX}
00286     EXPECT_TRUE(sv.ends_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAHWY}{\bkmkend AAAAAAAHWY}
00287     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAHWZ}{\bkmkend AAAAAAAHWZ}
00288     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAHXA}{\bkmkend AAAAAAAHXA}
00289     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "!hello world"})));\par
{\bkmkstart AAAAAAAHXB}{\bkmkend AAAAAAAHXB}
00290     \par
{\bkmkstart AAAAAAAHXC}{\bkmkend AAAAAAAHXC}
00291     {\cf20 // Test contains}\par
{\bkmkstart AAAAAAAHXD}{\bkmkend AAAAAAAHXD}
00292     EXPECT_TRUE(sv.contains(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAHXE}{\bkmkend AAAAAAAHXE}
00293     EXPECT_TRUE(sv.contains(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAHXF}{\bkmkend AAAAAAAHXF}
00294     EXPECT_TRUE(sv.contains(StringView({\cf22 "lo wo"})));\par
{\bkmkstart AAAAAAAHXG}{\bkmkend AAAAAAAHXG}
00295     EXPECT_TRUE(sv.contains(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAHXH}{\bkmkend AAAAAAAHXH}
00296     EXPECT_FALSE(sv.contains(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAHXI}{\bkmkend AAAAAAAHXI}
00297     EXPECT_FALSE(sv.contains(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAHXJ}{\bkmkend AAAAAAAHXJ}
00298 \}\par
{\bkmkstart AAAAAAAHXK}{\bkmkend AAAAAAAHXK}
00299 \par
{\bkmkstart AAAAAAAHXL}{\bkmkend AAAAAAAHXL}
00300 {\cf20 // Test remove operations}\par
{\bkmkstart AAAAAAAHXM}{\bkmkend AAAAAAAHXM}
00301 TEST_F(StringViewComprehensiveTest, TestRemove) \{\par
{\bkmkstart AAAAAAAHXN}{\bkmkend AAAAAAAHXN}
00302     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHXP}{\bkmkend AAAAAAAHXP}
00303     \par
{\bkmkstart AAAAAAAHXQ}{\bkmkend AAAAAAAHXQ}
00304     {\cf20 // Test remove_prefix}\par
{\bkmkstart AAAAAAAHXS}{\bkmkend AAAAAAAHXS}
00305     StringView sv1 = sv;\par
{\bkmkstart AAAAAAAHXU}{\bkmkend AAAAAAAHXU}
00306     sv1.remove_prefix(0);\par
{\bkmkstart AAAAAAAHXV}{\bkmkend AAAAAAAHXV}
00307     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAHXX}{\bkmkend AAAAAAAHXX}
00308     \par
{\bkmkstart AAAAAAAHXY}{\bkmkend AAAAAAAHXY}
00309     StringView sv2 = sv;\par
{\bkmkstart AAAAAAAHYA}{\bkmkend AAAAAAAHYA}
00310     sv2.remove_prefix(6);\par
{\bkmkstart AAAAAAAHYB}{\bkmkend AAAAAAAHYB}
00311     EXPECT_EQ(sv2, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAHYE}{\bkmkend AAAAAAAHYE}
00312     \par
{\bkmkstart AAAAAAAHYG}{\bkmkend AAAAAAAHYG}
00313     StringView sv3 = sv;\par
{\bkmkstart AAAAAAAHYH}{\bkmkend AAAAAAAHYH}
00314     sv3.remove_prefix(11);\par
{\bkmkstart AAAAAAAHYI}{\bkmkend AAAAAAAHYI}
00315     EXPECT_TRUE(sv3.empty());\par
{\bkmkstart AAAAAAAHYL}{\bkmkend AAAAAAAHYL}
00316     \par
{\bkmkstart AAAAAAAHYM}{\bkmkend AAAAAAAHYM}
00317     StringView sv4 = sv;\par
{\bkmkstart AAAAAAAHYP}{\bkmkend AAAAAAAHYP}
00318     sv4.remove_prefix(20);\par
{\bkmkstart AAAAAAAHYQ}{\bkmkend AAAAAAAHYQ}
00319     EXPECT_TRUE(sv4.empty());\par
{\bkmkstart AAAAAAAHYT}{\bkmkend AAAAAAAHYT}
00320     \par
{\bkmkstart AAAAAAAHYU}{\bkmkend AAAAAAAHYU}
00321     {\cf20 // Test remove_suffix}\par
{\bkmkstart AAAAAAAHYW}{\bkmkend AAAAAAAHYW}
00322     StringView sv5 = sv;\par
{\bkmkstart AAAAAAAHYX}{\bkmkend AAAAAAAHYX}
00323     sv5.remove_suffix(0);\par
{\bkmkstart AAAAAAAHZA}{\bkmkend AAAAAAAHZA}
00324     EXPECT_EQ(sv5, sv);\par
{\bkmkstart AAAAAAAHZC}{\bkmkend AAAAAAAHZC}
00325     \par
{\bkmkstart AAAAAAAHZE}{\bkmkend AAAAAAAHZE}
00326     StringView sv6 = sv;\par
{\bkmkstart AAAAAAAHZG}{\bkmkend AAAAAAAHZG}
00327     sv6.remove_suffix(6);\par
{\bkmkstart AAAAAAAHZJ}{\bkmkend AAAAAAAHZJ}
00328     EXPECT_EQ(sv6, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAHZM}{\bkmkend AAAAAAAHZM}
00329     \par
{\bkmkstart AAAAAAAHZN}{\bkmkend AAAAAAAHZN}
00330     StringView sv7 = sv;\par
{\bkmkstart AAAAAAAHZO}{\bkmkend AAAAAAAHZO}
00331     sv7.remove_suffix(11);\par
{\bkmkstart AAAAAAAHZQ}{\bkmkend AAAAAAAHZQ}
00332     EXPECT_TRUE(sv7.empty());\par
{\bkmkstart AAAAAAAHZS}{\bkmkend AAAAAAAHZS}
00333     \par
{\bkmkstart AAAAAAAHZU}{\bkmkend AAAAAAAHZU}
00334     StringView sv8 = sv;\par
{\bkmkstart AAAAAAAHZX}{\bkmkend AAAAAAAHZX}
00335     sv8.remove_suffix(20);\par
{\bkmkstart AAAAAAAHZZ}{\bkmkend AAAAAAAHZZ}
00336     EXPECT_TRUE(sv8.empty());\par
{\bkmkstart AAAAAAAIAB}{\bkmkend AAAAAAAIAB}
00337 \}\par
{\bkmkstart AAAAAAAIAC}{\bkmkend AAAAAAAIAC}
00338 \par
{\bkmkstart AAAAAAAIAD}{\bkmkend AAAAAAAIAD}
00339 {\cf20 // Test conversion}\par
{\bkmkstart AAAAAAAIAF}{\bkmkend AAAAAAAIAF}
00340 TEST_F(StringViewComprehensiveTest, TestConversion) \{\par
{\bkmkstart AAAAAAAIAH}{\bkmkend AAAAAAAIAH}
00341     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIAJ}{\bkmkend AAAAAAAIAJ}
00342     \par
{\bkmkstart AAAAAAAIAK}{\bkmkend AAAAAAAIAK}
00343     {\cf20 // Test to_string}\par
{\bkmkstart AAAAAAAIAM}{\bkmkend AAAAAAAIAM}
00344     std::string str = sv.to_string();\par
{\bkmkstart AAAAAAAIAP}{\bkmkend AAAAAAAIAP}
00345     EXPECT_EQ(str, {\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIAR}{\bkmkend AAAAAAAIAR}
00346     \par
{\bkmkstart AAAAAAAIAS}{\bkmkend AAAAAAAIAS}
00347     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAIAU}{\bkmkend AAAAAAAIAU}
00348     StringView empty;\par
{\bkmkstart AAAAAAAIAZ}{\bkmkend AAAAAAAIAZ}
00349     std::string empty_str = empty.to_string();\par
{\bkmkstart AAAAAAAIBA}{\bkmkend AAAAAAAIBA}
00350     EXPECT_TRUE(empty_str.empty());\par
{\bkmkstart AAAAAAAIBB}{\bkmkend AAAAAAAIBB}
00351 \}\par
{\bkmkstart AAAAAAAIBC}{\bkmkend AAAAAAAIBC}
00352 \par
{\bkmkstart AAAAAAAIBD}{\bkmkend AAAAAAAIBD}
00353 {\cf20 // Test iterators}\par
{\bkmkstart AAAAAAAIBE}{\bkmkend AAAAAAAIBE}
00354 TEST_F(StringViewComprehensiveTest, TestIterators) \{\par
{\bkmkstart AAAAAAAIBF}{\bkmkend AAAAAAAIBF}
00355     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAIBG}{\bkmkend AAAAAAAIBG}
00356     \par
{\bkmkstart AAAAAAAIBH}{\bkmkend AAAAAAAIBH}
00357     {\cf20 // Test begin/end}\par
{\bkmkstart AAAAAAAIBI}{\bkmkend AAAAAAAIBI}
00358     {\cf17 const} {\cf18 char}* begin = sv.begin();\par
{\bkmkstart AAAAAAAIBJ}{\bkmkend AAAAAAAIBJ}
00359     {\cf17 const} {\cf18 char}* end = sv.end();\par
{\bkmkstart AAAAAAAIBK}{\bkmkend AAAAAAAIBK}
00360     EXPECT_EQ(end - begin, 5);\par
{\bkmkstart AAAAAAAIBL}{\bkmkend AAAAAAAIBL}
00361     \par
{\bkmkstart AAAAAAAIBM}{\bkmkend AAAAAAAIBM}
00362     {\cf20 // Test iteration}\par
{\bkmkstart AAAAAAAIBN}{\bkmkend AAAAAAAIBN}
00363     std::string result;\par
{\bkmkstart AAAAAAAIBO}{\bkmkend AAAAAAAIBO}
00364     {\cf19 for} ({\cf17 auto} it = sv.begin(); it != sv.end(); ++it) \{\par
{\bkmkstart AAAAAAAIBP}{\bkmkend AAAAAAAIBP}
00365         result += *it;\par
{\bkmkstart AAAAAAAIBQ}{\bkmkend AAAAAAAIBQ}
00366     \}\par
{\bkmkstart AAAAAAAIBR}{\bkmkend AAAAAAAIBR}
00367     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAIBS}{\bkmkend AAAAAAAIBS}
00368     \par
{\bkmkstart AAAAAAAIBT}{\bkmkend AAAAAAAIBT}
00369     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAIBU}{\bkmkend AAAAAAAIBU}
00370     result.clear();\par
{\bkmkstart AAAAAAAIBV}{\bkmkend AAAAAAAIBV}
00371     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAIBW}{\bkmkend AAAAAAAIBW}
00372         result += c;\par
{\bkmkstart AAAAAAAIBY}{\bkmkend AAAAAAAIBY}
00373     \}\par
{\bkmkstart AAAAAAAIBZ}{\bkmkend AAAAAAAIBZ}
00374     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAICA}{\bkmkend AAAAAAAICA}
00375 \}\par
{\bkmkstart AAAAAAAICC}{\bkmkend AAAAAAAICC}
00376 \par
{\bkmkstart AAAAAAAICE}{\bkmkend AAAAAAAICE}
00377 {\cf20 // Test comparison operators}\par
{\bkmkstart AAAAAAAICF}{\bkmkend AAAAAAAICF}
00378 TEST_F(StringViewComprehensiveTest, TestComparison) \{\par
{\bkmkstart AAAAAAAICH}{\bkmkend AAAAAAAICH}
00379     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAICK}{\bkmkend AAAAAAAICK}
00380     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAICM}{\bkmkend AAAAAAAICM}
00381     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAICO}{\bkmkend AAAAAAAICO}
00382     StringView sv4({\cf22 "hell"});\par
{\bkmkstart AAAAAAAICR}{\bkmkend AAAAAAAICR}
00383     StringView sv5({\cf22 "helloo"});\par
{\bkmkstart AAAAAAAICT}{\bkmkend AAAAAAAICT}
00384     \par
{\bkmkstart AAAAAAAICU}{\bkmkend AAAAAAAICU}
00385     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAICW}{\bkmkend AAAAAAAICW}
00386     EXPECT_TRUE(sv1 == sv2);\par
{\bkmkstart AAAAAAAICX}{\bkmkend AAAAAAAICX}
00387     EXPECT_FALSE(sv1 == sv3);\par
{\bkmkstart AAAAAAAIDA}{\bkmkend AAAAAAAIDA}
00388     EXPECT_FALSE(sv1 == sv4);\par
{\bkmkstart AAAAAAAIDC}{\bkmkend AAAAAAAIDC}
00389     EXPECT_FALSE(sv1 == sv5);\par
{\bkmkstart AAAAAAAIDE}{\bkmkend AAAAAAAIDE}
00390     \par
{\bkmkstart AAAAAAAIDF}{\bkmkend AAAAAAAIDF}
00391     {\cf20 // Test inequality}\par
{\bkmkstart AAAAAAAIDH}{\bkmkend AAAAAAAIDH}
00392     EXPECT_FALSE(sv1 != sv2);\par
{\bkmkstart AAAAAAAIDK}{\bkmkend AAAAAAAIDK}
00393     EXPECT_TRUE(sv1 != sv3);\par
{\bkmkstart AAAAAAAIDM}{\bkmkend AAAAAAAIDM}
00394     EXPECT_TRUE(sv1 != sv4);\par
{\bkmkstart AAAAAAAIDN}{\bkmkend AAAAAAAIDN}
00395     EXPECT_TRUE(sv1 != sv5);\par
{\bkmkstart AAAAAAAIDQ}{\bkmkend AAAAAAAIDQ}
00396     \par
{\bkmkstart AAAAAAAIDS}{\bkmkend AAAAAAAIDS}
00397     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAIDT}{\bkmkend AAAAAAAIDT}
00398     EXPECT_TRUE(sv1 < sv3);\par
{\bkmkstart AAAAAAAIDU}{\bkmkend AAAAAAAIDU}
00399     EXPECT_FALSE(sv1 < sv2);\par
{\bkmkstart AAAAAAAIDV}{\bkmkend AAAAAAAIDV}
00400     EXPECT_FALSE(sv1 < sv4);\par
{\bkmkstart AAAAAAAIDW}{\bkmkend AAAAAAAIDW}
00401     EXPECT_TRUE(sv1 < sv5);\par
{\bkmkstart AAAAAAAIDX}{\bkmkend AAAAAAAIDX}
00402     \par
{\bkmkstart AAAAAAAIDY}{\bkmkend AAAAAAAIDY}
00403     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAIDZ}{\bkmkend AAAAAAAIDZ}
00404     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAAIEA}{\bkmkend AAAAAAAIEA}
00405     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAAIEB}{\bkmkend AAAAAAAIEB}
00406     EXPECT_FALSE(sv1 <= sv4);\par
{\bkmkstart AAAAAAAIEC}{\bkmkend AAAAAAAIEC}
00407     EXPECT_TRUE(sv1 <= sv5);\par
{\bkmkstart AAAAAAAIED}{\bkmkend AAAAAAAIED}
00408     \par
{\bkmkstart AAAAAAAIEE}{\bkmkend AAAAAAAIEE}
00409     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAIEF}{\bkmkend AAAAAAAIEF}
00410     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAAIEG}{\bkmkend AAAAAAAIEG}
00411     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAAIEH}{\bkmkend AAAAAAAIEH}
00412     EXPECT_TRUE(sv1 > sv4);\par
{\bkmkstart AAAAAAAIEI}{\bkmkend AAAAAAAIEI}
00413     EXPECT_FALSE(sv1 > sv5);\par
{\bkmkstart AAAAAAAIEJ}{\bkmkend AAAAAAAIEJ}
00414     \par
{\bkmkstart AAAAAAAIEK}{\bkmkend AAAAAAAIEK}
00415     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAIEL}{\bkmkend AAAAAAAIEL}
00416     EXPECT_TRUE(sv1 >= sv2);\par
{\bkmkstart AAAAAAAIEM}{\bkmkend AAAAAAAIEM}
00417     EXPECT_FALSE(sv1 >= sv3);\par
{\bkmkstart AAAAAAAIEN}{\bkmkend AAAAAAAIEN}
00418     EXPECT_TRUE(sv1 >= sv4);\par
{\bkmkstart AAAAAAAIEO}{\bkmkend AAAAAAAIEO}
00419     EXPECT_FALSE(sv1 >= sv5);\par
{\bkmkstart AAAAAAAIEP}{\bkmkend AAAAAAAIEP}
00420 \}\par
{\bkmkstart AAAAAAAIEQ}{\bkmkend AAAAAAAIEQ}
00421 \par
{\bkmkstart AAAAAAAIER}{\bkmkend AAAAAAAIER}
00422 {\cf20 // Test hash function}\par
{\bkmkstart AAAAAAAIES}{\bkmkend AAAAAAAIES}
00423 TEST_F(StringViewComprehensiveTest, TestHash) \{\par
{\bkmkstart AAAAAAAIET}{\bkmkend AAAAAAAIET}
00424     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAIEU}{\bkmkend AAAAAAAIEU}
00425     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAIEV}{\bkmkend AAAAAAAIEV}
00426     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAIEW}{\bkmkend AAAAAAAIEW}
00427     \par
{\bkmkstart AAAAAAAIEX}{\bkmkend AAAAAAAIEX}
00428     {\cf20 // Test same strings have same hash}\par
{\bkmkstart AAAAAAAIEY}{\bkmkend AAAAAAAIEY}
00429     EXPECT_EQ(sv1.hash(), sv2.hash());\par
{\bkmkstart AAAAAAAIEZ}{\bkmkend AAAAAAAIEZ}
00430     \par
{\bkmkstart AAAAAAAIFA}{\bkmkend AAAAAAAIFA}
00431     {\cf20 // Test different strings have different hash (very likely)}\par
{\bkmkstart AAAAAAAIFB}{\bkmkend AAAAAAAIFB}
00432     EXPECT_NE(sv1.hash(), sv3.hash());\par
{\bkmkstart AAAAAAAIFC}{\bkmkend AAAAAAAIFC}
00433     \par
{\bkmkstart AAAAAAAIFD}{\bkmkend AAAAAAAIFD}
00434     {\cf20 // Test empty string hash}\par
{\bkmkstart AAAAAAAIFE}{\bkmkend AAAAAAAIFE}
00435     StringView empty;\par
{\bkmkstart AAAAAAAIFF}{\bkmkend AAAAAAAIFF}
00436     EXPECT_EQ(empty.hash(), 0);\par
{\bkmkstart AAAAAAAIFG}{\bkmkend AAAAAAAIFG}
00437 \}\par
{\bkmkstart AAAAAAAIFH}{\bkmkend AAAAAAAIFH}
00438 \par
{\bkmkstart AAAAAAAIFI}{\bkmkend AAAAAAAIFI}
00439 {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAAIFJ}{\bkmkend AAAAAAAIFJ}
00440 TEST_F(StringViewComprehensiveTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAIFK}{\bkmkend AAAAAAAIFK}
00441     {\cf20 // Test empty string}\par
{\bkmkstart AAAAAAAIFL}{\bkmkend AAAAAAAIFL}
00442     StringView empty({\cf22 ""});\par
{\bkmkstart AAAAAAAIFM}{\bkmkend AAAAAAAIFM}
00443     EXPECT_TRUE(empty.empty());\par
{\bkmkstart AAAAAAAIFN}{\bkmkend AAAAAAAIFN}
00444     EXPECT_EQ(empty.size(), 0);\par
{\bkmkstart AAAAAAAIFO}{\bkmkend AAAAAAAIFO}
00445     EXPECT_EQ(empty.data(), {\cf22 ""});\par
{\bkmkstart AAAAAAAIFP}{\bkmkend AAAAAAAIFP}
00446     \par
{\bkmkstart AAAAAAAIFQ}{\bkmkend AAAAAAAIFQ}
00447     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAAIFR}{\bkmkend AAAAAAAIFR}
00448     StringView single({\cf22 "a"});\par
{\bkmkstart AAAAAAAIFS}{\bkmkend AAAAAAAIFS}
00449     EXPECT_FALSE(single.empty());\par
{\bkmkstart AAAAAAAIFT}{\bkmkend AAAAAAAIFT}
00450     EXPECT_EQ(single.size(), 1);\par
{\bkmkstart AAAAAAAIFU}{\bkmkend AAAAAAAIFU}
00451     EXPECT_EQ(single[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAIFV}{\bkmkend AAAAAAAIFV}
00452     \par
{\bkmkstart AAAAAAAIFW}{\bkmkend AAAAAAAIFW}
00453     {\cf20 // Test very long string}\par
{\bkmkstart AAAAAAAIFX}{\bkmkend AAAAAAAIFX}
00454     std::string long_str(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAIFY}{\bkmkend AAAAAAAIFY}
00455     StringView long_sv(long_str);\par
{\bkmkstart AAAAAAAIFZ}{\bkmkend AAAAAAAIFZ}
00456     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAIGA}{\bkmkend AAAAAAAIGA}
00457     EXPECT_EQ(long_sv[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAIGB}{\bkmkend AAAAAAAIGB}
00458     EXPECT_EQ(long_sv[999], {\cf23 'a'});\par
{\bkmkstart AAAAAAAIGC}{\bkmkend AAAAAAAIGC}
00459     \par
{\bkmkstart AAAAAAAIGD}{\bkmkend AAAAAAAIGD}
00460     {\cf20 // Test string with null characters}\par
{\bkmkstart AAAAAAAIGE}{\bkmkend AAAAAAAIGE}
00461     std::string null_str = {\cf22 "hello\\0world"};\par
{\bkmkstart AAAAAAAIGF}{\bkmkend AAAAAAAIGF}
00462     StringView null_sv(null_str.c_str(), 11);\par
{\bkmkstart AAAAAAAIGG}{\bkmkend AAAAAAAIGG}
00463     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAIGH}{\bkmkend AAAAAAAIGH}
00464     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAIGI}{\bkmkend AAAAAAAIGI}
00465     EXPECT_EQ(null_sv[6], {\cf23 'w'});\par
{\bkmkstart AAAAAAAIGJ}{\bkmkend AAAAAAAIGJ}
00466 \}\par
{\bkmkstart AAAAAAAIGK}{\bkmkend AAAAAAAIGK}
00467 \par
{\bkmkstart AAAAAAAIGL}{\bkmkend AAAAAAAIGL}
00468 {\cf20 // Test performance}\par
{\bkmkstart AAAAAAAIGM}{\bkmkend AAAAAAAIGM}
00469 TEST_F(StringViewComprehensiveTest, TestPerformance) \{\par
{\bkmkstart AAAAAAAIGN}{\bkmkend AAAAAAAIGN}
00470     std::string large_string(10000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAIGO}{\bkmkend AAAAAAAIGO}
00471     StringView sv(large_string);\par
{\bkmkstart AAAAAAAIGP}{\bkmkend AAAAAAAIGP}
00472     \par
{\bkmkstart AAAAAAAIGQ}{\bkmkend AAAAAAAIGQ}
00473     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAIGR}{\bkmkend AAAAAAAIGR}
00474     \par
{\bkmkstart AAAAAAAIGS}{\bkmkend AAAAAAAIGS}
00475     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAIGT}{\bkmkend AAAAAAAIGT}
00476     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAIGU}{\bkmkend AAAAAAAIGU}
00477         StringView substr = sv.substr(i % 1000, 100);\par
{\bkmkstart AAAAAAAIGW}{\bkmkend AAAAAAAIGW}
00478         {\cf18 size_t} pos = substr.find({\cf23 'a'});\par
{\bkmkstart AAAAAAAIGY}{\bkmkend AAAAAAAIGY}
00479         {\cf18 bool} starts = substr.starts_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAIGZ}{\bkmkend AAAAAAAIGZ}
00480         {\cf18 bool} ends = substr.ends_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAIHA}{\bkmkend AAAAAAAIHA}
00481         {\cf18 bool} contains = substr.contains(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAIHB}{\bkmkend AAAAAAAIHB}
00482         std::string str = substr.to_string();\par
{\bkmkstart AAAAAAAIHC}{\bkmkend AAAAAAAIHC}
00483     \}\par
{\bkmkstart AAAAAAAIHD}{\bkmkend AAAAAAAIHD}
00484     \par
{\bkmkstart AAAAAAAIHE}{\bkmkend AAAAAAAIHE}
00485     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAIHF}{\bkmkend AAAAAAAIHF}
00486     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAIHG}{\bkmkend AAAAAAAIHG}
00487     \par
{\bkmkstart AAAAAAAIHH}{\bkmkend AAAAAAAIHH}
00488     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAIHI}{\bkmkend AAAAAAAIHI}
00489     EXPECT_LT(duration.count(), 1000);\par
{\bkmkstart AAAAAAAIHL}{\bkmkend AAAAAAAIHL}
00490 \}\par
{\bkmkstart AAAAAAAIHM}{\bkmkend AAAAAAAIHM}
00491 \par
{\bkmkstart AAAAAAAIHN}{\bkmkend AAAAAAAIHN}
00492 {\cf20 // Test constexpr functionality}\par
{\bkmkstart AAAAAAAIHO}{\bkmkend AAAAAAAIHO}
00493 TEST_F(StringViewComprehensiveTest, TestConstexpr) \{\par
{\bkmkstart AAAAAAAIHQ}{\bkmkend AAAAAAAIHQ}
00494     {\cf17 constexpr} StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAIHS}{\bkmkend AAAAAAAIHS}
00495     {\cf17 static_assert}(sv.size() == 5, {\cf22 "Size should be 5"});\par
{\bkmkstart AAAAAAAIHU}{\bkmkend AAAAAAAIHU}
00496     {\cf17 static_assert}(sv[0] == {\cf23 'h'}, {\cf22 "First character should be 'h'"});\par
{\bkmkstart AAAAAAAIHV}{\bkmkend AAAAAAAIHV}
00497     {\cf17 static_assert}(sv[4] == {\cf23 'o'}, {\cf22 "Last character should be 'o'"});\par
{\bkmkstart AAAAAAAIHW}{\bkmkend AAAAAAAIHW}
00498     {\cf17 static_assert}(!sv.empty(), {\cf22 "Should not be empty"});\par
{\bkmkstart AAAAAAAIHX}{\bkmkend AAAAAAAIHX}
00499     \par
{\bkmkstart AAAAAAAIHY}{\bkmkend AAAAAAAIHY}
00500     {\cf17 constexpr} StringView empty;\par
{\bkmkstart AAAAAAAIHZ}{\bkmkend AAAAAAAIHZ}
00501     {\cf17 static_assert}(empty.empty(), {\cf22 "Should be empty"});\par
{\bkmkstart AAAAAAAIIA}{\bkmkend AAAAAAAIIA}
00502     {\cf17 static_assert}(empty.size() == 0, {\cf22 "Size should be 0"});\par
{\bkmkstart AAAAAAAIIB}{\bkmkend AAAAAAAIIB}
00503 \}\par
{\bkmkstart AAAAAAAIIC}{\bkmkend AAAAAAAIIC}
00504 \par
{\bkmkstart AAAAAAAIID}{\bkmkend AAAAAAAIID}
00505 {\cf20 // Test copy and move semantics}\par
{\bkmkstart AAAAAAAIIE}{\bkmkend AAAAAAAIIE}
00506 TEST_F(StringViewComprehensiveTest, TestCopyMove) \{\par
{\bkmkstart AAAAAAAIIF}{\bkmkend AAAAAAAIIF}
00507     StringView original({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIIG}{\bkmkend AAAAAAAIIG}
00508     \par
{\bkmkstart AAAAAAAIIH}{\bkmkend AAAAAAAIIH}
00509     {\cf20 // Test copy construction}\par
{\bkmkstart AAAAAAAIII}{\bkmkend AAAAAAAIII}
00510     StringView copy(original);\par
{\bkmkstart AAAAAAAIIJ}{\bkmkend AAAAAAAIIJ}
00511     EXPECT_EQ(copy, original);\par
{\bkmkstart AAAAAAAIIK}{\bkmkend AAAAAAAIIK}
00512     EXPECT_EQ(copy.data(), original.data());\par
{\bkmkstart AAAAAAAIIL}{\bkmkend AAAAAAAIIL}
00513     EXPECT_EQ(copy.size(), original.size());\par
{\bkmkstart AAAAAAAIIM}{\bkmkend AAAAAAAIIM}
00514     \par
{\bkmkstart AAAAAAAIIN}{\bkmkend AAAAAAAIIN}
00515     {\cf20 // Test copy assignment}\par
{\bkmkstart AAAAAAAIIO}{\bkmkend AAAAAAAIIO}
00516     StringView assigned;\par
{\bkmkstart AAAAAAAIIP}{\bkmkend AAAAAAAIIP}
00517     assigned = original;\par
{\bkmkstart AAAAAAAIIQ}{\bkmkend AAAAAAAIIQ}
00518     EXPECT_EQ(assigned, original);\par
{\bkmkstart AAAAAAAIIR}{\bkmkend AAAAAAAIIR}
00519     EXPECT_EQ(assigned.data(), original.data());\par
{\bkmkstart AAAAAAAIIS}{\bkmkend AAAAAAAIIS}
00520     EXPECT_EQ(assigned.size(), original.size());\par
{\bkmkstart AAAAAAAIIT}{\bkmkend AAAAAAAIIT}
00521     \par
{\bkmkstart AAAAAAAIIU}{\bkmkend AAAAAAAIIU}
00522     {\cf20 // Test move construction}\par
{\bkmkstart AAAAAAAIIV}{\bkmkend AAAAAAAIIV}
00523     StringView moved(std::move(original));\par
{\bkmkstart AAAAAAAIIW}{\bkmkend AAAAAAAIIW}
00524     EXPECT_EQ(moved, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAIIX}{\bkmkend AAAAAAAIIX}
00525     \par
{\bkmkstart AAAAAAAIIY}{\bkmkend AAAAAAAIIY}
00526     {\cf20 // Test move assignment}\par
{\bkmkstart AAAAAAAIIZ}{\bkmkend AAAAAAAIIZ}
00527     StringView move_assigned;\par
{\bkmkstart AAAAAAAIJA}{\bkmkend AAAAAAAIJA}
00528     move_assigned = std::move(moved);\par
{\bkmkstart AAAAAAAIJB}{\bkmkend AAAAAAAIJB}
00529     EXPECT_EQ(move_assigned, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAIJC}{\bkmkend AAAAAAAIJC}
00530 \}\par
}
}