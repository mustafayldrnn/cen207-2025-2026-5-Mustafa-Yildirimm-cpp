{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_comprehensive.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_comprehensive.cpp}
{\bkmkstart AAAAAAAGVR}
{\bkmkend AAAAAAAGVR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVS" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGZE}{\bkmkend AAAAAAAGZE}
00001 \par
{\bkmkstart AAAAAAAGZQ}{\bkmkend AAAAAAAGZQ}
00008 \par
{\bkmkstart AAAAAAAGZR}{\bkmkend AAAAAAAGZR}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAHBH}{\bkmkend AAAAAAAHBH}
00010 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAHCE}{\bkmkend AAAAAAAHCE}
00011 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAHCV}{\bkmkend AAAAAAAHCV}
00012 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAHDJ}{\bkmkend AAAAAAAHDJ}
00013 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAHDV}{\bkmkend AAAAAAAHDV}
00014 \par
{\bkmkstart AAAAAAAHDX}{\bkmkend AAAAAAAHDX}
00015 {\cf20 // Mock StringView implementation for testing}\par
{\bkmkstart AAAAAAAHDY}{\bkmkend AAAAAAAHDY}
00016 {\cf17 class }StringView \{\par
{\bkmkstart AAAAAAAHEC}{\bkmkend AAAAAAAHEC}
00017 {\cf17 private}:\par
{\bkmkstart AAAAAAAHEE}{\bkmkend AAAAAAAHEE}
00018     {\cf17 const} {\cf18 char}* data_;\par
{\bkmkstart AAAAAAAHEH}{\bkmkend AAAAAAAHEH}
00019     {\cf18 size_t} size_;\par
{\bkmkstart AAAAAAAHEJ}{\bkmkend AAAAAAAHEJ}
00020 \par
{\bkmkstart AAAAAAAHEK}{\bkmkend AAAAAAAHEK}
00021 {\cf17 public}:\par
{\bkmkstart AAAAAAAHEO}{\bkmkend AAAAAAAHEO}
00022     StringView() : data_(nullptr), size_(0) \{\}\par
{\bkmkstart AAAAAAAHER}{\bkmkend AAAAAAAHER}
00023     \par
{\bkmkstart AAAAAAAHES}{\bkmkend AAAAAAAHES}
00024     StringView({\cf17 const} {\cf18 char}* str) : data_(str), size_(str ? std::strlen(str) : 0) \{\}\par
{\bkmkstart AAAAAAAHEV}{\bkmkend AAAAAAAHEV}
00025     \par
{\bkmkstart AAAAAAAHEX}{\bkmkend AAAAAAAHEX}
00026     StringView({\cf17 const} {\cf18 char}* str, {\cf18 size_t} len) : data_(str), size_(len) \{\}\par
{\bkmkstart AAAAAAAHFD}{\bkmkend AAAAAAAHFD}
00027     \par
{\bkmkstart AAAAAAAHFE}{\bkmkend AAAAAAAHFE}
00028     StringView({\cf17 const} std::string& str) : data_(str.c_str()), size_(str.size()) \{\}\par
{\bkmkstart AAAAAAAHFL}{\bkmkend AAAAAAAHFL}
00029     \par
{\bkmkstart AAAAAAAHFN}{\bkmkend AAAAAAAHFN}
00030     {\cf17 const} {\cf18 char}* data(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAHFR}{\bkmkend AAAAAAAHFR}
00031     {\cf18 size_t} size(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAHGB}{\bkmkend AAAAAAAHGB}
00032     {\cf18 size_t} length(){\cf17  const }\{ {\cf19 return} size_; \}\par
{\bkmkstart AAAAAAAHGE}{\bkmkend AAAAAAAHGE}
00033     {\cf18 bool} empty(){\cf17  const }\{ {\cf19 return} size_ == 0; \}\par
{\bkmkstart AAAAAAAHGM}{\bkmkend AAAAAAAHGM}
00034     \par
{\bkmkstart AAAAAAAHGO}{\bkmkend AAAAAAAHGO}
00035     {\cf18 char} operator[]({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAHGV}{\bkmkend AAAAAAAHGV}
00036         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAHHA}{\bkmkend AAAAAAAHHA}
00037         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAHHB}{\bkmkend AAAAAAAHHB}
00038     \}\par
{\bkmkstart AAAAAAAHHC}{\bkmkend AAAAAAAHHC}
00039     \par
{\bkmkstart AAAAAAAHMB}{\bkmkend AAAAAAAHMB}
00040     {\cf18 char} at({\cf18 size_t} pos){\cf17  const }\{\par
{\bkmkstart AAAAAAAHMP}{\bkmkend AAAAAAAHMP}
00041         {\cf19 if} (pos >= size_) {\cf19 throw} std::out_of_range({\cf22 "Index out of range"});\par
{\bkmkstart AAAAAAAHNA}{\bkmkend AAAAAAAHNA}
00042         {\cf19 return} data_[pos];\par
{\bkmkstart AAAAAAAHNE}{\bkmkend AAAAAAAHNE}
00043     \}\par
{\bkmkstart AAAAAAAHNG}{\bkmkend AAAAAAAHNG}
00044     \par
{\bkmkstart AAAAAAAHNI}{\bkmkend AAAAAAAHNI}
00045     StringView substr({\cf18 size_t} pos = 0, {\cf18 size_t} len = std::string::npos){\cf17  const }\{\par
{\bkmkstart AAAAAAAHNQ}{\bkmkend AAAAAAAHNQ}
00046         {\cf19 if} (pos > size_) {\cf19 throw} std::out_of_range({\cf22 "Position out of range"});\par
{\bkmkstart AAAAAAAHNW}{\bkmkend AAAAAAAHNW}
00047         {\cf18 size_t} actual_len = std::min(len, size_ - pos);\par
{\bkmkstart AAAAAAAHOB}{\bkmkend AAAAAAAHOB}
00048         {\cf19 return} StringView(data_ + pos, actual_len);\par
{\bkmkstart AAAAAAAHOK}{\bkmkend AAAAAAAHOK}
00049     \}\par
{\bkmkstart AAAAAAAHOM}{\bkmkend AAAAAAAHOM}
00050     \par
{\bkmkstart AAAAAAAHON}{\bkmkend AAAAAAAHON}
00051     {\cf18 size_t} find({\cf18 char} c, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAHOW}{\bkmkend AAAAAAAHOW}
00052         {\cf19 for} ({\cf18 size_t} i = pos; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAHPE}{\bkmkend AAAAAAAHPE}
00053             {\cf19 if} (data_[i] == c) {\cf19 return} i;\par
{\bkmkstart AAAAAAAHPK}{\bkmkend AAAAAAAHPK}
00054         \}\par
{\bkmkstart AAAAAAAHPM}{\bkmkend AAAAAAAHPM}
00055         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAHPR}{\bkmkend AAAAAAAHPR}
00056     \}\par
{\bkmkstart AAAAAAAHPV}{\bkmkend AAAAAAAHPV}
00057     \par
{\bkmkstart AAAAAAAHPW}{\bkmkend AAAAAAAHPW}
00058     {\cf18 size_t} find({\cf17 const} StringView& str, {\cf18 size_t} pos = 0){\cf17  const }\{\par
{\bkmkstart AAAAAAAHQD}{\bkmkend AAAAAAAHQD}
00059         {\cf19 if} (str.size() > size_ - pos) {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAHQN}{\bkmkend AAAAAAAHQN}
00060         {\cf19 for} ({\cf18 size_t} i = pos; i <= size_ - str.size(); ++i) \{\par
{\bkmkstart AAAAAAAHQY}{\bkmkend AAAAAAAHQY}
00061             {\cf19 if} (std::memcmp(data_ + i, str.data_, str.size_) == 0) \{\par
{\bkmkstart AAAAAAAHRI}{\bkmkend AAAAAAAHRI}
00062                 {\cf19 return} i;\par
{\bkmkstart AAAAAAAHRK}{\bkmkend AAAAAAAHRK}
00063             \}\par
{\bkmkstart AAAAAAAHRP}{\bkmkend AAAAAAAHRP}
00064         \}\par
{\bkmkstart AAAAAAAHRR}{\bkmkend AAAAAAAHRR}
00065         {\cf19 return} std::string::npos;\par
{\bkmkstart AAAAAAAHRU}{\bkmkend AAAAAAAHRU}
00066     \}\par
{\bkmkstart AAAAAAAHRX}{\bkmkend AAAAAAAHRX}
00067     \par
{\bkmkstart AAAAAAAHRZ}{\bkmkend AAAAAAAHRZ}
00068     {\cf18 bool} starts_with({\cf17 const} StringView& prefix){\cf17  const }\{\par
{\bkmkstart AAAAAAAHSH}{\bkmkend AAAAAAAHSH}
00069         {\cf19 if} (prefix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAHSN}{\bkmkend AAAAAAAHSN}
00070         {\cf19 return} std::memcmp(data_, prefix.data_, prefix.size_) == 0;\par
{\bkmkstart AAAAAAAHSW}{\bkmkend AAAAAAAHSW}
00071     \}\par
{\bkmkstart AAAAAAAHSY}{\bkmkend AAAAAAAHSY}
00072     \par
{\bkmkstart AAAAAAAHTB}{\bkmkend AAAAAAAHTB}
00073     {\cf18 bool} ends_with({\cf17 const} StringView& suffix){\cf17  const }\{\par
{\bkmkstart AAAAAAAHTK}{\bkmkend AAAAAAAHTK}
00074         {\cf19 if} (suffix.size() > size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAHTQ}{\bkmkend AAAAAAAHTQ}
00075         {\cf19 return} std::memcmp(data_ + size_ - suffix.size(), suffix.data_, suffix.size_) == 0;\par
{\bkmkstart AAAAAAAHUB}{\bkmkend AAAAAAAHUB}
00076     \}\par
{\bkmkstart AAAAAAAHUD}{\bkmkend AAAAAAAHUD}
00077     \par
{\bkmkstart AAAAAAAHUF}{\bkmkend AAAAAAAHUF}
00078     {\cf18 bool} contains({\cf17 const} StringView& str){\cf17  const }\{\par
{\bkmkstart AAAAAAAHUO}{\bkmkend AAAAAAAHUO}
00079         {\cf19 return} find(str) != std::string::npos;\par
{\bkmkstart AAAAAAAHUT}{\bkmkend AAAAAAAHUT}
00080     \}\par
{\bkmkstart AAAAAAAHUV}{\bkmkend AAAAAAAHUV}
00081     \par
{\bkmkstart AAAAAAAHUX}{\bkmkend AAAAAAAHUX}
00082     {\cf18 void} remove_prefix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAHVC}{\bkmkend AAAAAAAHVC}
00083         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAHVG}{\bkmkend AAAAAAAHVG}
00084         data_ += n;\par
{\bkmkstart AAAAAAAHVI}{\bkmkend AAAAAAAHVI}
00085         size_ -= n;\par
{\bkmkstart AAAAAAAHVO}{\bkmkend AAAAAAAHVO}
00086     \}\par
{\bkmkstart AAAAAAAHVP}{\bkmkend AAAAAAAHVP}
00087     \par
{\bkmkstart AAAAAAAHVQ}{\bkmkend AAAAAAAHVQ}
00088     {\cf18 void} remove_suffix({\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAHVW}{\bkmkend AAAAAAAHVW}
00089         {\cf19 if} (n > size_) n = size_;\par
{\bkmkstart AAAAAAAHWC}{\bkmkend AAAAAAAHWC}
00090         size_ -= n;\par
{\bkmkstart AAAAAAAHWE}{\bkmkend AAAAAAAHWE}
00091     \}\par
{\bkmkstart AAAAAAAHWF}{\bkmkend AAAAAAAHWF}
00092     \par
{\bkmkstart AAAAAAAHWI}{\bkmkend AAAAAAAHWI}
00093     std::string to_string(){\cf17  const }\{\par
{\bkmkstart AAAAAAAHWO}{\bkmkend AAAAAAAHWO}
00094         {\cf19 return} std::string(data_, size_);\par
{\bkmkstart AAAAAAAHWT}{\bkmkend AAAAAAAHWT}
00095     \}\par
{\bkmkstart AAAAAAAHWU}{\bkmkend AAAAAAAHWU}
00096     \par
{\bkmkstart AAAAAAAHWW}{\bkmkend AAAAAAAHWW}
00097     {\cf20 // Iterator support}\par
{\bkmkstart AAAAAAAHWX}{\bkmkend AAAAAAAHWX}
00098     {\cf17 const} {\cf18 char}* begin(){\cf17  const }\{ {\cf19 return} data_; \}\par
{\bkmkstart AAAAAAAHXB}{\bkmkend AAAAAAAHXB}
00099     {\cf17 const} {\cf18 char}* end(){\cf17  const }\{ {\cf19 return} data_ + size_; \}\par
{\bkmkstart AAAAAAAHXE}{\bkmkend AAAAAAAHXE}
00100     \par
{\bkmkstart AAAAAAAHXF}{\bkmkend AAAAAAAHXF}
00101     {\cf20 // Comparison operators}\par
{\bkmkstart AAAAAAAHXI}{\bkmkend AAAAAAAHXI}
00102     {\cf18 bool} operator==({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHXL}{\bkmkend AAAAAAAHXL}
00103         {\cf19 if} (size_ != other.size_) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAHXP}{\bkmkend AAAAAAAHXP}
00104         {\cf19 return} std::memcmp(data_, other.data_, size_) == 0;\par
{\bkmkstart AAAAAAAHXS}{\bkmkend AAAAAAAHXS}
00105     \}\par
{\bkmkstart AAAAAAAHXT}{\bkmkend AAAAAAAHXT}
00106     \par
{\bkmkstart AAAAAAAHXU}{\bkmkend AAAAAAAHXU}
00107     {\cf18 bool} operator!=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHXX}{\bkmkend AAAAAAAHXX}
00108         {\cf19 return} !(*{\cf17 this} == other);\par
{\bkmkstart AAAAAAAHXZ}{\bkmkend AAAAAAAHXZ}
00109     \}\par
{\bkmkstart AAAAAAAHYB}{\bkmkend AAAAAAAHYB}
00110     \par
{\bkmkstart AAAAAAAHYD}{\bkmkend AAAAAAAHYD}
00111     {\cf18 bool} operator<({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHYJ}{\bkmkend AAAAAAAHYJ}
00112         {\cf18 int} result = std::memcmp(data_, other.data_, std::min(size_, other.size_));\par
{\bkmkstart AAAAAAAHYT}{\bkmkend AAAAAAAHYT}
00113         {\cf19 if} (result != 0) {\cf19 return} result < 0;\par
{\bkmkstart AAAAAAAHYY}{\bkmkend AAAAAAAHYY}
00114         {\cf19 return} size_ < other.size_;\par
{\bkmkstart AAAAAAAHZC}{\bkmkend AAAAAAAHZC}
00115     \}\par
{\bkmkstart AAAAAAAHZE}{\bkmkend AAAAAAAHZE}
00116     \par
{\bkmkstart AAAAAAAHZG}{\bkmkend AAAAAAAHZG}
00117     {\cf18 bool} operator<=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHZJ}{\bkmkend AAAAAAAHZJ}
00118         {\cf19 return} *{\cf17 this} < other || *{\cf17 this} == other;\par
{\bkmkstart AAAAAAAHZN}{\bkmkend AAAAAAAHZN}
00119     \}\par
{\bkmkstart AAAAAAAHZO}{\bkmkend AAAAAAAHZO}
00120     \par
{\bkmkstart AAAAAAAHZR}{\bkmkend AAAAAAAHZR}
00121     {\cf18 bool} operator>({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAHZX}{\bkmkend AAAAAAAHZX}
00122         {\cf19 return} !(*{\cf17 this} <= other);\par
{\bkmkstart AAAAAAAIAA}{\bkmkend AAAAAAAIAA}
00123     \}\par
{\bkmkstart AAAAAAAIAB}{\bkmkend AAAAAAAIAB}
00124     \par
{\bkmkstart AAAAAAAIAD}{\bkmkend AAAAAAAIAD}
00125     {\cf18 bool} operator>=({\cf17 const} StringView& other){\cf17  const }\{\par
{\bkmkstart AAAAAAAIAJ}{\bkmkend AAAAAAAIAJ}
00126         {\cf19 return} !(*{\cf17 this} < other);\par
{\bkmkstart AAAAAAAIAM}{\bkmkend AAAAAAAIAM}
00127     \}\par
{\bkmkstart AAAAAAAIAP}{\bkmkend AAAAAAAIAP}
00128     \par
{\bkmkstart AAAAAAAIAR}{\bkmkend AAAAAAAIAR}
00129     {\cf20 // Hash function}\par
{\bkmkstart AAAAAAAIAT}{\bkmkend AAAAAAAIAT}
00130     {\cf18 size_t} hash(){\cf17  const }\{\par
{\bkmkstart AAAAAAAIAV}{\bkmkend AAAAAAAIAV}
00131         {\cf18 size_t} result = 0;\par
{\bkmkstart AAAAAAAIAX}{\bkmkend AAAAAAAIAX}
00132         {\cf19 for} ({\cf18 size_t} i = 0; i < size_; ++i) \{\par
{\bkmkstart AAAAAAAIBD}{\bkmkend AAAAAAAIBD}
00133             result = result * 31 + {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(data_[i]);\par
{\bkmkstart AAAAAAAIBI}{\bkmkend AAAAAAAIBI}
00134         \}\par
{\bkmkstart AAAAAAAIBL}{\bkmkend AAAAAAAIBL}
00135         {\cf19 return} result;\par
{\bkmkstart AAAAAAAIBN}{\bkmkend AAAAAAAIBN}
00136     \}\par
{\bkmkstart AAAAAAAIBR}{\bkmkend AAAAAAAIBR}
00137 \};\par
{\bkmkstart AAAAAAAIBT}{\bkmkend AAAAAAAIBT}
00138 \par
{\bkmkstart AAAAAAAIBU}{\bkmkend AAAAAAAIBU}
00139 {\cf17 class }StringViewComprehensiveTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAIBZ}{\bkmkend AAAAAAAIBZ}
00140 {\cf17 protected}:\par
{\bkmkstart AAAAAAAICA}{\bkmkend AAAAAAAICA}
00141     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAICM}{\bkmkend AAAAAAAICM}
00142         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAICP}{\bkmkend AAAAAAAICP}
00143     \}\par
{\bkmkstart AAAAAAAICR}{\bkmkend AAAAAAAICR}
00144     \par
{\bkmkstart AAAAAAAICS}{\bkmkend AAAAAAAICS}
00145     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAIDC}{\bkmkend AAAAAAAIDC}
00146         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAIDE}{\bkmkend AAAAAAAIDE}
00147     \}\par
{\bkmkstart AAAAAAAIDF}{\bkmkend AAAAAAAIDF}
00148 \};\par
{\bkmkstart AAAAAAAIDI}{\bkmkend AAAAAAAIDI}
00149 \par
{\bkmkstart AAAAAAAIDL}{\bkmkend AAAAAAAIDL}
00150 {\cf20 // Test basic construction}\par
{\bkmkstart AAAAAAAIDO}{\bkmkend AAAAAAAIDO}
00151 TEST_F(StringViewComprehensiveTest, TestConstruction) \{\par
{\bkmkstart AAAAAAAIFA}{\bkmkend AAAAAAAIFA}
00152     {\cf20 // Default construction}\par
{\bkmkstart AAAAAAAIFC}{\bkmkend AAAAAAAIFC}
00153     StringView sv1;\par
{\bkmkstart AAAAAAAIFG}{\bkmkend AAAAAAAIFG}
00154     EXPECT_TRUE(sv1.empty());\par
{\bkmkstart AAAAAAAIFM}{\bkmkend AAAAAAAIFM}
00155     EXPECT_EQ(sv1.size(), 0);\par
{\bkmkstart AAAAAAAIFT}{\bkmkend AAAAAAAIFT}
00156     EXPECT_EQ(sv1.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAIFZ}{\bkmkend AAAAAAAIFZ}
00157     \par
{\bkmkstart AAAAAAAIGB}{\bkmkend AAAAAAAIGB}
00158     {\cf20 // Construction from C-string}\par
{\bkmkstart AAAAAAAIGD}{\bkmkend AAAAAAAIGD}
00159     {\cf17 const} {\cf18 char}* str = {\cf22 "hello"};\par
{\bkmkstart AAAAAAAIGH}{\bkmkend AAAAAAAIGH}
00160     StringView sv2(str);\par
{\bkmkstart AAAAAAAIGM}{\bkmkend AAAAAAAIGM}
00161     EXPECT_FALSE(sv2.empty());\par
{\bkmkstart AAAAAAAIGP}{\bkmkend AAAAAAAIGP}
00162     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAAIGS}{\bkmkend AAAAAAAIGS}
00163     EXPECT_EQ(sv2.data(), str);\par
{\bkmkstart AAAAAAAIHD}{\bkmkend AAAAAAAIHD}
00164     \par
{\bkmkstart AAAAAAAIHG}{\bkmkend AAAAAAAIHG}
00165     {\cf20 // Construction from C-string with length}\par
{\bkmkstart AAAAAAAIHI}{\bkmkend AAAAAAAIHI}
00166     StringView sv3(str, 3);\par
{\bkmkstart AAAAAAAIHR}{\bkmkend AAAAAAAIHR}
00167     EXPECT_FALSE(sv3.empty());\par
{\bkmkstart AAAAAAAIIO}{\bkmkend AAAAAAAIIO}
00168     EXPECT_EQ(sv3.size(), 3);\par
{\bkmkstart AAAAAAAIJE}{\bkmkend AAAAAAAIJE}
00169     EXPECT_EQ(sv3.data(), str);\par
{\bkmkstart AAAAAAAIJI}{\bkmkend AAAAAAAIJI}
00170     \par
{\bkmkstart AAAAAAAIJM}{\bkmkend AAAAAAAIJM}
00171     {\cf20 // Construction from std::string}\par
{\bkmkstart AAAAAAAIJN}{\bkmkend AAAAAAAIJN}
00172     std::string s = {\cf22 "world"};\par
{\bkmkstart AAAAAAAIJQ}{\bkmkend AAAAAAAIJQ}
00173     StringView sv4(s);\par
{\bkmkstart AAAAAAAIJV}{\bkmkend AAAAAAAIJV}
00174     EXPECT_FALSE(sv4.empty());\par
{\bkmkstart AAAAAAAIJX}{\bkmkend AAAAAAAIJX}
00175     EXPECT_EQ(sv4.size(), 5);\par
{\bkmkstart AAAAAAAIJY}{\bkmkend AAAAAAAIJY}
00176     EXPECT_EQ(sv4.data(), s.c_str());\par
{\bkmkstart AAAAAAAIKD}{\bkmkend AAAAAAAIKD}
00177     \par
{\bkmkstart AAAAAAAIKH}{\bkmkend AAAAAAAIKH}
00178     {\cf20 // Construction from null pointer}\par
{\bkmkstart AAAAAAAIKI}{\bkmkend AAAAAAAIKI}
00179     StringView sv5({\cf17 nullptr});\par
{\bkmkstart AAAAAAAIKJ}{\bkmkend AAAAAAAIKJ}
00180     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAIKK}{\bkmkend AAAAAAAIKK}
00181     EXPECT_EQ(sv5.size(), 0);\par
{\bkmkstart AAAAAAAIKR}{\bkmkend AAAAAAAIKR}
00182     EXPECT_EQ(sv5.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAIKU}{\bkmkend AAAAAAAIKU}
00183 \}\par
{\bkmkstart AAAAAAAIKW}{\bkmkend AAAAAAAIKW}
00184 \par
{\bkmkstart AAAAAAAIKX}{\bkmkend AAAAAAAIKX}
00185 {\cf20 // Test access methods}\par
{\bkmkstart AAAAAAAIKZ}{\bkmkend AAAAAAAIKZ}
00186 TEST_F(StringViewComprehensiveTest, TestAccess) \{\par
{\bkmkstart AAAAAAAILB}{\bkmkend AAAAAAAILB}
00187     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAILE}{\bkmkend AAAAAAAILE}
00188     \par
{\bkmkstart AAAAAAAILG}{\bkmkend AAAAAAAILG}
00189     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAILH}{\bkmkend AAAAAAAILH}
00190     EXPECT_EQ(sv[0], {\cf23 'h'});\par
{\bkmkstart AAAAAAAILJ}{\bkmkend AAAAAAAILJ}
00191     EXPECT_EQ(sv[1], {\cf23 'e'});\par
{\bkmkstart AAAAAAAILK}{\bkmkend AAAAAAAILK}
00192     EXPECT_EQ(sv[2], {\cf23 'l'});\par
{\bkmkstart AAAAAAAILL}{\bkmkend AAAAAAAILL}
00193     EXPECT_EQ(sv[3], {\cf23 'l'});\par
{\bkmkstart AAAAAAAILM}{\bkmkend AAAAAAAILM}
00194     EXPECT_EQ(sv[4], {\cf23 'o'});\par
{\bkmkstart AAAAAAAILN}{\bkmkend AAAAAAAILN}
00195     \par
{\bkmkstart AAAAAAAILO}{\bkmkend AAAAAAAILO}
00196     {\cf20 // Test at()}\par
{\bkmkstart AAAAAAAILP}{\bkmkend AAAAAAAILP}
00197     EXPECT_EQ(sv.at(0), {\cf23 'h'});\par
{\bkmkstart AAAAAAAILQ}{\bkmkend AAAAAAAILQ}
00198     EXPECT_EQ(sv.at(1), {\cf23 'e'});\par
{\bkmkstart AAAAAAAILR}{\bkmkend AAAAAAAILR}
00199     EXPECT_EQ(sv.at(2), {\cf23 'l'});\par
{\bkmkstart AAAAAAAILS}{\bkmkend AAAAAAAILS}
00200     EXPECT_EQ(sv.at(3), {\cf23 'l'});\par
{\bkmkstart AAAAAAAILT}{\bkmkend AAAAAAAILT}
00201     EXPECT_EQ(sv.at(4), {\cf23 'o'});\par
{\bkmkstart AAAAAAAILU}{\bkmkend AAAAAAAILU}
00202     \par
{\bkmkstart AAAAAAAILV}{\bkmkend AAAAAAAILV}
00203     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAILW}{\bkmkend AAAAAAAILW}
00204     EXPECT_THROW(sv[5], std::out_of_range);\par
{\bkmkstart AAAAAAAILX}{\bkmkend AAAAAAAILX}
00205     EXPECT_THROW(sv.at(5), std::out_of_range);\par
{\bkmkstart AAAAAAAILY}{\bkmkend AAAAAAAILY}
00206     EXPECT_THROW(sv[-1], std::out_of_range);\par
{\bkmkstart AAAAAAAILZ}{\bkmkend AAAAAAAILZ}
00207     EXPECT_THROW(sv.at(-1), std::out_of_range);\par
{\bkmkstart AAAAAAAIMA}{\bkmkend AAAAAAAIMA}
00208 \}\par
{\bkmkstart AAAAAAAIMB}{\bkmkend AAAAAAAIMB}
00209 \par
{\bkmkstart AAAAAAAIMC}{\bkmkend AAAAAAAIMC}
00210 {\cf20 // Test substring operations}\par
{\bkmkstart AAAAAAAIME}{\bkmkend AAAAAAAIME}
00211 TEST_F(StringViewComprehensiveTest, TestSubstr) \{\par
{\bkmkstart AAAAAAAIMG}{\bkmkend AAAAAAAIMG}
00212     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIMH}{\bkmkend AAAAAAAIMH}
00213     \par
{\bkmkstart AAAAAAAIMJ}{\bkmkend AAAAAAAIMJ}
00214     {\cf20 // Test full substring}\par
{\bkmkstart AAAAAAAIMK}{\bkmkend AAAAAAAIMK}
00215     StringView sv1 = sv.substr();\par
{\bkmkstart AAAAAAAIMM}{\bkmkend AAAAAAAIMM}
00216     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAIMN}{\bkmkend AAAAAAAIMN}
00217     \par
{\bkmkstart AAAAAAAIMO}{\bkmkend AAAAAAAIMO}
00218     {\cf20 // Test substring from beginning}\par
{\bkmkstart AAAAAAAIMP}{\bkmkend AAAAAAAIMP}
00219     StringView sv2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAIMR}{\bkmkend AAAAAAAIMR}
00220     EXPECT_EQ(sv2, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAIMS}{\bkmkend AAAAAAAIMS}
00221     \par
{\bkmkstart AAAAAAAIMT}{\bkmkend AAAAAAAIMT}
00222     {\cf20 // Test substring from middle}\par
{\bkmkstart AAAAAAAIMV}{\bkmkend AAAAAAAIMV}
00223     StringView sv3 = sv.substr(6, 5);\par
{\bkmkstart AAAAAAAIMX}{\bkmkend AAAAAAAIMX}
00224     EXPECT_EQ(sv3, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAIMZ}{\bkmkend AAAAAAAIMZ}
00225     \par
{\bkmkstart AAAAAAAINA}{\bkmkend AAAAAAAINA}
00226     {\cf20 // Test substring with npos}\par
{\bkmkstart AAAAAAAINB}{\bkmkend AAAAAAAINB}
00227     StringView sv4 = sv.substr(6);\par
{\bkmkstart AAAAAAAINC}{\bkmkend AAAAAAAINC}
00228     EXPECT_EQ(sv4, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAINF}{\bkmkend AAAAAAAINF}
00229     \par
{\bkmkstart AAAAAAAING}{\bkmkend AAAAAAAING}
00230     {\cf20 // Test empty substring}\par
{\bkmkstart AAAAAAAINI}{\bkmkend AAAAAAAINI}
00231     StringView sv5 = sv.substr(5, 0);\par
{\bkmkstart AAAAAAAINM}{\bkmkend AAAAAAAINM}
00232     EXPECT_TRUE(sv5.empty());\par
{\bkmkstart AAAAAAAINP}{\bkmkend AAAAAAAINP}
00233     \par
{\bkmkstart AAAAAAAINQ}{\bkmkend AAAAAAAINQ}
00234     {\cf20 // Test out of bounds}\par
{\bkmkstart AAAAAAAINS}{\bkmkend AAAAAAAINS}
00235     EXPECT_THROW(sv.substr(20), std::out_of_range);\par
{\bkmkstart AAAAAAAINY}{\bkmkend AAAAAAAINY}
00236     EXPECT_THROW(sv.substr(5, 20), std::out_of_range);\par
{\bkmkstart AAAAAAAIOB}{\bkmkend AAAAAAAIOB}
00237 \}\par
{\bkmkstart AAAAAAAIOC}{\bkmkend AAAAAAAIOC}
00238 \par
{\bkmkstart AAAAAAAIOD}{\bkmkend AAAAAAAIOD}
00239 {\cf20 // Test find operations}\par
{\bkmkstart AAAAAAAIOH}{\bkmkend AAAAAAAIOH}
00240 TEST_F(StringViewComprehensiveTest, TestFind) \{\par
{\bkmkstart AAAAAAAIOL}{\bkmkend AAAAAAAIOL}
00241     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIOP}{\bkmkend AAAAAAAIOP}
00242     \par
{\bkmkstart AAAAAAAIOR}{\bkmkend AAAAAAAIOR}
00243     {\cf20 // Test find character}\par
{\bkmkstart AAAAAAAIOT}{\bkmkend AAAAAAAIOT}
00244     EXPECT_EQ(sv.find({\cf23 'h'}), 0);\par
{\bkmkstart AAAAAAAIOV}{\bkmkend AAAAAAAIOV}
00245     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAAIOW}{\bkmkend AAAAAAAIOW}
00246     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAAIOX}{\bkmkend AAAAAAAIOX}
00247     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIOZ}{\bkmkend AAAAAAAIOZ}
00248     EXPECT_EQ(sv.find({\cf23 'w'}), 6);\par
{\bkmkstart AAAAAAAIPB}{\bkmkend AAAAAAAIPB}
00249     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAAIPD}{\bkmkend AAAAAAAIPD}
00250     EXPECT_EQ(sv.find({\cf23 'x'}), std::string::npos);\par
{\bkmkstart AAAAAAAIPF}{\bkmkend AAAAAAAIPF}
00251     \par
{\bkmkstart AAAAAAAIPG}{\bkmkend AAAAAAAIPG}
00252     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAIPI}{\bkmkend AAAAAAAIPI}
00253     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAAIPK}{\bkmkend AAAAAAAIPK}
00254     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAAIPM}{\bkmkend AAAAAAAIPM}
00255     EXPECT_EQ(sv.find({\cf23 'l'}, 10), std::string::npos);\par
{\bkmkstart AAAAAAAIPQ}{\bkmkend AAAAAAAIPQ}
00256     \par
{\bkmkstart AAAAAAAIPR}{\bkmkend AAAAAAAIPR}
00257     {\cf20 // Test find string}\par
{\bkmkstart AAAAAAAIPS}{\bkmkend AAAAAAAIPS}
00258     EXPECT_EQ(sv.find(StringView({\cf22 "hello"})), 0);\par
{\bkmkstart AAAAAAAIPV}{\bkmkend AAAAAAAIPV}
00259     EXPECT_EQ(sv.find(StringView({\cf22 "world"})), 6);\par
{\bkmkstart AAAAAAAIPZ}{\bkmkend AAAAAAAIPZ}
00260     EXPECT_EQ(sv.find(StringView({\cf22 "lo"})), 3);\par
{\bkmkstart AAAAAAAIQB}{\bkmkend AAAAAAAIQB}
00261     EXPECT_EQ(sv.find(StringView({\cf22 "xyz"})), std::string::npos);\par
{\bkmkstart AAAAAAAIQJ}{\bkmkend AAAAAAAIQJ}
00262     \par
{\bkmkstart AAAAAAAIQL}{\bkmkend AAAAAAAIQL}
00263     {\cf20 // Test find empty string}\par
{\bkmkstart AAAAAAAIQO}{\bkmkend AAAAAAAIQO}
00264     EXPECT_EQ(sv.find(StringView({\cf22 ""})), 0);\par
{\bkmkstart AAAAAAAIQQ}{\bkmkend AAAAAAAIQQ}
00265     \par
{\bkmkstart AAAAAAAIQS}{\bkmkend AAAAAAAIQS}
00266     {\cf20 // Test find with position}\par
{\bkmkstart AAAAAAAIQT}{\bkmkend AAAAAAAIQT}
00267     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 2), 3);\par
{\bkmkstart AAAAAAAIQV}{\bkmkend AAAAAAAIQV}
00268     EXPECT_EQ(sv.find(StringView({\cf22 "lo"}), 4), std::string::npos);\par
{\bkmkstart AAAAAAAIQZ}{\bkmkend AAAAAAAIQZ}
00269 \}\par
{\bkmkstart AAAAAAAIRB}{\bkmkend AAAAAAAIRB}
00270 \par
{\bkmkstart AAAAAAAIRC}{\bkmkend AAAAAAAIRC}
00271 {\cf20 // Test prefix/suffix operations}\par
{\bkmkstart AAAAAAAIRD}{\bkmkend AAAAAAAIRD}
00272 TEST_F(StringViewComprehensiveTest, TestPrefixSuffix) \{\par
{\bkmkstart AAAAAAAIRG}{\bkmkend AAAAAAAIRG}
00273     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIRJ}{\bkmkend AAAAAAAIRJ}
00274     \par
{\bkmkstart AAAAAAAIRL}{\bkmkend AAAAAAAIRL}
00275     {\cf20 // Test starts_with}\par
{\bkmkstart AAAAAAAIRM}{\bkmkend AAAAAAAIRM}
00276     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAIRP}{\bkmkend AAAAAAAIRP}
00277     EXPECT_TRUE(sv.starts_with(StringView({\cf22 "he"})));\par
{\bkmkstart AAAAAAAIRR}{\bkmkend AAAAAAAIRR}
00278     EXPECT_TRUE(sv.starts_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAIRS}{\bkmkend AAAAAAAIRS}
00279     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAIRU}{\bkmkend AAAAAAAIRU}
00280     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAIRV}{\bkmkend AAAAAAAIRV}
00281     EXPECT_FALSE(sv.starts_with(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAIRX}{\bkmkend AAAAAAAIRX}
00282     \par
{\bkmkstart AAAAAAAIRY}{\bkmkend AAAAAAAIRY}
00283     {\cf20 // Test ends_with}\par
{\bkmkstart AAAAAAAIRZ}{\bkmkend AAAAAAAIRZ}
00284     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAISC}{\bkmkend AAAAAAAISC}
00285     EXPECT_TRUE(sv.ends_with(StringView({\cf22 "ld"})));\par
{\bkmkstart AAAAAAAISE}{\bkmkend AAAAAAAISE}
00286     EXPECT_TRUE(sv.ends_with(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAISH}{\bkmkend AAAAAAAISH}
00287     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAISJ}{\bkmkend AAAAAAAISJ}
00288     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAISK}{\bkmkend AAAAAAAISK}
00289     EXPECT_FALSE(sv.ends_with(StringView({\cf22 "!hello world"})));\par
{\bkmkstart AAAAAAAISO}{\bkmkend AAAAAAAISO}
00290     \par
{\bkmkstart AAAAAAAISP}{\bkmkend AAAAAAAISP}
00291     {\cf20 // Test contains}\par
{\bkmkstart AAAAAAAISQ}{\bkmkend AAAAAAAISQ}
00292     EXPECT_TRUE(sv.contains(StringView({\cf22 "hello"})));\par
{\bkmkstart AAAAAAAISR}{\bkmkend AAAAAAAISR}
00293     EXPECT_TRUE(sv.contains(StringView({\cf22 "world"})));\par
{\bkmkstart AAAAAAAIST}{\bkmkend AAAAAAAIST}
00294     EXPECT_TRUE(sv.contains(StringView({\cf22 "lo wo"})));\par
{\bkmkstart AAAAAAAISY}{\bkmkend AAAAAAAISY}
00295     EXPECT_TRUE(sv.contains(StringView({\cf22 ""})));\par
{\bkmkstart AAAAAAAITD}{\bkmkend AAAAAAAITD}
00296     EXPECT_FALSE(sv.contains(StringView({\cf22 "xyz"})));\par
{\bkmkstart AAAAAAAITO}{\bkmkend AAAAAAAITO}
00297     EXPECT_FALSE(sv.contains(StringView({\cf22 "hello world!"})));\par
{\bkmkstart AAAAAAAITQ}{\bkmkend AAAAAAAITQ}
00298 \}\par
{\bkmkstart AAAAAAAITR}{\bkmkend AAAAAAAITR}
00299 \par
{\bkmkstart AAAAAAAITT}{\bkmkend AAAAAAAITT}
00300 {\cf20 // Test remove operations}\par
{\bkmkstart AAAAAAAITU}{\bkmkend AAAAAAAITU}
00301 TEST_F(StringViewComprehensiveTest, TestRemove) \{\par
{\bkmkstart AAAAAAAITW}{\bkmkend AAAAAAAITW}
00302     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAITZ}{\bkmkend AAAAAAAITZ}
00303     \par
{\bkmkstart AAAAAAAIUA}{\bkmkend AAAAAAAIUA}
00304     {\cf20 // Test remove_prefix}\par
{\bkmkstart AAAAAAAIUB}{\bkmkend AAAAAAAIUB}
00305     StringView sv1 = sv;\par
{\bkmkstart AAAAAAAIUE}{\bkmkend AAAAAAAIUE}
00306     sv1.remove_prefix(0);\par
{\bkmkstart AAAAAAAIUG}{\bkmkend AAAAAAAIUG}
00307     EXPECT_EQ(sv1, sv);\par
{\bkmkstart AAAAAAAIUI}{\bkmkend AAAAAAAIUI}
00308     \par
{\bkmkstart AAAAAAAIUK}{\bkmkend AAAAAAAIUK}
00309     StringView sv2 = sv;\par
{\bkmkstart AAAAAAAIUM}{\bkmkend AAAAAAAIUM}
00310     sv2.remove_prefix(6);\par
{\bkmkstart AAAAAAAIUP}{\bkmkend AAAAAAAIUP}
00311     EXPECT_EQ(sv2, StringView({\cf22 "world"}));\par
{\bkmkstart AAAAAAAIUQ}{\bkmkend AAAAAAAIUQ}
00312     \par
{\bkmkstart AAAAAAAIUS}{\bkmkend AAAAAAAIUS}
00313     StringView sv3 = sv;\par
{\bkmkstart AAAAAAAIUU}{\bkmkend AAAAAAAIUU}
00314     sv3.remove_prefix(11);\par
{\bkmkstart AAAAAAAIUV}{\bkmkend AAAAAAAIUV}
00315     EXPECT_TRUE(sv3.empty());\par
{\bkmkstart AAAAAAAIUX}{\bkmkend AAAAAAAIUX}
00316     \par
{\bkmkstart AAAAAAAIUZ}{\bkmkend AAAAAAAIUZ}
00317     StringView sv4 = sv;\par
{\bkmkstart AAAAAAAIVF}{\bkmkend AAAAAAAIVF}
00318     sv4.remove_prefix(20);\par
{\bkmkstart AAAAAAAIVL}{\bkmkend AAAAAAAIVL}
00319     EXPECT_TRUE(sv4.empty());\par
{\bkmkstart AAAAAAAIVQ}{\bkmkend AAAAAAAIVQ}
00320     \par
{\bkmkstart AAAAAAAIVS}{\bkmkend AAAAAAAIVS}
00321     {\cf20 // Test remove_suffix}\par
{\bkmkstart AAAAAAAIVU}{\bkmkend AAAAAAAIVU}
00322     StringView sv5 = sv;\par
{\bkmkstart AAAAAAAIWA}{\bkmkend AAAAAAAIWA}
00323     sv5.remove_suffix(0);\par
{\bkmkstart AAAAAAAIWE}{\bkmkend AAAAAAAIWE}
00324     EXPECT_EQ(sv5, sv);\par
{\bkmkstart AAAAAAAIWI}{\bkmkend AAAAAAAIWI}
00325     \par
{\bkmkstart AAAAAAAIWJ}{\bkmkend AAAAAAAIWJ}
00326     StringView sv6 = sv;\par
{\bkmkstart AAAAAAAIWM}{\bkmkend AAAAAAAIWM}
00327     sv6.remove_suffix(6);\par
{\bkmkstart AAAAAAAIWO}{\bkmkend AAAAAAAIWO}
00328     EXPECT_EQ(sv6, StringView({\cf22 "hello"}));\par
{\bkmkstart AAAAAAAIWR}{\bkmkend AAAAAAAIWR}
00329     \par
{\bkmkstart AAAAAAAIWT}{\bkmkend AAAAAAAIWT}
00330     StringView sv7 = sv;\par
{\bkmkstart AAAAAAAIWV}{\bkmkend AAAAAAAIWV}
00331     sv7.remove_suffix(11);\par
{\bkmkstart AAAAAAAIWX}{\bkmkend AAAAAAAIWX}
00332     EXPECT_TRUE(sv7.empty());\par
{\bkmkstart AAAAAAAIXB}{\bkmkend AAAAAAAIXB}
00333     \par
{\bkmkstart AAAAAAAIXC}{\bkmkend AAAAAAAIXC}
00334     StringView sv8 = sv;\par
{\bkmkstart AAAAAAAIXE}{\bkmkend AAAAAAAIXE}
00335     sv8.remove_suffix(20);\par
{\bkmkstart AAAAAAAIXH}{\bkmkend AAAAAAAIXH}
00336     EXPECT_TRUE(sv8.empty());\par
{\bkmkstart AAAAAAAIXK}{\bkmkend AAAAAAAIXK}
00337 \}\par
{\bkmkstart AAAAAAAIXL}{\bkmkend AAAAAAAIXL}
00338 \par
{\bkmkstart AAAAAAAIXM}{\bkmkend AAAAAAAIXM}
00339 {\cf20 // Test conversion}\par
{\bkmkstart AAAAAAAIXO}{\bkmkend AAAAAAAIXO}
00340 TEST_F(StringViewComprehensiveTest, TestConversion) \{\par
{\bkmkstart AAAAAAAIXR}{\bkmkend AAAAAAAIXR}
00341     StringView sv({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIXX}{\bkmkend AAAAAAAIXX}
00342     \par
{\bkmkstart AAAAAAAIXY}{\bkmkend AAAAAAAIXY}
00343     {\cf20 // Test to_string}\par
{\bkmkstart AAAAAAAIXZ}{\bkmkend AAAAAAAIXZ}
00344     std::string str = sv.to_string();\par
{\bkmkstart AAAAAAAIYE}{\bkmkend AAAAAAAIYE}
00345     EXPECT_EQ(str, {\cf22 "hello world"});\par
{\bkmkstart AAAAAAAIYJ}{\bkmkend AAAAAAAIYJ}
00346     \par
{\bkmkstart AAAAAAAIYL}{\bkmkend AAAAAAAIYL}
00347     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAAIYO}{\bkmkend AAAAAAAIYO}
00348     StringView empty;\par
{\bkmkstart AAAAAAAIYP}{\bkmkend AAAAAAAIYP}
00349     std::string empty_str = empty.to_string();\par
{\bkmkstart AAAAAAAIYQ}{\bkmkend AAAAAAAIYQ}
00350     EXPECT_TRUE(empty_str.empty());\par
{\bkmkstart AAAAAAAIYR}{\bkmkend AAAAAAAIYR}
00351 \}\par
{\bkmkstart AAAAAAAIYS}{\bkmkend AAAAAAAIYS}
00352 \par
{\bkmkstart AAAAAAAIYT}{\bkmkend AAAAAAAIYT}
00353 {\cf20 // Test iterators}\par
{\bkmkstart AAAAAAAIYU}{\bkmkend AAAAAAAIYU}
00354 TEST_F(StringViewComprehensiveTest, TestIterators) \{\par
{\bkmkstart AAAAAAAIYV}{\bkmkend AAAAAAAIYV}
00355     StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAIYW}{\bkmkend AAAAAAAIYW}
00356     \par
{\bkmkstart AAAAAAAIYX}{\bkmkend AAAAAAAIYX}
00357     {\cf20 // Test begin/end}\par
{\bkmkstart AAAAAAAIYY}{\bkmkend AAAAAAAIYY}
00358     {\cf17 const} {\cf18 char}* begin = sv.begin();\par
{\bkmkstart AAAAAAAIYZ}{\bkmkend AAAAAAAIYZ}
00359     {\cf17 const} {\cf18 char}* end = sv.end();\par
{\bkmkstart AAAAAAAIZB}{\bkmkend AAAAAAAIZB}
00360     EXPECT_EQ(end - begin, 5);\par
{\bkmkstart AAAAAAAIZC}{\bkmkend AAAAAAAIZC}
00361     \par
{\bkmkstart AAAAAAAIZD}{\bkmkend AAAAAAAIZD}
00362     {\cf20 // Test iteration}\par
{\bkmkstart AAAAAAAIZE}{\bkmkend AAAAAAAIZE}
00363     std::string result;\par
{\bkmkstart AAAAAAAIZF}{\bkmkend AAAAAAAIZF}
00364     {\cf19 for} ({\cf17 auto} it = sv.begin(); it != sv.end(); ++it) \{\par
{\bkmkstart AAAAAAAIZG}{\bkmkend AAAAAAAIZG}
00365         result += *it;\par
{\bkmkstart AAAAAAAIZH}{\bkmkend AAAAAAAIZH}
00366     \}\par
{\bkmkstart AAAAAAAIZI}{\bkmkend AAAAAAAIZI}
00367     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAIZJ}{\bkmkend AAAAAAAIZJ}
00368     \par
{\bkmkstart AAAAAAAIZK}{\bkmkend AAAAAAAIZK}
00369     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAIZM}{\bkmkend AAAAAAAIZM}
00370     result.clear();\par
{\bkmkstart AAAAAAAIZO}{\bkmkend AAAAAAAIZO}
00371     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAIZR}{\bkmkend AAAAAAAIZR}
00372         result += c;\par
{\bkmkstart AAAAAAAIZS}{\bkmkend AAAAAAAIZS}
00373     \}\par
{\bkmkstart AAAAAAAIZT}{\bkmkend AAAAAAAIZT}
00374     EXPECT_EQ(result, {\cf22 "hello"});\par
{\bkmkstart AAAAAAAIZU}{\bkmkend AAAAAAAIZU}
00375 \}\par
{\bkmkstart AAAAAAAIZV}{\bkmkend AAAAAAAIZV}
00376 \par
{\bkmkstart AAAAAAAIZW}{\bkmkend AAAAAAAIZW}
00377 {\cf20 // Test comparison operators}\par
{\bkmkstart AAAAAAAIZX}{\bkmkend AAAAAAAIZX}
00378 TEST_F(StringViewComprehensiveTest, TestComparison) \{\par
{\bkmkstart AAAAAAAIZY}{\bkmkend AAAAAAAIZY}
00379     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAIZZ}{\bkmkend AAAAAAAIZZ}
00380     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAJAA}{\bkmkend AAAAAAAJAA}
00381     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAJAB}{\bkmkend AAAAAAAJAB}
00382     StringView sv4({\cf22 "hell"});\par
{\bkmkstart AAAAAAAJAC}{\bkmkend AAAAAAAJAC}
00383     StringView sv5({\cf22 "helloo"});\par
{\bkmkstart AAAAAAAJAD}{\bkmkend AAAAAAAJAD}
00384     \par
{\bkmkstart AAAAAAAJAE}{\bkmkend AAAAAAAJAE}
00385     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAJAF}{\bkmkend AAAAAAAJAF}
00386     EXPECT_TRUE(sv1 == sv2);\par
{\bkmkstart AAAAAAAJAG}{\bkmkend AAAAAAAJAG}
00387     EXPECT_FALSE(sv1 == sv3);\par
{\bkmkstart AAAAAAAJAH}{\bkmkend AAAAAAAJAH}
00388     EXPECT_FALSE(sv1 == sv4);\par
{\bkmkstart AAAAAAAJAI}{\bkmkend AAAAAAAJAI}
00389     EXPECT_FALSE(sv1 == sv5);\par
{\bkmkstart AAAAAAAJAJ}{\bkmkend AAAAAAAJAJ}
00390     \par
{\bkmkstart AAAAAAAJAK}{\bkmkend AAAAAAAJAK}
00391     {\cf20 // Test inequality}\par
{\bkmkstart AAAAAAAJAL}{\bkmkend AAAAAAAJAL}
00392     EXPECT_FALSE(sv1 != sv2);\par
{\bkmkstart AAAAAAAJAM}{\bkmkend AAAAAAAJAM}
00393     EXPECT_TRUE(sv1 != sv3);\par
{\bkmkstart AAAAAAAJAN}{\bkmkend AAAAAAAJAN}
00394     EXPECT_TRUE(sv1 != sv4);\par
{\bkmkstart AAAAAAAJAO}{\bkmkend AAAAAAAJAO}
00395     EXPECT_TRUE(sv1 != sv5);\par
{\bkmkstart AAAAAAAJAR}{\bkmkend AAAAAAAJAR}
00396     \par
{\bkmkstart AAAAAAAJAS}{\bkmkend AAAAAAAJAS}
00397     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAJAT}{\bkmkend AAAAAAAJAT}
00398     EXPECT_TRUE(sv1 < sv3);\par
{\bkmkstart AAAAAAAJAV}{\bkmkend AAAAAAAJAV}
00399     EXPECT_FALSE(sv1 < sv2);\par
{\bkmkstart AAAAAAAJAY}{\bkmkend AAAAAAAJAY}
00400     EXPECT_FALSE(sv1 < sv4);\par
{\bkmkstart AAAAAAAJAZ}{\bkmkend AAAAAAAJAZ}
00401     EXPECT_TRUE(sv1 < sv5);\par
{\bkmkstart AAAAAAAJBA}{\bkmkend AAAAAAAJBA}
00402     \par
{\bkmkstart AAAAAAAJBB}{\bkmkend AAAAAAAJBB}
00403     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAJBC}{\bkmkend AAAAAAAJBC}
00404     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAAJBD}{\bkmkend AAAAAAAJBD}
00405     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAAJBE}{\bkmkend AAAAAAAJBE}
00406     EXPECT_FALSE(sv1 <= sv4);\par
{\bkmkstart AAAAAAAJBF}{\bkmkend AAAAAAAJBF}
00407     EXPECT_TRUE(sv1 <= sv5);\par
{\bkmkstart AAAAAAAJBG}{\bkmkend AAAAAAAJBG}
00408     \par
{\bkmkstart AAAAAAAJBH}{\bkmkend AAAAAAAJBH}
00409     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAJBI}{\bkmkend AAAAAAAJBI}
00410     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAAJBK}{\bkmkend AAAAAAAJBK}
00411     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAAJBN}{\bkmkend AAAAAAAJBN}
00412     EXPECT_TRUE(sv1 > sv4);\par
{\bkmkstart AAAAAAAJBO}{\bkmkend AAAAAAAJBO}
00413     EXPECT_FALSE(sv1 > sv5);\par
{\bkmkstart AAAAAAAJBQ}{\bkmkend AAAAAAAJBQ}
00414     \par
{\bkmkstart AAAAAAAJBS}{\bkmkend AAAAAAAJBS}
00415     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAJBT}{\bkmkend AAAAAAAJBT}
00416     EXPECT_TRUE(sv1 >= sv2);\par
{\bkmkstart AAAAAAAJBV}{\bkmkend AAAAAAAJBV}
00417     EXPECT_FALSE(sv1 >= sv3);\par
{\bkmkstart AAAAAAAJBX}{\bkmkend AAAAAAAJBX}
00418     EXPECT_TRUE(sv1 >= sv4);\par
{\bkmkstart AAAAAAAJCA}{\bkmkend AAAAAAAJCA}
00419     EXPECT_FALSE(sv1 >= sv5);\par
{\bkmkstart AAAAAAAJCB}{\bkmkend AAAAAAAJCB}
00420 \}\par
{\bkmkstart AAAAAAAJCC}{\bkmkend AAAAAAAJCC}
00421 \par
{\bkmkstart AAAAAAAJCD}{\bkmkend AAAAAAAJCD}
00422 {\cf20 // Test hash function}\par
{\bkmkstart AAAAAAAJCE}{\bkmkend AAAAAAAJCE}
00423 TEST_F(StringViewComprehensiveTest, TestHash) \{\par
{\bkmkstart AAAAAAAJCG}{\bkmkend AAAAAAAJCG}
00424     StringView sv1({\cf22 "hello"});\par
{\bkmkstart AAAAAAAJCH}{\bkmkend AAAAAAAJCH}
00425     StringView sv2({\cf22 "hello"});\par
{\bkmkstart AAAAAAAJCJ}{\bkmkend AAAAAAAJCJ}
00426     StringView sv3({\cf22 "world"});\par
{\bkmkstart AAAAAAAJCM}{\bkmkend AAAAAAAJCM}
00427     \par
{\bkmkstart AAAAAAAJCN}{\bkmkend AAAAAAAJCN}
00428     {\cf20 // Test same strings have same hash}\par
{\bkmkstart AAAAAAAJCO}{\bkmkend AAAAAAAJCO}
00429     EXPECT_EQ(sv1.hash(), sv2.hash());\par
{\bkmkstart AAAAAAAJCP}{\bkmkend AAAAAAAJCP}
00430     \par
{\bkmkstart AAAAAAAJCQ}{\bkmkend AAAAAAAJCQ}
00431     {\cf20 // Test different strings have different hash (very likely)}\par
{\bkmkstart AAAAAAAJCR}{\bkmkend AAAAAAAJCR}
00432     EXPECT_NE(sv1.hash(), sv3.hash());\par
{\bkmkstart AAAAAAAJCS}{\bkmkend AAAAAAAJCS}
00433     \par
{\bkmkstart AAAAAAAJCT}{\bkmkend AAAAAAAJCT}
00434     {\cf20 // Test empty string hash}\par
{\bkmkstart AAAAAAAJCU}{\bkmkend AAAAAAAJCU}
00435     StringView empty;\par
{\bkmkstart AAAAAAAJCV}{\bkmkend AAAAAAAJCV}
00436     EXPECT_EQ(empty.hash(), 0);\par
{\bkmkstart AAAAAAAJCX}{\bkmkend AAAAAAAJCX}
00437 \}\par
{\bkmkstart AAAAAAAJCY}{\bkmkend AAAAAAAJCY}
00438 \par
{\bkmkstart AAAAAAAJCZ}{\bkmkend AAAAAAAJCZ}
00439 {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAAJDA}{\bkmkend AAAAAAAJDA}
00440 TEST_F(StringViewComprehensiveTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAJDC}{\bkmkend AAAAAAAJDC}
00441     {\cf20 // Test empty string}\par
{\bkmkstart AAAAAAAJDD}{\bkmkend AAAAAAAJDD}
00442     StringView empty({\cf22 ""});\par
{\bkmkstart AAAAAAAJDE}{\bkmkend AAAAAAAJDE}
00443     EXPECT_TRUE(empty.empty());\par
{\bkmkstart AAAAAAAJDG}{\bkmkend AAAAAAAJDG}
00444     EXPECT_EQ(empty.size(), 0);\par
{\bkmkstart AAAAAAAJDI}{\bkmkend AAAAAAAJDI}
00445     EXPECT_EQ(empty.data(), {\cf22 ""});\par
{\bkmkstart AAAAAAAJDM}{\bkmkend AAAAAAAJDM}
00446     \par
{\bkmkstart AAAAAAAJDN}{\bkmkend AAAAAAAJDN}
00447     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAAJDO}{\bkmkend AAAAAAAJDO}
00448     StringView single({\cf22 "a"});\par
{\bkmkstart AAAAAAAJDR}{\bkmkend AAAAAAAJDR}
00449     EXPECT_FALSE(single.empty());\par
{\bkmkstart AAAAAAAJDU}{\bkmkend AAAAAAAJDU}
00450     EXPECT_EQ(single.size(), 1);\par
{\bkmkstart AAAAAAAJDW}{\bkmkend AAAAAAAJDW}
00451     EXPECT_EQ(single[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAJDZ}{\bkmkend AAAAAAAJDZ}
00452     \par
{\bkmkstart AAAAAAAJEA}{\bkmkend AAAAAAAJEA}
00453     {\cf20 // Test very long string}\par
{\bkmkstart AAAAAAAJEB}{\bkmkend AAAAAAAJEB}
00454     std::string long_str(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAJEE}{\bkmkend AAAAAAAJEE}
00455     StringView long_sv(long_str);\par
{\bkmkstart AAAAAAAJEG}{\bkmkend AAAAAAAJEG}
00456     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAJEH}{\bkmkend AAAAAAAJEH}
00457     EXPECT_EQ(long_sv[0], {\cf23 'a'});\par
{\bkmkstart AAAAAAAJEI}{\bkmkend AAAAAAAJEI}
00458     EXPECT_EQ(long_sv[999], {\cf23 'a'});\par
{\bkmkstart AAAAAAAJEJ}{\bkmkend AAAAAAAJEJ}
00459     \par
{\bkmkstart AAAAAAAJEK}{\bkmkend AAAAAAAJEK}
00460     {\cf20 // Test string with null characters}\par
{\bkmkstart AAAAAAAJEL}{\bkmkend AAAAAAAJEL}
00461     std::string null_str = {\cf22 "hello\\0world"};\par
{\bkmkstart AAAAAAAJEO}{\bkmkend AAAAAAAJEO}
00462     StringView null_sv(null_str.c_str(), 11);\par
{\bkmkstart AAAAAAAJEP}{\bkmkend AAAAAAAJEP}
00463     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAJEQ}{\bkmkend AAAAAAAJEQ}
00464     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAJER}{\bkmkend AAAAAAAJER}
00465     EXPECT_EQ(null_sv[6], {\cf23 'w'});\par
{\bkmkstart AAAAAAAJES}{\bkmkend AAAAAAAJES}
00466 \}\par
{\bkmkstart AAAAAAAJEU}{\bkmkend AAAAAAAJEU}
00467 \par
{\bkmkstart AAAAAAAJEV}{\bkmkend AAAAAAAJEV}
00468 {\cf20 // Test performance}\par
{\bkmkstart AAAAAAAJEX}{\bkmkend AAAAAAAJEX}
00469 TEST_F(StringViewComprehensiveTest, TestPerformance) \{\par
{\bkmkstart AAAAAAAJFB}{\bkmkend AAAAAAAJFB}
00470     std::string large_string(10000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAJFD}{\bkmkend AAAAAAAJFD}
00471     StringView sv(large_string);\par
{\bkmkstart AAAAAAAJFE}{\bkmkend AAAAAAAJFE}
00472     \par
{\bkmkstart AAAAAAAJFF}{\bkmkend AAAAAAAJFF}
00473     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAJFH}{\bkmkend AAAAAAAJFH}
00474     \par
{\bkmkstart AAAAAAAJFJ}{\bkmkend AAAAAAAJFJ}
00475     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAJFK}{\bkmkend AAAAAAAJFK}
00476     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAJFM}{\bkmkend AAAAAAAJFM}
00477         StringView substr = sv.substr(i % 1000, 100);\par
{\bkmkstart AAAAAAAJFR}{\bkmkend AAAAAAAJFR}
00478         {\cf18 size_t} pos = substr.find({\cf23 'a'});\par
{\bkmkstart AAAAAAAJFW}{\bkmkend AAAAAAAJFW}
00479         {\cf18 bool} starts = substr.starts_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAJFZ}{\bkmkend AAAAAAAJFZ}
00480         {\cf18 bool} ends = substr.ends_with(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAJGB}{\bkmkend AAAAAAAJGB}
00481         {\cf18 bool} contains = substr.contains(StringView({\cf22 "a"}));\par
{\bkmkstart AAAAAAAJGD}{\bkmkend AAAAAAAJGD}
00482         std::string str = substr.to_string();\par
{\bkmkstart AAAAAAAJGF}{\bkmkend AAAAAAAJGF}
00483     \}\par
{\bkmkstart AAAAAAAJGH}{\bkmkend AAAAAAAJGH}
00484     \par
{\bkmkstart AAAAAAAJGJ}{\bkmkend AAAAAAAJGJ}
00485     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAJGM}{\bkmkend AAAAAAAJGM}
00486     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAJGQ}{\bkmkend AAAAAAAJGQ}
00487     \par
{\bkmkstart AAAAAAAJGR}{\bkmkend AAAAAAAJGR}
00488     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAJGT}{\bkmkend AAAAAAAJGT}
00489     EXPECT_LT(duration.count(), 1000);\par
{\bkmkstart AAAAAAAJGU}{\bkmkend AAAAAAAJGU}
00490 \}\par
{\bkmkstart AAAAAAAJGV}{\bkmkend AAAAAAAJGV}
00491 \par
{\bkmkstart AAAAAAAJGW}{\bkmkend AAAAAAAJGW}
00492 {\cf20 // Test constexpr functionality}\par
{\bkmkstart AAAAAAAJGY}{\bkmkend AAAAAAAJGY}
00493 TEST_F(StringViewComprehensiveTest, TestConstexpr) \{\par
{\bkmkstart AAAAAAAJHA}{\bkmkend AAAAAAAJHA}
00494     {\cf17 constexpr} StringView sv({\cf22 "hello"});\par
{\bkmkstart AAAAAAAJHB}{\bkmkend AAAAAAAJHB}
00495     {\cf17 static_assert}(sv.size() == 5, {\cf22 "Size should be 5"});\par
{\bkmkstart AAAAAAAJHD}{\bkmkend AAAAAAAJHD}
00496     {\cf17 static_assert}(sv[0] == {\cf23 'h'}, {\cf22 "First character should be 'h'"});\par
{\bkmkstart AAAAAAAJHE}{\bkmkend AAAAAAAJHE}
00497     {\cf17 static_assert}(sv[4] == {\cf23 'o'}, {\cf22 "Last character should be 'o'"});\par
{\bkmkstart AAAAAAAJHF}{\bkmkend AAAAAAAJHF}
00498     {\cf17 static_assert}(!sv.empty(), {\cf22 "Should not be empty"});\par
{\bkmkstart AAAAAAAJHG}{\bkmkend AAAAAAAJHG}
00499     \par
{\bkmkstart AAAAAAAJHH}{\bkmkend AAAAAAAJHH}
00500     {\cf17 constexpr} StringView empty;\par
{\bkmkstart AAAAAAAJHI}{\bkmkend AAAAAAAJHI}
00501     {\cf17 static_assert}(empty.empty(), {\cf22 "Should be empty"});\par
{\bkmkstart AAAAAAAJHK}{\bkmkend AAAAAAAJHK}
00502     {\cf17 static_assert}(empty.size() == 0, {\cf22 "Size should be 0"});\par
{\bkmkstart AAAAAAAJHM}{\bkmkend AAAAAAAJHM}
00503 \}\par
{\bkmkstart AAAAAAAJHN}{\bkmkend AAAAAAAJHN}
00504 \par
{\bkmkstart AAAAAAAJHO}{\bkmkend AAAAAAAJHO}
00505 {\cf20 // Test copy and move semantics}\par
{\bkmkstart AAAAAAAJHR}{\bkmkend AAAAAAAJHR}
00506 TEST_F(StringViewComprehensiveTest, TestCopyMove) \{\par
{\bkmkstart AAAAAAAJHS}{\bkmkend AAAAAAAJHS}
00507     StringView original({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAJHV}{\bkmkend AAAAAAAJHV}
00508     \par
{\bkmkstart AAAAAAAJHW}{\bkmkend AAAAAAAJHW}
00509     {\cf20 // Test copy construction}\par
{\bkmkstart AAAAAAAJHY}{\bkmkend AAAAAAAJHY}
00510     StringView copy(original);\par
{\bkmkstart AAAAAAAJHZ}{\bkmkend AAAAAAAJHZ}
00511     EXPECT_EQ(copy, original);\par
{\bkmkstart AAAAAAAJIA}{\bkmkend AAAAAAAJIA}
00512     EXPECT_EQ(copy.data(), original.data());\par
{\bkmkstart AAAAAAAJIB}{\bkmkend AAAAAAAJIB}
00513     EXPECT_EQ(copy.size(), original.size());\par
{\bkmkstart AAAAAAAJIC}{\bkmkend AAAAAAAJIC}
00514     \par
{\bkmkstart AAAAAAAJID}{\bkmkend AAAAAAAJID}
00515     {\cf20 // Test copy assignment}\par
{\bkmkstart AAAAAAAJIE}{\bkmkend AAAAAAAJIE}
00516     StringView assigned;\par
{\bkmkstart AAAAAAAJIF}{\bkmkend AAAAAAAJIF}
00517     assigned = original;\par
{\bkmkstart AAAAAAAJIH}{\bkmkend AAAAAAAJIH}
00518     EXPECT_EQ(assigned, original);\par
{\bkmkstart AAAAAAAJII}{\bkmkend AAAAAAAJII}
00519     EXPECT_EQ(assigned.data(), original.data());\par
{\bkmkstart AAAAAAAJIK}{\bkmkend AAAAAAAJIK}
00520     EXPECT_EQ(assigned.size(), original.size());\par
{\bkmkstart AAAAAAAJIM}{\bkmkend AAAAAAAJIM}
00521     \par
{\bkmkstart AAAAAAAJIN}{\bkmkend AAAAAAAJIN}
00522     {\cf20 // Test move construction}\par
{\bkmkstart AAAAAAAJIO}{\bkmkend AAAAAAAJIO}
00523     StringView moved(std::move(original));\par
{\bkmkstart AAAAAAAJIT}{\bkmkend AAAAAAAJIT}
00524     EXPECT_EQ(moved, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAJIU}{\bkmkend AAAAAAAJIU}
00525     \par
{\bkmkstart AAAAAAAJIV}{\bkmkend AAAAAAAJIV}
00526     {\cf20 // Test move assignment}\par
{\bkmkstart AAAAAAAJIX}{\bkmkend AAAAAAAJIX}
00527     StringView move_assigned;\par
{\bkmkstart AAAAAAAJJA}{\bkmkend AAAAAAAJJA}
00528     move_assigned = std::move(moved);\par
{\bkmkstart AAAAAAAJJB}{\bkmkend AAAAAAAJJB}
00529     EXPECT_EQ(move_assigned, StringView({\cf22 "hello world"}));\par
{\bkmkstart AAAAAAAJJG}{\bkmkend AAAAAAAJJG}
00530 \}\par
}
}