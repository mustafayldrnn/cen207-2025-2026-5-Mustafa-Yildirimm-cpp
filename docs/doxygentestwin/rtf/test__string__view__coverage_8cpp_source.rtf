{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABPV" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABRR}{\bkmkend AAAAAAABRR}
00001 \par
{\bkmkstart AAAAAAABRW}{\bkmkend AAAAAAABRW}
00008 \par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABTI}{\bkmkend AAAAAAABTI}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAABTZ}{\bkmkend AAAAAAABTZ}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAABUK}{\bkmkend AAAAAAABUK}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAABUV}{\bkmkend AAAAAAABUV}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAABVG}{\bkmkend AAAAAAABVG}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAABVR}{\bkmkend AAAAAAABVR}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAABWD}{\bkmkend AAAAAAABWD}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAABWP}{\bkmkend AAAAAAABWP}
00017 \par
{\bkmkstart AAAAAAABWQ}{\bkmkend AAAAAAABWQ}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAABWR}{\bkmkend AAAAAAABWR}
00019 \par
{\bkmkstart AAAAAAABWT}{\bkmkend AAAAAAABWT}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAABXA}{\bkmkend AAAAAAABXA}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAABXB}{\bkmkend AAAAAAABXB}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAABXF}{\bkmkend AAAAAAABXF}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAABXG}{\bkmkend AAAAAAABXG}
00028     \}\par
{\bkmkstart AAAAAAABXH}{\bkmkend AAAAAAABXH}
00029     \par
{\bkmkstart AAAAAAABXK}{\bkmkend AAAAAAABXK}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAABXM}{\bkmkend AAAAAAABXM}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAABXN}{\bkmkend AAAAAAABXN}
00032     \}\par
{\bkmkstart AAAAAAABXP}{\bkmkend AAAAAAABXP}
00033 \};\par
{\bkmkstart AAAAAAABXQ}{\bkmkend AAAAAAABXQ}
00034 \par
{\bkmkstart AAAAAAABYE}{\bkmkend AAAAAAABYE}
00039 TEST_F(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAABYI}{\bkmkend AAAAAAABYI}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAABYK}{\bkmkend AAAAAAABYK}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAABYO}{\bkmkend AAAAAAABYO}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAABYS}{\bkmkend AAAAAAABYS}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAABYU}{\bkmkend AAAAAAABYU}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAABYW}{\bkmkend AAAAAAABYW}
00045     \par
{\bkmkstart AAAAAAABYY}{\bkmkend AAAAAAABYY}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAABYZ}{\bkmkend AAAAAAABYZ}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAABZC}{\bkmkend AAAAAAABZC}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAABZE}{\bkmkend AAAAAAABZE}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAABZF}{\bkmkend AAAAAAABZF}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAABZG}{\bkmkend AAAAAAABZG}
00051     \par
{\bkmkstart AAAAAAABZI}{\bkmkend AAAAAAABZI}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAABZJ}{\bkmkend AAAAAAABZJ}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAABZK}{\bkmkend AAAAAAABZK}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAABZN}{\bkmkend AAAAAAABZN}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAABZP}{\bkmkend AAAAAAABZP}
00056     \par
{\bkmkstart AAAAAAABZQ}{\bkmkend AAAAAAABZQ}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAABZS}{\bkmkend AAAAAAABZS}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAABZT}{\bkmkend AAAAAAABZT}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAABZU}{\bkmkend AAAAAAABZU}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAABZV}{\bkmkend AAAAAAABZV}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00062     \par
{\bkmkstart AAAAAAABZX}{\bkmkend AAAAAAABZX}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAABZY}{\bkmkend AAAAAAABZY}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAABZZ}{\bkmkend AAAAAAABZZ}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAACAA}{\bkmkend AAAAAAACAA}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAACAB}{\bkmkend AAAAAAACAB}
00067 \}\par
{\bkmkstart AAAAAAACAC}{\bkmkend AAAAAAACAC}
00068 \par
{\bkmkstart AAAAAAACAD}{\bkmkend AAAAAAACAD}
00073 TEST_F(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAACAE}{\bkmkend AAAAAAACAE}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACAF}{\bkmkend AAAAAAACAF}
00075     \par
{\bkmkstart AAAAAAACAG}{\bkmkend AAAAAAACAG}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAACAH}{\bkmkend AAAAAAACAH}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAACAJ}{\bkmkend AAAAAAACAJ}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAACAK}{\bkmkend AAAAAAACAK}
00080     \par
{\bkmkstart AAAAAAACAL}{\bkmkend AAAAAAACAL}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAACAM}{\bkmkend AAAAAAACAM}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAACAN}{\bkmkend AAAAAAACAN}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAACAO}{\bkmkend AAAAAAACAO}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAACAP}{\bkmkend AAAAAAACAP}
00085     \par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAACAR}{\bkmkend AAAAAAACAR}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAACAS}{\bkmkend AAAAAAACAS}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAACAT}{\bkmkend AAAAAAACAT}
00089     \par
{\bkmkstart AAAAAAACAU}{\bkmkend AAAAAAACAU}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAACAV}{\bkmkend AAAAAAACAV}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAACAW}{\bkmkend AAAAAAACAW}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAACAX}{\bkmkend AAAAAAACAX}
00093     \par
{\bkmkstart AAAAAAACAY}{\bkmkend AAAAAAACAY}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAACAZ}{\bkmkend AAAAAAACAZ}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAACBA}{\bkmkend AAAAAAACBA}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAACBB}{\bkmkend AAAAAAACBB}
00097     \par
{\bkmkstart AAAAAAACBC}{\bkmkend AAAAAAACBC}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAACBD}{\bkmkend AAAAAAACBD}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAACBE}{\bkmkend AAAAAAACBE}
00100     \par
{\bkmkstart AAAAAAACBF}{\bkmkend AAAAAAACBF}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACBG}{\bkmkend AAAAAAACBG}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACBH}{\bkmkend AAAAAAACBH}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAACBI}{\bkmkend AAAAAAACBI}
00104 \}\par
{\bkmkstart AAAAAAACBJ}{\bkmkend AAAAAAACBJ}
00105 \par
{\bkmkstart AAAAAAACBK}{\bkmkend AAAAAAACBK}
00110 TEST_F(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAACBL}{\bkmkend AAAAAAACBL}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAACBM}{\bkmkend AAAAAAACBM}
00112     \par
{\bkmkstart AAAAAAACBN}{\bkmkend AAAAAAACBN}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAACBO}{\bkmkend AAAAAAACBO}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAACBP}{\bkmkend AAAAAAACBP}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAACBQ}{\bkmkend AAAAAAACBQ}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAACBR}{\bkmkend AAAAAAACBR}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAACBS}{\bkmkend AAAAAAACBS}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAACBT}{\bkmkend AAAAAAACBT}
00119     \par
{\bkmkstart AAAAAAACBU}{\bkmkend AAAAAAACBU}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAACBV}{\bkmkend AAAAAAACBV}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAACBW}{\bkmkend AAAAAAACBW}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAACBX}{\bkmkend AAAAAAACBX}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAACBY}{\bkmkend AAAAAAACBY}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAACBZ}{\bkmkend AAAAAAACBZ}
00125     \par
{\bkmkstart AAAAAAACCA}{\bkmkend AAAAAAACCA}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAACCB}{\bkmkend AAAAAAACCB}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAACCC}{\bkmkend AAAAAAACCC}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAACCD}{\bkmkend AAAAAAACCD}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAACCE}{\bkmkend AAAAAAACCE}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAACCF}{\bkmkend AAAAAAACCF}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAACCG}{\bkmkend AAAAAAACCG}
00132     \par
{\bkmkstart AAAAAAACCH}{\bkmkend AAAAAAACCH}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAACCI}{\bkmkend AAAAAAACCI}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAACCJ}{\bkmkend AAAAAAACCJ}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAACCK}{\bkmkend AAAAAAACCK}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAACCL}{\bkmkend AAAAAAACCL}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAACCM}{\bkmkend AAAAAAACCM}
00138     \par
{\bkmkstart AAAAAAACCN}{\bkmkend AAAAAAACCN}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAACCO}{\bkmkend AAAAAAACCO}
00140     std::string result;\par
{\bkmkstart AAAAAAACCP}{\bkmkend AAAAAAACCP}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAACCQ}{\bkmkend AAAAAAACCQ}
00142         result += c;\par
{\bkmkstart AAAAAAACCS}{\bkmkend AAAAAAACCS}
00143     \}\par
{\bkmkstart AAAAAAACCU}{\bkmkend AAAAAAACCU}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAACCV}{\bkmkend AAAAAAACCV}
00145 \}\par
{\bkmkstart AAAAAAACCW}{\bkmkend AAAAAAACCW}
00146 \par
{\bkmkstart AAAAAAACCX}{\bkmkend AAAAAAACCX}
00151 TEST_F(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAACCY}{\bkmkend AAAAAAACCY}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACCZ}{\bkmkend AAAAAAACCZ}
00153     \par
{\bkmkstart AAAAAAACDA}{\bkmkend AAAAAAACDA}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAACDB}{\bkmkend AAAAAAACDB}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAACDC}{\bkmkend AAAAAAACDC}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAACDD}{\bkmkend AAAAAAACDD}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAACDE}{\bkmkend AAAAAAACDE}
00158     \par
{\bkmkstart AAAAAAACDF}{\bkmkend AAAAAAACDF}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAACDG}{\bkmkend AAAAAAACDG}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAACDH}{\bkmkend AAAAAAACDH}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAACDI}{\bkmkend AAAAAAACDI}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAACDK}{\bkmkend AAAAAAACDK}
00163     \par
{\bkmkstart AAAAAAACDL}{\bkmkend AAAAAAACDL}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAACDM}{\bkmkend AAAAAAACDM}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAACDN}{\bkmkend AAAAAAACDN}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAACDO}{\bkmkend AAAAAAACDO}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAACDP}{\bkmkend AAAAAAACDP}
00168     \par
{\bkmkstart AAAAAAACDQ}{\bkmkend AAAAAAACDQ}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAACDR}{\bkmkend AAAAAAACDR}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAACDS}{\bkmkend AAAAAAACDS}
00171     EXPECT_EQ(sub4, {\cf22 ","});\par
{\bkmkstart AAAAAAACDT}{\bkmkend AAAAAAACDT}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAACDU}{\bkmkend AAAAAAACDU}
00173     \par
{\bkmkstart AAAAAAACDV}{\bkmkend AAAAAAACDV}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAACDW}{\bkmkend AAAAAAACDW}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAACDX}{\bkmkend AAAAAAACDX}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAACDY}{\bkmkend AAAAAAACDY}
00177 \}\par
{\bkmkstart AAAAAAACDZ}{\bkmkend AAAAAAACDZ}
00178 \par
{\bkmkstart AAAAAAACEB}{\bkmkend AAAAAAACEB}
00183 TEST_F(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAACEC}{\bkmkend AAAAAAACEC}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACEE}{\bkmkend AAAAAAACEE}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACEH}{\bkmkend AAAAAAACEH}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAACEJ}{\bkmkend AAAAAAACEJ}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAACEM}{\bkmkend AAAAAAACEM}
00188     \par
{\bkmkstart AAAAAAACEO}{\bkmkend AAAAAAACEO}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAACEP}{\bkmkend AAAAAAACEP}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAACER}{\bkmkend AAAAAAACER}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAACET}{\bkmkend AAAAAAACET}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAACEW}{\bkmkend AAAAAAACEW}
00193     \par
{\bkmkstart AAAAAAACEY}{\bkmkend AAAAAAACEY}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAACEZ}{\bkmkend AAAAAAACEZ}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAACFB}{\bkmkend AAAAAAACFB}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAACFC}{\bkmkend AAAAAAACFC}
00197     \par
{\bkmkstart AAAAAAACFD}{\bkmkend AAAAAAACFD}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAACFE}{\bkmkend AAAAAAACFE}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAACFF}{\bkmkend AAAAAAACFF}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAACFJ}{\bkmkend AAAAAAACFJ}
00201     \par
{\bkmkstart AAAAAAACFK}{\bkmkend AAAAAAACFK}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAACFL}{\bkmkend AAAAAAACFL}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAACFN}{\bkmkend AAAAAAACFN}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAACFQ}{\bkmkend AAAAAAACFQ}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAACFR}{\bkmkend AAAAAAACFR}
00206     \par
{\bkmkstart AAAAAAACFT}{\bkmkend AAAAAAACFT}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAACFV}{\bkmkend AAAAAAACFV}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAACFX}{\bkmkend AAAAAAACFX}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAACFZ}{\bkmkend AAAAAAACFZ}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAACGA}{\bkmkend AAAAAAACGA}
00211     \par
{\bkmkstart AAAAAAACGC}{\bkmkend AAAAAAACGC}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAACGE}{\bkmkend AAAAAAACGE}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAACGG}{\bkmkend AAAAAAACGG}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAACGI}{\bkmkend AAAAAAACGI}
00215     \par
{\bkmkstart AAAAAAACGJ}{\bkmkend AAAAAAACGJ}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAACGL}{\bkmkend AAAAAAACGL}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAACGN}{\bkmkend AAAAAAACGN}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAACGP}{\bkmkend AAAAAAACGP}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAACGR}{\bkmkend AAAAAAACGR}
00220 \}\par
{\bkmkstart AAAAAAACGS}{\bkmkend AAAAAAACGS}
00221 \par
{\bkmkstart AAAAAAACGU}{\bkmkend AAAAAAACGU}
00226 TEST_F(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAACGX}{\bkmkend AAAAAAACGX}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAACHA}{\bkmkend AAAAAAACHA}
00228     \par
{\bkmkstart AAAAAAACHC}{\bkmkend AAAAAAACHC}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAACHD}{\bkmkend AAAAAAACHD}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACHE}{\bkmkend AAAAAAACHE}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAACHJ}{\bkmkend AAAAAAACHJ}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAACHL}{\bkmkend AAAAAAACHL}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACHN}{\bkmkend AAAAAAACHN}
00234     \par
{\bkmkstart AAAAAAACHO}{\bkmkend AAAAAAACHO}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAACHQ}{\bkmkend AAAAAAACHQ}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAACHS}{\bkmkend AAAAAAACHS}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAACHT}{\bkmkend AAAAAAACHT}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 20);\par
{\bkmkstart AAAAAAACHV}{\bkmkend AAAAAAACHV}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACHY}{\bkmkend AAAAAAACHY}
00240     \par
{\bkmkstart AAAAAAACHZ}{\bkmkend AAAAAAACHZ}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAACIA}{\bkmkend AAAAAAACIA}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACIE}{\bkmkend AAAAAAACIE}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAACIF}{\bkmkend AAAAAAACIF}
00244     \par
{\bkmkstart AAAAAAACIG}{\bkmkend AAAAAAACIG}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAACIH}{\bkmkend AAAAAAACIH}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAACIJ}{\bkmkend AAAAAAACIJ}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAACIL}{\bkmkend AAAAAAACIL}
00248     \par
{\bkmkstart AAAAAAACIN}{\bkmkend AAAAAAACIN}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAACIO}{\bkmkend AAAAAAACIO}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAACIQ}{\bkmkend AAAAAAACIQ}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 25);\par
{\bkmkstart AAAAAAACIS}{\bkmkend AAAAAAACIS}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACIW}{\bkmkend AAAAAAACIW}
00253     \par
{\bkmkstart AAAAAAACIX}{\bkmkend AAAAAAACIX}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAACIZ}{\bkmkend AAAAAAACIZ}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAACJE}{\bkmkend AAAAAAACJE}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACJF}{\bkmkend AAAAAAACJF}
00257     \par
{\bkmkstart AAAAAAACJG}{\bkmkend AAAAAAACJG}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAACJH}{\bkmkend AAAAAAACJH}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 25); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAACJI}{\bkmkend AAAAAAACJI}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACJJ}{\bkmkend AAAAAAACJJ}
00261     \par
{\bkmkstart AAAAAAACJK}{\bkmkend AAAAAAACJK}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAACJL}{\bkmkend AAAAAAACJL}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAACJM}{\bkmkend AAAAAAACJM}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 14);\par
{\bkmkstart AAAAAAACJN}{\bkmkend AAAAAAACJN}
00265     \par
{\bkmkstart AAAAAAACJO}{\bkmkend AAAAAAACJO}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAACJP}{\bkmkend AAAAAAACJP}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 30);\par
{\bkmkstart AAAAAAACJQ}{\bkmkend AAAAAAACJQ}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACJR}{\bkmkend AAAAAAACJR}
00269 \}\par
{\bkmkstart AAAAAAACJS}{\bkmkend AAAAAAACJS}
00270 \par
{\bkmkstart AAAAAAACJT}{\bkmkend AAAAAAACJT}
00275 TEST_F(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAACJU}{\bkmkend AAAAAAACJU}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACJV}{\bkmkend AAAAAAACJV}
00277     \par
{\bkmkstart AAAAAAACJW}{\bkmkend AAAAAAACJW}
00278     {\cf20 // Test starts_with() with character}\par
{\bkmkstart AAAAAAACJX}{\bkmkend AAAAAAACJX}
00279     EXPECT_TRUE(sv.starts_with({\cf23 'H'}));\par
{\bkmkstart AAAAAAACJY}{\bkmkend AAAAAAACJY}
00280     EXPECT_FALSE(sv.starts_with({\cf23 'h'}));\par
{\bkmkstart AAAAAAACJZ}{\bkmkend AAAAAAACJZ}
00281     EXPECT_FALSE(sv.starts_with({\cf23 'W'}));\par
{\bkmkstart AAAAAAACKA}{\bkmkend AAAAAAACKA}
00282     \par
{\bkmkstart AAAAAAACKB}{\bkmkend AAAAAAACKB}
00283     {\cf20 // Test starts_with() with string}\par
{\bkmkstart AAAAAAACKC}{\bkmkend AAAAAAACKC}
00284     EXPECT_TRUE(sv.starts_with({\cf22 "Hello"}));\par
{\bkmkstart AAAAAAACKD}{\bkmkend AAAAAAACKD}
00285     EXPECT_TRUE(sv.starts_with({\cf22 "Hello, World!"}));\par
{\bkmkstart AAAAAAACKE}{\bkmkend AAAAAAACKE}
00286     EXPECT_FALSE(sv.starts_with({\cf22 "World"}));\par
{\bkmkstart AAAAAAACKF}{\bkmkend AAAAAAACKF}
00287     EXPECT_FALSE(sv.starts_with({\cf22 "Hello, Universe!"}));\par
{\bkmkstart AAAAAAACKG}{\bkmkend AAAAAAACKG}
00288     \par
{\bkmkstart AAAAAAACKH}{\bkmkend AAAAAAACKH}
00289     {\cf20 // Test starts_with() with string_view}\par
{\bkmkstart AAAAAAACKI}{\bkmkend AAAAAAACKI}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACKJ}{\bkmkend AAAAAAACKJ}
00291     EXPECT_TRUE(sv.starts_with(prefix));\par
{\bkmkstart AAAAAAACKK}{\bkmkend AAAAAAACKK}
00292     \par
{\bkmkstart AAAAAAACKL}{\bkmkend AAAAAAACKL}
00293     {\cf20 // Test ends_with() with character}\par
{\bkmkstart AAAAAAACKM}{\bkmkend AAAAAAACKM}
00294     EXPECT_TRUE(sv.ends_with({\cf23 '!'}));\par
{\bkmkstart AAAAAAACKN}{\bkmkend AAAAAAACKN}
00295     EXPECT_FALSE(sv.ends_with({\cf23 '?'}));\par
{\bkmkstart AAAAAAACKO}{\bkmkend AAAAAAACKO}
00296     EXPECT_FALSE(sv.ends_with({\cf23 'd'}));\par
{\bkmkstart AAAAAAACKQ}{\bkmkend AAAAAAACKQ}
00297     \par
{\bkmkstart AAAAAAACKR}{\bkmkend AAAAAAACKR}
00298     {\cf20 // Test ends_with() with string}\par
{\bkmkstart AAAAAAACKS}{\bkmkend AAAAAAACKS}
00299     EXPECT_TRUE(sv.ends_with({\cf22 "World!"}));\par
{\bkmkstart AAAAAAACKT}{\bkmkend AAAAAAACKT}
00300     EXPECT_TRUE(sv.ends_with({\cf22 "Hello, World!"}));\par
{\bkmkstart AAAAAAACKU}{\bkmkend AAAAAAACKU}
00301     EXPECT_FALSE(sv.ends_with({\cf22 "Hello"}));\par
{\bkmkstart AAAAAAACKV}{\bkmkend AAAAAAACKV}
00302     EXPECT_FALSE(sv.ends_with({\cf22 "Universe!"}));\par
{\bkmkstart AAAAAAACKW}{\bkmkend AAAAAAACKW}
00303     \par
{\bkmkstart AAAAAAACKX}{\bkmkend AAAAAAACKX}
00304     {\cf20 // Test ends_with() with string_view}\par
{\bkmkstart AAAAAAACKY}{\bkmkend AAAAAAACKY}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAACKZ}{\bkmkend AAAAAAACKZ}
00306     EXPECT_TRUE(sv.ends_with(suffix));\par
{\bkmkstart AAAAAAACLA}{\bkmkend AAAAAAACLA}
00307 \}\par
{\bkmkstart AAAAAAACLB}{\bkmkend AAAAAAACLB}
00308 \par
{\bkmkstart AAAAAAACLC}{\bkmkend AAAAAAACLC}
00313 TEST_F(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAACLD}{\bkmkend AAAAAAACLD}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACLE}{\bkmkend AAAAAAACLE}
00315     \par
{\bkmkstart AAAAAAACLF}{\bkmkend AAAAAAACLF}
00316     {\cf20 // Test contains() with character}\par
{\bkmkstart AAAAAAACLG}{\bkmkend AAAAAAACLG}
00317     EXPECT_TRUE(sv.contains({\cf23 'H'}));\par
{\bkmkstart AAAAAAACLI}{\bkmkend AAAAAAACLI}
00318     EXPECT_TRUE(sv.contains({\cf23 'o'}));\par
{\bkmkstart AAAAAAACLJ}{\bkmkend AAAAAAACLJ}
00319     EXPECT_TRUE(sv.contains({\cf23 '!'}));\par
{\bkmkstart AAAAAAACLK}{\bkmkend AAAAAAACLK}
00320     EXPECT_FALSE(sv.contains({\cf23 'z'}));\par
{\bkmkstart AAAAAAACLL}{\bkmkend AAAAAAACLL}
00321     \par
{\bkmkstart AAAAAAACLM}{\bkmkend AAAAAAACLM}
00322     {\cf20 // Test contains() with string}\par
{\bkmkstart AAAAAAACLN}{\bkmkend AAAAAAACLN}
00323     EXPECT_TRUE(sv.contains({\cf22 "Hello"}));\par
{\bkmkstart AAAAAAACLO}{\bkmkend AAAAAAACLO}
00324     EXPECT_TRUE(sv.contains({\cf22 "World"}));\par
{\bkmkstart AAAAAAACLP}{\bkmkend AAAAAAACLP}
00325     EXPECT_TRUE(sv.contains({\cf22 "lo, Wo"}));\par
{\bkmkstart AAAAAAACLQ}{\bkmkend AAAAAAACLQ}
00326     EXPECT_FALSE(sv.contains({\cf22 "xyz"}));\par
{\bkmkstart AAAAAAACLR}{\bkmkend AAAAAAACLR}
00327     EXPECT_FALSE(sv.contains({\cf22 "Universe"}));\par
{\bkmkstart AAAAAAACLS}{\bkmkend AAAAAAACLS}
00328     \par
{\bkmkstart AAAAAAACLT}{\bkmkend AAAAAAACLT}
00329     {\cf20 // Test contains() with string_view}\par
{\bkmkstart AAAAAAACLU}{\bkmkend AAAAAAACLU}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAACLV}{\bkmkend AAAAAAACLV}
00331     EXPECT_TRUE(sv.contains(search));\par
{\bkmkstart AAAAAAACLX}{\bkmkend AAAAAAACLX}
00332     \par
{\bkmkstart AAAAAAACLY}{\bkmkend AAAAAAACLY}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAACMB}{\bkmkend AAAAAAACMB}
00334     EXPECT_FALSE(sv.contains(not_found));\par
{\bkmkstart AAAAAAACMC}{\bkmkend AAAAAAACMC}
00335 \}\par
{\bkmkstart AAAAAAACMD}{\bkmkend AAAAAAACMD}
00336 \par
{\bkmkstart AAAAAAACME}{\bkmkend AAAAAAACME}
00341 TEST_F(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAACMF}{\bkmkend AAAAAAACMF}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACMG}{\bkmkend AAAAAAACMG}
00343     \par
{\bkmkstart AAAAAAACMH}{\bkmkend AAAAAAACMH}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAACMI}{\bkmkend AAAAAAACMI}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAACMJ}{\bkmkend AAAAAAACMJ}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAACMK}{\bkmkend AAAAAAACMK}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAACML}{\bkmkend AAAAAAACML}
00348     \par
{\bkmkstart AAAAAAACMM}{\bkmkend AAAAAAACMM}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAACMN}{\bkmkend AAAAAAACMN}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAACMO}{\bkmkend AAAAAAACMO}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAACMP}{\bkmkend AAAAAAACMP}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAACMQ}{\bkmkend AAAAAAACMQ}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAACMR}{\bkmkend AAAAAAACMR}
00354     \par
{\bkmkstart AAAAAAACMS}{\bkmkend AAAAAAACMS}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAACMT}{\bkmkend AAAAAAACMT}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAACMU}{\bkmkend AAAAAAACMU}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAACMV}{\bkmkend AAAAAAACMV}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAACMW}{\bkmkend AAAAAAACMW}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAACMX}{\bkmkend AAAAAAACMX}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAACMY}{\bkmkend AAAAAAACMY}
00361     \par
{\bkmkstart AAAAAAACMZ}{\bkmkend AAAAAAACMZ}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAACNA}{\bkmkend AAAAAAACNA}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACNB}{\bkmkend AAAAAAACNB}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAACNC}{\bkmkend AAAAAAACNC}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAACND}{\bkmkend AAAAAAACND}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACNE}{\bkmkend AAAAAAACNE}
00367 \}\par
{\bkmkstart AAAAAAACNG}{\bkmkend AAAAAAACNG}
00368 \par
{\bkmkstart AAAAAAACNH}{\bkmkend AAAAAAACNH}
00373 TEST_F(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAACNJ}{\bkmkend AAAAAAACNJ}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACNL}{\bkmkend AAAAAAACNL}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAACNM}{\bkmkend AAAAAAACNM}
00376     \par
{\bkmkstart AAAAAAACNN}{\bkmkend AAAAAAACNN}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAACNO}{\bkmkend AAAAAAACNO}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAACNR}{\bkmkend AAAAAAACNR}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAACNS}{\bkmkend AAAAAAACNS}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACNT}{\bkmkend AAAAAAACNT}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACNU}{\bkmkend AAAAAAACNU}
00382     \par
{\bkmkstart AAAAAAACNV}{\bkmkend AAAAAAACNV}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAACNW}{\bkmkend AAAAAAACNW}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAACNX}{\bkmkend AAAAAAACNX}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAACNZ}{\bkmkend AAAAAAACNZ}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACOA}{\bkmkend AAAAAAACOA}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAACOC}{\bkmkend AAAAAAACOC}
00388     \par
{\bkmkstart AAAAAAACOD}{\bkmkend AAAAAAACOD}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAACOF}{\bkmkend AAAAAAACOF}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAACOG}{\bkmkend AAAAAAACOG}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAACOH}{\bkmkend AAAAAAACOH}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACOJ}{\bkmkend AAAAAAACOJ}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAACOL}{\bkmkend AAAAAAACOL}
00394     \par
{\bkmkstart AAAAAAACOM}{\bkmkend AAAAAAACOM}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAACOO}{\bkmkend AAAAAAACOO}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAACOP}{\bkmkend AAAAAAACOP}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAACOQ}{\bkmkend AAAAAAACOQ}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAACOR}{\bkmkend AAAAAAACOR}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACOS}{\bkmkend AAAAAAACOS}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAACOT}{\bkmkend AAAAAAACOT}
00401 \}\par
{\bkmkstart AAAAAAACOU}{\bkmkend AAAAAAACOU}
00402 \par
{\bkmkstart AAAAAAACOV}{\bkmkend AAAAAAACOV}
00407 TEST_F(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAACOW}{\bkmkend AAAAAAACOW}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACOX}{\bkmkend AAAAAAACOX}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACOY}{\bkmkend AAAAAAACOY}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAACOZ}{\bkmkend AAAAAAACOZ}
00411     \par
{\bkmkstart AAAAAAACPA}{\bkmkend AAAAAAACPA}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAACPB}{\bkmkend AAAAAAACPB}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAACPC}{\bkmkend AAAAAAACPC}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAACPD}{\bkmkend AAAAAAACPD}
00415     \par
{\bkmkstart AAAAAAACPE}{\bkmkend AAAAAAACPE}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAACPF}{\bkmkend AAAAAAACPF}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAACPG}{\bkmkend AAAAAAACPG}
00418     \par
{\bkmkstart AAAAAAACPH}{\bkmkend AAAAAAACPH}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAACPI}{\bkmkend AAAAAAACPI}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACPJ}{\bkmkend AAAAAAACPJ}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAACPK}{\bkmkend AAAAAAACPK}
00422     \par
{\bkmkstart AAAAAAACPM}{\bkmkend AAAAAAACPM}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAACPN}{\bkmkend AAAAAAACPN}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAACPQ}{\bkmkend AAAAAAACPQ}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAACPS}{\bkmkend AAAAAAACPS}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAACPU}{\bkmkend AAAAAAACPU}
00427 \}\par
{\bkmkstart AAAAAAACPV}{\bkmkend AAAAAAACPV}
00428 \par
{\bkmkstart AAAAAAACPW}{\bkmkend AAAAAAACPW}
00433 TEST_F(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAACPZ}{\bkmkend AAAAAAACPZ}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAACQB}{\bkmkend AAAAAAACQB}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACQC}{\bkmkend AAAAAAACQC}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACQF}{\bkmkend AAAAAAACQF}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAACQG}{\bkmkend AAAAAAACQG}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAACQI}{\bkmkend AAAAAAACQI}
00439     \par
{\bkmkstart AAAAAAACQJ}{\bkmkend AAAAAAACQJ}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAACQL}{\bkmkend AAAAAAACQL}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAACQO}{\bkmkend AAAAAAACQO}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAACQP}{\bkmkend AAAAAAACQP}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAACQR}{\bkmkend AAAAAAACQR}
00444     \par
{\bkmkstart AAAAAAACQS}{\bkmkend AAAAAAACQS}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAACQU}{\bkmkend AAAAAAACQU}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAACQX}{\bkmkend AAAAAAACQX}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAACQZ}{\bkmkend AAAAAAACQZ}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAACRB}{\bkmkend AAAAAAACRB}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAACRE}{\bkmkend AAAAAAACRE}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAACRF}{\bkmkend AAAAAAACRF}
00451     \par
{\bkmkstart AAAAAAACRG}{\bkmkend AAAAAAACRG}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAACRH}{\bkmkend AAAAAAACRH}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAACRJ}{\bkmkend AAAAAAACRJ}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAACRL}{\bkmkend AAAAAAACRL}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAACRN}{\bkmkend AAAAAAACRN}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAACRQ}{\bkmkend AAAAAAACRQ}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAACRS}{\bkmkend AAAAAAACRS}
00458     \par
{\bkmkstart AAAAAAACRT}{\bkmkend AAAAAAACRT}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAACRV}{\bkmkend AAAAAAACRV}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAACRX}{\bkmkend AAAAAAACRX}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAACRY}{\bkmkend AAAAAAACRY}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAACRZ}{\bkmkend AAAAAAACRZ}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAACSB}{\bkmkend AAAAAAACSB}
00464 \}\par
{\bkmkstart AAAAAAACSC}{\bkmkend AAAAAAACSC}
00465 \par
{\bkmkstart AAAAAAACSF}{\bkmkend AAAAAAACSF}
00470 TEST_F(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAACSI}{\bkmkend AAAAAAACSI}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAACSK}{\bkmkend AAAAAAACSK}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAACSM}{\bkmkend AAAAAAACSM}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAACSO}{\bkmkend AAAAAAACSO}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAACSP}{\bkmkend AAAAAAACSP}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAACSQ}{\bkmkend AAAAAAACSQ}
00476     \par
{\bkmkstart AAAAAAACSR}{\bkmkend AAAAAAACSR}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAACSS}{\bkmkend AAAAAAACSS}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAACSW}{\bkmkend AAAAAAACSW}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAACSX}{\bkmkend AAAAAAACSX}
00480     \par
{\bkmkstart AAAAAAACSZ}{\bkmkend AAAAAAACSZ}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAACTC}{\bkmkend AAAAAAACTC}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAACTD}{\bkmkend AAAAAAACTD}
00483     \par
{\bkmkstart AAAAAAACTE}{\bkmkend AAAAAAACTE}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAACTG}{\bkmkend AAAAAAACTG}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAACTI}{\bkmkend AAAAAAACTI}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAACTJ}{\bkmkend AAAAAAACTJ}
00487     \par
{\bkmkstart AAAAAAACTK}{\bkmkend AAAAAAACTK}
00488     {\cf20 // Test constexpr starts_with}\par
{\bkmkstart AAAAAAACTM}{\bkmkend AAAAAAACTM}
00489     {\cf17 static_assert}(sv.starts_with({\cf22 "Constexpr"}));\par
{\bkmkstart AAAAAAACTN}{\bkmkend AAAAAAACTN}
00490     {\cf17 static_assert}(sv.ends_with({\cf22 "Test"}));\par
{\bkmkstart AAAAAAACTQ}{\bkmkend AAAAAAACTQ}
00491 \}\par
{\bkmkstart AAAAAAACTS}{\bkmkend AAAAAAACTS}
00492 \par
{\bkmkstart AAAAAAACTT}{\bkmkend AAAAAAACTT}
00497 TEST_F(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAACTV}{\bkmkend AAAAAAACTV}
00498     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAACTX}{\bkmkend AAAAAAACTX}
00499     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAACTZ}{\bkmkend AAAAAAACTZ}
00500     \par
{\bkmkstart AAAAAAACUA}{\bkmkend AAAAAAACUA}
00501     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAACUC}{\bkmkend AAAAAAACUC}
00502     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAACUE}{\bkmkend AAAAAAACUE}
00503     \par
{\bkmkstart AAAAAAACUF}{\bkmkend AAAAAAACUF}
00504     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAACUH}{\bkmkend AAAAAAACUH}
00505     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAACUJ}{\bkmkend AAAAAAACUJ}
00506         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAACUM}{\bkmkend AAAAAAACUM}
00507         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAACUN}{\bkmkend AAAAAAACUN}
00508         {\cf17 auto} contains = sv.contains({\cf22 "BBB"});\par
{\bkmkstart AAAAAAACUP}{\bkmkend AAAAAAACUP}
00509         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAACUR}{\bkmkend AAAAAAACUR}
00510     \}\par
{\bkmkstart AAAAAAACUT}{\bkmkend AAAAAAACUT}
00511     \par
{\bkmkstart AAAAAAACUU}{\bkmkend AAAAAAACUU}
00512     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAACUX}{\bkmkend AAAAAAACUX}
00513     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAACVB}{\bkmkend AAAAAAACVB}
00514     \par
{\bkmkstart AAAAAAACVD}{\bkmkend AAAAAAACVD}
00515     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAACVE}{\bkmkend AAAAAAACVE}
00516     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAACVF}{\bkmkend AAAAAAACVF}
00517 \}\par
{\bkmkstart AAAAAAACVH}{\bkmkend AAAAAAACVH}
00518 \par
{\bkmkstart AAAAAAACVI}{\bkmkend AAAAAAACVI}
00519 \} {\cf20 // namespace}\par
}
}