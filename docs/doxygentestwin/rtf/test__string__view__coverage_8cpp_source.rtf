{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAAIKE}
{\bkmkend AAAAAAAIKE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAIKF" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAIME}{\bkmkend AAAAAAAIME}
00001 \par
{\bkmkstart AAAAAAAIMG}{\bkmkend AAAAAAAIMG}
00008 \par
{\bkmkstart AAAAAAAIMI}{\bkmkend AAAAAAAIMI}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAINH}{\bkmkend AAAAAAAINH}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAINI}{\bkmkend AAAAAAAINI}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAINJ}{\bkmkend AAAAAAAINJ}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAINK}{\bkmkend AAAAAAAINK}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAINL}{\bkmkend AAAAAAAINL}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAINM}{\bkmkend AAAAAAAINM}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAINN}{\bkmkend AAAAAAAINN}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAINO}{\bkmkend AAAAAAAINO}
00017 \par
{\bkmkstart AAAAAAAINP}{\bkmkend AAAAAAAINP}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAINQ}{\bkmkend AAAAAAAINQ}
00019 \par
{\bkmkstart AAAAAAAINR}{\bkmkend AAAAAAAINR}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAINS}{\bkmkend AAAAAAAINS}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAAINT}{\bkmkend AAAAAAAINT}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAINU}{\bkmkend AAAAAAAINU}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAINV}{\bkmkend AAAAAAAINV}
00028     \}\par
{\bkmkstart AAAAAAAINW}{\bkmkend AAAAAAAINW}
00029     \par
{\bkmkstart AAAAAAAINX}{\bkmkend AAAAAAAINX}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAINY}{\bkmkend AAAAAAAINY}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAINZ}{\bkmkend AAAAAAAINZ}
00032     \}\par
{\bkmkstart AAAAAAAIOA}{\bkmkend AAAAAAAIOA}
00033 \};\par
{\bkmkstart AAAAAAAIOB}{\bkmkend AAAAAAAIOB}
00034 \par
{\bkmkstart AAAAAAAIOC}{\bkmkend AAAAAAAIOC}
00039 TEST_F(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAAIOD}{\bkmkend AAAAAAAIOD}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAAIOE}{\bkmkend AAAAAAAIOE}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAIOF}{\bkmkend AAAAAAAIOF}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAAIOG}{\bkmkend AAAAAAAIOG}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAAIOH}{\bkmkend AAAAAAAIOH}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAAIOI}{\bkmkend AAAAAAAIOI}
00045     \par
{\bkmkstart AAAAAAAIOJ}{\bkmkend AAAAAAAIOJ}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAAIOK}{\bkmkend AAAAAAAIOK}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAAIOL}{\bkmkend AAAAAAAIOL}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAIOM}{\bkmkend AAAAAAAIOM}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAAION}{\bkmkend AAAAAAAION}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAAIOO}{\bkmkend AAAAAAAIOO}
00051     \par
{\bkmkstart AAAAAAAIOP}{\bkmkend AAAAAAAIOP}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAAIOQ}{\bkmkend AAAAAAAIOQ}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAAIOR}{\bkmkend AAAAAAAIOR}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAAIOT}{\bkmkend AAAAAAAIOT}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIOU}{\bkmkend AAAAAAAIOU}
00056     \par
{\bkmkstart AAAAAAAIOV}{\bkmkend AAAAAAAIOV}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAAIOW}{\bkmkend AAAAAAAIOW}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAAIOX}{\bkmkend AAAAAAAIOX}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAAIOY}{\bkmkend AAAAAAAIOY}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAAIOZ}{\bkmkend AAAAAAAIOZ}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAAIPA}{\bkmkend AAAAAAAIPA}
00062     \par
{\bkmkstart AAAAAAAIPB}{\bkmkend AAAAAAAIPB}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAAIPC}{\bkmkend AAAAAAAIPC}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAAIPD}{\bkmkend AAAAAAAIPD}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAAIPE}{\bkmkend AAAAAAAIPE}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAAIPF}{\bkmkend AAAAAAAIPF}
00067 \}\par
{\bkmkstart AAAAAAAIPG}{\bkmkend AAAAAAAIPG}
00068 \par
{\bkmkstart AAAAAAAIPH}{\bkmkend AAAAAAAIPH}
00073 TEST_F(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAAIPI}{\bkmkend AAAAAAAIPI}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIPJ}{\bkmkend AAAAAAAIPJ}
00075     \par
{\bkmkstart AAAAAAAIPK}{\bkmkend AAAAAAAIPK}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAIPL}{\bkmkend AAAAAAAIPL}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAIPM}{\bkmkend AAAAAAAIPM}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAAIPN}{\bkmkend AAAAAAAIPN}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAAIPO}{\bkmkend AAAAAAAIPO}
00080     \par
{\bkmkstart AAAAAAAIPP}{\bkmkend AAAAAAAIPP}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAAIPQ}{\bkmkend AAAAAAAIPQ}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAIPR}{\bkmkend AAAAAAAIPR}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAAIPS}{\bkmkend AAAAAAAIPS}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAAIPT}{\bkmkend AAAAAAAIPT}
00085     \par
{\bkmkstart AAAAAAAIPU}{\bkmkend AAAAAAAIPU}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAAIPW}{\bkmkend AAAAAAAIPW}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAIPY}{\bkmkend AAAAAAAIPY}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAIPZ}{\bkmkend AAAAAAAIPZ}
00089     \par
{\bkmkstart AAAAAAAIQA}{\bkmkend AAAAAAAIQA}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAAIQB}{\bkmkend AAAAAAAIQB}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAIQC}{\bkmkend AAAAAAAIQC}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAIQD}{\bkmkend AAAAAAAIQD}
00093     \par
{\bkmkstart AAAAAAAIQE}{\bkmkend AAAAAAAIQE}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAAIQF}{\bkmkend AAAAAAAIQF}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAIQG}{\bkmkend AAAAAAAIQG}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAIQH}{\bkmkend AAAAAAAIQH}
00097     \par
{\bkmkstart AAAAAAAIQI}{\bkmkend AAAAAAAIQI}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAAIQJ}{\bkmkend AAAAAAAIQJ}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAIQK}{\bkmkend AAAAAAAIQK}
00100     \par
{\bkmkstart AAAAAAAIQL}{\bkmkend AAAAAAAIQL}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAIQM}{\bkmkend AAAAAAAIQM}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAIQN}{\bkmkend AAAAAAAIQN}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAIQO}{\bkmkend AAAAAAAIQO}
00104 \}\par
{\bkmkstart AAAAAAAIQP}{\bkmkend AAAAAAAIQP}
00105 \par
{\bkmkstart AAAAAAAIQQ}{\bkmkend AAAAAAAIQQ}
00110 TEST_F(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAAIQR}{\bkmkend AAAAAAAIQR}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAAIQS}{\bkmkend AAAAAAAIQS}
00112     \par
{\bkmkstart AAAAAAAIQT}{\bkmkend AAAAAAAIQT}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAAIQU}{\bkmkend AAAAAAAIQU}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAAIQV}{\bkmkend AAAAAAAIQV}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAAIQW}{\bkmkend AAAAAAAIQW}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAAIQX}{\bkmkend AAAAAAAIQX}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAIQY}{\bkmkend AAAAAAAIQY}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAAIQZ}{\bkmkend AAAAAAAIQZ}
00119     \par
{\bkmkstart AAAAAAAIRB}{\bkmkend AAAAAAAIRB}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAAIRC}{\bkmkend AAAAAAAIRC}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAAIRD}{\bkmkend AAAAAAAIRD}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAAIRF}{\bkmkend AAAAAAAIRF}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAAIRH}{\bkmkend AAAAAAAIRH}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAIRI}{\bkmkend AAAAAAAIRI}
00125     \par
{\bkmkstart AAAAAAAIRJ}{\bkmkend AAAAAAAIRJ}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAAIRK}{\bkmkend AAAAAAAIRK}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAAIRL}{\bkmkend AAAAAAAIRL}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAAIRM}{\bkmkend AAAAAAAIRM}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAAIRN}{\bkmkend AAAAAAAIRN}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAIRO}{\bkmkend AAAAAAAIRO}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAAIRP}{\bkmkend AAAAAAAIRP}
00132     \par
{\bkmkstart AAAAAAAIRQ}{\bkmkend AAAAAAAIRQ}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAAIRR}{\bkmkend AAAAAAAIRR}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAAIRS}{\bkmkend AAAAAAAIRS}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAAIRT}{\bkmkend AAAAAAAIRT}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAAIRU}{\bkmkend AAAAAAAIRU}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAIRV}{\bkmkend AAAAAAAIRV}
00138     \par
{\bkmkstart AAAAAAAIRW}{\bkmkend AAAAAAAIRW}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAIRY}{\bkmkend AAAAAAAIRY}
00140     std::string result;\par
{\bkmkstart AAAAAAAIRZ}{\bkmkend AAAAAAAIRZ}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAISA}{\bkmkend AAAAAAAISA}
00142         result += c;\par
{\bkmkstart AAAAAAAISB}{\bkmkend AAAAAAAISB}
00143     \}\par
{\bkmkstart AAAAAAAISC}{\bkmkend AAAAAAAISC}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAISD}{\bkmkend AAAAAAAISD}
00145 \}\par
{\bkmkstart AAAAAAAISE}{\bkmkend AAAAAAAISE}
00146 \par
{\bkmkstart AAAAAAAISF}{\bkmkend AAAAAAAISF}
00151 TEST_F(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAAISG}{\bkmkend AAAAAAAISG}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAISH}{\bkmkend AAAAAAAISH}
00153     \par
{\bkmkstart AAAAAAAISJ}{\bkmkend AAAAAAAISJ}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAAISK}{\bkmkend AAAAAAAISK}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAAISL}{\bkmkend AAAAAAAISL}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAISM}{\bkmkend AAAAAAAISM}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAAISN}{\bkmkend AAAAAAAISN}
00158     \par
{\bkmkstart AAAAAAAISO}{\bkmkend AAAAAAAISO}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAAISP}{\bkmkend AAAAAAAISP}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAISQ}{\bkmkend AAAAAAAISQ}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAISS}{\bkmkend AAAAAAAISS}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAAIST}{\bkmkend AAAAAAAIST}
00163     \par
{\bkmkstart AAAAAAAISU}{\bkmkend AAAAAAAISU}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAAISV}{\bkmkend AAAAAAAISV}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAAISW}{\bkmkend AAAAAAAISW}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAAISX}{\bkmkend AAAAAAAISX}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAAISY}{\bkmkend AAAAAAAISY}
00168     \par
{\bkmkstart AAAAAAAISZ}{\bkmkend AAAAAAAISZ}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAAITA}{\bkmkend AAAAAAAITA}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAAITB}{\bkmkend AAAAAAAITB}
00171     EXPECT_EQ(sub4, {\cf22 " "});\par
{\bkmkstart AAAAAAAITC}{\bkmkend AAAAAAAITC}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAAITD}{\bkmkend AAAAAAAITD}
00173     \par
{\bkmkstart AAAAAAAITE}{\bkmkend AAAAAAAITE}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAAITG}{\bkmkend AAAAAAAITG}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAAITH}{\bkmkend AAAAAAAITH}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAITI}{\bkmkend AAAAAAAITI}
00177 \}\par
{\bkmkstart AAAAAAAITJ}{\bkmkend AAAAAAAITJ}
00178 \par
{\bkmkstart AAAAAAAITK}{\bkmkend AAAAAAAITK}
00183 TEST_F(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAAITL}{\bkmkend AAAAAAAITL}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAITM}{\bkmkend AAAAAAAITM}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAITN}{\bkmkend AAAAAAAITN}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAAITO}{\bkmkend AAAAAAAITO}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAAITQ}{\bkmkend AAAAAAAITQ}
00188     \par
{\bkmkstart AAAAAAAITR}{\bkmkend AAAAAAAITR}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAITS}{\bkmkend AAAAAAAITS}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAAITT}{\bkmkend AAAAAAAITT}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAAITU}{\bkmkend AAAAAAAITU}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAAITV}{\bkmkend AAAAAAAITV}
00193     \par
{\bkmkstart AAAAAAAITW}{\bkmkend AAAAAAAITW}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAITX}{\bkmkend AAAAAAAITX}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAAITY}{\bkmkend AAAAAAAITY}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAAITZ}{\bkmkend AAAAAAAITZ}
00197     \par
{\bkmkstart AAAAAAAIUA}{\bkmkend AAAAAAAIUA}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAIUB}{\bkmkend AAAAAAAIUB}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAAIUC}{\bkmkend AAAAAAAIUC}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAAIUD}{\bkmkend AAAAAAAIUD}
00201     \par
{\bkmkstart AAAAAAAIUE}{\bkmkend AAAAAAAIUE}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAIUF}{\bkmkend AAAAAAAIUF}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAAIUG}{\bkmkend AAAAAAAIUG}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAAIUH}{\bkmkend AAAAAAAIUH}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAAIUI}{\bkmkend AAAAAAAIUI}
00206     \par
{\bkmkstart AAAAAAAIUJ}{\bkmkend AAAAAAAIUJ}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAIUL}{\bkmkend AAAAAAAIUL}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAAIUN}{\bkmkend AAAAAAAIUN}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAAIUP}{\bkmkend AAAAAAAIUP}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAAIUR}{\bkmkend AAAAAAAIUR}
00211     \par
{\bkmkstart AAAAAAAIUT}{\bkmkend AAAAAAAIUT}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAAIUU}{\bkmkend AAAAAAAIUU}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIUV}{\bkmkend AAAAAAAIUV}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIUW}{\bkmkend AAAAAAAIUW}
00215     \par
{\bkmkstart AAAAAAAIUX}{\bkmkend AAAAAAAIUX}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAAIUY}{\bkmkend AAAAAAAIUY}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAAIUZ}{\bkmkend AAAAAAAIUZ}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAAIVA}{\bkmkend AAAAAAAIVA}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAAIVC}{\bkmkend AAAAAAAIVC}
00220 \}\par
{\bkmkstart AAAAAAAIVD}{\bkmkend AAAAAAAIVD}
00221 \par
{\bkmkstart AAAAAAAIVG}{\bkmkend AAAAAAAIVG}
00226 TEST_F(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAAIVJ}{\bkmkend AAAAAAAIVJ}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAAIVN}{\bkmkend AAAAAAAIVN}
00228     \par
{\bkmkstart AAAAAAAIVO}{\bkmkend AAAAAAAIVO}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAAIVP}{\bkmkend AAAAAAAIVP}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIVR}{\bkmkend AAAAAAAIVR}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIVU}{\bkmkend AAAAAAAIVU}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAIVW}{\bkmkend AAAAAAAIVW}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIVX}{\bkmkend AAAAAAAIVX}
00234     \par
{\bkmkstart AAAAAAAIVZ}{\bkmkend AAAAAAAIVZ}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAAIWA}{\bkmkend AAAAAAAIWA}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAIWC}{\bkmkend AAAAAAAIWC}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAIWD}{\bkmkend AAAAAAAIWD}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 21);\par
{\bkmkstart AAAAAAAIWF}{\bkmkend AAAAAAAIWF}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIWH}{\bkmkend AAAAAAAIWH}
00240     \par
{\bkmkstart AAAAAAAIWJ}{\bkmkend AAAAAAAIWJ}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAAIWK}{\bkmkend AAAAAAAIWK}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIWM}{\bkmkend AAAAAAAIWM}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAAIWO}{\bkmkend AAAAAAAIWO}
00244     \par
{\bkmkstart AAAAAAAIWP}{\bkmkend AAAAAAAIWP}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAAIWR}{\bkmkend AAAAAAAIWR}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAAIWS}{\bkmkend AAAAAAAIWS}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAAIWV}{\bkmkend AAAAAAAIWV}
00248     \par
{\bkmkstart AAAAAAAIWW}{\bkmkend AAAAAAAIWW}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAAIWZ}{\bkmkend AAAAAAAIWZ}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAAIXB}{\bkmkend AAAAAAAIXB}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 18);\par
{\bkmkstart AAAAAAAIXD}{\bkmkend AAAAAAAIXD}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIXF}{\bkmkend AAAAAAAIXF}
00253     \par
{\bkmkstart AAAAAAAIXH}{\bkmkend AAAAAAAIXH}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAAIXI}{\bkmkend AAAAAAAIXI}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAIXK}{\bkmkend AAAAAAAIXK}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAIXO}{\bkmkend AAAAAAAIXO}
00257     \par
{\bkmkstart AAAAAAAIXP}{\bkmkend AAAAAAAIXP}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAAIXR}{\bkmkend AAAAAAAIXR}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAIXS}{\bkmkend AAAAAAAIXS}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAIXV}{\bkmkend AAAAAAAIXV}
00261     \par
{\bkmkstart AAAAAAAIXW}{\bkmkend AAAAAAAIXW}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAAIXY}{\bkmkend AAAAAAAIXY}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAIYB}{\bkmkend AAAAAAAIYB}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAIYD}{\bkmkend AAAAAAAIYD}
00265     \par
{\bkmkstart AAAAAAAIYE}{\bkmkend AAAAAAAIYE}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAAIYG}{\bkmkend AAAAAAAIYG}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAIYH}{\bkmkend AAAAAAAIYH}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIYJ}{\bkmkend AAAAAAAIYJ}
00269 \}\par
{\bkmkstart AAAAAAAIYK}{\bkmkend AAAAAAAIYK}
00270 \par
{\bkmkstart AAAAAAAIYN}{\bkmkend AAAAAAAIYN}
00275 TEST_F(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAAIYQ}{\bkmkend AAAAAAAIYQ}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIYU}{\bkmkend AAAAAAAIYU}
00277     \par
{\bkmkstart AAAAAAAIYV}{\bkmkend AAAAAAAIYV}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAAIYW}{\bkmkend AAAAAAAIYW}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIYZ}{\bkmkend AAAAAAAIYZ}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIZB}{\bkmkend AAAAAAAIZB}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAIZD}{\bkmkend AAAAAAAIZD}
00282 \par
{\bkmkstart AAAAAAAIZE}{\bkmkend AAAAAAAIZE}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAAIZG}{\bkmkend AAAAAAAIZG}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAIZI}{\bkmkend AAAAAAAIZI}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAIZJ}{\bkmkend AAAAAAAIZJ}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAIZK}{\bkmkend AAAAAAAIZK}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIZN}{\bkmkend AAAAAAAIZN}
00288 \par
{\bkmkstart AAAAAAAIZP}{\bkmkend AAAAAAAIZP}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAAIZR}{\bkmkend AAAAAAAIZR}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIZU}{\bkmkend AAAAAAAIZU}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAAIZX}{\bkmkend AAAAAAAIZX}
00292 \par
{\bkmkstart AAAAAAAIZY}{\bkmkend AAAAAAAIZY}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAAIZZ}{\bkmkend AAAAAAAIZZ}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAJAB}{\bkmkend AAAAAAAJAB}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJAF}{\bkmkend AAAAAAAJAF}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAJBO}{\bkmkend AAAAAAAJBO}
00297 \par
{\bkmkstart AAAAAAAJBP}{\bkmkend AAAAAAAJBP}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAAJBR}{\bkmkend AAAAAAAJBR}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAJBT}{\bkmkend AAAAAAAJBT}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAJBV}{\bkmkend AAAAAAAJBV}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAJBW}{\bkmkend AAAAAAAJBW}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJBY}{\bkmkend AAAAAAAJBY}
00303 \par
{\bkmkstart AAAAAAAJBZ}{\bkmkend AAAAAAAJBZ}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAAJCA}{\bkmkend AAAAAAAJCA}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAAJCF}{\bkmkend AAAAAAAJCF}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAAJCH}{\bkmkend AAAAAAAJCH}
00307 \}\par
{\bkmkstart AAAAAAAJCI}{\bkmkend AAAAAAAJCI}
00308 \par
{\bkmkstart AAAAAAAJCK}{\bkmkend AAAAAAAJCK}
00313 TEST_F(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAAJCM}{\bkmkend AAAAAAAJCM}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAJCO}{\bkmkend AAAAAAAJCO}
00315     \par
{\bkmkstart AAAAAAAJCP}{\bkmkend AAAAAAAJCP}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAAJCQ}{\bkmkend AAAAAAAJCQ}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJCU}{\bkmkend AAAAAAAJCU}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJCV}{\bkmkend AAAAAAAJCV}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJCW}{\bkmkend AAAAAAAJCW}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJCX}{\bkmkend AAAAAAAJCX}
00321     \par
{\bkmkstart AAAAAAAJCY}{\bkmkend AAAAAAAJCY}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAAJDA}{\bkmkend AAAAAAAJDA}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDB}{\bkmkend AAAAAAAJDB}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDC}{\bkmkend AAAAAAAJDC}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDD}{\bkmkend AAAAAAAJDD}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDE}{\bkmkend AAAAAAAJDE}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDF}{\bkmkend AAAAAAAJDF}
00328     \par
{\bkmkstart AAAAAAAJDG}{\bkmkend AAAAAAAJDG}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAAJDH}{\bkmkend AAAAAAAJDH}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAAJDI}{\bkmkend AAAAAAAJDI}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDJ}{\bkmkend AAAAAAAJDJ}
00332     \par
{\bkmkstart AAAAAAAJDK}{\bkmkend AAAAAAAJDK}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAJDL}{\bkmkend AAAAAAAJDL}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAAJDM}{\bkmkend AAAAAAAJDM}
00335 \}\par
{\bkmkstart AAAAAAAJDN}{\bkmkend AAAAAAAJDN}
00336 \par
{\bkmkstart AAAAAAAJDO}{\bkmkend AAAAAAAJDO}
00341 TEST_F(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAAJDP}{\bkmkend AAAAAAAJDP}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAJDR}{\bkmkend AAAAAAAJDR}
00343     \par
{\bkmkstart AAAAAAAJDS}{\bkmkend AAAAAAAJDS}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAAJDT}{\bkmkend AAAAAAAJDT}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAJDU}{\bkmkend AAAAAAAJDU}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAJDV}{\bkmkend AAAAAAAJDV}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAJDW}{\bkmkend AAAAAAAJDW}
00348     \par
{\bkmkstart AAAAAAAJDX}{\bkmkend AAAAAAAJDX}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAAJDY}{\bkmkend AAAAAAAJDY}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAJDZ}{\bkmkend AAAAAAAJDZ}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAAJEC}{\bkmkend AAAAAAAJEC}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAAJED}{\bkmkend AAAAAAAJED}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAJEH}{\bkmkend AAAAAAAJEH}
00354     \par
{\bkmkstart AAAAAAAJEI}{\bkmkend AAAAAAAJEI}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAAJEJ}{\bkmkend AAAAAAAJEJ}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAJEM}{\bkmkend AAAAAAAJEM}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAJEO}{\bkmkend AAAAAAAJEO}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAAJEP}{\bkmkend AAAAAAAJEP}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAAJER}{\bkmkend AAAAAAAJER}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAAJET}{\bkmkend AAAAAAAJET}
00361     \par
{\bkmkstart AAAAAAAJEU}{\bkmkend AAAAAAAJEU}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAJEW}{\bkmkend AAAAAAAJEW}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAJEY}{\bkmkend AAAAAAAJEY}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAJEZ}{\bkmkend AAAAAAAJEZ}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAJFB}{\bkmkend AAAAAAAJFB}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAJFC}{\bkmkend AAAAAAAJFC}
00367 \}\par
{\bkmkstart AAAAAAAJFE}{\bkmkend AAAAAAAJFE}
00368 \par
{\bkmkstart AAAAAAAJFH}{\bkmkend AAAAAAAJFH}
00373 TEST_F(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAAJFI}{\bkmkend AAAAAAAJFI}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAJFK}{\bkmkend AAAAAAAJFK}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAJFM}{\bkmkend AAAAAAAJFM}
00376     \par
{\bkmkstart AAAAAAAJFN}{\bkmkend AAAAAAAJFN}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAAJFO}{\bkmkend AAAAAAAJFO}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAJFQ}{\bkmkend AAAAAAAJFQ}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAJFT}{\bkmkend AAAAAAAJFT}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAJFU}{\bkmkend AAAAAAAJFU}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAJFW}{\bkmkend AAAAAAAJFW}
00382     \par
{\bkmkstart AAAAAAAJFX}{\bkmkend AAAAAAAJFX}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAAJFY}{\bkmkend AAAAAAAJFY}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAAJFZ}{\bkmkend AAAAAAAJFZ}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAJGC}{\bkmkend AAAAAAAJGC}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAJGE}{\bkmkend AAAAAAAJGE}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAJGG}{\bkmkend AAAAAAAJGG}
00388     \par
{\bkmkstart AAAAAAAJGI}{\bkmkend AAAAAAAJGI}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAAJGJ}{\bkmkend AAAAAAAJGJ}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAAJGL}{\bkmkend AAAAAAAJGL}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAJGN}{\bkmkend AAAAAAAJGN}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAJGO}{\bkmkend AAAAAAAJGO}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAAJGQ}{\bkmkend AAAAAAAJGQ}
00394     \par
{\bkmkstart AAAAAAAJGR}{\bkmkend AAAAAAAJGR}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAAJGT}{\bkmkend AAAAAAAJGT}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAJGU}{\bkmkend AAAAAAAJGU}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAJGY}{\bkmkend AAAAAAAJGY}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAJHB}{\bkmkend AAAAAAAJHB}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAJHH}{\bkmkend AAAAAAAJHH}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAJHL}{\bkmkend AAAAAAAJHL}
00401 \}\par
{\bkmkstart AAAAAAAJHM}{\bkmkend AAAAAAAJHM}
00402 \par
{\bkmkstart AAAAAAAJHN}{\bkmkend AAAAAAAJHN}
00407 TEST_F(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAAJHP}{\bkmkend AAAAAAAJHP}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAJHR}{\bkmkend AAAAAAAJHR}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAJHT}{\bkmkend AAAAAAAJHT}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAAJHU}{\bkmkend AAAAAAAJHU}
00411     \par
{\bkmkstart AAAAAAAJHV}{\bkmkend AAAAAAAJHV}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAAJHX}{\bkmkend AAAAAAAJHX}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAJIC}{\bkmkend AAAAAAAJIC}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAJIH}{\bkmkend AAAAAAAJIH}
00415     \par
{\bkmkstart AAAAAAAJIJ}{\bkmkend AAAAAAAJIJ}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAAJIL}{\bkmkend AAAAAAAJIL}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAAJIN}{\bkmkend AAAAAAAJIN}
00418     \par
{\bkmkstart AAAAAAAJIP}{\bkmkend AAAAAAAJIP}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAAJIQ}{\bkmkend AAAAAAAJIQ}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAJIU}{\bkmkend AAAAAAAJIU}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAAJIY}{\bkmkend AAAAAAAJIY}
00422     \par
{\bkmkstart AAAAAAAJJA}{\bkmkend AAAAAAAJJA}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAAJJC}{\bkmkend AAAAAAAJJC}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAAJJG}{\bkmkend AAAAAAAJJG}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAAJJL}{\bkmkend AAAAAAAJJL}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAAJJM}{\bkmkend AAAAAAAJJM}
00427 \}\par
{\bkmkstart AAAAAAAJJP}{\bkmkend AAAAAAAJJP}
00428 \par
{\bkmkstart AAAAAAAJJQ}{\bkmkend AAAAAAAJJQ}
00433 TEST_F(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAAJJS}{\bkmkend AAAAAAAJJS}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAJJT}{\bkmkend AAAAAAAJJT}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAJJU}{\bkmkend AAAAAAAJJU}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAJJW}{\bkmkend AAAAAAAJJW}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAJJY}{\bkmkend AAAAAAAJJY}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAJKA}{\bkmkend AAAAAAAJKA}
00439     \par
{\bkmkstart AAAAAAAJKB}{\bkmkend AAAAAAAJKB}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAAJKD}{\bkmkend AAAAAAAJKD}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAAJKG}{\bkmkend AAAAAAAJKG}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAJKI}{\bkmkend AAAAAAAJKI}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAJKK}{\bkmkend AAAAAAAJKK}
00444     \par
{\bkmkstart AAAAAAAJKL}{\bkmkend AAAAAAAJKL}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAAJKO}{\bkmkend AAAAAAAJKO}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAJKQ}{\bkmkend AAAAAAAJKQ}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAJKT}{\bkmkend AAAAAAAJKT}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAJKW}{\bkmkend AAAAAAAJKW}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAJKZ}{\bkmkend AAAAAAAJKZ}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAJLB}{\bkmkend AAAAAAAJLB}
00451     \par
{\bkmkstart AAAAAAAJLC}{\bkmkend AAAAAAAJLC}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAAJLE}{\bkmkend AAAAAAAJLE}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAJLJ}{\bkmkend AAAAAAAJLJ}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAJLM}{\bkmkend AAAAAAAJLM}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAJLQ}{\bkmkend AAAAAAAJLQ}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAJLT}{\bkmkend AAAAAAAJLT}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAAJLX}{\bkmkend AAAAAAAJLX}
00458     \par
{\bkmkstart AAAAAAAJLZ}{\bkmkend AAAAAAAJLZ}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAAJMA}{\bkmkend AAAAAAAJMA}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAAJMD}{\bkmkend AAAAAAAJMD}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAAJMF}{\bkmkend AAAAAAAJMF}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAAJMI}{\bkmkend AAAAAAAJMI}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAAJMJ}{\bkmkend AAAAAAAJMJ}
00464 \}\par
{\bkmkstart AAAAAAAJML}{\bkmkend AAAAAAAJML}
00465 \par
{\bkmkstart AAAAAAAJMO}{\bkmkend AAAAAAAJMO}
00470 TEST_F(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAAJMR}{\bkmkend AAAAAAAJMR}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAAJMS}{\bkmkend AAAAAAAJMS}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAAJMW}{\bkmkend AAAAAAAJMW}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAJMX}{\bkmkend AAAAAAAJMX}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAAJNA}{\bkmkend AAAAAAAJNA}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAAJNB}{\bkmkend AAAAAAAJNB}
00476     \par
{\bkmkstart AAAAAAAJND}{\bkmkend AAAAAAAJND}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAAJNF}{\bkmkend AAAAAAAJNF}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAAJNH}{\bkmkend AAAAAAAJNH}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAJNI}{\bkmkend AAAAAAAJNI}
00480     \par
{\bkmkstart AAAAAAAJNJ}{\bkmkend AAAAAAAJNJ}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAAJNL}{\bkmkend AAAAAAAJNL}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAAJNM}{\bkmkend AAAAAAAJNM}
00483     \par
{\bkmkstart AAAAAAAJNN}{\bkmkend AAAAAAAJNN}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAAJNO}{\bkmkend AAAAAAAJNO}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAAJNP}{\bkmkend AAAAAAAJNP}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAAJNQ}{\bkmkend AAAAAAAJNQ}
00487     \par
{\bkmkstart AAAAAAAJNR}{\bkmkend AAAAAAAJNR}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAJNS}{\bkmkend AAAAAAAJNS}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAAJNT}{\bkmkend AAAAAAAJNT}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAAJNU}{\bkmkend AAAAAAAJNU}
00491     \par
{\bkmkstart AAAAAAAJNV}{\bkmkend AAAAAAAJNV}
00492     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAJNW}{\bkmkend AAAAAAAJNW}
00493     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAJNX}{\bkmkend AAAAAAAJNX}
00494     EXPECT_EQ(sv[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAJNY}{\bkmkend AAAAAAAJNY}
00495     EXPECT_EQ(sv[13], {\cf23 't'});\par
{\bkmkstart AAAAAAAJNZ}{\bkmkend AAAAAAAJNZ}
00496     EXPECT_EQ(prefix, {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAJOA}{\bkmkend AAAAAAAJOA}
00497     EXPECT_EQ(suffix, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAJOB}{\bkmkend AAAAAAAJOB}
00498     EXPECT_EQ(pos, 10);\par
{\bkmkstart AAAAAAAJOC}{\bkmkend AAAAAAAJOC}
00499 \}\par
{\bkmkstart AAAAAAAJOD}{\bkmkend AAAAAAAJOD}
00500 \par
{\bkmkstart AAAAAAAJOE}{\bkmkend AAAAAAAJOE}
00505 TEST_F(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAAJOF}{\bkmkend AAAAAAAJOF}
00506     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAJOG}{\bkmkend AAAAAAAJOG}
00507     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAJOH}{\bkmkend AAAAAAAJOH}
00508     \par
{\bkmkstart AAAAAAAJOI}{\bkmkend AAAAAAAJOI}
00509     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAAJOJ}{\bkmkend AAAAAAAJOJ}
00510     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAJOK}{\bkmkend AAAAAAAJOK}
00511     \par
{\bkmkstart AAAAAAAJOL}{\bkmkend AAAAAAAJOL}
00512     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAJOM}{\bkmkend AAAAAAAJOM}
00513     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAJON}{\bkmkend AAAAAAAJON}
00514         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAJOO}{\bkmkend AAAAAAAJOO}
00515         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAJOP}{\bkmkend AAAAAAAJOP}
00516         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAJOQ}{\bkmkend AAAAAAAJOQ}
00517         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAAJOR}{\bkmkend AAAAAAAJOR}
00518     \}\par
{\bkmkstart AAAAAAAJOS}{\bkmkend AAAAAAAJOS}
00519     \par
{\bkmkstart AAAAAAAJOT}{\bkmkend AAAAAAAJOT}
00520     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAJOU}{\bkmkend AAAAAAAJOU}
00521     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAJOV}{\bkmkend AAAAAAAJOV}
00522     \par
{\bkmkstart AAAAAAAJOW}{\bkmkend AAAAAAAJOW}
00523     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAAJOX}{\bkmkend AAAAAAAJOX}
00524     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAJOY}{\bkmkend AAAAAAAJOY}
00525 \}\par
{\bkmkstart AAAAAAAJOZ}{\bkmkend AAAAAAAJOZ}
00526 \par
{\bkmkstart AAAAAAAJPA}{\bkmkend AAAAAAAJPA}
00527 \} {\cf20 // namespace}\par
}
}