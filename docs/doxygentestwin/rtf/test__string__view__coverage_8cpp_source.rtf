{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAAEEF}
{\bkmkend AAAAAAAEEF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEG" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEEH}{\bkmkend AAAAAAAEEH}
00001 \par
{\bkmkstart AAAAAAAEEI}{\bkmkend AAAAAAAEEI}
00008 \par
{\bkmkstart AAAAAAAEEJ}{\bkmkend AAAAAAAEEJ}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAEEK}{\bkmkend AAAAAAAEEK}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAEEL}{\bkmkend AAAAAAAEEL}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAEEM}{\bkmkend AAAAAAAEEM}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAEEN}{\bkmkend AAAAAAAEEN}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAEEO}{\bkmkend AAAAAAAEEO}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAEEP}{\bkmkend AAAAAAAEEP}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAEEQ}{\bkmkend AAAAAAAEEQ}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAEER}{\bkmkend AAAAAAAEER}
00017 \par
{\bkmkstart AAAAAAAEES}{\bkmkend AAAAAAAEES}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAEET}{\bkmkend AAAAAAAEET}
00019 \par
{\bkmkstart AAAAAAAEEU}{\bkmkend AAAAAAAEEU}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAEEV}{\bkmkend AAAAAAAEEV}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAAEEW}{\bkmkend AAAAAAAEEW}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEEX}{\bkmkend AAAAAAAEEX}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAEEY}{\bkmkend AAAAAAAEEY}
00028     \}\par
{\bkmkstart AAAAAAAEEZ}{\bkmkend AAAAAAAEEZ}
00029     \par
{\bkmkstart AAAAAAAEFA}{\bkmkend AAAAAAAEFA}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEFB}{\bkmkend AAAAAAAEFB}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAEFC}{\bkmkend AAAAAAAEFC}
00032     \}\par
{\bkmkstart AAAAAAAEFD}{\bkmkend AAAAAAAEFD}
00033 \};\par
{\bkmkstart AAAAAAAEFE}{\bkmkend AAAAAAAEFE}
00034 \par
{\bkmkstart AAAAAAAEFF}{\bkmkend AAAAAAAEFF}
00039 TEST_F(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAAEFG}{\bkmkend AAAAAAAEFG}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAAEFH}{\bkmkend AAAAAAAEFH}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAEFI}{\bkmkend AAAAAAAEFI}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAAEFJ}{\bkmkend AAAAAAAEFJ}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAAEFK}{\bkmkend AAAAAAAEFK}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAAEFL}{\bkmkend AAAAAAAEFL}
00045     \par
{\bkmkstart AAAAAAAEFM}{\bkmkend AAAAAAAEFM}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAAEFN}{\bkmkend AAAAAAAEFN}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAAEFO}{\bkmkend AAAAAAAEFO}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAEFP}{\bkmkend AAAAAAAEFP}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAAEFQ}{\bkmkend AAAAAAAEFQ}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAAEFR}{\bkmkend AAAAAAAEFR}
00051     \par
{\bkmkstart AAAAAAAEFS}{\bkmkend AAAAAAAEFS}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAAEFT}{\bkmkend AAAAAAAEFT}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAAEFU}{\bkmkend AAAAAAAEFU}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAAEFV}{\bkmkend AAAAAAAEFV}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEFW}{\bkmkend AAAAAAAEFW}
00056     \par
{\bkmkstart AAAAAAAEFX}{\bkmkend AAAAAAAEFX}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAAEFY}{\bkmkend AAAAAAAEFY}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAAEFZ}{\bkmkend AAAAAAAEFZ}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAAEGA}{\bkmkend AAAAAAAEGA}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAAEGB}{\bkmkend AAAAAAAEGB}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAAEGC}{\bkmkend AAAAAAAEGC}
00062     \par
{\bkmkstart AAAAAAAEGD}{\bkmkend AAAAAAAEGD}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAAEGE}{\bkmkend AAAAAAAEGE}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAAEGF}{\bkmkend AAAAAAAEGF}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAAEGG}{\bkmkend AAAAAAAEGG}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAAEGH}{\bkmkend AAAAAAAEGH}
00067 \}\par
{\bkmkstart AAAAAAAEGI}{\bkmkend AAAAAAAEGI}
00068 \par
{\bkmkstart AAAAAAAEGJ}{\bkmkend AAAAAAAEGJ}
00073 TEST_F(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAAEGK}{\bkmkend AAAAAAAEGK}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEGL}{\bkmkend AAAAAAAEGL}
00075     \par
{\bkmkstart AAAAAAAEGM}{\bkmkend AAAAAAAEGM}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAEGN}{\bkmkend AAAAAAAEGN}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAEGO}{\bkmkend AAAAAAAEGO}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAAEGP}{\bkmkend AAAAAAAEGP}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAAEGQ}{\bkmkend AAAAAAAEGQ}
00080     \par
{\bkmkstart AAAAAAAEGR}{\bkmkend AAAAAAAEGR}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAAEGS}{\bkmkend AAAAAAAEGS}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAEGT}{\bkmkend AAAAAAAEGT}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAAEGU}{\bkmkend AAAAAAAEGU}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAAEGV}{\bkmkend AAAAAAAEGV}
00085     \par
{\bkmkstart AAAAAAAEGW}{\bkmkend AAAAAAAEGW}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAAEGX}{\bkmkend AAAAAAAEGX}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAEGZ}{\bkmkend AAAAAAAEGZ}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAEHB}{\bkmkend AAAAAAAEHB}
00089     \par
{\bkmkstart AAAAAAAEHC}{\bkmkend AAAAAAAEHC}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAAEHD}{\bkmkend AAAAAAAEHD}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAEHE}{\bkmkend AAAAAAAEHE}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAEHF}{\bkmkend AAAAAAAEHF}
00093     \par
{\bkmkstart AAAAAAAEHG}{\bkmkend AAAAAAAEHG}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAAEHH}{\bkmkend AAAAAAAEHH}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAEHI}{\bkmkend AAAAAAAEHI}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAEHJ}{\bkmkend AAAAAAAEHJ}
00097     \par
{\bkmkstart AAAAAAAEHK}{\bkmkend AAAAAAAEHK}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAAEHL}{\bkmkend AAAAAAAEHL}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAEHM}{\bkmkend AAAAAAAEHM}
00100     \par
{\bkmkstart AAAAAAAEHN}{\bkmkend AAAAAAAEHN}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEHO}{\bkmkend AAAAAAAEHO}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAEHP}{\bkmkend AAAAAAAEHP}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAEHQ}{\bkmkend AAAAAAAEHQ}
00104 \}\par
{\bkmkstart AAAAAAAEHR}{\bkmkend AAAAAAAEHR}
00105 \par
{\bkmkstart AAAAAAAEHS}{\bkmkend AAAAAAAEHS}
00110 TEST_F(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAAEHT}{\bkmkend AAAAAAAEHT}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAAEHU}{\bkmkend AAAAAAAEHU}
00112     \par
{\bkmkstart AAAAAAAEHV}{\bkmkend AAAAAAAEHV}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAAEHW}{\bkmkend AAAAAAAEHW}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAAEHX}{\bkmkend AAAAAAAEHX}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAAEHY}{\bkmkend AAAAAAAEHY}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAAEHZ}{\bkmkend AAAAAAAEHZ}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAEIA}{\bkmkend AAAAAAAEIA}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAAEIB}{\bkmkend AAAAAAAEIB}
00119     \par
{\bkmkstart AAAAAAAEIC}{\bkmkend AAAAAAAEIC}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAAEID}{\bkmkend AAAAAAAEID}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAAEIE}{\bkmkend AAAAAAAEIE}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAAEIF}{\bkmkend AAAAAAAEIF}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAAEIG}{\bkmkend AAAAAAAEIG}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAEIH}{\bkmkend AAAAAAAEIH}
00125     \par
{\bkmkstart AAAAAAAEII}{\bkmkend AAAAAAAEII}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAAEIJ}{\bkmkend AAAAAAAEIJ}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAAEIK}{\bkmkend AAAAAAAEIK}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAAEIM}{\bkmkend AAAAAAAEIM}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAAEIN}{\bkmkend AAAAAAAEIN}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAEIO}{\bkmkend AAAAAAAEIO}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAAEIQ}{\bkmkend AAAAAAAEIQ}
00132     \par
{\bkmkstart AAAAAAAEIS}{\bkmkend AAAAAAAEIS}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAAEIT}{\bkmkend AAAAAAAEIT}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAAEIU}{\bkmkend AAAAAAAEIU}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAAEIV}{\bkmkend AAAAAAAEIV}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAAEIW}{\bkmkend AAAAAAAEIW}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAEIX}{\bkmkend AAAAAAAEIX}
00138     \par
{\bkmkstart AAAAAAAEIY}{\bkmkend AAAAAAAEIY}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAEIZ}{\bkmkend AAAAAAAEIZ}
00140     std::string result;\par
{\bkmkstart AAAAAAAEJA}{\bkmkend AAAAAAAEJA}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAEJB}{\bkmkend AAAAAAAEJB}
00142         result += c;\par
{\bkmkstart AAAAAAAEJC}{\bkmkend AAAAAAAEJC}
00143     \}\par
{\bkmkstart AAAAAAAEJD}{\bkmkend AAAAAAAEJD}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAEJE}{\bkmkend AAAAAAAEJE}
00145 \}\par
{\bkmkstart AAAAAAAEJF}{\bkmkend AAAAAAAEJF}
00146 \par
{\bkmkstart AAAAAAAEJG}{\bkmkend AAAAAAAEJG}
00151 TEST_F(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAAEJI}{\bkmkend AAAAAAAEJI}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEJJ}{\bkmkend AAAAAAAEJJ}
00153     \par
{\bkmkstart AAAAAAAEJK}{\bkmkend AAAAAAAEJK}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAAEJL}{\bkmkend AAAAAAAEJL}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAAEJM}{\bkmkend AAAAAAAEJM}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAEJN}{\bkmkend AAAAAAAEJN}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAAEJO}{\bkmkend AAAAAAAEJO}
00158     \par
{\bkmkstart AAAAAAAEJP}{\bkmkend AAAAAAAEJP}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAAEJQ}{\bkmkend AAAAAAAEJQ}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAEJS}{\bkmkend AAAAAAAEJS}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEJT}{\bkmkend AAAAAAAEJT}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAAEJU}{\bkmkend AAAAAAAEJU}
00163     \par
{\bkmkstart AAAAAAAEJV}{\bkmkend AAAAAAAEJV}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAAEJW}{\bkmkend AAAAAAAEJW}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAAEJX}{\bkmkend AAAAAAAEJX}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAAEJY}{\bkmkend AAAAAAAEJY}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAAEKA}{\bkmkend AAAAAAAEKA}
00168     \par
{\bkmkstart AAAAAAAEKB}{\bkmkend AAAAAAAEKB}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAAEKC}{\bkmkend AAAAAAAEKC}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAAEKD}{\bkmkend AAAAAAAEKD}
00171     EXPECT_EQ(sub4, {\cf22 " "});\par
{\bkmkstart AAAAAAAEKE}{\bkmkend AAAAAAAEKE}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAAEKF}{\bkmkend AAAAAAAEKF}
00173     \par
{\bkmkstart AAAAAAAEKG}{\bkmkend AAAAAAAEKG}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAAEKH}{\bkmkend AAAAAAAEKH}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAAEKI}{\bkmkend AAAAAAAEKI}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAEKJ}{\bkmkend AAAAAAAEKJ}
00177 \}\par
{\bkmkstart AAAAAAAEKL}{\bkmkend AAAAAAAEKL}
00178 \par
{\bkmkstart AAAAAAAEKM}{\bkmkend AAAAAAAEKM}
00183 TEST_F(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAAEKN}{\bkmkend AAAAAAAEKN}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEKO}{\bkmkend AAAAAAAEKO}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEKS}{\bkmkend AAAAAAAEKS}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAAEKT}{\bkmkend AAAAAAAEKT}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAAEKW}{\bkmkend AAAAAAAEKW}
00188     \par
{\bkmkstart AAAAAAAEKX}{\bkmkend AAAAAAAEKX}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAEKZ}{\bkmkend AAAAAAAEKZ}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAAELC}{\bkmkend AAAAAAAELC}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAAELE}{\bkmkend AAAAAAAELE}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAAELF}{\bkmkend AAAAAAAELF}
00193     \par
{\bkmkstart AAAAAAAELG}{\bkmkend AAAAAAAELG}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAELH}{\bkmkend AAAAAAAELH}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAAELK}{\bkmkend AAAAAAAELK}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAAELL}{\bkmkend AAAAAAAELL}
00197     \par
{\bkmkstart AAAAAAAELM}{\bkmkend AAAAAAAELM}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAELN}{\bkmkend AAAAAAAELN}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAAELO}{\bkmkend AAAAAAAELO}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAAELR}{\bkmkend AAAAAAAELR}
00201     \par
{\bkmkstart AAAAAAAELS}{\bkmkend AAAAAAAELS}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAELT}{\bkmkend AAAAAAAELT}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAAELU}{\bkmkend AAAAAAAELU}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAAELX}{\bkmkend AAAAAAAELX}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAAELY}{\bkmkend AAAAAAAELY}
00206     \par
{\bkmkstart AAAAAAAELZ}{\bkmkend AAAAAAAELZ}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAEMA}{\bkmkend AAAAAAAEMA}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAAEMB}{\bkmkend AAAAAAAEMB}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAAEME}{\bkmkend AAAAAAAEME}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAAEMG}{\bkmkend AAAAAAAEMG}
00211     \par
{\bkmkstart AAAAAAAEMH}{\bkmkend AAAAAAAEMH}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAAEMJ}{\bkmkend AAAAAAAEMJ}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEMK}{\bkmkend AAAAAAAEMK}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEMM}{\bkmkend AAAAAAAEMM}
00215     \par
{\bkmkstart AAAAAAAEMN}{\bkmkend AAAAAAAEMN}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAAEMQ}{\bkmkend AAAAAAAEMQ}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAAEMR}{\bkmkend AAAAAAAEMR}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAAEMT}{\bkmkend AAAAAAAEMT}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAAEMU}{\bkmkend AAAAAAAEMU}
00220 \}\par
{\bkmkstart AAAAAAAEMV}{\bkmkend AAAAAAAEMV}
00221 \par
{\bkmkstart AAAAAAAEMX}{\bkmkend AAAAAAAEMX}
00226 TEST_F(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAAENB}{\bkmkend AAAAAAAENB}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAAEND}{\bkmkend AAAAAAAEND}
00228     \par
{\bkmkstart AAAAAAAENE}{\bkmkend AAAAAAAENE}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAAENF}{\bkmkend AAAAAAAENF}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAENH}{\bkmkend AAAAAAAENH}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAENJ}{\bkmkend AAAAAAAENJ}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAENM}{\bkmkend AAAAAAAENM}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAENN}{\bkmkend AAAAAAAENN}
00234     \par
{\bkmkstart AAAAAAAENP}{\bkmkend AAAAAAAENP}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAAENQ}{\bkmkend AAAAAAAENQ}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAENR}{\bkmkend AAAAAAAENR}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAENT}{\bkmkend AAAAAAAENT}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 21);\par
{\bkmkstart AAAAAAAENU}{\bkmkend AAAAAAAENU}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAENZ}{\bkmkend AAAAAAAENZ}
00240     \par
{\bkmkstart AAAAAAAEOA}{\bkmkend AAAAAAAEOA}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAAEOB}{\bkmkend AAAAAAAEOB}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEOD}{\bkmkend AAAAAAAEOD}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAAEOF}{\bkmkend AAAAAAAEOF}
00244     \par
{\bkmkstart AAAAAAAEOG}{\bkmkend AAAAAAAEOG}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAAEOH}{\bkmkend AAAAAAAEOH}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAAEOI}{\bkmkend AAAAAAAEOI}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAAEOK}{\bkmkend AAAAAAAEOK}
00248     \par
{\bkmkstart AAAAAAAEOM}{\bkmkend AAAAAAAEOM}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAAEON}{\bkmkend AAAAAAAEON}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAAEOP}{\bkmkend AAAAAAAEOP}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 18);\par
{\bkmkstart AAAAAAAEOS}{\bkmkend AAAAAAAEOS}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEOT}{\bkmkend AAAAAAAEOT}
00253     \par
{\bkmkstart AAAAAAAEOV}{\bkmkend AAAAAAAEOV}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAAEOW}{\bkmkend AAAAAAAEOW}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAEOY}{\bkmkend AAAAAAAEOY}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAEOZ}{\bkmkend AAAAAAAEOZ}
00257     \par
{\bkmkstart AAAAAAAEPA}{\bkmkend AAAAAAAEPA}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAAEPB}{\bkmkend AAAAAAAEPB}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAEPD}{\bkmkend AAAAAAAEPD}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAEPE}{\bkmkend AAAAAAAEPE}
00261     \par
{\bkmkstart AAAAAAAEPF}{\bkmkend AAAAAAAEPF}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAAEPG}{\bkmkend AAAAAAAEPG}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAEPH}{\bkmkend AAAAAAAEPH}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAEPK}{\bkmkend AAAAAAAEPK}
00265     \par
{\bkmkstart AAAAAAAEPM}{\bkmkend AAAAAAAEPM}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAAEPO}{\bkmkend AAAAAAAEPO}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAEPQ}{\bkmkend AAAAAAAEPQ}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEPT}{\bkmkend AAAAAAAEPT}
00269 \}\par
{\bkmkstart AAAAAAAEPU}{\bkmkend AAAAAAAEPU}
00270 \par
{\bkmkstart AAAAAAAEPW}{\bkmkend AAAAAAAEPW}
00275 TEST_F(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAAEPX}{\bkmkend AAAAAAAEPX}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEPY}{\bkmkend AAAAAAAEPY}
00277     \par
{\bkmkstart AAAAAAAEPZ}{\bkmkend AAAAAAAEPZ}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAAEQA}{\bkmkend AAAAAAAEQA}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEQB}{\bkmkend AAAAAAAEQB}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQC}{\bkmkend AAAAAAAEQC}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAEQD}{\bkmkend AAAAAAAEQD}
00282 \par
{\bkmkstart AAAAAAAEQF}{\bkmkend AAAAAAAEQF}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAAEQG}{\bkmkend AAAAAAAEQG}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAEQH}{\bkmkend AAAAAAAEQH}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAEQI}{\bkmkend AAAAAAAEQI}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAEQJ}{\bkmkend AAAAAAAEQJ}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQK}{\bkmkend AAAAAAAEQK}
00288 \par
{\bkmkstart AAAAAAAEQL}{\bkmkend AAAAAAAEQL}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAAEQM}{\bkmkend AAAAAAAEQM}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEQQ}{\bkmkend AAAAAAAEQQ}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAAEQR}{\bkmkend AAAAAAAEQR}
00292 \par
{\bkmkstart AAAAAAAEQS}{\bkmkend AAAAAAAEQS}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAAEQT}{\bkmkend AAAAAAAEQT}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAEQU}{\bkmkend AAAAAAAEQU}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQW}{\bkmkend AAAAAAAEQW}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAEQX}{\bkmkend AAAAAAAEQX}
00297 \par
{\bkmkstart AAAAAAAEQY}{\bkmkend AAAAAAAEQY}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAAEQZ}{\bkmkend AAAAAAAEQZ}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAERB}{\bkmkend AAAAAAAERB}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAERC}{\bkmkend AAAAAAAERC}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAERD}{\bkmkend AAAAAAAERD}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERE}{\bkmkend AAAAAAAERE}
00303 \par
{\bkmkstart AAAAAAAERG}{\bkmkend AAAAAAAERG}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAAERI}{\bkmkend AAAAAAAERI}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAAERK}{\bkmkend AAAAAAAERK}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAAERL}{\bkmkend AAAAAAAERL}
00307 \}\par
{\bkmkstart AAAAAAAERM}{\bkmkend AAAAAAAERM}
00308 \par
{\bkmkstart AAAAAAAERO}{\bkmkend AAAAAAAERO}
00313 TEST_F(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAAERR}{\bkmkend AAAAAAAERR}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAERT}{\bkmkend AAAAAAAERT}
00315     \par
{\bkmkstart AAAAAAAERV}{\bkmkend AAAAAAAERV}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAAERW}{\bkmkend AAAAAAAERW}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERZ}{\bkmkend AAAAAAAERZ}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESA}{\bkmkend AAAAAAAESA}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESE}{\bkmkend AAAAAAAESE}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESF}{\bkmkend AAAAAAAESF}
00321     \par
{\bkmkstart AAAAAAAESH}{\bkmkend AAAAAAAESH}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAAESI}{\bkmkend AAAAAAAESI}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESK}{\bkmkend AAAAAAAESK}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESN}{\bkmkend AAAAAAAESN}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESP}{\bkmkend AAAAAAAESP}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAESR}{\bkmkend AAAAAAAESR}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEST}{\bkmkend AAAAAAAEST}
00328     \par
{\bkmkstart AAAAAAAESV}{\bkmkend AAAAAAAESV}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAAESX}{\bkmkend AAAAAAAESX}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAAESZ}{\bkmkend AAAAAAAESZ}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAAETB}{\bkmkend AAAAAAAETB}
00332     \par
{\bkmkstart AAAAAAAETE}{\bkmkend AAAAAAAETE}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAETG}{\bkmkend AAAAAAAETG}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAAETI}{\bkmkend AAAAAAAETI}
00335 \}\par
{\bkmkstart AAAAAAAETJ}{\bkmkend AAAAAAAETJ}
00336 \par
{\bkmkstart AAAAAAAETL}{\bkmkend AAAAAAAETL}
00341 TEST_F(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAAETM}{\bkmkend AAAAAAAETM}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAETQ}{\bkmkend AAAAAAAETQ}
00343     \par
{\bkmkstart AAAAAAAETR}{\bkmkend AAAAAAAETR}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAAETS}{\bkmkend AAAAAAAETS}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAETT}{\bkmkend AAAAAAAETT}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAETU}{\bkmkend AAAAAAAETU}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAETW}{\bkmkend AAAAAAAETW}
00348     \par
{\bkmkstart AAAAAAAETX}{\bkmkend AAAAAAAETX}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAAEUA}{\bkmkend AAAAAAAEUA}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAEUC}{\bkmkend AAAAAAAEUC}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAAEUD}{\bkmkend AAAAAAAEUD}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAAEUE}{\bkmkend AAAAAAAEUE}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAEUG}{\bkmkend AAAAAAAEUG}
00354     \par
{\bkmkstart AAAAAAAEUH}{\bkmkend AAAAAAAEUH}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAAEUJ}{\bkmkend AAAAAAAEUJ}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAEUK}{\bkmkend AAAAAAAEUK}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAEUM}{\bkmkend AAAAAAAEUM}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAAEUN}{\bkmkend AAAAAAAEUN}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAAEUO}{\bkmkend AAAAAAAEUO}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAAEUP}{\bkmkend AAAAAAAEUP}
00361     \par
{\bkmkstart AAAAAAAEUQ}{\bkmkend AAAAAAAEUQ}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAEUT}{\bkmkend AAAAAAAEUT}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEUV}{\bkmkend AAAAAAAEUV}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAEUW}{\bkmkend AAAAAAAEUW}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAEUX}{\bkmkend AAAAAAAEUX}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAEUZ}{\bkmkend AAAAAAAEUZ}
00367 \}\par
{\bkmkstart AAAAAAAEVA}{\bkmkend AAAAAAAEVA}
00368 \par
{\bkmkstart AAAAAAAEVD}{\bkmkend AAAAAAAEVD}
00373 TEST_F(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAAEVF}{\bkmkend AAAAAAAEVF}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEVH}{\bkmkend AAAAAAAEVH}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAEVL}{\bkmkend AAAAAAAEVL}
00376     \par
{\bkmkstart AAAAAAAEVM}{\bkmkend AAAAAAAEVM}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAAEVN}{\bkmkend AAAAAAAEVN}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAEVP}{\bkmkend AAAAAAAEVP}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAEVT}{\bkmkend AAAAAAAEVT}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAEVV}{\bkmkend AAAAAAAEVV}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEVX}{\bkmkend AAAAAAAEVX}
00382     \par
{\bkmkstart AAAAAAAEVY}{\bkmkend AAAAAAAEVY}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAAEWA}{\bkmkend AAAAAAAEWA}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAAEWB}{\bkmkend AAAAAAAEWB}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAEWC}{\bkmkend AAAAAAAEWC}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAEWD}{\bkmkend AAAAAAAEWD}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEWF}{\bkmkend AAAAAAAEWF}
00388     \par
{\bkmkstart AAAAAAAEWG}{\bkmkend AAAAAAAEWG}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAAEWH}{\bkmkend AAAAAAAEWH}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAAEWI}{\bkmkend AAAAAAAEWI}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAEWL}{\bkmkend AAAAAAAEWL}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAEWN}{\bkmkend AAAAAAAEWN}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAAEWO}{\bkmkend AAAAAAAEWO}
00394     \par
{\bkmkstart AAAAAAAEWQ}{\bkmkend AAAAAAAEWQ}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAAEWS}{\bkmkend AAAAAAAEWS}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAEWU}{\bkmkend AAAAAAAEWU}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAEWV}{\bkmkend AAAAAAAEWV}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAEWY}{\bkmkend AAAAAAAEWY}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAEXB}{\bkmkend AAAAAAAEXB}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAEXE}{\bkmkend AAAAAAAEXE}
00401 \}\par
{\bkmkstart AAAAAAAEXG}{\bkmkend AAAAAAAEXG}
00402 \par
{\bkmkstart AAAAAAAEXI}{\bkmkend AAAAAAAEXI}
00407 TEST_F(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAAEXN}{\bkmkend AAAAAAAEXN}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEXO}{\bkmkend AAAAAAAEXO}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEXP}{\bkmkend AAAAAAAEXP}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAAEXQ}{\bkmkend AAAAAAAEXQ}
00411     \par
{\bkmkstart AAAAAAAEXR}{\bkmkend AAAAAAAEXR}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAAEXS}{\bkmkend AAAAAAAEXS}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAEXT}{\bkmkend AAAAAAAEXT}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAEXX}{\bkmkend AAAAAAAEXX}
00415     \par
{\bkmkstart AAAAAAAEXY}{\bkmkend AAAAAAAEXY}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAAEXZ}{\bkmkend AAAAAAAEXZ}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAAEYB}{\bkmkend AAAAAAAEYB}
00418     \par
{\bkmkstart AAAAAAAEYC}{\bkmkend AAAAAAAEYC}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAAEYE}{\bkmkend AAAAAAAEYE}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEYF}{\bkmkend AAAAAAAEYF}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAAEYI}{\bkmkend AAAAAAAEYI}
00422     \par
{\bkmkstart AAAAAAAEYK}{\bkmkend AAAAAAAEYK}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAAEYL}{\bkmkend AAAAAAAEYL}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAAEYN}{\bkmkend AAAAAAAEYN}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAAEYP}{\bkmkend AAAAAAAEYP}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAAEYR}{\bkmkend AAAAAAAEYR}
00427 \}\par
{\bkmkstart AAAAAAAEYT}{\bkmkend AAAAAAAEYT}
00428 \par
{\bkmkstart AAAAAAAEYU}{\bkmkend AAAAAAAEYU}
00433 TEST_F(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAAEYY}{\bkmkend AAAAAAAEYY}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAEYZ}{\bkmkend AAAAAAAEYZ}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEZB}{\bkmkend AAAAAAAEZB}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAEZE}{\bkmkend AAAAAAAEZE}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAEZG}{\bkmkend AAAAAAAEZG}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAEZH}{\bkmkend AAAAAAAEZH}
00439     \par
{\bkmkstart AAAAAAAEZJ}{\bkmkend AAAAAAAEZJ}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAAEZL}{\bkmkend AAAAAAAEZL}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAAEZN}{\bkmkend AAAAAAAEZN}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAEZP}{\bkmkend AAAAAAAEZP}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAEZR}{\bkmkend AAAAAAAEZR}
00444     \par
{\bkmkstart AAAAAAAEZS}{\bkmkend AAAAAAAEZS}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAAEZU}{\bkmkend AAAAAAAEZU}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAEZX}{\bkmkend AAAAAAAEZX}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAEZZ}{\bkmkend AAAAAAAEZZ}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAB}{\bkmkend AAAAAAAFAB}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAE}{\bkmkend AAAAAAAFAE}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAH}{\bkmkend AAAAAAAFAH}
00451     \par
{\bkmkstart AAAAAAAFAJ}{\bkmkend AAAAAAAFAJ}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAAFAL}{\bkmkend AAAAAAAFAL}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAN}{\bkmkend AAAAAAAFAN}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAFAQ}{\bkmkend AAAAAAAFAQ}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAFAS}{\bkmkend AAAAAAAFAS}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAT}{\bkmkend AAAAAAAFAT}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAU}{\bkmkend AAAAAAAFAU}
00458     \par
{\bkmkstart AAAAAAAFAW}{\bkmkend AAAAAAAFAW}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAAFAX}{\bkmkend AAAAAAAFAX}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAAFBA}{\bkmkend AAAAAAAFBA}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAAFBC}{\bkmkend AAAAAAAFBC}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAAFBE}{\bkmkend AAAAAAAFBE}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAAFBH}{\bkmkend AAAAAAAFBH}
00464 \}\par
{\bkmkstart AAAAAAAFBI}{\bkmkend AAAAAAAFBI}
00465 \par
{\bkmkstart AAAAAAAFBK}{\bkmkend AAAAAAAFBK}
00470 TEST_F(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAAFBN}{\bkmkend AAAAAAAFBN}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAAFBO}{\bkmkend AAAAAAAFBO}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAAFBS}{\bkmkend AAAAAAAFBS}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAFBU}{\bkmkend AAAAAAAFBU}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAAFBV}{\bkmkend AAAAAAAFBV}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAAFBX}{\bkmkend AAAAAAAFBX}
00476     \par
{\bkmkstart AAAAAAAFBY}{\bkmkend AAAAAAAFBY}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAAFCA}{\bkmkend AAAAAAAFCA}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAAFCD}{\bkmkend AAAAAAAFCD}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAFCG}{\bkmkend AAAAAAAFCG}
00480     \par
{\bkmkstart AAAAAAAFCI}{\bkmkend AAAAAAAFCI}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAAFCK}{\bkmkend AAAAAAAFCK}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAAFCM}{\bkmkend AAAAAAAFCM}
00483     \par
{\bkmkstart AAAAAAAFCO}{\bkmkend AAAAAAAFCO}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAAFCR}{\bkmkend AAAAAAAFCR}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAAFCS}{\bkmkend AAAAAAAFCS}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAAFCT}{\bkmkend AAAAAAAFCT}
00487     \par
{\bkmkstart AAAAAAAFCU}{\bkmkend AAAAAAAFCU}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAFCW}{\bkmkend AAAAAAAFCW}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAAFCZ}{\bkmkend AAAAAAAFCZ}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAAFDA}{\bkmkend AAAAAAAFDA}
00491     \par
{\bkmkstart AAAAAAAFDB}{\bkmkend AAAAAAAFDB}
00492     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAFDC}{\bkmkend AAAAAAAFDC}
00493     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAFDE}{\bkmkend AAAAAAAFDE}
00494     EXPECT_EQ(sv[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAFDF}{\bkmkend AAAAAAAFDF}
00495     EXPECT_EQ(sv[13], {\cf23 't'});\par
{\bkmkstart AAAAAAAFDH}{\bkmkend AAAAAAAFDH}
00496     EXPECT_EQ(prefix, {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAFDK}{\bkmkend AAAAAAAFDK}
00497     EXPECT_EQ(suffix, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAFDM}{\bkmkend AAAAAAAFDM}
00498     EXPECT_EQ(pos, 10);\par
{\bkmkstart AAAAAAAFDN}{\bkmkend AAAAAAAFDN}
00499 \}\par
{\bkmkstart AAAAAAAFDP}{\bkmkend AAAAAAAFDP}
00500 \par
{\bkmkstart AAAAAAAFDS}{\bkmkend AAAAAAAFDS}
00505 TEST_F(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAAFDU}{\bkmkend AAAAAAAFDU}
00506     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAFDY}{\bkmkend AAAAAAAFDY}
00507     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAFEA}{\bkmkend AAAAAAAFEA}
00508     \par
{\bkmkstart AAAAAAAFEC}{\bkmkend AAAAAAAFEC}
00509     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAAFEF}{\bkmkend AAAAAAAFEF}
00510     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFEH}{\bkmkend AAAAAAAFEH}
00511     \par
{\bkmkstart AAAAAAAFEI}{\bkmkend AAAAAAAFEI}
00512     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAFEJ}{\bkmkend AAAAAAAFEJ}
00513     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAFEO}{\bkmkend AAAAAAAFEO}
00514         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAFES}{\bkmkend AAAAAAAFES}
00515         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAFEU}{\bkmkend AAAAAAAFEU}
00516         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAFEY}{\bkmkend AAAAAAAFEY}
00517         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAAFFB}{\bkmkend AAAAAAAFFB}
00518     \}\par
{\bkmkstart AAAAAAAFFD}{\bkmkend AAAAAAAFFD}
00519     \par
{\bkmkstart AAAAAAAFFE}{\bkmkend AAAAAAAFFE}
00520     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFFJ}{\bkmkend AAAAAAAFFJ}
00521     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAFFN}{\bkmkend AAAAAAAFFN}
00522     \par
{\bkmkstart AAAAAAAFFP}{\bkmkend AAAAAAAFFP}
00523     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAAFFQ}{\bkmkend AAAAAAAFFQ}
00524     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAFFS}{\bkmkend AAAAAAAFFS}
00525 \}\par
{\bkmkstart AAAAAAAFFT}{\bkmkend AAAAAAAFFT}
00526 \par
{\bkmkstart AAAAAAAFFU}{\bkmkend AAAAAAAFFU}
00527 \} {\cf20 // namespace}\par
}
}