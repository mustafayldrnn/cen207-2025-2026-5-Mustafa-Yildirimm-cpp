{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAADAV}
{\bkmkend AAAAAAADAV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADAW" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADBT}{\bkmkend AAAAAAADBT}
00001 \par
{\bkmkstart AAAAAAADBU}{\bkmkend AAAAAAADBU}
00008 \par
{\bkmkstart AAAAAAADBV}{\bkmkend AAAAAAADBV}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAADBW}{\bkmkend AAAAAAADBW}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAADBX}{\bkmkend AAAAAAADBX}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAADBY}{\bkmkend AAAAAAADBY}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAADBZ}{\bkmkend AAAAAAADBZ}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAADCA}{\bkmkend AAAAAAADCA}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAADCB}{\bkmkend AAAAAAADCB}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAADCC}{\bkmkend AAAAAAADCC}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAADCD}{\bkmkend AAAAAAADCD}
00017 \par
{\bkmkstart AAAAAAADCE}{\bkmkend AAAAAAADCE}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAADCF}{\bkmkend AAAAAAADCF}
00019 \par
{\bkmkstart AAAAAAADCG}{\bkmkend AAAAAAADCG}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAADCH}{\bkmkend AAAAAAADCH}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAADCI}{\bkmkend AAAAAAADCI}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAADCJ}{\bkmkend AAAAAAADCJ}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAADCK}{\bkmkend AAAAAAADCK}
00028     \}\par
{\bkmkstart AAAAAAADCL}{\bkmkend AAAAAAADCL}
00029     \par
{\bkmkstart AAAAAAADCM}{\bkmkend AAAAAAADCM}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAADCN}{\bkmkend AAAAAAADCN}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAADCO}{\bkmkend AAAAAAADCO}
00032     \}\par
{\bkmkstart AAAAAAADCP}{\bkmkend AAAAAAADCP}
00033 \};\par
{\bkmkstart AAAAAAADCQ}{\bkmkend AAAAAAADCQ}
00034 \par
{\bkmkstart AAAAAAADCR}{\bkmkend AAAAAAADCR}
00039 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAADCU}{\bkmkend AAAAAAADCU}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAADCV}{\bkmkend AAAAAAADCV}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAADCW}{\bkmkend AAAAAAADCW}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAADCX}{\bkmkend AAAAAAADCX}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAADCY}{\bkmkend AAAAAAADCY}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAADCZ}{\bkmkend AAAAAAADCZ}
00045     \par
{\bkmkstart AAAAAAADDA}{\bkmkend AAAAAAADDA}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAADDB}{\bkmkend AAAAAAADDB}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAADDC}{\bkmkend AAAAAAADDC}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAADDD}{\bkmkend AAAAAAADDD}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAADDE}{\bkmkend AAAAAAADDE}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAADDF}{\bkmkend AAAAAAADDF}
00051     \par
{\bkmkstart AAAAAAADDG}{\bkmkend AAAAAAADDG}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAADDH}{\bkmkend AAAAAAADDH}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAADDI}{\bkmkend AAAAAAADDI}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAADDJ}{\bkmkend AAAAAAADDJ}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAADDK}{\bkmkend AAAAAAADDK}
00056     \par
{\bkmkstart AAAAAAADDL}{\bkmkend AAAAAAADDL}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAADDN}{\bkmkend AAAAAAADDN}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAADDO}{\bkmkend AAAAAAADDO}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAADDP}{\bkmkend AAAAAAADDP}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAADDQ}{\bkmkend AAAAAAADDQ}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAADDR}{\bkmkend AAAAAAADDR}
00062     \par
{\bkmkstart AAAAAAADDS}{\bkmkend AAAAAAADDS}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAADDU}{\bkmkend AAAAAAADDU}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAADDW}{\bkmkend AAAAAAADDW}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAADDX}{\bkmkend AAAAAAADDX}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAADDY}{\bkmkend AAAAAAADDY}
00067 \}\par
{\bkmkstart AAAAAAADDZ}{\bkmkend AAAAAAADDZ}
00068 \par
{\bkmkstart AAAAAAADEA}{\bkmkend AAAAAAADEA}
00073 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAADEB}{\bkmkend AAAAAAADEB}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADEC}{\bkmkend AAAAAAADEC}
00075     \par
{\bkmkstart AAAAAAADED}{\bkmkend AAAAAAADED}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAADEE}{\bkmkend AAAAAAADEE}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAADEF}{\bkmkend AAAAAAADEF}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAADEG}{\bkmkend AAAAAAADEG}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAADEH}{\bkmkend AAAAAAADEH}
00080     \par
{\bkmkstart AAAAAAADEI}{\bkmkend AAAAAAADEI}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAADEJ}{\bkmkend AAAAAAADEJ}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAADEL}{\bkmkend AAAAAAADEL}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAADEM}{\bkmkend AAAAAAADEM}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAADEN}{\bkmkend AAAAAAADEN}
00085     \par
{\bkmkstart AAAAAAADEO}{\bkmkend AAAAAAADEO}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAADEP}{\bkmkend AAAAAAADEP}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAADEQ}{\bkmkend AAAAAAADEQ}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAADER}{\bkmkend AAAAAAADER}
00089     \par
{\bkmkstart AAAAAAADES}{\bkmkend AAAAAAADES}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAADET}{\bkmkend AAAAAAADET}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAADEU}{\bkmkend AAAAAAADEU}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAADEV}{\bkmkend AAAAAAADEV}
00093     \par
{\bkmkstart AAAAAAADEX}{\bkmkend AAAAAAADEX}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAADEY}{\bkmkend AAAAAAADEY}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAADFA}{\bkmkend AAAAAAADFA}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAADFD}{\bkmkend AAAAAAADFD}
00097     \par
{\bkmkstart AAAAAAADFE}{\bkmkend AAAAAAADFE}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAADFF}{\bkmkend AAAAAAADFF}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAADFH}{\bkmkend AAAAAAADFH}
00100     \par
{\bkmkstart AAAAAAADFJ}{\bkmkend AAAAAAADFJ}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADFK}{\bkmkend AAAAAAADFK}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADFL}{\bkmkend AAAAAAADFL}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAADFN}{\bkmkend AAAAAAADFN}
00104 \}\par
{\bkmkstart AAAAAAADFO}{\bkmkend AAAAAAADFO}
00105 \par
{\bkmkstart AAAAAAADFP}{\bkmkend AAAAAAADFP}
00110 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAADFU}{\bkmkend AAAAAAADFU}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAADFV}{\bkmkend AAAAAAADFV}
00112     \par
{\bkmkstart AAAAAAADFX}{\bkmkend AAAAAAADFX}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAADFY}{\bkmkend AAAAAAADFY}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAADFZ}{\bkmkend AAAAAAADFZ}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAADGB}{\bkmkend AAAAAAADGB}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAADGE}{\bkmkend AAAAAAADGE}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAADGG}{\bkmkend AAAAAAADGG}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAADGJ}{\bkmkend AAAAAAADGJ}
00119     \par
{\bkmkstart AAAAAAADGK}{\bkmkend AAAAAAADGK}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAADGM}{\bkmkend AAAAAAADGM}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAADGP}{\bkmkend AAAAAAADGP}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAADGR}{\bkmkend AAAAAAADGR}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAADGX}{\bkmkend AAAAAAADGX}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAADHA}{\bkmkend AAAAAAADHA}
00125     \par
{\bkmkstart AAAAAAADHB}{\bkmkend AAAAAAADHB}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAADHC}{\bkmkend AAAAAAADHC}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAADHF}{\bkmkend AAAAAAADHF}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAADHH}{\bkmkend AAAAAAADHH}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAADHJ}{\bkmkend AAAAAAADHJ}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAADHL}{\bkmkend AAAAAAADHL}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAADHN}{\bkmkend AAAAAAADHN}
00132     \par
{\bkmkstart AAAAAAADHO}{\bkmkend AAAAAAADHO}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAADHQ}{\bkmkend AAAAAAADHQ}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAADHS}{\bkmkend AAAAAAADHS}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAADHU}{\bkmkend AAAAAAADHU}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAADHW}{\bkmkend AAAAAAADHW}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAADHX}{\bkmkend AAAAAAADHX}
00138     \par
{\bkmkstart AAAAAAADHZ}{\bkmkend AAAAAAADHZ}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAADIA}{\bkmkend AAAAAAADIA}
00140     std::string result;\par
{\bkmkstart AAAAAAADID}{\bkmkend AAAAAAADID}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAADIH}{\bkmkend AAAAAAADIH}
00142         result += c;\par
{\bkmkstart AAAAAAADII}{\bkmkend AAAAAAADII}
00143     \}\par
{\bkmkstart AAAAAAADIJ}{\bkmkend AAAAAAADIJ}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAADIK}{\bkmkend AAAAAAADIK}
00145 \}\par
{\bkmkstart AAAAAAADIL}{\bkmkend AAAAAAADIL}
00146 \par
{\bkmkstart AAAAAAADIO}{\bkmkend AAAAAAADIO}
00151 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAADIT}{\bkmkend AAAAAAADIT}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADIU}{\bkmkend AAAAAAADIU}
00153     \par
{\bkmkstart AAAAAAADIW}{\bkmkend AAAAAAADIW}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAADIZ}{\bkmkend AAAAAAADIZ}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAADJC}{\bkmkend AAAAAAADJC}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAADJD}{\bkmkend AAAAAAADJD}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAADJI}{\bkmkend AAAAAAADJI}
00158     \par
{\bkmkstart AAAAAAADJK}{\bkmkend AAAAAAADJK}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAADJL}{\bkmkend AAAAAAADJL}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAADJN}{\bkmkend AAAAAAADJN}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAADJQ}{\bkmkend AAAAAAADJQ}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAADJT}{\bkmkend AAAAAAADJT}
00163     \par
{\bkmkstart AAAAAAADJV}{\bkmkend AAAAAAADJV}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAADJW}{\bkmkend AAAAAAADJW}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAADJY}{\bkmkend AAAAAAADJY}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAADKB}{\bkmkend AAAAAAADKB}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAADKE}{\bkmkend AAAAAAADKE}
00168     \par
{\bkmkstart AAAAAAADKG}{\bkmkend AAAAAAADKG}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAADKJ}{\bkmkend AAAAAAADKJ}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAADKM}{\bkmkend AAAAAAADKM}
00171     EXPECT_EQ(sub4, {\cf22 " "});\par
{\bkmkstart AAAAAAADKP}{\bkmkend AAAAAAADKP}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAADKS}{\bkmkend AAAAAAADKS}
00173     \par
{\bkmkstart AAAAAAADKU}{\bkmkend AAAAAAADKU}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAADKW}{\bkmkend AAAAAAADKW}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAADKZ}{\bkmkend AAAAAAADKZ}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAADLA}{\bkmkend AAAAAAADLA}
00177 \}\par
{\bkmkstart AAAAAAADLB}{\bkmkend AAAAAAADLB}
00178 \par
{\bkmkstart AAAAAAADLC}{\bkmkend AAAAAAADLC}
00183 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAADLD}{\bkmkend AAAAAAADLD}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAADLE}{\bkmkend AAAAAAADLE}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAADLF}{\bkmkend AAAAAAADLF}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAADLI}{\bkmkend AAAAAAADLI}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAADLJ}{\bkmkend AAAAAAADLJ}
00188     \par
{\bkmkstart AAAAAAADLK}{\bkmkend AAAAAAADLK}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAADLL}{\bkmkend AAAAAAADLL}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAADLM}{\bkmkend AAAAAAADLM}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAADLO}{\bkmkend AAAAAAADLO}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAADLP}{\bkmkend AAAAAAADLP}
00193     \par
{\bkmkstart AAAAAAADLR}{\bkmkend AAAAAAADLR}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAADLT}{\bkmkend AAAAAAADLT}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAADLV}{\bkmkend AAAAAAADLV}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAADLX}{\bkmkend AAAAAAADLX}
00197     \par
{\bkmkstart AAAAAAADLY}{\bkmkend AAAAAAADLY}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAADLZ}{\bkmkend AAAAAAADLZ}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAADMA}{\bkmkend AAAAAAADMA}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAADMC}{\bkmkend AAAAAAADMC}
00201     \par
{\bkmkstart AAAAAAADMD}{\bkmkend AAAAAAADMD}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAADME}{\bkmkend AAAAAAADME}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAADMG}{\bkmkend AAAAAAADMG}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAADMI}{\bkmkend AAAAAAADMI}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAADMJ}{\bkmkend AAAAAAADMJ}
00206     \par
{\bkmkstart AAAAAAADMK}{\bkmkend AAAAAAADMK}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAADMM}{\bkmkend AAAAAAADMM}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAADMO}{\bkmkend AAAAAAADMO}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAADMP}{\bkmkend AAAAAAADMP}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAADMS}{\bkmkend AAAAAAADMS}
00211     \par
{\bkmkstart AAAAAAADMT}{\bkmkend AAAAAAADMT}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAADMU}{\bkmkend AAAAAAADMU}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAADMV}{\bkmkend AAAAAAADMV}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAADMX}{\bkmkend AAAAAAADMX}
00215     \par
{\bkmkstart AAAAAAADMY}{\bkmkend AAAAAAADMY}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAADNB}{\bkmkend AAAAAAADNB}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAADND}{\bkmkend AAAAAAADND}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAADNF}{\bkmkend AAAAAAADNF}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAADNH}{\bkmkend AAAAAAADNH}
00220 \}\par
{\bkmkstart AAAAAAADNI}{\bkmkend AAAAAAADNI}
00221 \par
{\bkmkstart AAAAAAADNJ}{\bkmkend AAAAAAADNJ}
00226 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAADNM}{\bkmkend AAAAAAADNM}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAADNP}{\bkmkend AAAAAAADNP}
00228     \par
{\bkmkstart AAAAAAADNQ}{\bkmkend AAAAAAADNQ}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAADNS}{\bkmkend AAAAAAADNS}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADNT}{\bkmkend AAAAAAADNT}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAADNU}{\bkmkend AAAAAAADNU}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAADNV}{\bkmkend AAAAAAADNV}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADNW}{\bkmkend AAAAAAADNW}
00234     \par
{\bkmkstart AAAAAAADNY}{\bkmkend AAAAAAADNY}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAADNZ}{\bkmkend AAAAAAADNZ}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAADOB}{\bkmkend AAAAAAADOB}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAADOC}{\bkmkend AAAAAAADOC}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 21);\par
{\bkmkstart AAAAAAADOD}{\bkmkend AAAAAAADOD}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADOE}{\bkmkend AAAAAAADOE}
00240     \par
{\bkmkstart AAAAAAADOF}{\bkmkend AAAAAAADOF}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAADOG}{\bkmkend AAAAAAADOG}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAADOH}{\bkmkend AAAAAAADOH}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAADOI}{\bkmkend AAAAAAADOI}
00244     \par
{\bkmkstart AAAAAAADOK}{\bkmkend AAAAAAADOK}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAADOM}{\bkmkend AAAAAAADOM}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAADOO}{\bkmkend AAAAAAADOO}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAADOQ}{\bkmkend AAAAAAADOQ}
00248     \par
{\bkmkstart AAAAAAADOR}{\bkmkend AAAAAAADOR}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAADOT}{\bkmkend AAAAAAADOT}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAADOU}{\bkmkend AAAAAAADOU}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 18);\par
{\bkmkstart AAAAAAADOW}{\bkmkend AAAAAAADOW}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADPA}{\bkmkend AAAAAAADPA}
00253     \par
{\bkmkstart AAAAAAADPB}{\bkmkend AAAAAAADPB}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAADPC}{\bkmkend AAAAAAADPC}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAADPE}{\bkmkend AAAAAAADPE}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAADPF}{\bkmkend AAAAAAADPF}
00257     \par
{\bkmkstart AAAAAAADPG}{\bkmkend AAAAAAADPG}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAADPH}{\bkmkend AAAAAAADPH}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAADPI}{\bkmkend AAAAAAADPI}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAADPJ}{\bkmkend AAAAAAADPJ}
00261     \par
{\bkmkstart AAAAAAADPK}{\bkmkend AAAAAAADPK}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAADPN}{\bkmkend AAAAAAADPN}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAADPQ}{\bkmkend AAAAAAADPQ}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAADPS}{\bkmkend AAAAAAADPS}
00265     \par
{\bkmkstart AAAAAAADPT}{\bkmkend AAAAAAADPT}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAADPU}{\bkmkend AAAAAAADPU}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAADPW}{\bkmkend AAAAAAADPW}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADPY}{\bkmkend AAAAAAADPY}
00269 \}\par
{\bkmkstart AAAAAAADQA}{\bkmkend AAAAAAADQA}
00270 \par
{\bkmkstart AAAAAAADQB}{\bkmkend AAAAAAADQB}
00275 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAADQG}{\bkmkend AAAAAAADQG}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADQI}{\bkmkend AAAAAAADQI}
00277     \par
{\bkmkstart AAAAAAADQK}{\bkmkend AAAAAAADQK}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAADQM}{\bkmkend AAAAAAADQM}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADQO}{\bkmkend AAAAAAADQO}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADQQ}{\bkmkend AAAAAAADQQ}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAADQS}{\bkmkend AAAAAAADQS}
00282 \par
{\bkmkstart AAAAAAADQT}{\bkmkend AAAAAAADQT}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAADQU}{\bkmkend AAAAAAADQU}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAADQW}{\bkmkend AAAAAAADQW}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAADQZ}{\bkmkend AAAAAAADQZ}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAADRB}{\bkmkend AAAAAAADRB}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADRD}{\bkmkend AAAAAAADRD}
00288 \par
{\bkmkstart AAAAAAADRE}{\bkmkend AAAAAAADRE}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAADRH}{\bkmkend AAAAAAADRH}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAADRJ}{\bkmkend AAAAAAADRJ}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAADRM}{\bkmkend AAAAAAADRM}
00292 \par
{\bkmkstart AAAAAAADRO}{\bkmkend AAAAAAADRO}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAADRQ}{\bkmkend AAAAAAADRQ}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAADRS}{\bkmkend AAAAAAADRS}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADRW}{\bkmkend AAAAAAADRW}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAADRX}{\bkmkend AAAAAAADRX}
00297 \par
{\bkmkstart AAAAAAADRY}{\bkmkend AAAAAAADRY}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAADRZ}{\bkmkend AAAAAAADRZ}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAADSB}{\bkmkend AAAAAAADSB}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAADSF}{\bkmkend AAAAAAADSF}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAADSG}{\bkmkend AAAAAAADSG}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADSH}{\bkmkend AAAAAAADSH}
00303 \par
{\bkmkstart AAAAAAADSI}{\bkmkend AAAAAAADSI}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAADSJ}{\bkmkend AAAAAAADSJ}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAADSK}{\bkmkend AAAAAAADSK}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAADSL}{\bkmkend AAAAAAADSL}
00307 \}\par
{\bkmkstart AAAAAAADSM}{\bkmkend AAAAAAADSM}
00308 \par
{\bkmkstart AAAAAAADSN}{\bkmkend AAAAAAADSN}
00313 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAADSO}{\bkmkend AAAAAAADSO}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADSP}{\bkmkend AAAAAAADSP}
00315     \par
{\bkmkstart AAAAAAADSQ}{\bkmkend AAAAAAADSQ}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAADSR}{\bkmkend AAAAAAADSR}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADSS}{\bkmkend AAAAAAADSS}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADST}{\bkmkend AAAAAAADST}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADSU}{\bkmkend AAAAAAADSU}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADSV}{\bkmkend AAAAAAADSV}
00321     \par
{\bkmkstart AAAAAAADSW}{\bkmkend AAAAAAADSW}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAADSX}{\bkmkend AAAAAAADSX}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADSY}{\bkmkend AAAAAAADSY}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADSZ}{\bkmkend AAAAAAADSZ}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADTA}{\bkmkend AAAAAAADTA}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADTB}{\bkmkend AAAAAAADTB}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADTC}{\bkmkend AAAAAAADTC}
00328     \par
{\bkmkstart AAAAAAADTD}{\bkmkend AAAAAAADTD}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAADTE}{\bkmkend AAAAAAADTE}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAADTF}{\bkmkend AAAAAAADTF}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAADTG}{\bkmkend AAAAAAADTG}
00332     \par
{\bkmkstart AAAAAAADTH}{\bkmkend AAAAAAADTH}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAADTI}{\bkmkend AAAAAAADTI}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAADTJ}{\bkmkend AAAAAAADTJ}
00335 \}\par
{\bkmkstart AAAAAAADTK}{\bkmkend AAAAAAADTK}
00336 \par
{\bkmkstart AAAAAAADTL}{\bkmkend AAAAAAADTL}
00341 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAADTM}{\bkmkend AAAAAAADTM}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADTN}{\bkmkend AAAAAAADTN}
00343     \par
{\bkmkstart AAAAAAADTO}{\bkmkend AAAAAAADTO}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAADTP}{\bkmkend AAAAAAADTP}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAADTQ}{\bkmkend AAAAAAADTQ}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAADTR}{\bkmkend AAAAAAADTR}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAADTS}{\bkmkend AAAAAAADTS}
00348     \par
{\bkmkstart AAAAAAADTT}{\bkmkend AAAAAAADTT}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAADTU}{\bkmkend AAAAAAADTU}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAADTV}{\bkmkend AAAAAAADTV}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAADTW}{\bkmkend AAAAAAADTW}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAADTX}{\bkmkend AAAAAAADTX}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAADTY}{\bkmkend AAAAAAADTY}
00354     \par
{\bkmkstart AAAAAAADTZ}{\bkmkend AAAAAAADTZ}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAADUA}{\bkmkend AAAAAAADUA}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAADUB}{\bkmkend AAAAAAADUB}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAADUC}{\bkmkend AAAAAAADUC}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAADUD}{\bkmkend AAAAAAADUD}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAADUE}{\bkmkend AAAAAAADUE}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAADUF}{\bkmkend AAAAAAADUF}
00361     \par
{\bkmkstart AAAAAAADUG}{\bkmkend AAAAAAADUG}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAADUH}{\bkmkend AAAAAAADUH}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADUI}{\bkmkend AAAAAAADUI}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAADUJ}{\bkmkend AAAAAAADUJ}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAADUK}{\bkmkend AAAAAAADUK}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADUL}{\bkmkend AAAAAAADUL}
00367 \}\par
{\bkmkstart AAAAAAADUM}{\bkmkend AAAAAAADUM}
00368 \par
{\bkmkstart AAAAAAADUN}{\bkmkend AAAAAAADUN}
00373 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAADUO}{\bkmkend AAAAAAADUO}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADUP}{\bkmkend AAAAAAADUP}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAADUQ}{\bkmkend AAAAAAADUQ}
00376     \par
{\bkmkstart AAAAAAADUR}{\bkmkend AAAAAAADUR}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAADUS}{\bkmkend AAAAAAADUS}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAADUT}{\bkmkend AAAAAAADUT}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAADUU}{\bkmkend AAAAAAADUU}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADUV}{\bkmkend AAAAAAADUV}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADUW}{\bkmkend AAAAAAADUW}
00382     \par
{\bkmkstart AAAAAAADUX}{\bkmkend AAAAAAADUX}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAADUY}{\bkmkend AAAAAAADUY}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAADUZ}{\bkmkend AAAAAAADUZ}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAADVA}{\bkmkend AAAAAAADVA}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADVB}{\bkmkend AAAAAAADVB}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAADVD}{\bkmkend AAAAAAADVD}
00388     \par
{\bkmkstart AAAAAAADVE}{\bkmkend AAAAAAADVE}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAADVG}{\bkmkend AAAAAAADVG}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAADVH}{\bkmkend AAAAAAADVH}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAADVI}{\bkmkend AAAAAAADVI}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADVJ}{\bkmkend AAAAAAADVJ}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAADVK}{\bkmkend AAAAAAADVK}
00394     \par
{\bkmkstart AAAAAAADVL}{\bkmkend AAAAAAADVL}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAADVM}{\bkmkend AAAAAAADVM}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAADVO}{\bkmkend AAAAAAADVO}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAADVP}{\bkmkend AAAAAAADVP}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAADVS}{\bkmkend AAAAAAADVS}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADVU}{\bkmkend AAAAAAADVU}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAADVX}{\bkmkend AAAAAAADVX}
00401 \}\par
{\bkmkstart AAAAAAADVY}{\bkmkend AAAAAAADVY}
00402 \par
{\bkmkstart AAAAAAADWA}{\bkmkend AAAAAAADWA}
00407 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAADWF}{\bkmkend AAAAAAADWF}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADWJ}{\bkmkend AAAAAAADWJ}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADWL}{\bkmkend AAAAAAADWL}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAADWN}{\bkmkend AAAAAAADWN}
00411     \par
{\bkmkstart AAAAAAADWO}{\bkmkend AAAAAAADWO}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAADWQ}{\bkmkend AAAAAAADWQ}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAADWU}{\bkmkend AAAAAAADWU}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAADWX}{\bkmkend AAAAAAADWX}
00415     \par
{\bkmkstart AAAAAAADWZ}{\bkmkend AAAAAAADWZ}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAADXB}{\bkmkend AAAAAAADXB}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAADXD}{\bkmkend AAAAAAADXD}
00418     \par
{\bkmkstart AAAAAAADXF}{\bkmkend AAAAAAADXF}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAADXG}{\bkmkend AAAAAAADXG}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADXI}{\bkmkend AAAAAAADXI}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAADXM}{\bkmkend AAAAAAADXM}
00422     \par
{\bkmkstart AAAAAAADXN}{\bkmkend AAAAAAADXN}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAADXP}{\bkmkend AAAAAAADXP}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAADXR}{\bkmkend AAAAAAADXR}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAADXT}{\bkmkend AAAAAAADXT}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAADXW}{\bkmkend AAAAAAADXW}
00427 \}\par
{\bkmkstart AAAAAAADXX}{\bkmkend AAAAAAADXX}
00428 \par
{\bkmkstart AAAAAAADXZ}{\bkmkend AAAAAAADXZ}
00433 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAADYE}{\bkmkend AAAAAAADYE}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAADYF}{\bkmkend AAAAAAADYF}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADYI}{\bkmkend AAAAAAADYI}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADYK}{\bkmkend AAAAAAADYK}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAADYN}{\bkmkend AAAAAAADYN}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAADYQ}{\bkmkend AAAAAAADYQ}
00439     \par
{\bkmkstart AAAAAAADYR}{\bkmkend AAAAAAADYR}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAADYT}{\bkmkend AAAAAAADYT}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAADYV}{\bkmkend AAAAAAADYV}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAADYX}{\bkmkend AAAAAAADYX}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAADYZ}{\bkmkend AAAAAAADYZ}
00444     \par
{\bkmkstart AAAAAAADZD}{\bkmkend AAAAAAADZD}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAADZF}{\bkmkend AAAAAAADZF}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAADZI}{\bkmkend AAAAAAADZI}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAADZJ}{\bkmkend AAAAAAADZJ}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAADZN}{\bkmkend AAAAAAADZN}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAADZP}{\bkmkend AAAAAAADZP}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAADZR}{\bkmkend AAAAAAADZR}
00451     \par
{\bkmkstart AAAAAAADZS}{\bkmkend AAAAAAADZS}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAADZU}{\bkmkend AAAAAAADZU}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAADZW}{\bkmkend AAAAAAADZW}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAADZY}{\bkmkend AAAAAAADZY}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAEAC}{\bkmkend AAAAAAAEAC}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAEAE}{\bkmkend AAAAAAAEAE}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAAEAF}{\bkmkend AAAAAAAEAF}
00458     \par
{\bkmkstart AAAAAAAEAG}{\bkmkend AAAAAAAEAG}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAAEAH}{\bkmkend AAAAAAAEAH}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAAEAI}{\bkmkend AAAAAAAEAI}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAAEAJ}{\bkmkend AAAAAAAEAJ}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAAEAK}{\bkmkend AAAAAAAEAK}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAAEAL}{\bkmkend AAAAAAAEAL}
00464 \}\par
{\bkmkstart AAAAAAAEAM}{\bkmkend AAAAAAAEAM}
00465 \par
{\bkmkstart AAAAAAAEAN}{\bkmkend AAAAAAAEAN}
00470 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAAEAO}{\bkmkend AAAAAAAEAO}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAAEAP}{\bkmkend AAAAAAAEAP}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAAEAQ}{\bkmkend AAAAAAAEAQ}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAEAR}{\bkmkend AAAAAAAEAR}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAAEAS}{\bkmkend AAAAAAAEAS}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAAEAT}{\bkmkend AAAAAAAEAT}
00476     \par
{\bkmkstart AAAAAAAEAU}{\bkmkend AAAAAAAEAU}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAAEAV}{\bkmkend AAAAAAAEAV}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAAEAW}{\bkmkend AAAAAAAEAW}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAEAX}{\bkmkend AAAAAAAEAX}
00480     \par
{\bkmkstart AAAAAAAEAY}{\bkmkend AAAAAAAEAY}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAAEAZ}{\bkmkend AAAAAAAEAZ}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAAEBA}{\bkmkend AAAAAAAEBA}
00483     \par
{\bkmkstart AAAAAAAEBB}{\bkmkend AAAAAAAEBB}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAAEBC}{\bkmkend AAAAAAAEBC}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAAEBD}{\bkmkend AAAAAAAEBD}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAAEBE}{\bkmkend AAAAAAAEBE}
00487     \par
{\bkmkstart AAAAAAAEBF}{\bkmkend AAAAAAAEBF}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAEBG}{\bkmkend AAAAAAAEBG}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAAEBH}{\bkmkend AAAAAAAEBH}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAAEBI}{\bkmkend AAAAAAAEBI}
00491     \par
{\bkmkstart AAAAAAAEBJ}{\bkmkend AAAAAAAEBJ}
00492     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAEBK}{\bkmkend AAAAAAAEBK}
00493     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAEBL}{\bkmkend AAAAAAAEBL}
00494     EXPECT_EQ(sv[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAEBM}{\bkmkend AAAAAAAEBM}
00495     EXPECT_EQ(sv[13], {\cf23 't'});\par
{\bkmkstart AAAAAAAEBN}{\bkmkend AAAAAAAEBN}
00496     EXPECT_EQ(prefix, {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAEBO}{\bkmkend AAAAAAAEBO}
00497     EXPECT_EQ(suffix, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAEBP}{\bkmkend AAAAAAAEBP}
00498     EXPECT_EQ(pos, 10);\par
{\bkmkstart AAAAAAAEBQ}{\bkmkend AAAAAAAEBQ}
00499 \}\par
{\bkmkstart AAAAAAAEBR}{\bkmkend AAAAAAAEBR}
00500 \par
{\bkmkstart AAAAAAAEBS}{\bkmkend AAAAAAAEBS}
00505 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAAEBT}{\bkmkend AAAAAAAEBT}
00506     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAEBU}{\bkmkend AAAAAAAEBU}
00507     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAEBV}{\bkmkend AAAAAAAEBV}
00508     \par
{\bkmkstart AAAAAAAEBW}{\bkmkend AAAAAAAEBW}
00509     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAAEBX}{\bkmkend AAAAAAAEBX}
00510     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAEBY}{\bkmkend AAAAAAAEBY}
00511     \par
{\bkmkstart AAAAAAAEBZ}{\bkmkend AAAAAAAEBZ}
00512     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAECA}{\bkmkend AAAAAAAECA}
00513     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAECB}{\bkmkend AAAAAAAECB}
00514         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAECC}{\bkmkend AAAAAAAECC}
00515         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAECD}{\bkmkend AAAAAAAECD}
00516         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAECE}{\bkmkend AAAAAAAECE}
00517         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAAECF}{\bkmkend AAAAAAAECF}
00518     \}\par
{\bkmkstart AAAAAAAECG}{\bkmkend AAAAAAAECG}
00519     \par
{\bkmkstart AAAAAAAECH}{\bkmkend AAAAAAAECH}
00520     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAECI}{\bkmkend AAAAAAAECI}
00521     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAECJ}{\bkmkend AAAAAAAECJ}
00522     \par
{\bkmkstart AAAAAAAECK}{\bkmkend AAAAAAAECK}
00523     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAAECL}{\bkmkend AAAAAAAECL}
00524     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAECM}{\bkmkend AAAAAAAECM}
00525 \}\par
{\bkmkstart AAAAAAAECN}{\bkmkend AAAAAAAECN}
00526 \par
{\bkmkstart AAAAAAAECR}{\bkmkend AAAAAAAECR}
00527 \} {\cf20 // namespace}\par
}
}