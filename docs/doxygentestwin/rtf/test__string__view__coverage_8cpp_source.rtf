{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAAHTO}
{\bkmkend AAAAAAAHTO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHTP" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAHVE}{\bkmkend AAAAAAAHVE}
00001 \par
{\bkmkstart AAAAAAAHVJ}{\bkmkend AAAAAAAHVJ}
00008 \par
{\bkmkstart AAAAAAAHVK}{\bkmkend AAAAAAAHVK}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAHVS}{\bkmkend AAAAAAAHVS}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAHVZ}{\bkmkend AAAAAAAHVZ}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAHWK}{\bkmkend AAAAAAAHWK}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAHWR}{\bkmkend AAAAAAAHWR}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAHXC}{\bkmkend AAAAAAAHXC}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAHXM}{\bkmkend AAAAAAAHXM}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAHXW}{\bkmkend AAAAAAAHXW}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAHXX}{\bkmkend AAAAAAAHXX}
00017 \par
{\bkmkstart AAAAAAAHXY}{\bkmkend AAAAAAAHXY}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAHXZ}{\bkmkend AAAAAAAHXZ}
00019 \par
{\bkmkstart AAAAAAAHYA}{\bkmkend AAAAAAAHYA}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAHYB}{\bkmkend AAAAAAAHYB}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAAHYC}{\bkmkend AAAAAAAHYC}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAHYD}{\bkmkend AAAAAAAHYD}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAHYE}{\bkmkend AAAAAAAHYE}
00028     \}\par
{\bkmkstart AAAAAAAHYF}{\bkmkend AAAAAAAHYF}
00029     \par
{\bkmkstart AAAAAAAHYG}{\bkmkend AAAAAAAHYG}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAHYH}{\bkmkend AAAAAAAHYH}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAHYI}{\bkmkend AAAAAAAHYI}
00032     \}\par
{\bkmkstart AAAAAAAHYJ}{\bkmkend AAAAAAAHYJ}
00033 \};\par
{\bkmkstart AAAAAAAHYK}{\bkmkend AAAAAAAHYK}
00034 \par
{\bkmkstart AAAAAAAHYL}{\bkmkend AAAAAAAHYL}
00039 TEST_F(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAAHYM}{\bkmkend AAAAAAAHYM}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAAHYN}{\bkmkend AAAAAAAHYN}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAHYO}{\bkmkend AAAAAAAHYO}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAAHYP}{\bkmkend AAAAAAAHYP}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAAHYQ}{\bkmkend AAAAAAAHYQ}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAAHYR}{\bkmkend AAAAAAAHYR}
00045     \par
{\bkmkstart AAAAAAAHYS}{\bkmkend AAAAAAAHYS}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAAHYT}{\bkmkend AAAAAAAHYT}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAAHYU}{\bkmkend AAAAAAAHYU}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAHYV}{\bkmkend AAAAAAAHYV}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAAHYW}{\bkmkend AAAAAAAHYW}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAAHYX}{\bkmkend AAAAAAAHYX}
00051     \par
{\bkmkstart AAAAAAAHYY}{\bkmkend AAAAAAAHYY}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAAHYZ}{\bkmkend AAAAAAAHYZ}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAAHZA}{\bkmkend AAAAAAAHZA}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAAHZB}{\bkmkend AAAAAAAHZB}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAHZC}{\bkmkend AAAAAAAHZC}
00056     \par
{\bkmkstart AAAAAAAHZD}{\bkmkend AAAAAAAHZD}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAAHZE}{\bkmkend AAAAAAAHZE}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAAHZF}{\bkmkend AAAAAAAHZF}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAAHZG}{\bkmkend AAAAAAAHZG}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAAHZH}{\bkmkend AAAAAAAHZH}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAAHZI}{\bkmkend AAAAAAAHZI}
00062     \par
{\bkmkstart AAAAAAAHZJ}{\bkmkend AAAAAAAHZJ}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAAHZK}{\bkmkend AAAAAAAHZK}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAAHZL}{\bkmkend AAAAAAAHZL}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAAHZM}{\bkmkend AAAAAAAHZM}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAAHZN}{\bkmkend AAAAAAAHZN}
00067 \}\par
{\bkmkstart AAAAAAAHZO}{\bkmkend AAAAAAAHZO}
00068 \par
{\bkmkstart AAAAAAAHZP}{\bkmkend AAAAAAAHZP}
00073 TEST_F(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAAHZQ}{\bkmkend AAAAAAAHZQ}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHZR}{\bkmkend AAAAAAAHZR}
00075     \par
{\bkmkstart AAAAAAAHZS}{\bkmkend AAAAAAAHZS}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAHZT}{\bkmkend AAAAAAAHZT}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAHZU}{\bkmkend AAAAAAAHZU}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAAHZV}{\bkmkend AAAAAAAHZV}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAAHZW}{\bkmkend AAAAAAAHZW}
00080     \par
{\bkmkstart AAAAAAAHZX}{\bkmkend AAAAAAAHZX}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAAHZY}{\bkmkend AAAAAAAHZY}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAHZZ}{\bkmkend AAAAAAAHZZ}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAAIAA}{\bkmkend AAAAAAAIAA}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAAIAB}{\bkmkend AAAAAAAIAB}
00085     \par
{\bkmkstart AAAAAAAIAC}{\bkmkend AAAAAAAIAC}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAAIAD}{\bkmkend AAAAAAAIAD}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAIAE}{\bkmkend AAAAAAAIAE}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAIAF}{\bkmkend AAAAAAAIAF}
00089     \par
{\bkmkstart AAAAAAAIAG}{\bkmkend AAAAAAAIAG}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAAIAH}{\bkmkend AAAAAAAIAH}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAIAI}{\bkmkend AAAAAAAIAI}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAIAJ}{\bkmkend AAAAAAAIAJ}
00093     \par
{\bkmkstart AAAAAAAIAK}{\bkmkend AAAAAAAIAK}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAAIAL}{\bkmkend AAAAAAAIAL}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAIAM}{\bkmkend AAAAAAAIAM}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAIAN}{\bkmkend AAAAAAAIAN}
00097     \par
{\bkmkstart AAAAAAAIAO}{\bkmkend AAAAAAAIAO}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAAIAP}{\bkmkend AAAAAAAIAP}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAIAQ}{\bkmkend AAAAAAAIAQ}
00100     \par
{\bkmkstart AAAAAAAIAR}{\bkmkend AAAAAAAIAR}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAIAS}{\bkmkend AAAAAAAIAS}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAIAT}{\bkmkend AAAAAAAIAT}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAIAU}{\bkmkend AAAAAAAIAU}
00104 \}\par
{\bkmkstart AAAAAAAIAV}{\bkmkend AAAAAAAIAV}
00105 \par
{\bkmkstart AAAAAAAIAW}{\bkmkend AAAAAAAIAW}
00110 TEST_F(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAAIAX}{\bkmkend AAAAAAAIAX}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAAIAY}{\bkmkend AAAAAAAIAY}
00112     \par
{\bkmkstart AAAAAAAIAZ}{\bkmkend AAAAAAAIAZ}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAAIBA}{\bkmkend AAAAAAAIBA}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAAIBB}{\bkmkend AAAAAAAIBB}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAAIBC}{\bkmkend AAAAAAAIBC}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAAIBD}{\bkmkend AAAAAAAIBD}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAIBE}{\bkmkend AAAAAAAIBE}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAAIBF}{\bkmkend AAAAAAAIBF}
00119     \par
{\bkmkstart AAAAAAAIBG}{\bkmkend AAAAAAAIBG}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAAIBH}{\bkmkend AAAAAAAIBH}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAAIBI}{\bkmkend AAAAAAAIBI}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAAIBJ}{\bkmkend AAAAAAAIBJ}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAAIBK}{\bkmkend AAAAAAAIBK}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAIBL}{\bkmkend AAAAAAAIBL}
00125     \par
{\bkmkstart AAAAAAAIBM}{\bkmkend AAAAAAAIBM}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAAIBN}{\bkmkend AAAAAAAIBN}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAAIBO}{\bkmkend AAAAAAAIBO}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAAIBP}{\bkmkend AAAAAAAIBP}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAAIBQ}{\bkmkend AAAAAAAIBQ}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAIBR}{\bkmkend AAAAAAAIBR}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAAIBS}{\bkmkend AAAAAAAIBS}
00132     \par
{\bkmkstart AAAAAAAIBT}{\bkmkend AAAAAAAIBT}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAAIBU}{\bkmkend AAAAAAAIBU}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAAIBV}{\bkmkend AAAAAAAIBV}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAAIBW}{\bkmkend AAAAAAAIBW}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAAIBX}{\bkmkend AAAAAAAIBX}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAIBY}{\bkmkend AAAAAAAIBY}
00138     \par
{\bkmkstart AAAAAAAIBZ}{\bkmkend AAAAAAAIBZ}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAICA}{\bkmkend AAAAAAAICA}
00140     std::string result;\par
{\bkmkstart AAAAAAAICB}{\bkmkend AAAAAAAICB}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAICC}{\bkmkend AAAAAAAICC}
00142         result += c;\par
{\bkmkstart AAAAAAAICD}{\bkmkend AAAAAAAICD}
00143     \}\par
{\bkmkstart AAAAAAAICE}{\bkmkend AAAAAAAICE}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAICF}{\bkmkend AAAAAAAICF}
00145 \}\par
{\bkmkstart AAAAAAAICG}{\bkmkend AAAAAAAICG}
00146 \par
{\bkmkstart AAAAAAAICH}{\bkmkend AAAAAAAICH}
00151 TEST_F(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAAICI}{\bkmkend AAAAAAAICI}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAICJ}{\bkmkend AAAAAAAICJ}
00153     \par
{\bkmkstart AAAAAAAICK}{\bkmkend AAAAAAAICK}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAAICL}{\bkmkend AAAAAAAICL}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAAICM}{\bkmkend AAAAAAAICM}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAICN}{\bkmkend AAAAAAAICN}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAAICO}{\bkmkend AAAAAAAICO}
00158     \par
{\bkmkstart AAAAAAAICP}{\bkmkend AAAAAAAICP}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAAICQ}{\bkmkend AAAAAAAICQ}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAICR}{\bkmkend AAAAAAAICR}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAICS}{\bkmkend AAAAAAAICS}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAAICT}{\bkmkend AAAAAAAICT}
00163     \par
{\bkmkstart AAAAAAAICU}{\bkmkend AAAAAAAICU}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAAICV}{\bkmkend AAAAAAAICV}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAAICW}{\bkmkend AAAAAAAICW}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAAICX}{\bkmkend AAAAAAAICX}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAAICY}{\bkmkend AAAAAAAICY}
00168     \par
{\bkmkstart AAAAAAAICZ}{\bkmkend AAAAAAAICZ}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAAIDA}{\bkmkend AAAAAAAIDA}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAAIDB}{\bkmkend AAAAAAAIDB}
00171     EXPECT_EQ(sub4, {\cf22 " "});\par
{\bkmkstart AAAAAAAIDC}{\bkmkend AAAAAAAIDC}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAAIDD}{\bkmkend AAAAAAAIDD}
00173     \par
{\bkmkstart AAAAAAAIDE}{\bkmkend AAAAAAAIDE}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAAIDF}{\bkmkend AAAAAAAIDF}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAAIDG}{\bkmkend AAAAAAAIDG}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAIDH}{\bkmkend AAAAAAAIDH}
00177 \}\par
{\bkmkstart AAAAAAAIDI}{\bkmkend AAAAAAAIDI}
00178 \par
{\bkmkstart AAAAAAAIDJ}{\bkmkend AAAAAAAIDJ}
00183 TEST_F(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAAIDK}{\bkmkend AAAAAAAIDK}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIDL}{\bkmkend AAAAAAAIDL}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIDM}{\bkmkend AAAAAAAIDM}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAAIDN}{\bkmkend AAAAAAAIDN}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAAIDO}{\bkmkend AAAAAAAIDO}
00188     \par
{\bkmkstart AAAAAAAIDP}{\bkmkend AAAAAAAIDP}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAIDQ}{\bkmkend AAAAAAAIDQ}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAAIDR}{\bkmkend AAAAAAAIDR}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAAIDS}{\bkmkend AAAAAAAIDS}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAAIDT}{\bkmkend AAAAAAAIDT}
00193     \par
{\bkmkstart AAAAAAAIDU}{\bkmkend AAAAAAAIDU}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAIDV}{\bkmkend AAAAAAAIDV}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAAIDW}{\bkmkend AAAAAAAIDW}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAAIDX}{\bkmkend AAAAAAAIDX}
00197     \par
{\bkmkstart AAAAAAAIDY}{\bkmkend AAAAAAAIDY}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAIDZ}{\bkmkend AAAAAAAIDZ}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAAIEA}{\bkmkend AAAAAAAIEA}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAAIEB}{\bkmkend AAAAAAAIEB}
00201     \par
{\bkmkstart AAAAAAAIEC}{\bkmkend AAAAAAAIEC}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAIED}{\bkmkend AAAAAAAIED}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAAIEE}{\bkmkend AAAAAAAIEE}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAAIEF}{\bkmkend AAAAAAAIEF}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAAIEG}{\bkmkend AAAAAAAIEG}
00206     \par
{\bkmkstart AAAAAAAIEH}{\bkmkend AAAAAAAIEH}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAIEI}{\bkmkend AAAAAAAIEI}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAAIEJ}{\bkmkend AAAAAAAIEJ}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAAIEK}{\bkmkend AAAAAAAIEK}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAAIEL}{\bkmkend AAAAAAAIEL}
00211     \par
{\bkmkstart AAAAAAAIEM}{\bkmkend AAAAAAAIEM}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAAIEN}{\bkmkend AAAAAAAIEN}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIEO}{\bkmkend AAAAAAAIEO}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAIEP}{\bkmkend AAAAAAAIEP}
00215     \par
{\bkmkstart AAAAAAAIEQ}{\bkmkend AAAAAAAIEQ}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAAIER}{\bkmkend AAAAAAAIER}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAAIES}{\bkmkend AAAAAAAIES}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAAIET}{\bkmkend AAAAAAAIET}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAAIEU}{\bkmkend AAAAAAAIEU}
00220 \}\par
{\bkmkstart AAAAAAAIEV}{\bkmkend AAAAAAAIEV}
00221 \par
{\bkmkstart AAAAAAAIEW}{\bkmkend AAAAAAAIEW}
00226 TEST_F(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAAIEX}{\bkmkend AAAAAAAIEX}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAAIEY}{\bkmkend AAAAAAAIEY}
00228     \par
{\bkmkstart AAAAAAAIEZ}{\bkmkend AAAAAAAIEZ}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAAIFA}{\bkmkend AAAAAAAIFA}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIFB}{\bkmkend AAAAAAAIFB}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAIFC}{\bkmkend AAAAAAAIFC}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAIFD}{\bkmkend AAAAAAAIFD}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIFE}{\bkmkend AAAAAAAIFE}
00234     \par
{\bkmkstart AAAAAAAIFF}{\bkmkend AAAAAAAIFF}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAAIFG}{\bkmkend AAAAAAAIFG}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAIFH}{\bkmkend AAAAAAAIFH}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAIFI}{\bkmkend AAAAAAAIFI}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 21);\par
{\bkmkstart AAAAAAAIFJ}{\bkmkend AAAAAAAIFJ}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIFK}{\bkmkend AAAAAAAIFK}
00240     \par
{\bkmkstart AAAAAAAIFL}{\bkmkend AAAAAAAIFL}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAAIFM}{\bkmkend AAAAAAAIFM}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIFN}{\bkmkend AAAAAAAIFN}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAAIFO}{\bkmkend AAAAAAAIFO}
00244     \par
{\bkmkstart AAAAAAAIFP}{\bkmkend AAAAAAAIFP}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAAIFQ}{\bkmkend AAAAAAAIFQ}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAAIFR}{\bkmkend AAAAAAAIFR}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAAIFS}{\bkmkend AAAAAAAIFS}
00248     \par
{\bkmkstart AAAAAAAIFT}{\bkmkend AAAAAAAIFT}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAAIFU}{\bkmkend AAAAAAAIFU}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAAIFV}{\bkmkend AAAAAAAIFV}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 18);\par
{\bkmkstart AAAAAAAIFW}{\bkmkend AAAAAAAIFW}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIFX}{\bkmkend AAAAAAAIFX}
00253     \par
{\bkmkstart AAAAAAAIFY}{\bkmkend AAAAAAAIFY}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAAIFZ}{\bkmkend AAAAAAAIFZ}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAIGA}{\bkmkend AAAAAAAIGA}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAIGB}{\bkmkend AAAAAAAIGB}
00257     \par
{\bkmkstart AAAAAAAIGC}{\bkmkend AAAAAAAIGC}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAAIGD}{\bkmkend AAAAAAAIGD}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAIGE}{\bkmkend AAAAAAAIGE}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAIGF}{\bkmkend AAAAAAAIGF}
00261     \par
{\bkmkstart AAAAAAAIGG}{\bkmkend AAAAAAAIGG}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAAIGH}{\bkmkend AAAAAAAIGH}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAIGI}{\bkmkend AAAAAAAIGI}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAIGJ}{\bkmkend AAAAAAAIGJ}
00265     \par
{\bkmkstart AAAAAAAIGK}{\bkmkend AAAAAAAIGK}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAAIGL}{\bkmkend AAAAAAAIGL}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAIGM}{\bkmkend AAAAAAAIGM}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIGN}{\bkmkend AAAAAAAIGN}
00269 \}\par
{\bkmkstart AAAAAAAIGO}{\bkmkend AAAAAAAIGO}
00270 \par
{\bkmkstart AAAAAAAIGP}{\bkmkend AAAAAAAIGP}
00275 TEST_F(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAAIGQ}{\bkmkend AAAAAAAIGQ}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIGR}{\bkmkend AAAAAAAIGR}
00277     \par
{\bkmkstart AAAAAAAIGS}{\bkmkend AAAAAAAIGS}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAAIGT}{\bkmkend AAAAAAAIGT}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAIGU}{\bkmkend AAAAAAAIGU}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIGV}{\bkmkend AAAAAAAIGV}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAIGW}{\bkmkend AAAAAAAIGW}
00282 \par
{\bkmkstart AAAAAAAIGX}{\bkmkend AAAAAAAIGX}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAAIGY}{\bkmkend AAAAAAAIGY}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAIGZ}{\bkmkend AAAAAAAIGZ}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAIHA}{\bkmkend AAAAAAAIHA}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAIHB}{\bkmkend AAAAAAAIHB}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIHC}{\bkmkend AAAAAAAIHC}
00288 \par
{\bkmkstart AAAAAAAIHD}{\bkmkend AAAAAAAIHD}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAAIHE}{\bkmkend AAAAAAAIHE}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIHF}{\bkmkend AAAAAAAIHF}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAAIHG}{\bkmkend AAAAAAAIHG}
00292 \par
{\bkmkstart AAAAAAAIHH}{\bkmkend AAAAAAAIHH}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAAIHI}{\bkmkend AAAAAAAIHI}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAIHJ}{\bkmkend AAAAAAAIHJ}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIHK}{\bkmkend AAAAAAAIHK}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAIHL}{\bkmkend AAAAAAAIHL}
00297 \par
{\bkmkstart AAAAAAAIHM}{\bkmkend AAAAAAAIHM}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAAIHN}{\bkmkend AAAAAAAIHN}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAIHO}{\bkmkend AAAAAAAIHO}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAIHP}{\bkmkend AAAAAAAIHP}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAIHQ}{\bkmkend AAAAAAAIHQ}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIHR}{\bkmkend AAAAAAAIHR}
00303 \par
{\bkmkstart AAAAAAAIHS}{\bkmkend AAAAAAAIHS}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAAIHT}{\bkmkend AAAAAAAIHT}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAAIHU}{\bkmkend AAAAAAAIHU}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAAIHV}{\bkmkend AAAAAAAIHV}
00307 \}\par
{\bkmkstart AAAAAAAIHW}{\bkmkend AAAAAAAIHW}
00308 \par
{\bkmkstart AAAAAAAIHX}{\bkmkend AAAAAAAIHX}
00313 TEST_F(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAAIHY}{\bkmkend AAAAAAAIHY}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIHZ}{\bkmkend AAAAAAAIHZ}
00315     \par
{\bkmkstart AAAAAAAIIA}{\bkmkend AAAAAAAIIA}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAAIIB}{\bkmkend AAAAAAAIIB}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIC}{\bkmkend AAAAAAAIIC}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIID}{\bkmkend AAAAAAAIID}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIE}{\bkmkend AAAAAAAIIE}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIF}{\bkmkend AAAAAAAIIF}
00321     \par
{\bkmkstart AAAAAAAIIG}{\bkmkend AAAAAAAIIG}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAAIIH}{\bkmkend AAAAAAAIIH}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIII}{\bkmkend AAAAAAAIII}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIJ}{\bkmkend AAAAAAAIIJ}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIK}{\bkmkend AAAAAAAIIK}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIL}{\bkmkend AAAAAAAIIL}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIM}{\bkmkend AAAAAAAIIM}
00328     \par
{\bkmkstart AAAAAAAIIN}{\bkmkend AAAAAAAIIN}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAAIIO}{\bkmkend AAAAAAAIIO}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAAIIP}{\bkmkend AAAAAAAIIP}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIQ}{\bkmkend AAAAAAAIIQ}
00332     \par
{\bkmkstart AAAAAAAIIR}{\bkmkend AAAAAAAIIR}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAIIS}{\bkmkend AAAAAAAIIS}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAAIIT}{\bkmkend AAAAAAAIIT}
00335 \}\par
{\bkmkstart AAAAAAAIIU}{\bkmkend AAAAAAAIIU}
00336 \par
{\bkmkstart AAAAAAAIIV}{\bkmkend AAAAAAAIIV}
00341 TEST_F(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAAIIW}{\bkmkend AAAAAAAIIW}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIIX}{\bkmkend AAAAAAAIIX}
00343     \par
{\bkmkstart AAAAAAAIIY}{\bkmkend AAAAAAAIIY}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAAIIZ}{\bkmkend AAAAAAAIIZ}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAIJA}{\bkmkend AAAAAAAIJA}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAIJB}{\bkmkend AAAAAAAIJB}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAIJC}{\bkmkend AAAAAAAIJC}
00348     \par
{\bkmkstart AAAAAAAIJD}{\bkmkend AAAAAAAIJD}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAAIJE}{\bkmkend AAAAAAAIJE}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAIJF}{\bkmkend AAAAAAAIJF}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAAIJG}{\bkmkend AAAAAAAIJG}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAAIJH}{\bkmkend AAAAAAAIJH}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAIJI}{\bkmkend AAAAAAAIJI}
00354     \par
{\bkmkstart AAAAAAAIJJ}{\bkmkend AAAAAAAIJJ}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAAIJK}{\bkmkend AAAAAAAIJK}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAIJL}{\bkmkend AAAAAAAIJL}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAIJM}{\bkmkend AAAAAAAIJM}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAAIJN}{\bkmkend AAAAAAAIJN}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAAIJO}{\bkmkend AAAAAAAIJO}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAAIJP}{\bkmkend AAAAAAAIJP}
00361     \par
{\bkmkstart AAAAAAAIJQ}{\bkmkend AAAAAAAIJQ}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAIJR}{\bkmkend AAAAAAAIJR}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAIJS}{\bkmkend AAAAAAAIJS}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAIJT}{\bkmkend AAAAAAAIJT}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAIJU}{\bkmkend AAAAAAAIJU}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAIJV}{\bkmkend AAAAAAAIJV}
00367 \}\par
{\bkmkstart AAAAAAAIJW}{\bkmkend AAAAAAAIJW}
00368 \par
{\bkmkstart AAAAAAAIJX}{\bkmkend AAAAAAAIJX}
00373 TEST_F(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAAIJY}{\bkmkend AAAAAAAIJY}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIJZ}{\bkmkend AAAAAAAIJZ}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAIKA}{\bkmkend AAAAAAAIKA}
00376     \par
{\bkmkstart AAAAAAAIKB}{\bkmkend AAAAAAAIKB}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAAIKC}{\bkmkend AAAAAAAIKC}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAIKD}{\bkmkend AAAAAAAIKD}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAIKE}{\bkmkend AAAAAAAIKE}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAIKF}{\bkmkend AAAAAAAIKF}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAIKG}{\bkmkend AAAAAAAIKG}
00382     \par
{\bkmkstart AAAAAAAIKH}{\bkmkend AAAAAAAIKH}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAAIKI}{\bkmkend AAAAAAAIKI}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAAIKJ}{\bkmkend AAAAAAAIKJ}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAIKK}{\bkmkend AAAAAAAIKK}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAIKL}{\bkmkend AAAAAAAIKL}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAIKM}{\bkmkend AAAAAAAIKM}
00388     \par
{\bkmkstart AAAAAAAIKN}{\bkmkend AAAAAAAIKN}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAAIKO}{\bkmkend AAAAAAAIKO}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAAIKP}{\bkmkend AAAAAAAIKP}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAIKQ}{\bkmkend AAAAAAAIKQ}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAIKR}{\bkmkend AAAAAAAIKR}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAAIKS}{\bkmkend AAAAAAAIKS}
00394     \par
{\bkmkstart AAAAAAAIKT}{\bkmkend AAAAAAAIKT}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAAIKU}{\bkmkend AAAAAAAIKU}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAIKV}{\bkmkend AAAAAAAIKV}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAIKW}{\bkmkend AAAAAAAIKW}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAIKX}{\bkmkend AAAAAAAIKX}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAIKY}{\bkmkend AAAAAAAIKY}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAIKZ}{\bkmkend AAAAAAAIKZ}
00401 \}\par
{\bkmkstart AAAAAAAILA}{\bkmkend AAAAAAAILA}
00402 \par
{\bkmkstart AAAAAAAILB}{\bkmkend AAAAAAAILB}
00407 TEST_F(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAAILC}{\bkmkend AAAAAAAILC}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAILD}{\bkmkend AAAAAAAILD}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAILE}{\bkmkend AAAAAAAILE}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAAILF}{\bkmkend AAAAAAAILF}
00411     \par
{\bkmkstart AAAAAAAILG}{\bkmkend AAAAAAAILG}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAAILH}{\bkmkend AAAAAAAILH}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAILI}{\bkmkend AAAAAAAILI}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAILJ}{\bkmkend AAAAAAAILJ}
00415     \par
{\bkmkstart AAAAAAAILK}{\bkmkend AAAAAAAILK}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAAILL}{\bkmkend AAAAAAAILL}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAAILM}{\bkmkend AAAAAAAILM}
00418     \par
{\bkmkstart AAAAAAAILN}{\bkmkend AAAAAAAILN}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAAILO}{\bkmkend AAAAAAAILO}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAILP}{\bkmkend AAAAAAAILP}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAAILQ}{\bkmkend AAAAAAAILQ}
00422     \par
{\bkmkstart AAAAAAAILR}{\bkmkend AAAAAAAILR}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAAILS}{\bkmkend AAAAAAAILS}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAAILT}{\bkmkend AAAAAAAILT}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAAILU}{\bkmkend AAAAAAAILU}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAAILV}{\bkmkend AAAAAAAILV}
00427 \}\par
{\bkmkstart AAAAAAAILW}{\bkmkend AAAAAAAILW}
00428 \par
{\bkmkstart AAAAAAAILX}{\bkmkend AAAAAAAILX}
00433 TEST_F(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAAILY}{\bkmkend AAAAAAAILY}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAILZ}{\bkmkend AAAAAAAILZ}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAIMA}{\bkmkend AAAAAAAIMA}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAIMB}{\bkmkend AAAAAAAIMB}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAIMC}{\bkmkend AAAAAAAIMC}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAIMD}{\bkmkend AAAAAAAIMD}
00439     \par
{\bkmkstart AAAAAAAIME}{\bkmkend AAAAAAAIME}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAAIMF}{\bkmkend AAAAAAAIMF}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAAIMG}{\bkmkend AAAAAAAIMG}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAIMH}{\bkmkend AAAAAAAIMH}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAIMI}{\bkmkend AAAAAAAIMI}
00444     \par
{\bkmkstart AAAAAAAIMJ}{\bkmkend AAAAAAAIMJ}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAAIMK}{\bkmkend AAAAAAAIMK}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAIML}{\bkmkend AAAAAAAIML}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAIMM}{\bkmkend AAAAAAAIMM}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAIMN}{\bkmkend AAAAAAAIMN}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAIMO}{\bkmkend AAAAAAAIMO}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAIMP}{\bkmkend AAAAAAAIMP}
00451     \par
{\bkmkstart AAAAAAAIMQ}{\bkmkend AAAAAAAIMQ}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAAIMR}{\bkmkend AAAAAAAIMR}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAIMS}{\bkmkend AAAAAAAIMS}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAIMT}{\bkmkend AAAAAAAIMT}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAIMU}{\bkmkend AAAAAAAIMU}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAIMV}{\bkmkend AAAAAAAIMV}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAAIMW}{\bkmkend AAAAAAAIMW}
00458     \par
{\bkmkstart AAAAAAAIMX}{\bkmkend AAAAAAAIMX}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAAIMY}{\bkmkend AAAAAAAIMY}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAAIMZ}{\bkmkend AAAAAAAIMZ}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAAINA}{\bkmkend AAAAAAAINA}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAAINB}{\bkmkend AAAAAAAINB}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAAINC}{\bkmkend AAAAAAAINC}
00464 \}\par
{\bkmkstart AAAAAAAIND}{\bkmkend AAAAAAAIND}
00465 \par
{\bkmkstart AAAAAAAINE}{\bkmkend AAAAAAAINE}
00470 TEST_F(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAAINF}{\bkmkend AAAAAAAINF}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAAING}{\bkmkend AAAAAAAING}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAAINH}{\bkmkend AAAAAAAINH}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAINI}{\bkmkend AAAAAAAINI}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAAINJ}{\bkmkend AAAAAAAINJ}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAAINK}{\bkmkend AAAAAAAINK}
00476     \par
{\bkmkstart AAAAAAAINL}{\bkmkend AAAAAAAINL}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAAINM}{\bkmkend AAAAAAAINM}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAAINN}{\bkmkend AAAAAAAINN}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAINO}{\bkmkend AAAAAAAINO}
00480     \par
{\bkmkstart AAAAAAAINP}{\bkmkend AAAAAAAINP}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAAINQ}{\bkmkend AAAAAAAINQ}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAAINR}{\bkmkend AAAAAAAINR}
00483     \par
{\bkmkstart AAAAAAAINS}{\bkmkend AAAAAAAINS}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAAINT}{\bkmkend AAAAAAAINT}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAAINU}{\bkmkend AAAAAAAINU}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAAINV}{\bkmkend AAAAAAAINV}
00487     \par
{\bkmkstart AAAAAAAINW}{\bkmkend AAAAAAAINW}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAINX}{\bkmkend AAAAAAAINX}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAAINY}{\bkmkend AAAAAAAINY}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAAINZ}{\bkmkend AAAAAAAINZ}
00491     \par
{\bkmkstart AAAAAAAIOA}{\bkmkend AAAAAAAIOA}
00492     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAIOB}{\bkmkend AAAAAAAIOB}
00493     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAIOC}{\bkmkend AAAAAAAIOC}
00494     EXPECT_EQ(sv[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAIOD}{\bkmkend AAAAAAAIOD}
00495     EXPECT_EQ(sv[13], {\cf23 't'});\par
{\bkmkstart AAAAAAAIOE}{\bkmkend AAAAAAAIOE}
00496     EXPECT_EQ(prefix, {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAIOF}{\bkmkend AAAAAAAIOF}
00497     EXPECT_EQ(suffix, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAIOG}{\bkmkend AAAAAAAIOG}
00498     EXPECT_EQ(pos, 10);\par
{\bkmkstart AAAAAAAIOH}{\bkmkend AAAAAAAIOH}
00499 \}\par
{\bkmkstart AAAAAAAIOI}{\bkmkend AAAAAAAIOI}
00500 \par
{\bkmkstart AAAAAAAIOJ}{\bkmkend AAAAAAAIOJ}
00505 TEST_F(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAAIOK}{\bkmkend AAAAAAAIOK}
00506     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAIOL}{\bkmkend AAAAAAAIOL}
00507     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAIOM}{\bkmkend AAAAAAAIOM}
00508     \par
{\bkmkstart AAAAAAAION}{\bkmkend AAAAAAAION}
00509     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAAIOO}{\bkmkend AAAAAAAIOO}
00510     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAIOP}{\bkmkend AAAAAAAIOP}
00511     \par
{\bkmkstart AAAAAAAIOQ}{\bkmkend AAAAAAAIOQ}
00512     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAIOR}{\bkmkend AAAAAAAIOR}
00513     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAIOS}{\bkmkend AAAAAAAIOS}
00514         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAIOT}{\bkmkend AAAAAAAIOT}
00515         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAIOU}{\bkmkend AAAAAAAIOU}
00516         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAIOV}{\bkmkend AAAAAAAIOV}
00517         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAAIOW}{\bkmkend AAAAAAAIOW}
00518     \}\par
{\bkmkstart AAAAAAAIOX}{\bkmkend AAAAAAAIOX}
00519     \par
{\bkmkstart AAAAAAAIOY}{\bkmkend AAAAAAAIOY}
00520     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAIOZ}{\bkmkend AAAAAAAIOZ}
00521     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAIPA}{\bkmkend AAAAAAAIPA}
00522     \par
{\bkmkstart AAAAAAAIPB}{\bkmkend AAAAAAAIPB}
00523     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAAIPC}{\bkmkend AAAAAAAIPC}
00524     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAIPD}{\bkmkend AAAAAAAIPD}
00525 \}\par
{\bkmkstart AAAAAAAIPE}{\bkmkend AAAAAAAIPE}
00526 \par
{\bkmkstart AAAAAAAIPF}{\bkmkend AAAAAAAIPF}
00527 \} {\cf20 // namespace}\par
}
}