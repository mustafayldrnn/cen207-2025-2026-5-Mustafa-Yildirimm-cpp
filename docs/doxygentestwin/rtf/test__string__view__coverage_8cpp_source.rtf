{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAAFLK}
{\bkmkend AAAAAAAFLK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFLL" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFLV}{\bkmkend AAAAAAAFLV}
00001 \par
{\bkmkstart AAAAAAAFLY}{\bkmkend AAAAAAAFLY}
00008 \par
{\bkmkstart AAAAAAAFLZ}{\bkmkend AAAAAAAFLZ}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAFMF}{\bkmkend AAAAAAAFMF}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAFMJ}{\bkmkend AAAAAAAFMJ}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAFMS}{\bkmkend AAAAAAAFMS}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAGDK}{\bkmkend AAAAAAAGDK}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAGDW}{\bkmkend AAAAAAAGDW}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAGEE}{\bkmkend AAAAAAAGEE}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAGEN}{\bkmkend AAAAAAAGEN}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAGET}{\bkmkend AAAAAAAGET}
00017 \par
{\bkmkstart AAAAAAAGEV}{\bkmkend AAAAAAAGEV}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAGEX}{\bkmkend AAAAAAAGEX}
00019 \par
{\bkmkstart AAAAAAAGEZ}{\bkmkend AAAAAAAGEZ}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAGFG}{\bkmkend AAAAAAAGFG}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAAGFI}{\bkmkend AAAAAAAGFI}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGFM}{\bkmkend AAAAAAAGFM}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAGFO}{\bkmkend AAAAAAAGFO}
00028     \}\par
{\bkmkstart AAAAAAAGFP}{\bkmkend AAAAAAAGFP}
00029     \par
{\bkmkstart AAAAAAAGFQ}{\bkmkend AAAAAAAGFQ}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGFV}{\bkmkend AAAAAAAGFV}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAGFX}{\bkmkend AAAAAAAGFX}
00032     \}\par
{\bkmkstart AAAAAAAGFY}{\bkmkend AAAAAAAGFY}
00033 \};\par
{\bkmkstart AAAAAAAGGA}{\bkmkend AAAAAAAGGA}
00034 \par
{\bkmkstart AAAAAAAGGD}{\bkmkend AAAAAAAGGD}
00039 TEST_F(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAAGGM}{\bkmkend AAAAAAAGGM}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAAGGO}{\bkmkend AAAAAAAGGO}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAGGR}{\bkmkend AAAAAAAGGR}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAAGGV}{\bkmkend AAAAAAAGGV}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAAGGX}{\bkmkend AAAAAAAGGX}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAAGGY}{\bkmkend AAAAAAAGGY}
00045     \par
{\bkmkstart AAAAAAAGHA}{\bkmkend AAAAAAAGHA}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAAGHC}{\bkmkend AAAAAAAGHC}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAAGHJ}{\bkmkend AAAAAAAGHJ}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAGHM}{\bkmkend AAAAAAAGHM}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAAGHO}{\bkmkend AAAAAAAGHO}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAAGHQ}{\bkmkend AAAAAAAGHQ}
00051     \par
{\bkmkstart AAAAAAAGHR}{\bkmkend AAAAAAAGHR}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAAGHS}{\bkmkend AAAAAAAGHS}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAAGHV}{\bkmkend AAAAAAAGHV}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAAGHX}{\bkmkend AAAAAAAGHX}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGHZ}{\bkmkend AAAAAAAGHZ}
00056     \par
{\bkmkstart AAAAAAAGIA}{\bkmkend AAAAAAAGIA}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAAGIC}{\bkmkend AAAAAAAGIC}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAAGID}{\bkmkend AAAAAAAGID}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAAGIF}{\bkmkend AAAAAAAGIF}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAAGII}{\bkmkend AAAAAAAGII}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAAGIK}{\bkmkend AAAAAAAGIK}
00062     \par
{\bkmkstart AAAAAAAGIL}{\bkmkend AAAAAAAGIL}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAAGIM}{\bkmkend AAAAAAAGIM}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAAGIP}{\bkmkend AAAAAAAGIP}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAAGIR}{\bkmkend AAAAAAAGIR}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAAGIT}{\bkmkend AAAAAAAGIT}
00067 \}\par
{\bkmkstart AAAAAAAGIU}{\bkmkend AAAAAAAGIU}
00068 \par
{\bkmkstart AAAAAAAGIW}{\bkmkend AAAAAAAGIW}
00073 TEST_F(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAAGIX}{\bkmkend AAAAAAAGIX}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGIY}{\bkmkend AAAAAAAGIY}
00075     \par
{\bkmkstart AAAAAAAGIZ}{\bkmkend AAAAAAAGIZ}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAGJA}{\bkmkend AAAAAAAGJA}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJC}{\bkmkend AAAAAAAGJC}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAAGJD}{\bkmkend AAAAAAAGJD}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAAGJF}{\bkmkend AAAAAAAGJF}
00080     \par
{\bkmkstart AAAAAAAGJG}{\bkmkend AAAAAAAGJG}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAAGJH}{\bkmkend AAAAAAAGJH}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJI}{\bkmkend AAAAAAAGJI}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAAGJJ}{\bkmkend AAAAAAAGJJ}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAAGJK}{\bkmkend AAAAAAAGJK}
00085     \par
{\bkmkstart AAAAAAAGJL}{\bkmkend AAAAAAAGJL}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAAGJM}{\bkmkend AAAAAAAGJM}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJN}{\bkmkend AAAAAAAGJN}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAGJO}{\bkmkend AAAAAAAGJO}
00089     \par
{\bkmkstart AAAAAAAGJP}{\bkmkend AAAAAAAGJP}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAAGJQ}{\bkmkend AAAAAAAGJQ}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAGJR}{\bkmkend AAAAAAAGJR}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJS}{\bkmkend AAAAAAAGJS}
00093     \par
{\bkmkstart AAAAAAAGJT}{\bkmkend AAAAAAAGJT}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAAGJU}{\bkmkend AAAAAAAGJU}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAGJV}{\bkmkend AAAAAAAGJV}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAGJW}{\bkmkend AAAAAAAGJW}
00097     \par
{\bkmkstart AAAAAAAGJX}{\bkmkend AAAAAAAGJX}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAAGJY}{\bkmkend AAAAAAAGJY}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAGJZ}{\bkmkend AAAAAAAGJZ}
00100     \par
{\bkmkstart AAAAAAAGKB}{\bkmkend AAAAAAAGKB}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGKC}{\bkmkend AAAAAAAGKC}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAGKD}{\bkmkend AAAAAAAGKD}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAGKE}{\bkmkend AAAAAAAGKE}
00104 \}\par
{\bkmkstart AAAAAAAGKF}{\bkmkend AAAAAAAGKF}
00105 \par
{\bkmkstart AAAAAAAGKG}{\bkmkend AAAAAAAGKG}
00110 TEST_F(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAAGKI}{\bkmkend AAAAAAAGKI}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAAGKJ}{\bkmkend AAAAAAAGKJ}
00112     \par
{\bkmkstart AAAAAAAGKK}{\bkmkend AAAAAAAGKK}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAAGKL}{\bkmkend AAAAAAAGKL}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAAGKN}{\bkmkend AAAAAAAGKN}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAAGKP}{\bkmkend AAAAAAAGKP}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAAGKQ}{\bkmkend AAAAAAAGKQ}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAGKR}{\bkmkend AAAAAAAGKR}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAAGKS}{\bkmkend AAAAAAAGKS}
00119     \par
{\bkmkstart AAAAAAAGKT}{\bkmkend AAAAAAAGKT}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAAGKV}{\bkmkend AAAAAAAGKV}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAAGKW}{\bkmkend AAAAAAAGKW}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAAGKX}{\bkmkend AAAAAAAGKX}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAAGKY}{\bkmkend AAAAAAAGKY}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAGLA}{\bkmkend AAAAAAAGLA}
00125     \par
{\bkmkstart AAAAAAAGLB}{\bkmkend AAAAAAAGLB}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAAGLC}{\bkmkend AAAAAAAGLC}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAAGLD}{\bkmkend AAAAAAAGLD}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAAGLF}{\bkmkend AAAAAAAGLF}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAAGLG}{\bkmkend AAAAAAAGLG}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAGLH}{\bkmkend AAAAAAAGLH}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAAGLJ}{\bkmkend AAAAAAAGLJ}
00132     \par
{\bkmkstart AAAAAAAGLK}{\bkmkend AAAAAAAGLK}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAAGLM}{\bkmkend AAAAAAAGLM}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAAGLP}{\bkmkend AAAAAAAGLP}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAAGLR}{\bkmkend AAAAAAAGLR}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAAGLU}{\bkmkend AAAAAAAGLU}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAGLV}{\bkmkend AAAAAAAGLV}
00138     \par
{\bkmkstart AAAAAAAGLW}{\bkmkend AAAAAAAGLW}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAGLX}{\bkmkend AAAAAAAGLX}
00140     std::string result;\par
{\bkmkstart AAAAAAAGLZ}{\bkmkend AAAAAAAGLZ}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAGMB}{\bkmkend AAAAAAAGMB}
00142         result += c;\par
{\bkmkstart AAAAAAAGMC}{\bkmkend AAAAAAAGMC}
00143     \}\par
{\bkmkstart AAAAAAAGMD}{\bkmkend AAAAAAAGMD}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAGMF}{\bkmkend AAAAAAAGMF}
00145 \}\par
{\bkmkstart AAAAAAAGMH}{\bkmkend AAAAAAAGMH}
00146 \par
{\bkmkstart AAAAAAAGMJ}{\bkmkend AAAAAAAGMJ}
00151 TEST_F(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAAGML}{\bkmkend AAAAAAAGML}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGMN}{\bkmkend AAAAAAAGMN}
00153     \par
{\bkmkstart AAAAAAAGMO}{\bkmkend AAAAAAAGMO}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAAGMP}{\bkmkend AAAAAAAGMP}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAAGMQ}{\bkmkend AAAAAAAGMQ}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAGMU}{\bkmkend AAAAAAAGMU}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAAGMV}{\bkmkend AAAAAAAGMV}
00158     \par
{\bkmkstart AAAAAAAGMW}{\bkmkend AAAAAAAGMW}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAAGMX}{\bkmkend AAAAAAAGMX}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAGNF}{\bkmkend AAAAAAAGNF}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGNJ}{\bkmkend AAAAAAAGNJ}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAAGNL}{\bkmkend AAAAAAAGNL}
00163     \par
{\bkmkstart AAAAAAAGNN}{\bkmkend AAAAAAAGNN}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAAGNP}{\bkmkend AAAAAAAGNP}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAAGNS}{\bkmkend AAAAAAAGNS}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAAGNT}{\bkmkend AAAAAAAGNT}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAAGNV}{\bkmkend AAAAAAAGNV}
00168     \par
{\bkmkstart AAAAAAAGNW}{\bkmkend AAAAAAAGNW}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAAGNY}{\bkmkend AAAAAAAGNY}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAAGOC}{\bkmkend AAAAAAAGOC}
00171     EXPECT_EQ(sub4, {\cf22 " "});\par
{\bkmkstart AAAAAAAGOD}{\bkmkend AAAAAAAGOD}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAAGOE}{\bkmkend AAAAAAAGOE}
00173     \par
{\bkmkstart AAAAAAAGOF}{\bkmkend AAAAAAAGOF}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAAGOG}{\bkmkend AAAAAAAGOG}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAAGOH}{\bkmkend AAAAAAAGOH}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAGOJ}{\bkmkend AAAAAAAGOJ}
00177 \}\par
{\bkmkstart AAAAAAAGOK}{\bkmkend AAAAAAAGOK}
00178 \par
{\bkmkstart AAAAAAAGOL}{\bkmkend AAAAAAAGOL}
00183 TEST_F(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAAGOP}{\bkmkend AAAAAAAGOP}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGOR}{\bkmkend AAAAAAAGOR}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGPI}{\bkmkend AAAAAAAGPI}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAAGPJ}{\bkmkend AAAAAAAGPJ}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAAGPK}{\bkmkend AAAAAAAGPK}
00188     \par
{\bkmkstart AAAAAAAGPL}{\bkmkend AAAAAAAGPL}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAGPM}{\bkmkend AAAAAAAGPM}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAAGPN}{\bkmkend AAAAAAAGPN}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAAGPO}{\bkmkend AAAAAAAGPO}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAAGPP}{\bkmkend AAAAAAAGPP}
00193     \par
{\bkmkstart AAAAAAAGPQ}{\bkmkend AAAAAAAGPQ}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAGPR}{\bkmkend AAAAAAAGPR}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAAGPS}{\bkmkend AAAAAAAGPS}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAAGPT}{\bkmkend AAAAAAAGPT}
00197     \par
{\bkmkstart AAAAAAAGPU}{\bkmkend AAAAAAAGPU}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAGPV}{\bkmkend AAAAAAAGPV}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAAGPW}{\bkmkend AAAAAAAGPW}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAAGPX}{\bkmkend AAAAAAAGPX}
00201     \par
{\bkmkstart AAAAAAAGPY}{\bkmkend AAAAAAAGPY}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAGPZ}{\bkmkend AAAAAAAGPZ}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAAGQA}{\bkmkend AAAAAAAGQA}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAAGQB}{\bkmkend AAAAAAAGQB}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAAGQE}{\bkmkend AAAAAAAGQE}
00206     \par
{\bkmkstart AAAAAAAGQG}{\bkmkend AAAAAAAGQG}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAGQH}{\bkmkend AAAAAAAGQH}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAAGQI}{\bkmkend AAAAAAAGQI}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAAGQJ}{\bkmkend AAAAAAAGQJ}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAAGQK}{\bkmkend AAAAAAAGQK}
00211     \par
{\bkmkstart AAAAAAAGQL}{\bkmkend AAAAAAAGQL}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAAGQM}{\bkmkend AAAAAAAGQM}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGQO}{\bkmkend AAAAAAAGQO}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGQP}{\bkmkend AAAAAAAGQP}
00215     \par
{\bkmkstart AAAAAAAGQQ}{\bkmkend AAAAAAAGQQ}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAAGQR}{\bkmkend AAAAAAAGQR}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAAGQS}{\bkmkend AAAAAAAGQS}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAAGQT}{\bkmkend AAAAAAAGQT}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAAGQU}{\bkmkend AAAAAAAGQU}
00220 \}\par
{\bkmkstart AAAAAAAGQV}{\bkmkend AAAAAAAGQV}
00221 \par
{\bkmkstart AAAAAAAGQW}{\bkmkend AAAAAAAGQW}
00226 TEST_F(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAAGQX}{\bkmkend AAAAAAAGQX}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAAGQZ}{\bkmkend AAAAAAAGQZ}
00228     \par
{\bkmkstart AAAAAAAGRA}{\bkmkend AAAAAAAGRA}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAAGRB}{\bkmkend AAAAAAAGRB}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGRD}{\bkmkend AAAAAAAGRD}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAGRE}{\bkmkend AAAAAAAGRE}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAGRH}{\bkmkend AAAAAAAGRH}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGRJ}{\bkmkend AAAAAAAGRJ}
00234     \par
{\bkmkstart AAAAAAAGRK}{\bkmkend AAAAAAAGRK}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAAGRL}{\bkmkend AAAAAAAGRL}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGRM}{\bkmkend AAAAAAAGRM}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAGRO}{\bkmkend AAAAAAAGRO}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 21);\par
{\bkmkstart AAAAAAAGRQ}{\bkmkend AAAAAAAGRQ}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGRT}{\bkmkend AAAAAAAGRT}
00240     \par
{\bkmkstart AAAAAAAGRU}{\bkmkend AAAAAAAGRU}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAAGRV}{\bkmkend AAAAAAAGRV}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGRY}{\bkmkend AAAAAAAGRY}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAAGSB}{\bkmkend AAAAAAAGSB}
00244     \par
{\bkmkstart AAAAAAAGSC}{\bkmkend AAAAAAAGSC}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAAGSD}{\bkmkend AAAAAAAGSD}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAAGSF}{\bkmkend AAAAAAAGSF}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAAGSJ}{\bkmkend AAAAAAAGSJ}
00248     \par
{\bkmkstart AAAAAAAGSK}{\bkmkend AAAAAAAGSK}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAAGSM}{\bkmkend AAAAAAAGSM}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAAGSN}{\bkmkend AAAAAAAGSN}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 18);\par
{\bkmkstart AAAAAAAGSP}{\bkmkend AAAAAAAGSP}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGTK}{\bkmkend AAAAAAAGTK}
00253     \par
{\bkmkstart AAAAAAAGTL}{\bkmkend AAAAAAAGTL}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAAGTM}{\bkmkend AAAAAAAGTM}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAGTN}{\bkmkend AAAAAAAGTN}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAGTO}{\bkmkend AAAAAAAGTO}
00257     \par
{\bkmkstart AAAAAAAGTP}{\bkmkend AAAAAAAGTP}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAAGTQ}{\bkmkend AAAAAAAGTQ}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAGTT}{\bkmkend AAAAAAAGTT}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAGTW}{\bkmkend AAAAAAAGTW}
00261     \par
{\bkmkstart AAAAAAAGTX}{\bkmkend AAAAAAAGTX}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAAGTZ}{\bkmkend AAAAAAAGTZ}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAGUB}{\bkmkend AAAAAAAGUB}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAGUE}{\bkmkend AAAAAAAGUE}
00265     \par
{\bkmkstart AAAAAAAGUG}{\bkmkend AAAAAAAGUG}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAAGUH}{\bkmkend AAAAAAAGUH}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAGUJ}{\bkmkend AAAAAAAGUJ}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGUM}{\bkmkend AAAAAAAGUM}
00269 \}\par
{\bkmkstart AAAAAAAGUN}{\bkmkend AAAAAAAGUN}
00270 \par
{\bkmkstart AAAAAAAGUO}{\bkmkend AAAAAAAGUO}
00275 TEST_F(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAAGUP}{\bkmkend AAAAAAAGUP}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGUQ}{\bkmkend AAAAAAAGUQ}
00277     \par
{\bkmkstart AAAAAAAGUR}{\bkmkend AAAAAAAGUR}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAAGUS}{\bkmkend AAAAAAAGUS}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGUT}{\bkmkend AAAAAAAGUT}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGUU}{\bkmkend AAAAAAAGUU}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAGUV}{\bkmkend AAAAAAAGUV}
00282 \par
{\bkmkstart AAAAAAAGUW}{\bkmkend AAAAAAAGUW}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAAGUX}{\bkmkend AAAAAAAGUX}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGUY}{\bkmkend AAAAAAAGUY}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAGUZ}{\bkmkend AAAAAAAGUZ}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAGVA}{\bkmkend AAAAAAAGVA}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGVB}{\bkmkend AAAAAAAGVB}
00288 \par
{\bkmkstart AAAAAAAGVC}{\bkmkend AAAAAAAGVC}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAAGVD}{\bkmkend AAAAAAAGVD}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGVE}{\bkmkend AAAAAAAGVE}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAAGVF}{\bkmkend AAAAAAAGVF}
00292 \par
{\bkmkstart AAAAAAAGVG}{\bkmkend AAAAAAAGVG}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAAGVH}{\bkmkend AAAAAAAGVH}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAGVI}{\bkmkend AAAAAAAGVI}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGVJ}{\bkmkend AAAAAAAGVJ}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAGVK}{\bkmkend AAAAAAAGVK}
00297 \par
{\bkmkstart AAAAAAAGVL}{\bkmkend AAAAAAAGVL}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAAGVM}{\bkmkend AAAAAAAGVM}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAGVN}{\bkmkend AAAAAAAGVN}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAGVO}{\bkmkend AAAAAAAGVO}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGVP}{\bkmkend AAAAAAAGVP}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGVQ}{\bkmkend AAAAAAAGVQ}
00303 \par
{\bkmkstart AAAAAAAGVR}{\bkmkend AAAAAAAGVR}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAAGVS}{\bkmkend AAAAAAAGVS}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAAGVT}{\bkmkend AAAAAAAGVT}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAAGVU}{\bkmkend AAAAAAAGVU}
00307 \}\par
{\bkmkstart AAAAAAAGVV}{\bkmkend AAAAAAAGVV}
00308 \par
{\bkmkstart AAAAAAAGVW}{\bkmkend AAAAAAAGVW}
00313 TEST_F(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAAGVX}{\bkmkend AAAAAAAGVX}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGVY}{\bkmkend AAAAAAAGVY}
00315     \par
{\bkmkstart AAAAAAAGVZ}{\bkmkend AAAAAAAGVZ}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAAGWA}{\bkmkend AAAAAAAGWA}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWC}{\bkmkend AAAAAAAGWC}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWF}{\bkmkend AAAAAAAGWF}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWH}{\bkmkend AAAAAAAGWH}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWI}{\bkmkend AAAAAAAGWI}
00321     \par
{\bkmkstart AAAAAAAGWJ}{\bkmkend AAAAAAAGWJ}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAAGWK}{\bkmkend AAAAAAAGWK}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWL}{\bkmkend AAAAAAAGWL}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWN}{\bkmkend AAAAAAAGWN}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWP}{\bkmkend AAAAAAAGWP}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWR}{\bkmkend AAAAAAAGWR}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGWU}{\bkmkend AAAAAAAGWU}
00328     \par
{\bkmkstart AAAAAAAGWV}{\bkmkend AAAAAAAGWV}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAAGWW}{\bkmkend AAAAAAAGWW}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAAGWZ}{\bkmkend AAAAAAAGWZ}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAAGXB}{\bkmkend AAAAAAAGXB}
00332     \par
{\bkmkstart AAAAAAAGXD}{\bkmkend AAAAAAAGXD}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAGXH}{\bkmkend AAAAAAAGXH}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAAGXJ}{\bkmkend AAAAAAAGXJ}
00335 \}\par
{\bkmkstart AAAAAAAGXK}{\bkmkend AAAAAAAGXK}
00336 \par
{\bkmkstart AAAAAAAGXL}{\bkmkend AAAAAAAGXL}
00341 TEST_F(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAAGXM}{\bkmkend AAAAAAAGXM}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGXN}{\bkmkend AAAAAAAGXN}
00343     \par
{\bkmkstart AAAAAAAGXO}{\bkmkend AAAAAAAGXO}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAAGXP}{\bkmkend AAAAAAAGXP}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAGXQ}{\bkmkend AAAAAAAGXQ}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAGXR}{\bkmkend AAAAAAAGXR}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAGXS}{\bkmkend AAAAAAAGXS}
00348     \par
{\bkmkstart AAAAAAAGXT}{\bkmkend AAAAAAAGXT}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAAGXU}{\bkmkend AAAAAAAGXU}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAGXV}{\bkmkend AAAAAAAGXV}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAAGXW}{\bkmkend AAAAAAAGXW}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAAGXX}{\bkmkend AAAAAAAGXX}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAGXY}{\bkmkend AAAAAAAGXY}
00354     \par
{\bkmkstart AAAAAAAGXZ}{\bkmkend AAAAAAAGXZ}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAAGYA}{\bkmkend AAAAAAAGYA}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAGYB}{\bkmkend AAAAAAAGYB}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAGYC}{\bkmkend AAAAAAAGYC}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAAGYD}{\bkmkend AAAAAAAGYD}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAAGYE}{\bkmkend AAAAAAAGYE}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAAGYF}{\bkmkend AAAAAAAGYF}
00361     \par
{\bkmkstart AAAAAAAGYG}{\bkmkend AAAAAAAGYG}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAGYH}{\bkmkend AAAAAAAGYH}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGYI}{\bkmkend AAAAAAAGYI}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAGYJ}{\bkmkend AAAAAAAGYJ}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAGYK}{\bkmkend AAAAAAAGYK}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAGYL}{\bkmkend AAAAAAAGYL}
00367 \}\par
{\bkmkstart AAAAAAAGYM}{\bkmkend AAAAAAAGYM}
00368 \par
{\bkmkstart AAAAAAAGYN}{\bkmkend AAAAAAAGYN}
00373 TEST_F(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAAGYO}{\bkmkend AAAAAAAGYO}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGYP}{\bkmkend AAAAAAAGYP}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAGYQ}{\bkmkend AAAAAAAGYQ}
00376     \par
{\bkmkstart AAAAAAAGYR}{\bkmkend AAAAAAAGYR}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAAGYS}{\bkmkend AAAAAAAGYS}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAGYT}{\bkmkend AAAAAAAGYT}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAGYU}{\bkmkend AAAAAAAGYU}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAGYV}{\bkmkend AAAAAAAGYV}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGYW}{\bkmkend AAAAAAAGYW}
00382     \par
{\bkmkstart AAAAAAAGYX}{\bkmkend AAAAAAAGYX}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAAGYY}{\bkmkend AAAAAAAGYY}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAAGYZ}{\bkmkend AAAAAAAGYZ}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAGZB}{\bkmkend AAAAAAAGZB}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAGZC}{\bkmkend AAAAAAAGZC}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGZE}{\bkmkend AAAAAAAGZE}
00388     \par
{\bkmkstart AAAAAAAGZF}{\bkmkend AAAAAAAGZF}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAAGZG}{\bkmkend AAAAAAAGZG}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAAGZK}{\bkmkend AAAAAAAGZK}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAGZM}{\bkmkend AAAAAAAGZM}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAGZN}{\bkmkend AAAAAAAGZN}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAAGZO}{\bkmkend AAAAAAAGZO}
00394     \par
{\bkmkstart AAAAAAAGZQ}{\bkmkend AAAAAAAGZQ}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAAGZR}{\bkmkend AAAAAAAGZR}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAGZS}{\bkmkend AAAAAAAGZS}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAGZV}{\bkmkend AAAAAAAGZV}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAGZY}{\bkmkend AAAAAAAGZY}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAHAC}{\bkmkend AAAAAAAHAC}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAHAI}{\bkmkend AAAAAAAHAI}
00401 \}\par
{\bkmkstart AAAAAAAHAK}{\bkmkend AAAAAAAHAK}
00402 \par
{\bkmkstart AAAAAAAHAM}{\bkmkend AAAAAAAHAM}
00407 TEST_F(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAAHAQ}{\bkmkend AAAAAAAHAQ}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHAS}{\bkmkend AAAAAAAHAS}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAHAU}{\bkmkend AAAAAAAHAU}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAAHAW}{\bkmkend AAAAAAAHAW}
00411     \par
{\bkmkstart AAAAAAAHAX}{\bkmkend AAAAAAAHAX}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAAHAZ}{\bkmkend AAAAAAAHAZ}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAHBE}{\bkmkend AAAAAAAHBE}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAHBI}{\bkmkend AAAAAAAHBI}
00415     \par
{\bkmkstart AAAAAAAHBK}{\bkmkend AAAAAAAHBK}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAAHBL}{\bkmkend AAAAAAAHBL}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAAHBO}{\bkmkend AAAAAAAHBO}
00418     \par
{\bkmkstart AAAAAAAHBP}{\bkmkend AAAAAAAHBP}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAAHBR}{\bkmkend AAAAAAAHBR}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAHBT}{\bkmkend AAAAAAAHBT}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAAHBV}{\bkmkend AAAAAAAHBV}
00422     \par
{\bkmkstart AAAAAAAHBX}{\bkmkend AAAAAAAHBX}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAAHBZ}{\bkmkend AAAAAAAHBZ}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAAHCB}{\bkmkend AAAAAAAHCB}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAAHCE}{\bkmkend AAAAAAAHCE}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAAHCH}{\bkmkend AAAAAAAHCH}
00427 \}\par
{\bkmkstart AAAAAAAHCI}{\bkmkend AAAAAAAHCI}
00428 \par
{\bkmkstart AAAAAAAHCK}{\bkmkend AAAAAAAHCK}
00433 TEST_F(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAAHCM}{\bkmkend AAAAAAAHCM}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAHCN}{\bkmkend AAAAAAAHCN}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAHCO}{\bkmkend AAAAAAAHCO}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAHCP}{\bkmkend AAAAAAAHCP}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAHCQ}{\bkmkend AAAAAAAHCQ}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAHCS}{\bkmkend AAAAAAAHCS}
00439     \par
{\bkmkstart AAAAAAAHCT}{\bkmkend AAAAAAAHCT}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAAHCV}{\bkmkend AAAAAAAHCV}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAAHCX}{\bkmkend AAAAAAAHCX}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAHDA}{\bkmkend AAAAAAAHDA}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAHDC}{\bkmkend AAAAAAAHDC}
00444     \par
{\bkmkstart AAAAAAAHDD}{\bkmkend AAAAAAAHDD}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAAHDF}{\bkmkend AAAAAAAHDF}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAHDJ}{\bkmkend AAAAAAAHDJ}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAHDL}{\bkmkend AAAAAAAHDL}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHDO}{\bkmkend AAAAAAAHDO}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAHDQ}{\bkmkend AAAAAAAHDQ}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAHDS}{\bkmkend AAAAAAAHDS}
00451     \par
{\bkmkstart AAAAAAAHDU}{\bkmkend AAAAAAAHDU}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAAHDV}{\bkmkend AAAAAAAHDV}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAHEJ}{\bkmkend AAAAAAAHEJ}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAHEK}{\bkmkend AAAAAAAHEK}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAHEM}{\bkmkend AAAAAAAHEM}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHEO}{\bkmkend AAAAAAAHEO}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAAHER}{\bkmkend AAAAAAAHER}
00458     \par
{\bkmkstart AAAAAAAHET}{\bkmkend AAAAAAAHET}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAAHEU}{\bkmkend AAAAAAAHEU}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAAHEZ}{\bkmkend AAAAAAAHEZ}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAAHFA}{\bkmkend AAAAAAAHFA}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAAHFE}{\bkmkend AAAAAAAHFE}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAAHFG}{\bkmkend AAAAAAAHFG}
00464 \}\par
{\bkmkstart AAAAAAAHFH}{\bkmkend AAAAAAAHFH}
00465 \par
{\bkmkstart AAAAAAAHFJ}{\bkmkend AAAAAAAHFJ}
00470 TEST_F(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAAHFN}{\bkmkend AAAAAAAHFN}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAAHFO}{\bkmkend AAAAAAAHFO}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAAHFR}{\bkmkend AAAAAAAHFR}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAHFT}{\bkmkend AAAAAAAHFT}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAAHFU}{\bkmkend AAAAAAAHFU}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAAHFW}{\bkmkend AAAAAAAHFW}
00476     \par
{\bkmkstart AAAAAAAHFX}{\bkmkend AAAAAAAHFX}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAAHFZ}{\bkmkend AAAAAAAHFZ}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAAHGC}{\bkmkend AAAAAAAHGC}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAHGE}{\bkmkend AAAAAAAHGE}
00480     \par
{\bkmkstart AAAAAAAHGF}{\bkmkend AAAAAAAHGF}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAAHGI}{\bkmkend AAAAAAAHGI}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAAHGJ}{\bkmkend AAAAAAAHGJ}
00483     \par
{\bkmkstart AAAAAAAHGK}{\bkmkend AAAAAAAHGK}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAAHGL}{\bkmkend AAAAAAAHGL}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAAHGM}{\bkmkend AAAAAAAHGM}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAAHGO}{\bkmkend AAAAAAAHGO}
00487     \par
{\bkmkstart AAAAAAAHGP}{\bkmkend AAAAAAAHGP}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAHGR}{\bkmkend AAAAAAAHGR}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAAHGS}{\bkmkend AAAAAAAHGS}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAAHGU}{\bkmkend AAAAAAAHGU}
00491     \par
{\bkmkstart AAAAAAAHGV}{\bkmkend AAAAAAAHGV}
00492     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAHGZ}{\bkmkend AAAAAAAHGZ}
00493     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAHHA}{\bkmkend AAAAAAAHHA}
00494     EXPECT_EQ(sv[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAHHC}{\bkmkend AAAAAAAHHC}
00495     EXPECT_EQ(sv[13], {\cf23 't'});\par
{\bkmkstart AAAAAAAHHE}{\bkmkend AAAAAAAHHE}
00496     EXPECT_EQ(prefix, {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAHHG}{\bkmkend AAAAAAAHHG}
00497     EXPECT_EQ(suffix, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAHHI}{\bkmkend AAAAAAAHHI}
00498     EXPECT_EQ(pos, 10);\par
{\bkmkstart AAAAAAAHHJ}{\bkmkend AAAAAAAHHJ}
00499 \}\par
{\bkmkstart AAAAAAAHHK}{\bkmkend AAAAAAAHHK}
00500 \par
{\bkmkstart AAAAAAAHHL}{\bkmkend AAAAAAAHHL}
00505 TEST_F(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAAHHN}{\bkmkend AAAAAAAHHN}
00506     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAHHS}{\bkmkend AAAAAAAHHS}
00507     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAHHU}{\bkmkend AAAAAAAHHU}
00508     \par
{\bkmkstart AAAAAAAHHV}{\bkmkend AAAAAAAHHV}
00509     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAAHHW}{\bkmkend AAAAAAAHHW}
00510     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAHIB}{\bkmkend AAAAAAAHIB}
00511     \par
{\bkmkstart AAAAAAAHIC}{\bkmkend AAAAAAAHIC}
00512     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAHIE}{\bkmkend AAAAAAAHIE}
00513     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAHIH}{\bkmkend AAAAAAAHIH}
00514         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAHIL}{\bkmkend AAAAAAAHIL}
00515         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAHIN}{\bkmkend AAAAAAAHIN}
00516         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAHIR}{\bkmkend AAAAAAAHIR}
00517         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAAHIU}{\bkmkend AAAAAAAHIU}
00518     \}\par
{\bkmkstart AAAAAAAHIW}{\bkmkend AAAAAAAHIW}
00519     \par
{\bkmkstart AAAAAAAHIX}{\bkmkend AAAAAAAHIX}
00520     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAHJB}{\bkmkend AAAAAAAHJB}
00521     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAHJG}{\bkmkend AAAAAAAHJG}
00522     \par
{\bkmkstart AAAAAAAHJH}{\bkmkend AAAAAAAHJH}
00523     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAAHJI}{\bkmkend AAAAAAAHJI}
00524     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAHJL}{\bkmkend AAAAAAAHJL}
00525 \}\par
{\bkmkstart AAAAAAAHJM}{\bkmkend AAAAAAAHJM}
00526 \par
{\bkmkstart AAAAAAAHJN}{\bkmkend AAAAAAAHJN}
00527 \} {\cf20 // namespace}\par
}
}