{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAAEHH}
{\bkmkend AAAAAAAEHH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEHI" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAENG}{\bkmkend AAAAAAAENG}
00001 \par
{\bkmkstart AAAAAAAENH}{\bkmkend AAAAAAAENH}
00008 \par
{\bkmkstart AAAAAAAENI}{\bkmkend AAAAAAAENI}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAENJ}{\bkmkend AAAAAAAENJ}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAENK}{\bkmkend AAAAAAAENK}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAENL}{\bkmkend AAAAAAAENL}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAENM}{\bkmkend AAAAAAAENM}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAENN}{\bkmkend AAAAAAAENN}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAENV}{\bkmkend AAAAAAAENV}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAENY}{\bkmkend AAAAAAAENY}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAENZ}{\bkmkend AAAAAAAENZ}
00017 \par
{\bkmkstart AAAAAAAEOA}{\bkmkend AAAAAAAEOA}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAEOB}{\bkmkend AAAAAAAEOB}
00019 \par
{\bkmkstart AAAAAAAEOC}{\bkmkend AAAAAAAEOC}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAEOD}{\bkmkend AAAAAAAEOD}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAAEOE}{\bkmkend AAAAAAAEOE}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEOI}{\bkmkend AAAAAAAEOI}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAEOK}{\bkmkend AAAAAAAEOK}
00028     \}\par
{\bkmkstart AAAAAAAEOL}{\bkmkend AAAAAAAEOL}
00029     \par
{\bkmkstart AAAAAAAEOM}{\bkmkend AAAAAAAEOM}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEON}{\bkmkend AAAAAAAEON}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAEOO}{\bkmkend AAAAAAAEOO}
00032     \}\par
{\bkmkstart AAAAAAAEOP}{\bkmkend AAAAAAAEOP}
00033 \};\par
{\bkmkstart AAAAAAAEOQ}{\bkmkend AAAAAAAEOQ}
00034 \par
{\bkmkstart AAAAAAAEOR}{\bkmkend AAAAAAAEOR}
00039 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAAEUL}{\bkmkend AAAAAAAEUL}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAAEUM}{\bkmkend AAAAAAAEUM}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAEUN}{\bkmkend AAAAAAAEUN}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAAEUO}{\bkmkend AAAAAAAEUO}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAAEUP}{\bkmkend AAAAAAAEUP}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAAEUQ}{\bkmkend AAAAAAAEUQ}
00045     \par
{\bkmkstart AAAAAAAEUR}{\bkmkend AAAAAAAEUR}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAAEUS}{\bkmkend AAAAAAAEUS}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAAEUT}{\bkmkend AAAAAAAEUT}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAAEUU}{\bkmkend AAAAAAAEUU}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAAEUV}{\bkmkend AAAAAAAEUV}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAAEUW}{\bkmkend AAAAAAAEUW}
00051     \par
{\bkmkstart AAAAAAAEUX}{\bkmkend AAAAAAAEUX}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAAEUY}{\bkmkend AAAAAAAEUY}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAAEUZ}{\bkmkend AAAAAAAEUZ}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAAEVA}{\bkmkend AAAAAAAEVA}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEVB}{\bkmkend AAAAAAAEVB}
00056     \par
{\bkmkstart AAAAAAAEVC}{\bkmkend AAAAAAAEVC}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAAEVD}{\bkmkend AAAAAAAEVD}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAAEVE}{\bkmkend AAAAAAAEVE}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAAEVF}{\bkmkend AAAAAAAEVF}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAAEVG}{\bkmkend AAAAAAAEVG}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAAEVH}{\bkmkend AAAAAAAEVH}
00062     \par
{\bkmkstart AAAAAAAEVI}{\bkmkend AAAAAAAEVI}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAAEVJ}{\bkmkend AAAAAAAEVJ}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAAEVK}{\bkmkend AAAAAAAEVK}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAAEVL}{\bkmkend AAAAAAAEVL}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAAEVM}{\bkmkend AAAAAAAEVM}
00067 \}\par
{\bkmkstart AAAAAAAEVN}{\bkmkend AAAAAAAEVN}
00068 \par
{\bkmkstart AAAAAAAEVO}{\bkmkend AAAAAAAEVO}
00073 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAAEVP}{\bkmkend AAAAAAAEVP}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEVQ}{\bkmkend AAAAAAAEVQ}
00075     \par
{\bkmkstart AAAAAAAEVR}{\bkmkend AAAAAAAEVR}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAAEVS}{\bkmkend AAAAAAAEVS}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAEVT}{\bkmkend AAAAAAAEVT}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAAEVU}{\bkmkend AAAAAAAEVU}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAAEVV}{\bkmkend AAAAAAAEVV}
00080     \par
{\bkmkstart AAAAAAAEVW}{\bkmkend AAAAAAAEVW}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAAEVX}{\bkmkend AAAAAAAEVX}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAEVY}{\bkmkend AAAAAAAEVY}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAAEVZ}{\bkmkend AAAAAAAEVZ}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAAEWA}{\bkmkend AAAAAAAEWA}
00085     \par
{\bkmkstart AAAAAAAEWB}{\bkmkend AAAAAAAEWB}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAAEWC}{\bkmkend AAAAAAAEWC}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAEWD}{\bkmkend AAAAAAAEWD}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAEWE}{\bkmkend AAAAAAAEWE}
00089     \par
{\bkmkstart AAAAAAAEWF}{\bkmkend AAAAAAAEWF}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAAEWG}{\bkmkend AAAAAAAEWG}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAEWH}{\bkmkend AAAAAAAEWH}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAEWI}{\bkmkend AAAAAAAEWI}
00093     \par
{\bkmkstart AAAAAAAEWJ}{\bkmkend AAAAAAAEWJ}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAAEWK}{\bkmkend AAAAAAAEWK}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAEWL}{\bkmkend AAAAAAAEWL}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAEWM}{\bkmkend AAAAAAAEWM}
00097     \par
{\bkmkstart AAAAAAAEWN}{\bkmkend AAAAAAAEWN}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAAEWO}{\bkmkend AAAAAAAEWO}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAEWP}{\bkmkend AAAAAAAEWP}
00100     \par
{\bkmkstart AAAAAAAEWQ}{\bkmkend AAAAAAAEWQ}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEWR}{\bkmkend AAAAAAAEWR}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAEWS}{\bkmkend AAAAAAAEWS}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAEWT}{\bkmkend AAAAAAAEWT}
00104 \}\par
{\bkmkstart AAAAAAAEWU}{\bkmkend AAAAAAAEWU}
00105 \par
{\bkmkstart AAAAAAAEWV}{\bkmkend AAAAAAAEWV}
00110 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAAEWW}{\bkmkend AAAAAAAEWW}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAAEWX}{\bkmkend AAAAAAAEWX}
00112     \par
{\bkmkstart AAAAAAAEWY}{\bkmkend AAAAAAAEWY}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAAEWZ}{\bkmkend AAAAAAAEWZ}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAAEXA}{\bkmkend AAAAAAAEXA}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAAEXB}{\bkmkend AAAAAAAEXB}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAAEXC}{\bkmkend AAAAAAAEXC}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAEXD}{\bkmkend AAAAAAAEXD}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAAEXE}{\bkmkend AAAAAAAEXE}
00119     \par
{\bkmkstart AAAAAAAEXF}{\bkmkend AAAAAAAEXF}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAAEXG}{\bkmkend AAAAAAAEXG}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAAEXH}{\bkmkend AAAAAAAEXH}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAAEXI}{\bkmkend AAAAAAAEXI}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAAEXJ}{\bkmkend AAAAAAAEXJ}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAAEXK}{\bkmkend AAAAAAAEXK}
00125     \par
{\bkmkstart AAAAAAAEXL}{\bkmkend AAAAAAAEXL}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAAEXM}{\bkmkend AAAAAAAEXM}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAAEXN}{\bkmkend AAAAAAAEXN}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAAEXO}{\bkmkend AAAAAAAEXO}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAAEXP}{\bkmkend AAAAAAAEXP}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAEXQ}{\bkmkend AAAAAAAEXQ}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAAEXR}{\bkmkend AAAAAAAEXR}
00132     \par
{\bkmkstart AAAAAAAEXS}{\bkmkend AAAAAAAEXS}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAAEXT}{\bkmkend AAAAAAAEXT}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAAEXU}{\bkmkend AAAAAAAEXU}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAAEXV}{\bkmkend AAAAAAAEXV}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAAEXW}{\bkmkend AAAAAAAEXW}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAAEXX}{\bkmkend AAAAAAAEXX}
00138     \par
{\bkmkstart AAAAAAAEXY}{\bkmkend AAAAAAAEXY}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAAEXZ}{\bkmkend AAAAAAAEXZ}
00140     std::string result;\par
{\bkmkstart AAAAAAAEYA}{\bkmkend AAAAAAAEYA}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAAEYB}{\bkmkend AAAAAAAEYB}
00142         result += c;\par
{\bkmkstart AAAAAAAEYC}{\bkmkend AAAAAAAEYC}
00143     \}\par
{\bkmkstart AAAAAAAEYD}{\bkmkend AAAAAAAEYD}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAEYE}{\bkmkend AAAAAAAEYE}
00145 \}\par
{\bkmkstart AAAAAAAEYF}{\bkmkend AAAAAAAEYF}
00146 \par
{\bkmkstart AAAAAAAEYG}{\bkmkend AAAAAAAEYG}
00151 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAAEYH}{\bkmkend AAAAAAAEYH}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEYI}{\bkmkend AAAAAAAEYI}
00153     \par
{\bkmkstart AAAAAAAEYJ}{\bkmkend AAAAAAAEYJ}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAAEYK}{\bkmkend AAAAAAAEYK}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAAEYL}{\bkmkend AAAAAAAEYL}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAEYM}{\bkmkend AAAAAAAEYM}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAAEYN}{\bkmkend AAAAAAAEYN}
00158     \par
{\bkmkstart AAAAAAAEYO}{\bkmkend AAAAAAAEYO}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAAEYP}{\bkmkend AAAAAAAEYP}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAAEYQ}{\bkmkend AAAAAAAEYQ}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEYR}{\bkmkend AAAAAAAEYR}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAAEYS}{\bkmkend AAAAAAAEYS}
00163     \par
{\bkmkstart AAAAAAAEYT}{\bkmkend AAAAAAAEYT}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAAEYU}{\bkmkend AAAAAAAEYU}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAAEYV}{\bkmkend AAAAAAAEYV}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAAEYW}{\bkmkend AAAAAAAEYW}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAAEYX}{\bkmkend AAAAAAAEYX}
00168     \par
{\bkmkstart AAAAAAAEYY}{\bkmkend AAAAAAAEYY}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAAEYZ}{\bkmkend AAAAAAAEYZ}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAAEZA}{\bkmkend AAAAAAAEZA}
00171     EXPECT_EQ(sub4, {\cf22 " "});\par
{\bkmkstart AAAAAAAEZB}{\bkmkend AAAAAAAEZB}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAAEZC}{\bkmkend AAAAAAAEZC}
00173     \par
{\bkmkstart AAAAAAAEZD}{\bkmkend AAAAAAAEZD}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAAEZE}{\bkmkend AAAAAAAEZE}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAAEZF}{\bkmkend AAAAAAAEZF}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAEZG}{\bkmkend AAAAAAAEZG}
00177 \}\par
{\bkmkstart AAAAAAAEZH}{\bkmkend AAAAAAAEZH}
00178 \par
{\bkmkstart AAAAAAAEZI}{\bkmkend AAAAAAAEZI}
00183 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAAEZJ}{\bkmkend AAAAAAAEZJ}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEZK}{\bkmkend AAAAAAAEZK}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEZL}{\bkmkend AAAAAAAEZL}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAAEZM}{\bkmkend AAAAAAAEZM}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAAEZN}{\bkmkend AAAAAAAEZN}
00188     \par
{\bkmkstart AAAAAAAEZO}{\bkmkend AAAAAAAEZO}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAAEZP}{\bkmkend AAAAAAAEZP}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAAEZQ}{\bkmkend AAAAAAAEZQ}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAAEZR}{\bkmkend AAAAAAAEZR}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAAEZS}{\bkmkend AAAAAAAEZS}
00193     \par
{\bkmkstart AAAAAAAEZT}{\bkmkend AAAAAAAEZT}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAAEZU}{\bkmkend AAAAAAAEZU}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAAEZV}{\bkmkend AAAAAAAEZV}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAAEZW}{\bkmkend AAAAAAAEZW}
00197     \par
{\bkmkstart AAAAAAAEZX}{\bkmkend AAAAAAAEZX}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAAEZY}{\bkmkend AAAAAAAEZY}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAAEZZ}{\bkmkend AAAAAAAEZZ}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAAFAA}{\bkmkend AAAAAAAFAA}
00201     \par
{\bkmkstart AAAAAAAFAB}{\bkmkend AAAAAAAFAB}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAAFAC}{\bkmkend AAAAAAAFAC}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAAFAD}{\bkmkend AAAAAAAFAD}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAAFAE}{\bkmkend AAAAAAAFAE}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAAFAF}{\bkmkend AAAAAAAFAF}
00206     \par
{\bkmkstart AAAAAAAFAG}{\bkmkend AAAAAAAFAG}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAAFAH}{\bkmkend AAAAAAAFAH}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAAFAI}{\bkmkend AAAAAAAFAI}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAAFAJ}{\bkmkend AAAAAAAFAJ}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAAFAK}{\bkmkend AAAAAAAFAK}
00211     \par
{\bkmkstart AAAAAAAFAL}{\bkmkend AAAAAAAFAL}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAAFAM}{\bkmkend AAAAAAAFAM}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAFAN}{\bkmkend AAAAAAAFAN}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAFAO}{\bkmkend AAAAAAAFAO}
00215     \par
{\bkmkstart AAAAAAAFAP}{\bkmkend AAAAAAAFAP}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAAFAQ}{\bkmkend AAAAAAAFAQ}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAAFAR}{\bkmkend AAAAAAAFAR}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAAFAS}{\bkmkend AAAAAAAFAS}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAAFAT}{\bkmkend AAAAAAAFAT}
00220 \}\par
{\bkmkstart AAAAAAAFAU}{\bkmkend AAAAAAAFAU}
00221 \par
{\bkmkstart AAAAAAAFAV}{\bkmkend AAAAAAAFAV}
00226 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAAFAW}{\bkmkend AAAAAAAFAW}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAAFAX}{\bkmkend AAAAAAAFAX}
00228     \par
{\bkmkstart AAAAAAAFAY}{\bkmkend AAAAAAAFAY}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAAFAZ}{\bkmkend AAAAAAAFAZ}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAFBA}{\bkmkend AAAAAAAFBA}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAAFBB}{\bkmkend AAAAAAAFBB}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAFBC}{\bkmkend AAAAAAAFBC}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFBD}{\bkmkend AAAAAAAFBD}
00234     \par
{\bkmkstart AAAAAAAFBE}{\bkmkend AAAAAAAFBE}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAAFBF}{\bkmkend AAAAAAAFBF}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAFBG}{\bkmkend AAAAAAAFBG}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAFBH}{\bkmkend AAAAAAAFBH}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 21);\par
{\bkmkstart AAAAAAAFBI}{\bkmkend AAAAAAAFBI}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFBJ}{\bkmkend AAAAAAAFBJ}
00240     \par
{\bkmkstart AAAAAAAFBK}{\bkmkend AAAAAAAFBK}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAAFBL}{\bkmkend AAAAAAAFBL}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAFBM}{\bkmkend AAAAAAAFBM}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAAFBN}{\bkmkend AAAAAAAFBN}
00244     \par
{\bkmkstart AAAAAAAFBO}{\bkmkend AAAAAAAFBO}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAAFBP}{\bkmkend AAAAAAAFBP}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAAFBQ}{\bkmkend AAAAAAAFBQ}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAAFBR}{\bkmkend AAAAAAAFBR}
00248     \par
{\bkmkstart AAAAAAAFBS}{\bkmkend AAAAAAAFBS}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAAFBT}{\bkmkend AAAAAAAFBT}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAAFBU}{\bkmkend AAAAAAAFBU}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 18);\par
{\bkmkstart AAAAAAAFBV}{\bkmkend AAAAAAAFBV}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFBW}{\bkmkend AAAAAAAFBW}
00253     \par
{\bkmkstart AAAAAAAFBX}{\bkmkend AAAAAAAFBX}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAAFBY}{\bkmkend AAAAAAAFBY}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAFBZ}{\bkmkend AAAAAAAFBZ}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAFCA}{\bkmkend AAAAAAAFCA}
00257     \par
{\bkmkstart AAAAAAAFCB}{\bkmkend AAAAAAAFCB}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAAFCC}{\bkmkend AAAAAAAFCC}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAFCD}{\bkmkend AAAAAAAFCD}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAFCE}{\bkmkend AAAAAAAFCE}
00261     \par
{\bkmkstart AAAAAAAFCF}{\bkmkend AAAAAAAFCF}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAAFCG}{\bkmkend AAAAAAAFCG}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAFCH}{\bkmkend AAAAAAAFCH}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 21); {\cf20 // 'U'}\par
{\bkmkstart AAAAAAAFCI}{\bkmkend AAAAAAAFCI}
00265     \par
{\bkmkstart AAAAAAAFCJ}{\bkmkend AAAAAAAFCJ}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAAFCK}{\bkmkend AAAAAAAFCK}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 28); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAAFCL}{\bkmkend AAAAAAAFCL}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFCM}{\bkmkend AAAAAAAFCM}
00269 \}\par
{\bkmkstart AAAAAAAFCN}{\bkmkend AAAAAAAFCN}
00270 \par
{\bkmkstart AAAAAAAFCO}{\bkmkend AAAAAAAFCO}
00275 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAAFCP}{\bkmkend AAAAAAAFCP}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFCQ}{\bkmkend AAAAAAAFCQ}
00277     \par
{\bkmkstart AAAAAAAFCR}{\bkmkend AAAAAAAFCR}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAAFCS}{\bkmkend AAAAAAAFCS}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAFCT}{\bkmkend AAAAAAAFCT}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFCU}{\bkmkend AAAAAAAFCU}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAAFCV}{\bkmkend AAAAAAAFCV}
00282 \par
{\bkmkstart AAAAAAAFCW}{\bkmkend AAAAAAAFCW}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAAFCX}{\bkmkend AAAAAAAFCX}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAFCY}{\bkmkend AAAAAAAFCY}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAFCZ}{\bkmkend AAAAAAAFCZ}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAAFDA}{\bkmkend AAAAAAAFDA}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFDB}{\bkmkend AAAAAAAFDB}
00288 \par
{\bkmkstart AAAAAAAFDC}{\bkmkend AAAAAAAFDC}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAAFDD}{\bkmkend AAAAAAAFDD}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAFDE}{\bkmkend AAAAAAAFDE}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAAFDF}{\bkmkend AAAAAAAFDF}
00292 \par
{\bkmkstart AAAAAAAFDG}{\bkmkend AAAAAAAFDG}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAAFDH}{\bkmkend AAAAAAAFDH}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAFDI}{\bkmkend AAAAAAAFDI}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFDJ}{\bkmkend AAAAAAAFDJ}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 11);\par
{\bkmkstart AAAAAAAFDK}{\bkmkend AAAAAAAFDK}
00297 \par
{\bkmkstart AAAAAAAFDL}{\bkmkend AAAAAAAFDL}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAAFDM}{\bkmkend AAAAAAAFDM}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAFDN}{\bkmkend AAAAAAAFDN}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAFDO}{\bkmkend AAAAAAAFDO}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAFDP}{\bkmkend AAAAAAAFDP}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFDQ}{\bkmkend AAAAAAAFDQ}
00303 \par
{\bkmkstart AAAAAAAFDR}{\bkmkend AAAAAAAFDR}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAAFDS}{\bkmkend AAAAAAAFDS}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAAFDT}{\bkmkend AAAAAAAFDT}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAAFDU}{\bkmkend AAAAAAAFDU}
00307 \}\par
{\bkmkstart AAAAAAAFDV}{\bkmkend AAAAAAAFDV}
00308 \par
{\bkmkstart AAAAAAAFDW}{\bkmkend AAAAAAAFDW}
00313 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAAFDX}{\bkmkend AAAAAAAFDX}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFDY}{\bkmkend AAAAAAAFDY}
00315     \par
{\bkmkstart AAAAAAAFDZ}{\bkmkend AAAAAAAFDZ}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAAFEA}{\bkmkend AAAAAAAFEA}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEB}{\bkmkend AAAAAAAFEB}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEC}{\bkmkend AAAAAAAFEC}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFED}{\bkmkend AAAAAAAFED}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEE}{\bkmkend AAAAAAAFEE}
00321     \par
{\bkmkstart AAAAAAAFEF}{\bkmkend AAAAAAAFEF}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAAFEG}{\bkmkend AAAAAAAFEG}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEH}{\bkmkend AAAAAAAFEH}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEI}{\bkmkend AAAAAAAFEI}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEJ}{\bkmkend AAAAAAAFEJ}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEK}{\bkmkend AAAAAAAFEK}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEL}{\bkmkend AAAAAAAFEL}
00328     \par
{\bkmkstart AAAAAAAFEM}{\bkmkend AAAAAAAFEM}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAAFEN}{\bkmkend AAAAAAAFEN}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAAFEO}{\bkmkend AAAAAAAFEO}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAAFEP}{\bkmkend AAAAAAAFEP}
00332     \par
{\bkmkstart AAAAAAAFEQ}{\bkmkend AAAAAAAFEQ}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAFER}{\bkmkend AAAAAAAFER}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAAFES}{\bkmkend AAAAAAAFES}
00335 \}\par
{\bkmkstart AAAAAAAFET}{\bkmkend AAAAAAAFET}
00336 \par
{\bkmkstart AAAAAAAFEU}{\bkmkend AAAAAAAFEU}
00341 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAAFEV}{\bkmkend AAAAAAAFEV}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFEW}{\bkmkend AAAAAAAFEW}
00343     \par
{\bkmkstart AAAAAAAFEX}{\bkmkend AAAAAAAFEX}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAAFEY}{\bkmkend AAAAAAAFEY}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAFEZ}{\bkmkend AAAAAAAFEZ}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAAFFA}{\bkmkend AAAAAAAFFA}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAFFB}{\bkmkend AAAAAAAFFB}
00348     \par
{\bkmkstart AAAAAAAFFC}{\bkmkend AAAAAAAFFC}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAAFFD}{\bkmkend AAAAAAAFFD}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAFFE}{\bkmkend AAAAAAAFFE}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAAFFF}{\bkmkend AAAAAAAFFF}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAAFFG}{\bkmkend AAAAAAAFFG}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAAFFH}{\bkmkend AAAAAAAFFH}
00354     \par
{\bkmkstart AAAAAAAFFI}{\bkmkend AAAAAAAFFI}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAAFFJ}{\bkmkend AAAAAAAFFJ}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAFFK}{\bkmkend AAAAAAAFFK}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAAFFL}{\bkmkend AAAAAAAFFL}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAAFFM}{\bkmkend AAAAAAAFFM}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAAFFN}{\bkmkend AAAAAAAFFN}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAAFFO}{\bkmkend AAAAAAAFFO}
00361     \par
{\bkmkstart AAAAAAAFFP}{\bkmkend AAAAAAAFFP}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAFFQ}{\bkmkend AAAAAAAFFQ}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAFFR}{\bkmkend AAAAAAAFFR}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAFFS}{\bkmkend AAAAAAAFFS}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAFFT}{\bkmkend AAAAAAAFFT}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAFFU}{\bkmkend AAAAAAAFFU}
00367 \}\par
{\bkmkstart AAAAAAAFFV}{\bkmkend AAAAAAAFFV}
00368 \par
{\bkmkstart AAAAAAAFFW}{\bkmkend AAAAAAAFFW}
00373 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAAFFX}{\bkmkend AAAAAAAFFX}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFFY}{\bkmkend AAAAAAAFFY}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAFFZ}{\bkmkend AAAAAAAFFZ}
00376     \par
{\bkmkstart AAAAAAAFGA}{\bkmkend AAAAAAAFGA}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAAFGB}{\bkmkend AAAAAAAFGB}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAFGC}{\bkmkend AAAAAAAFGC}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAFGD}{\bkmkend AAAAAAAFGD}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAFGE}{\bkmkend AAAAAAAFGE}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFGF}{\bkmkend AAAAAAAFGF}
00382     \par
{\bkmkstart AAAAAAAFGG}{\bkmkend AAAAAAAFGG}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAAFGH}{\bkmkend AAAAAAAFGH}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAAFGI}{\bkmkend AAAAAAAFGI}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAFGJ}{\bkmkend AAAAAAAFGJ}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAFGK}{\bkmkend AAAAAAAFGK}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAAFGL}{\bkmkend AAAAAAAFGL}
00388     \par
{\bkmkstart AAAAAAAFGM}{\bkmkend AAAAAAAFGM}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAAFGN}{\bkmkend AAAAAAAFGN}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAAFGO}{\bkmkend AAAAAAAFGO}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAAFGP}{\bkmkend AAAAAAAFGP}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAFGQ}{\bkmkend AAAAAAAFGQ}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAAFGR}{\bkmkend AAAAAAAFGR}
00394     \par
{\bkmkstart AAAAAAAFGS}{\bkmkend AAAAAAAFGS}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAAFGT}{\bkmkend AAAAAAAFGT}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAFGU}{\bkmkend AAAAAAAFGU}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAFGV}{\bkmkend AAAAAAAFGV}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAFGW}{\bkmkend AAAAAAAFGW}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAFGX}{\bkmkend AAAAAAAFGX}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAFGY}{\bkmkend AAAAAAAFGY}
00401 \}\par
{\bkmkstart AAAAAAAFGZ}{\bkmkend AAAAAAAFGZ}
00402 \par
{\bkmkstart AAAAAAAFHA}{\bkmkend AAAAAAAFHA}
00407 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAAFHB}{\bkmkend AAAAAAAFHB}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFHC}{\bkmkend AAAAAAAFHC}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAFHD}{\bkmkend AAAAAAAFHD}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAAFHE}{\bkmkend AAAAAAAFHE}
00411     \par
{\bkmkstart AAAAAAAFHF}{\bkmkend AAAAAAAFHF}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAAFHG}{\bkmkend AAAAAAAFHG}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAFHH}{\bkmkend AAAAAAAFHH}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAFHI}{\bkmkend AAAAAAAFHI}
00415     \par
{\bkmkstart AAAAAAAFHJ}{\bkmkend AAAAAAAFHJ}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAAFHK}{\bkmkend AAAAAAAFHK}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAAFHL}{\bkmkend AAAAAAAFHL}
00418     \par
{\bkmkstart AAAAAAAFHM}{\bkmkend AAAAAAAFHM}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAAFHN}{\bkmkend AAAAAAAFHN}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAFHO}{\bkmkend AAAAAAAFHO}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAAFHP}{\bkmkend AAAAAAAFHP}
00422     \par
{\bkmkstart AAAAAAAFHQ}{\bkmkend AAAAAAAFHQ}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAAFHR}{\bkmkend AAAAAAAFHR}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAAFHS}{\bkmkend AAAAAAAFHS}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAAFHT}{\bkmkend AAAAAAAFHT}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAAFHU}{\bkmkend AAAAAAAFHU}
00427 \}\par
{\bkmkstart AAAAAAAFHV}{\bkmkend AAAAAAAFHV}
00428 \par
{\bkmkstart AAAAAAAFHW}{\bkmkend AAAAAAAFHW}
00433 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAAFHX}{\bkmkend AAAAAAAFHX}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAFHY}{\bkmkend AAAAAAAFHY}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAFHZ}{\bkmkend AAAAAAAFHZ}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAFIA}{\bkmkend AAAAAAAFIA}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAFIB}{\bkmkend AAAAAAAFIB}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAFIC}{\bkmkend AAAAAAAFIC}
00439     \par
{\bkmkstart AAAAAAAFID}{\bkmkend AAAAAAAFID}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAAFIE}{\bkmkend AAAAAAAFIE}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAAFIF}{\bkmkend AAAAAAAFIF}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAAFIG}{\bkmkend AAAAAAAFIG}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAAFIH}{\bkmkend AAAAAAAFIH}
00444     \par
{\bkmkstart AAAAAAAFII}{\bkmkend AAAAAAAFII}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAAFIJ}{\bkmkend AAAAAAAFIJ}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAFIK}{\bkmkend AAAAAAAFIK}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAFIL}{\bkmkend AAAAAAAFIL}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFIM}{\bkmkend AAAAAAAFIM}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAFIN}{\bkmkend AAAAAAAFIN}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAFIO}{\bkmkend AAAAAAAFIO}
00451     \par
{\bkmkstart AAAAAAAFIP}{\bkmkend AAAAAAAFIP}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAAFIQ}{\bkmkend AAAAAAAFIQ}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAFIR}{\bkmkend AAAAAAAFIR}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAAFIS}{\bkmkend AAAAAAAFIS}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAAFIT}{\bkmkend AAAAAAAFIT}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFIU}{\bkmkend AAAAAAAFIU}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFIV}{\bkmkend AAAAAAAFIV}
00458     \par
{\bkmkstart AAAAAAAFIW}{\bkmkend AAAAAAAFIW}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAAFIX}{\bkmkend AAAAAAAFIX}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAAFIY}{\bkmkend AAAAAAAFIY}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAAFIZ}{\bkmkend AAAAAAAFIZ}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAAFJA}{\bkmkend AAAAAAAFJA}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAAFJB}{\bkmkend AAAAAAAFJB}
00464 \}\par
{\bkmkstart AAAAAAAFJC}{\bkmkend AAAAAAAFJC}
00465 \par
{\bkmkstart AAAAAAAFJD}{\bkmkend AAAAAAAFJD}
00470 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAAFJE}{\bkmkend AAAAAAAFJE}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAAFJF}{\bkmkend AAAAAAAFJF}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAAFJG}{\bkmkend AAAAAAAFJG}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAAFJH}{\bkmkend AAAAAAAFJH}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAAFJI}{\bkmkend AAAAAAAFJI}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAAFJJ}{\bkmkend AAAAAAAFJJ}
00476     \par
{\bkmkstart AAAAAAAFJK}{\bkmkend AAAAAAAFJK}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAAFJL}{\bkmkend AAAAAAAFJL}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAAFJM}{\bkmkend AAAAAAAFJM}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAFJN}{\bkmkend AAAAAAAFJN}
00480     \par
{\bkmkstart AAAAAAAFJO}{\bkmkend AAAAAAAFJO}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAAFJP}{\bkmkend AAAAAAAFJP}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAAFJQ}{\bkmkend AAAAAAAFJQ}
00483     \par
{\bkmkstart AAAAAAAFJR}{\bkmkend AAAAAAAFJR}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAAFJS}{\bkmkend AAAAAAAFJS}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAAFJT}{\bkmkend AAAAAAAFJT}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAAFJU}{\bkmkend AAAAAAAFJU}
00487     \par
{\bkmkstart AAAAAAAFJV}{\bkmkend AAAAAAAFJV}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAFJW}{\bkmkend AAAAAAAFJW}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAAFJX}{\bkmkend AAAAAAAFJX}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAAFJY}{\bkmkend AAAAAAAFJY}
00491     \par
{\bkmkstart AAAAAAAFJZ}{\bkmkend AAAAAAAFJZ}
00492     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAFKA}{\bkmkend AAAAAAAFKA}
00493     EXPECT_EQ(sv.size(), 14);\par
{\bkmkstart AAAAAAAFKB}{\bkmkend AAAAAAAFKB}
00494     EXPECT_EQ(sv[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAAFKC}{\bkmkend AAAAAAAFKC}
00495     EXPECT_EQ(sv[13], {\cf23 't'});\par
{\bkmkstart AAAAAAAFKD}{\bkmkend AAAAAAAFKD}
00496     EXPECT_EQ(prefix, {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAAFKE}{\bkmkend AAAAAAAFKE}
00497     EXPECT_EQ(suffix, {\cf22 "Test"});\par
{\bkmkstart AAAAAAAFKF}{\bkmkend AAAAAAAFKF}
00498     EXPECT_EQ(pos, 10);\par
{\bkmkstart AAAAAAAFKG}{\bkmkend AAAAAAAFKG}
00499 \}\par
{\bkmkstart AAAAAAAFKH}{\bkmkend AAAAAAAFKH}
00500 \par
{\bkmkstart AAAAAAAFKI}{\bkmkend AAAAAAAFKI}
00505 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACV" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAAFKJ}{\bkmkend AAAAAAAFKJ}
00506     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAFKK}{\bkmkend AAAAAAAFKK}
00507     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAFKL}{\bkmkend AAAAAAAFKL}
00508     \par
{\bkmkstart AAAAAAAFKM}{\bkmkend AAAAAAAFKM}
00509     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAAFKN}{\bkmkend AAAAAAAFKN}
00510     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFKO}{\bkmkend AAAAAAAFKO}
00511     \par
{\bkmkstart AAAAAAAFKP}{\bkmkend AAAAAAAFKP}
00512     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAFKQ}{\bkmkend AAAAAAAFKQ}
00513     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAFKR}{\bkmkend AAAAAAAFKR}
00514         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAFKS}{\bkmkend AAAAAAAFKS}
00515         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAFKT}{\bkmkend AAAAAAAFKT}
00516         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAFKU}{\bkmkend AAAAAAAFKU}
00517         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAAFKV}{\bkmkend AAAAAAAFKV}
00518     \}\par
{\bkmkstart AAAAAAAFKW}{\bkmkend AAAAAAAFKW}
00519     \par
{\bkmkstart AAAAAAAFKX}{\bkmkend AAAAAAAFKX}
00520     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFKY}{\bkmkend AAAAAAAFKY}
00521     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAFKZ}{\bkmkend AAAAAAAFKZ}
00522     \par
{\bkmkstart AAAAAAAFLA}{\bkmkend AAAAAAAFLA}
00523     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAAFLB}{\bkmkend AAAAAAAFLB}
00524     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAFLC}{\bkmkend AAAAAAAFLC}
00525 \}\par
{\bkmkstart AAAAAAAFLD}{\bkmkend AAAAAAAFLD}
00526 \par
{\bkmkstart AAAAAAAFLE}{\bkmkend AAAAAAAFLE}
00527 \} {\cf20 // namespace}\par
}
}