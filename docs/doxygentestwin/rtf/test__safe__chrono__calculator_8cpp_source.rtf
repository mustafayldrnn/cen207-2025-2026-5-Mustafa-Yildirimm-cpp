{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_safe_chrono_calculator.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp}
{\bkmkstart AAAAAAADWK}
{\bkmkend AAAAAAADWK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADWL" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADWM}{\bkmkend AAAAAAADWM}
00001 \par
{\bkmkstart AAAAAAADWN}{\bkmkend AAAAAAADWN}
00008 \par
{\bkmkstart AAAAAAADWO}{\bkmkend AAAAAAADWO}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAADWP}{\bkmkend AAAAAAADWP}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAADWQ}{\bkmkend AAAAAAADWQ}
00011 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAADWR}{\bkmkend AAAAAAADWR}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAADWS}{\bkmkend AAAAAAADWS}
00013 {\cf21 #include "../src/SafeChronoCalculator.h"}\par
{\bkmkstart AAAAAAADWV}{\bkmkend AAAAAAADWV}
00014 \par
{\bkmkstart AAAAAAADWW}{\bkmkend AAAAAAADWW}
00015 {\cf17 using namespace }SafeChrono;\par
{\bkmkstart AAAAAAADWX}{\bkmkend AAAAAAADWX}
00016 \par
{\bkmkstart AAAAAAADWY}{\bkmkend AAAAAAADWY}
00017 {\cf17 class }SafeChronoCalculatorTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAADWZ}{\bkmkend AAAAAAADWZ}
00018 {\cf17 protected}:\par
{\bkmkstart AAAAAAADXA}{\bkmkend AAAAAAADXA}
00019     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAADXB}{\bkmkend AAAAAAADXB}
00020         {\cf20 // SafeChronoCalculator uses static methods, no instance needed}\par
{\bkmkstart AAAAAAADXC}{\bkmkend AAAAAAADXC}
00021     \}\par
{\bkmkstart AAAAAAADXD}{\bkmkend AAAAAAADXD}
00022     \par
{\bkmkstart AAAAAAADXE}{\bkmkend AAAAAAADXE}
00023     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAADXF}{\bkmkend AAAAAAADXF}
00024         {\cf20 // No cleanup needed for static methods}\par
{\bkmkstart AAAAAAADXG}{\bkmkend AAAAAAADXG}
00025     \}\par
{\bkmkstart AAAAAAADXH}{\bkmkend AAAAAAADXH}
00026 \};\par
{\bkmkstart AAAAAAADXI}{\bkmkend AAAAAAADXI}
00027 \par
{\bkmkstart AAAAAAADXJ}{\bkmkend AAAAAAADXJ}
00028 {\cf20 // Test basic safe duration calculation}\par
{\bkmkstart AAAAAAADXK}{\bkmkend AAAAAAADXK}
00029 TEST_F(SafeChronoCalculatorTest, TestSafeDurationCalculation) \{\par
{\bkmkstart AAAAAAADXL}{\bkmkend AAAAAAADXL}
00030     {\cf20 // Test normal calculation}\par
{\bkmkstart AAAAAAADXM}{\bkmkend AAAAAAADXM}
00031     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAADXN}{\bkmkend AAAAAAADXN}
00032     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADXO}{\bkmkend AAAAAAADXO}
00033     \par
{\bkmkstart AAAAAAADXQ}{\bkmkend AAAAAAADXQ}
00034     {\cf20 // Test with different values}\par
{\bkmkstart AAAAAAADXR}{\bkmkend AAAAAAADXR}
00035     result = SafeChronoCalculator::safeCalculateDuration(5000, 2000000, 1000000000);\par
{\bkmkstart AAAAAAADXS}{\bkmkend AAAAAAADXS}
00036     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADXT}{\bkmkend AAAAAAADXT}
00037     \par
{\bkmkstart AAAAAAADXW}{\bkmkend AAAAAAADXW}
00038     {\cf20 // Test with large values}\par
{\bkmkstart AAAAAAADXX}{\bkmkend AAAAAAADXX}
00039     result = SafeChronoCalculator::safeCalculateDuration(1000000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAADXY}{\bkmkend AAAAAAADXY}
00040     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADXZ}{\bkmkend AAAAAAADXZ}
00041 \}\par
{\bkmkstart AAAAAAADYA}{\bkmkend AAAAAAADYA}
00042 \par
{\bkmkstart AAAAAAADYB}{\bkmkend AAAAAAADYB}
00043 {\cf20 // Test 10MHz calculation}\par
{\bkmkstart AAAAAAADYC}{\bkmkend AAAAAAADYC}
00044 TEST_F(SafeChronoCalculatorTest, Test10MHzCalculation) \{\par
{\bkmkstart AAAAAAADYD}{\bkmkend AAAAAAADYD}
00045     {\cf17 auto} result = SafeChronoCalculator::calculateFor10MHz(1000);\par
{\bkmkstart AAAAAAADYE}{\bkmkend AAAAAAADYE}
00046     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADYF}{\bkmkend AAAAAAADYF}
00047     \par
{\bkmkstart AAAAAAADYG}{\bkmkend AAAAAAADYG}
00048     result = SafeChronoCalculator::calculateFor10MHz(10000);\par
{\bkmkstart AAAAAAADYH}{\bkmkend AAAAAAADYH}
00049     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADYI}{\bkmkend AAAAAAADYI}
00050     \par
{\bkmkstart AAAAAAADYJ}{\bkmkend AAAAAAADYJ}
00051     result = SafeChronoCalculator::calculateFor10MHz(100000);\par
{\bkmkstart AAAAAAADYL}{\bkmkend AAAAAAADYL}
00052     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADYM}{\bkmkend AAAAAAADYM}
00053 \}\par
{\bkmkstart AAAAAAADYN}{\bkmkend AAAAAAADYN}
00054 \par
{\bkmkstart AAAAAAADYO}{\bkmkend AAAAAAADYO}
00055 {\cf20 // Test 24MHz calculation}\par
{\bkmkstart AAAAAAADYP}{\bkmkend AAAAAAADYP}
00056 TEST_F(SafeChronoCalculatorTest, Test24MHzCalculation) \{\par
{\bkmkstart AAAAAAADYQ}{\bkmkend AAAAAAADYQ}
00057     {\cf17 auto} result = SafeChronoCalculator::calculateFor24MHz(1000);\par
{\bkmkstart AAAAAAADYR}{\bkmkend AAAAAAADYR}
00058     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADYS}{\bkmkend AAAAAAADYS}
00059     \par
{\bkmkstart AAAAAAADYT}{\bkmkend AAAAAAADYT}
00060     result = SafeChronoCalculator::calculateFor24MHz(10000);\par
{\bkmkstart AAAAAAADYV}{\bkmkend AAAAAAADYV}
00061     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADYW}{\bkmkend AAAAAAADYW}
00062     \par
{\bkmkstart AAAAAAADYX}{\bkmkend AAAAAAADYX}
00063     result = SafeChronoCalculator::calculateFor24MHz(100000);\par
{\bkmkstart AAAAAAADYY}{\bkmkend AAAAAAADYY}
00064     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAADYZ}{\bkmkend AAAAAAADYZ}
00065 \}\par
{\bkmkstart AAAAAAADZA}{\bkmkend AAAAAAADZA}
00066 \par
{\bkmkstart AAAAAAADZB}{\bkmkend AAAAAAADZB}
00067 {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAADZC}{\bkmkend AAAAAAADZC}
00068 TEST_F(SafeChronoCalculatorTest, TestOverflowDetection) \{\par
{\bkmkstart AAAAAAADZE}{\bkmkend AAAAAAADZE}
00069     {\cf20 // Test no overflow}\par
{\bkmkstart AAAAAAADZF}{\bkmkend AAAAAAADZF}
00070     {\cf18 bool} wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, 1000);\par
{\bkmkstart AAAAAAADZG}{\bkmkend AAAAAAADZG}
00071     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAADZH}{\bkmkend AAAAAAADZH}
00072     \par
{\bkmkstart AAAAAAADZI}{\bkmkend AAAAAAADZI}
00073     {\cf20 // Test with zero values}\par
{\bkmkstart AAAAAAADZJ}{\bkmkend AAAAAAADZJ}
00074     wouldOverflow = SafeChronoCalculator::wouldOverflow(0, 1000);\par
{\bkmkstart AAAAAAADZM}{\bkmkend AAAAAAADZM}
00075     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAADZO}{\bkmkend AAAAAAADZO}
00076     \par
{\bkmkstart AAAAAAADZP}{\bkmkend AAAAAAADZP}
00077     wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, 0);\par
{\bkmkstart AAAAAAADZQ}{\bkmkend AAAAAAADZQ}
00078     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAADZR}{\bkmkend AAAAAAADZR}
00079     \par
{\bkmkstart AAAAAAADZS}{\bkmkend AAAAAAADZS}
00080     {\cf20 // Test with large values that might overflow}\par
{\bkmkstart AAAAAAADZT}{\bkmkend AAAAAAADZT}
00081     {\cf18 long} {\cf18 long} largeValue = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAADZV}{\bkmkend AAAAAAADZV}
00082     wouldOverflow = SafeChronoCalculator::wouldOverflow(largeValue, 3);\par
{\bkmkstart AAAAAAADZW}{\bkmkend AAAAAAADZW}
00083     EXPECT_TRUE(wouldOverflow);\par
{\bkmkstart AAAAAAADZX}{\bkmkend AAAAAAADZX}
00084     \par
{\bkmkstart AAAAAAADZY}{\bkmkend AAAAAAADZY}
00085     {\cf20 // Test with negative values}\par
{\bkmkstart AAAAAAADZZ}{\bkmkend AAAAAAADZZ}
00086     wouldOverflow = SafeChronoCalculator::wouldOverflow(-1000, 1000);\par
{\bkmkstart AAAAAAAEAA}{\bkmkend AAAAAAAEAA}
00087     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAEAB}{\bkmkend AAAAAAAEAB}
00088     \par
{\bkmkstart AAAAAAAEAC}{\bkmkend AAAAAAAEAC}
00089     wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, -1000);\par
{\bkmkstart AAAAAAAEAD}{\bkmkend AAAAAAAEAD}
00090     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAEAE}{\bkmkend AAAAAAAEAE}
00091     \par
{\bkmkstart AAAAAAAEAF}{\bkmkend AAAAAAAEAF}
00092     wouldOverflow = SafeChronoCalculator::wouldOverflow(-1000, -1000);\par
{\bkmkstart AAAAAAAEAI}{\bkmkend AAAAAAAEAI}
00093     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAEAJ}{\bkmkend AAAAAAAEAJ}
00094 \}\par
{\bkmkstart AAAAAAAEAK}{\bkmkend AAAAAAAEAK}
00095 \par
{\bkmkstart AAAAAAAEAM}{\bkmkend AAAAAAAEAM}
00096 {\cf20 // Test error handling}\par
{\bkmkstart AAAAAAAEAN}{\bkmkend AAAAAAAEAN}
00097 TEST_F(SafeChronoCalculatorTest, TestErrorHandling) \{\par
{\bkmkstart AAAAAAAEAP}{\bkmkend AAAAAAAEAP}
00098     {\cf20 // Test invalid frequency}\par
{\bkmkstart AAAAAAAEAR}{\bkmkend AAAAAAAEAR}
00099     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 0, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAEAS}{\bkmkend AAAAAAAEAS}
00100     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, -1000, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAEAV}{\bkmkend AAAAAAAEAV}
00101     \par
{\bkmkstart AAAAAAAEAW}{\bkmkend AAAAAAAEAW}
00102     {\cf20 // Test invalid period denominator}\par
{\bkmkstart AAAAAAAEAX}{\bkmkend AAAAAAAEAX}
00103     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 0), std::invalid_argument);\par
{\bkmkstart AAAAAAAEAY}{\bkmkend AAAAAAAEAY}
00104     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, -1000), std::invalid_argument);\par
{\bkmkstart AAAAAAAEBA}{\bkmkend AAAAAAAEBA}
00105 \}\par
{\bkmkstart AAAAAAAEBC}{\bkmkend AAAAAAAEBC}
00106 \par
{\bkmkstart AAAAAAAEBE}{\bkmkend AAAAAAAEBE}
00107 {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAAEBG}{\bkmkend AAAAAAAEBG}
00108 TEST_F(SafeChronoCalculatorTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAEBJ}{\bkmkend AAAAAAAEBJ}
00109     {\cf20 // Test with very small values}\par
{\bkmkstart AAAAAAAEBM}{\bkmkend AAAAAAAEBM}
00110     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEBP}{\bkmkend AAAAAAAEBP}
00111     EXPECT_GE(result.count(), 0); {\cf20 // Changed from GT to GE to allow zero}\par
{\bkmkstart AAAAAAAEBQ}{\bkmkend AAAAAAAEBQ}
00112     \par
{\bkmkstart AAAAAAAEBR}{\bkmkend AAAAAAAEBR}
00113     {\cf20 // Test with zero counter}\par
{\bkmkstart AAAAAAAEBS}{\bkmkend AAAAAAAEBS}
00114     result = SafeChronoCalculator::safeCalculateDuration(0, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEBT}{\bkmkend AAAAAAAEBT}
00115     EXPECT_EQ(result.count(), 0);\par
{\bkmkstart AAAAAAAEBU}{\bkmkend AAAAAAAEBU}
00116     \par
{\bkmkstart AAAAAAAEBV}{\bkmkend AAAAAAAEBV}
00117     {\cf20 // Test with maximum safe values}\par
{\bkmkstart AAAAAAAEBW}{\bkmkend AAAAAAAEBW}
00118     {\cf18 long} {\cf18 long} maxSafe = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAECH}{\bkmkend AAAAAAAECH}
00119     result = SafeChronoCalculator::safeCalculateDuration(maxSafe, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAECK}{\bkmkend AAAAAAAECK}
00120     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAECN}{\bkmkend AAAAAAAECN}
00121 \}\par
{\bkmkstart AAAAAAAECO}{\bkmkend AAAAAAAECO}
00122 \par
{\bkmkstart AAAAAAAECP}{\bkmkend AAAAAAAECP}
00123 {\cf20 // Test performance}\par
{\bkmkstart AAAAAAAECQ}{\bkmkend AAAAAAAECQ}
00124 TEST_F(SafeChronoCalculatorTest, TestPerformance) \{\par
{\bkmkstart AAAAAAAECS}{\bkmkend AAAAAAAECS}
00125     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAECW}{\bkmkend AAAAAAAECW}
00126     \par
{\bkmkstart AAAAAAAECX}{\bkmkend AAAAAAAECX}
00127     {\cf20 // Perform many calculations}\par
{\bkmkstart AAAAAAAECY}{\bkmkend AAAAAAAECY}
00128     {\cf19 for} ({\cf18 int} i = 1; i <= 1000; ++i) \{ {\cf20 // Start from 1 to avoid zero division issues}\par
{\bkmkstart AAAAAAAEDB}{\bkmkend AAAAAAAEDB}
00129         {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(i, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEDC}{\bkmkend AAAAAAAEDC}
00130         EXPECT_GE(result.count(), 0); {\cf20 // Changed from GT to GE to allow zero}\par
{\bkmkstart AAAAAAAEDD}{\bkmkend AAAAAAAEDD}
00131     \}\par
{\bkmkstart AAAAAAAEDE}{\bkmkend AAAAAAAEDE}
00132     \par
{\bkmkstart AAAAAAAEDF}{\bkmkend AAAAAAAEDF}
00133     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAEDG}{\bkmkend AAAAAAAEDG}
00134     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAEDH}{\bkmkend AAAAAAAEDH}
00135     \par
{\bkmkstart AAAAAAAEDI}{\bkmkend AAAAAAAEDI}
00136     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAEDJ}{\bkmkend AAAAAAAEDJ}
00137     EXPECT_LT(duration.count(), 1000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAEDK}{\bkmkend AAAAAAAEDK}
00138 \}\par
{\bkmkstart AAAAAAAEDL}{\bkmkend AAAAAAAEDL}
00139 \par
{\bkmkstart AAAAAAAEDM}{\bkmkend AAAAAAAEDM}
00140 {\cf20 // Test different frequency combinations}\par
{\bkmkstart AAAAAAAEDN}{\bkmkend AAAAAAAEDN}
00141 TEST_F(SafeChronoCalculatorTest, TestDifferentFrequencies) \{\par
{\bkmkstart AAAAAAAEDO}{\bkmkend AAAAAAAEDO}
00142     {\cf20 // Test with 1MHz}\par
{\bkmkstart AAAAAAAEDP}{\bkmkend AAAAAAAEDP}
00143     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEDQ}{\bkmkend AAAAAAAEDQ}
00144     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEDR}{\bkmkend AAAAAAAEDR}
00145     \par
{\bkmkstart AAAAAAAEDS}{\bkmkend AAAAAAAEDS}
00146     {\cf20 // Test with 5MHz}\par
{\bkmkstart AAAAAAAEDT}{\bkmkend AAAAAAAEDT}
00147     result = SafeChronoCalculator::safeCalculateDuration(1000, 5000000, 1000000000);\par
{\bkmkstart AAAAAAAEDU}{\bkmkend AAAAAAAEDU}
00148     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEDV}{\bkmkend AAAAAAAEDV}
00149     \par
{\bkmkstart AAAAAAAEDW}{\bkmkend AAAAAAAEDW}
00150     {\cf20 // Test with 50MHz}\par
{\bkmkstart AAAAAAAEDX}{\bkmkend AAAAAAAEDX}
00151     result = SafeChronoCalculator::safeCalculateDuration(1000, 50000000, 1000000000);\par
{\bkmkstart AAAAAAAEDY}{\bkmkend AAAAAAAEDY}
00152     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEDZ}{\bkmkend AAAAAAAEDZ}
00153     \par
{\bkmkstart AAAAAAAEEA}{\bkmkend AAAAAAAEEA}
00154     {\cf20 // Test with 100MHz}\par
{\bkmkstart AAAAAAAEEB}{\bkmkend AAAAAAAEEB}
00155     result = SafeChronoCalculator::safeCalculateDuration(1000, 100000000, 1000000000);\par
{\bkmkstart AAAAAAAEEC}{\bkmkend AAAAAAAEEC}
00156     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEED}{\bkmkend AAAAAAAEED}
00157 \}\par
{\bkmkstart AAAAAAAEEE}{\bkmkend AAAAAAAEEE}
00158 \par
{\bkmkstart AAAAAAAEEF}{\bkmkend AAAAAAAEEF}
00159 {\cf20 // Test overflow error handling}\par
{\bkmkstart AAAAAAAEEG}{\bkmkend AAAAAAAEEG}
00160 TEST_F(SafeChronoCalculatorTest, TestOverflowErrorHandling) \{\par
{\bkmkstart AAAAAAAEEH}{\bkmkend AAAAAAAEEH}
00161     {\cf20 // Test with values that would cause overflow - use more reasonable values}\par
{\bkmkstart AAAAAAAEEI}{\bkmkend AAAAAAAEEI}
00162     {\cf18 long} {\cf18 long} veryLargeCounter = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAEEJ}{\bkmkend AAAAAAAEEJ}
00163     {\cf18 long} {\cf18 long} veryLargeFrequency = 1;\par
{\bkmkstart AAAAAAAEEK}{\bkmkend AAAAAAAEEK}
00164     {\cf18 long} {\cf18 long} veryLargePeriodDen = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAEEM}{\bkmkend AAAAAAAEEM}
00165     \par
{\bkmkstart AAAAAAAEEO}{\bkmkend AAAAAAAEEO}
00166     {\cf20 // This might not throw an exception depending on implementation}\par
{\bkmkstart AAAAAAAEEP}{\bkmkend AAAAAAAEEP}
00167     {\cf20 // So we'll just test that it doesn't crash}\par
{\bkmkstart AAAAAAAEEQ}{\bkmkend AAAAAAAEEQ}
00168     EXPECT_NO_THROW(SafeChronoCalculator::safeCalculateDuration(veryLargeCounter, veryLargeFrequency, veryLargePeriodDen));\par
{\bkmkstart AAAAAAAEER}{\bkmkend AAAAAAAEER}
00169 \}\par
{\bkmkstart AAAAAAAEES}{\bkmkend AAAAAAAEES}
00170 \par
{\bkmkstart AAAAAAAEET}{\bkmkend AAAAAAAEET}
00171 {\cf20 // Test consistency}\par
{\bkmkstart AAAAAAAEEU}{\bkmkend AAAAAAAEEU}
00172 TEST_F(SafeChronoCalculatorTest, TestConsistency) \{\par
{\bkmkstart AAAAAAAEEV}{\bkmkend AAAAAAAEEV}
00173     {\cf20 // Test that same inputs give same outputs}\par
{\bkmkstart AAAAAAAEEW}{\bkmkend AAAAAAAEEW}
00174     {\cf17 auto} result1 = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEEX}{\bkmkend AAAAAAAEEX}
00175     {\cf17 auto} result2 = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEEZ}{\bkmkend AAAAAAAEEZ}
00176     EXPECT_EQ(result1.count(), result2.count());\par
{\bkmkstart AAAAAAAEFA}{\bkmkend AAAAAAAEFA}
00177     \par
{\bkmkstart AAAAAAAEFB}{\bkmkend AAAAAAAEFB}
00178     {\cf20 // Test that 10MHz and 24MHz give different results for same counter}\par
{\bkmkstart AAAAAAAEFC}{\bkmkend AAAAAAAEFC}
00179     {\cf17 auto} result10MHz = SafeChronoCalculator::calculateFor10MHz(1000);\par
{\bkmkstart AAAAAAAEFG}{\bkmkend AAAAAAAEFG}
00180     {\cf17 auto} result24MHz = SafeChronoCalculator::calculateFor24MHz(1000);\par
{\bkmkstart AAAAAAAEFJ}{\bkmkend AAAAAAAEFJ}
00181     EXPECT_NE(result10MHz.count(), result24MHz.count());\par
{\bkmkstart AAAAAAAEFK}{\bkmkend AAAAAAAEFK}
00182 \}\par
{\bkmkstart AAAAAAAEFL}{\bkmkend AAAAAAAEFL}
00183 \par
{\bkmkstart AAAAAAAEFN}{\bkmkend AAAAAAAEFN}
00184 {\cf20 // Test boundary values}\par
{\bkmkstart AAAAAAAEFP}{\bkmkend AAAAAAAEFP}
00185 TEST_F(SafeChronoCalculatorTest, TestBoundaryValues) \{\par
{\bkmkstart AAAAAAAEFQ}{\bkmkend AAAAAAAEFQ}
00186     {\cf20 // Test with minimum positive values}\par
{\bkmkstart AAAAAAAEFR}{\bkmkend AAAAAAAEFR}
00187     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1, 1, 1);\par
{\bkmkstart AAAAAAAEFT}{\bkmkend AAAAAAAEFT}
00188     EXPECT_GE(result.count(), 0); {\cf20 // Changed from GT to GE to allow zero}\par
{\bkmkstart AAAAAAAEFV}{\bkmkend AAAAAAAEFV}
00189     \par
{\bkmkstart AAAAAAAEFX}{\bkmkend AAAAAAAEFX}
00190     {\cf20 // Test with maximum safe values}\par
{\bkmkstart AAAAAAAEFZ}{\bkmkend AAAAAAAEFZ}
00191     {\cf18 long} {\cf18 long} maxSafe = std::numeric_limits<long long>::max() / 8; {\cf20 // Use even smaller value}\par
{\bkmkstart AAAAAAAEGH}{\bkmkend AAAAAAAEGH}
00192     result = SafeChronoCalculator::safeCalculateDuration(maxSafe, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEGM}{\bkmkend AAAAAAAEGM}
00193     EXPECT_GE(result.count(), 0); {\cf20 // Changed from GT to GE to allow zero}\par
{\bkmkstart AAAAAAAEGN}{\bkmkend AAAAAAAEGN}
00194 \}\par
}
}