{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_simple_coverage_boost.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\bkmkstart AAAAAAAFCE}
{\bkmkend AAAAAAAFCE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFCG" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFDZ}{\bkmkend AAAAAAAFDZ}
00001 \par
{\bkmkstart AAAAAAAFEC}{\bkmkend AAAAAAAFEC}
00007 \par
{\bkmkstart AAAAAAAFED}{\bkmkend AAAAAAAFED}
00008 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAFEU}{\bkmkend AAAAAAAFEU}
00009 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAFEV}{\bkmkend AAAAAAAFEV}
00010 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAFEW}{\bkmkend AAAAAAAFEW}
00011 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAFEX}{\bkmkend AAAAAAAFEX}
00012 \par
{\bkmkstart AAAAAAAFEY}{\bkmkend AAAAAAAFEY}
00013 {\cf20 // Include only working headers}\par
{\bkmkstart AAAAAAAFEZ}{\bkmkend AAAAAAAFEZ}
00014 {\cf21 #include "../src/SafeChronoCalculator.h"}\par
{\bkmkstart AAAAAAAFFA}{\bkmkend AAAAAAAFFA}
00015 {\cf21 #include "../src/LanguageTranslator/header/LanguageTranslator.h"}\par
{\bkmkstart AAAAAAAFFB}{\bkmkend AAAAAAAFFB}
00016 \par
{\bkmkstart AAAAAAAFFC}{\bkmkend AAAAAAAFFC}
00017 {\cf17 using namespace }SafeChrono;\par
{\bkmkstart AAAAAAAFFD}{\bkmkend AAAAAAAFFD}
00018 {\cf17 using namespace }Coruh::LanguageTranslator;\par
{\bkmkstart AAAAAAAFFE}{\bkmkend AAAAAAAFFE}
00019 \par
{\bkmkstart AAAAAAAFFF}{\bkmkend AAAAAAAFFF}
00020 {\cf17 class }SimpleCoverageBoostTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAFFG}{\bkmkend AAAAAAAFFG}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAFFH}{\bkmkend AAAAAAAFFH}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFFI}{\bkmkend AAAAAAAFFI}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAFFJ}{\bkmkend AAAAAAAFFJ}
00024     \}\par
{\bkmkstart AAAAAAAFFK}{\bkmkend AAAAAAAFFK}
00025     \par
{\bkmkstart AAAAAAAFFL}{\bkmkend AAAAAAAFFL}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFFM}{\bkmkend AAAAAAAFFM}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAFFN}{\bkmkend AAAAAAAFFN}
00028     \}\par
{\bkmkstart AAAAAAAFFO}{\bkmkend AAAAAAAFFO}
00029 \};\par
{\bkmkstart AAAAAAAFFP}{\bkmkend AAAAAAAFFP}
00030 \par
{\bkmkstart AAAAAAAFFQ}{\bkmkend AAAAAAAFFQ}
00031 {\cf20 // Test SafeChronoCalculator static methods}\par
{\bkmkstart AAAAAAAFFR}{\bkmkend AAAAAAAFFR}
00032 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculator) \{\par
{\bkmkstart AAAAAAAFFS}{\bkmkend AAAAAAAFFS}
00033     {\cf20 // Test safe duration calculation}\par
{\bkmkstart AAAAAAAFFT}{\bkmkend AAAAAAAFFT}
00034     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFFU}{\bkmkend AAAAAAAFFU}
00035     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFFV}{\bkmkend AAAAAAAFFV}
00036     \par
{\bkmkstart AAAAAAAFFW}{\bkmkend AAAAAAAFFW}
00037     {\cf20 // Test 10MHz calculation}\par
{\bkmkstart AAAAAAAFFX}{\bkmkend AAAAAAAFFX}
00038     result = SafeChronoCalculator::calculateFor10MHz(1000);\par
{\bkmkstart AAAAAAAFFY}{\bkmkend AAAAAAAFFY}
00039     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFFZ}{\bkmkend AAAAAAAFFZ}
00040     \par
{\bkmkstart AAAAAAAFGA}{\bkmkend AAAAAAAFGA}
00041     {\cf20 // Test 24MHz calculation}\par
{\bkmkstart AAAAAAAFGB}{\bkmkend AAAAAAAFGB}
00042     result = SafeChronoCalculator::calculateFor24MHz(1000);\par
{\bkmkstart AAAAAAAFGC}{\bkmkend AAAAAAAFGC}
00043     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFGD}{\bkmkend AAAAAAAFGD}
00044     \par
{\bkmkstart AAAAAAAFGE}{\bkmkend AAAAAAAFGE}
00045     {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAAFGF}{\bkmkend AAAAAAAFGF}
00046     {\cf18 bool} wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, 1000);\par
{\bkmkstart AAAAAAAFGG}{\bkmkend AAAAAAAFGG}
00047     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAFGH}{\bkmkend AAAAAAAFGH}
00048     \par
{\bkmkstart AAAAAAAFGI}{\bkmkend AAAAAAAFGI}
00049     {\cf20 // Test with zero values}\par
{\bkmkstart AAAAAAAFGJ}{\bkmkend AAAAAAAFGJ}
00050     wouldOverflow = SafeChronoCalculator::wouldOverflow(0, 1000);\par
{\bkmkstart AAAAAAAFGK}{\bkmkend AAAAAAAFGK}
00051     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAFGL}{\bkmkend AAAAAAAFGL}
00052     \par
{\bkmkstart AAAAAAAFGM}{\bkmkend AAAAAAAFGM}
00053     {\cf20 // Test with large values}\par
{\bkmkstart AAAAAAAFGN}{\bkmkend AAAAAAAFGN}
00054     {\cf18 long} {\cf18 long} largeValue = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAFGO}{\bkmkend AAAAAAAFGO}
00055     wouldOverflow = SafeChronoCalculator::wouldOverflow(largeValue, 3);\par
{\bkmkstart AAAAAAAFGP}{\bkmkend AAAAAAAFGP}
00056     EXPECT_TRUE(wouldOverflow);\par
{\bkmkstart AAAAAAAFGQ}{\bkmkend AAAAAAAFGQ}
00057 \}\par
{\bkmkstart AAAAAAAFGR}{\bkmkend AAAAAAAFGR}
00058 \par
{\bkmkstart AAAAAAAFGS}{\bkmkend AAAAAAAFGS}
00059 {\cf20 // Test SafeChronoCalculator error handling}\par
{\bkmkstart AAAAAAAFGT}{\bkmkend AAAAAAAFGT}
00060 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorErrors) \{\par
{\bkmkstart AAAAAAAFGU}{\bkmkend AAAAAAAFGU}
00061     {\cf20 // Test invalid frequency}\par
{\bkmkstart AAAAAAAFGV}{\bkmkend AAAAAAAFGV}
00062     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 0, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFGW}{\bkmkend AAAAAAAFGW}
00063     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, -1000, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFGX}{\bkmkend AAAAAAAFGX}
00064     \par
{\bkmkstart AAAAAAAFGY}{\bkmkend AAAAAAAFGY}
00065     {\cf20 // Test invalid period denominator}\par
{\bkmkstart AAAAAAAFGZ}{\bkmkend AAAAAAAFGZ}
00066     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 0), std::invalid_argument);\par
{\bkmkstart AAAAAAAFHA}{\bkmkend AAAAAAAFHA}
00067     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, -1000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFHB}{\bkmkend AAAAAAAFHB}
00068 \}\par
{\bkmkstart AAAAAAAFHC}{\bkmkend AAAAAAAFHC}
00069 \par
{\bkmkstart AAAAAAAFHD}{\bkmkend AAAAAAAFHD}
00070 {\cf20 // Test SafeChronoCalculator edge cases}\par
{\bkmkstart AAAAAAAFHE}{\bkmkend AAAAAAAFHE}
00071 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorEdgeCases) \{\par
{\bkmkstart AAAAAAAFHF}{\bkmkend AAAAAAAFHF}
00072     {\cf20 // Test with very small values}\par
{\bkmkstart AAAAAAAFHG}{\bkmkend AAAAAAAFHG}
00073     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFHH}{\bkmkend AAAAAAAFHH}
00074     {\cf20 // 1 tick may round down to 0 depending on integer division; accept non-negative}\par
{\bkmkstart AAAAAAAFHI}{\bkmkend AAAAAAAFHI}
00075     EXPECT_GE(result.count(), 0);\par
{\bkmkstart AAAAAAAFHJ}{\bkmkend AAAAAAAFHJ}
00076     \par
{\bkmkstart AAAAAAAFHK}{\bkmkend AAAAAAAFHK}
00077     {\cf20 // Test with zero counter}\par
{\bkmkstart AAAAAAAFHL}{\bkmkend AAAAAAAFHL}
00078     result = SafeChronoCalculator::safeCalculateDuration(0, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFHM}{\bkmkend AAAAAAAFHM}
00079     EXPECT_EQ(result.count(), 0);\par
{\bkmkstart AAAAAAAFHN}{\bkmkend AAAAAAAFHN}
00080     \par
{\bkmkstart AAAAAAAFHO}{\bkmkend AAAAAAAFHO}
00081     {\cf20 // Test with maximum safe values}\par
{\bkmkstart AAAAAAAFHP}{\bkmkend AAAAAAAFHP}
00082     {\cf20 // Use a smaller value to avoid intermediate overflow in portable implementations}\par
{\bkmkstart AAAAAAAFHQ}{\bkmkend AAAAAAAFHQ}
00083     {\cf18 long} {\cf18 long} maxSafe = std::numeric_limits<long long>::max() / 8;\par
{\bkmkstart AAAAAAAFHR}{\bkmkend AAAAAAAFHR}
00084     result = SafeChronoCalculator::safeCalculateDuration(maxSafe, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFHS}{\bkmkend AAAAAAAFHS}
00085     EXPECT_GE(result.count(), 0);\par
{\bkmkstart AAAAAAAFHT}{\bkmkend AAAAAAAFHT}
00086 \}\par
{\bkmkstart AAAAAAAFHU}{\bkmkend AAAAAAAFHU}
00087 \par
{\bkmkstart AAAAAAAFHV}{\bkmkend AAAAAAAFHV}
00088 {\cf20 // Test SafeChronoCalculator performance}\par
{\bkmkstart AAAAAAAFHW}{\bkmkend AAAAAAAFHW}
00089 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorPerformance) \{\par
{\bkmkstart AAAAAAAFHX}{\bkmkend AAAAAAAFHX}
00090     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFHY}{\bkmkend AAAAAAAFHY}
00091     \par
{\bkmkstart AAAAAAAFHZ}{\bkmkend AAAAAAAFHZ}
00092     {\cf20 // Perform many calculations}\par
{\bkmkstart AAAAAAAFIA}{\bkmkend AAAAAAAFIA}
00093     {\cf19 for} ({\cf18 int} i = 1; i <= 1000; ++i) \{\par
{\bkmkstart AAAAAAAFIB}{\bkmkend AAAAAAAFIB}
00094         {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(i, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFIC}{\bkmkend AAAAAAAFIC}
00095         EXPECT_GE(result.count(), 0);\par
{\bkmkstart AAAAAAAFID}{\bkmkend AAAAAAAFID}
00096     \}\par
{\bkmkstart AAAAAAAFIE}{\bkmkend AAAAAAAFIE}
00097     \par
{\bkmkstart AAAAAAAFIF}{\bkmkend AAAAAAAFIF}
00098     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFIG}{\bkmkend AAAAAAAFIG}
00099     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAFIH}{\bkmkend AAAAAAAFIH}
00100     \par
{\bkmkstart AAAAAAAFII}{\bkmkend AAAAAAAFII}
00101     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAFIJ}{\bkmkend AAAAAAAFIJ}
00102     EXPECT_LT(duration.count(), 1000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAFIK}{\bkmkend AAAAAAAFIK}
00103 \}\par
{\bkmkstart AAAAAAAFIL}{\bkmkend AAAAAAAFIL}
00104 \par
{\bkmkstart AAAAAAAFIM}{\bkmkend AAAAAAAFIM}
00105 {\cf20 // Test LanguageTranslatorApp basic functionality}\par
{\bkmkstart AAAAAAAFIN}{\bkmkend AAAAAAAFIN}
00106 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppBasic) \{\par
{\bkmkstart AAAAAAAFIO}{\bkmkend AAAAAAAFIO}
00107     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFIP}{\bkmkend AAAAAAAFIP}
00108     \par
{\bkmkstart AAAAAAAFIQ}{\bkmkend AAAAAAAFIQ}
00109     {\cf20 // Test basic properties}\par
{\bkmkstart AAAAAAAFIR}{\bkmkend AAAAAAAFIR}
00110     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAFIS}{\bkmkend AAAAAAAFIS}
00111     \par
{\bkmkstart AAAAAAAFIT}{\bkmkend AAAAAAAFIT}
00112     {\cf20 // Test language management}\par
{\bkmkstart AAAAAAAFIU}{\bkmkend AAAAAAAFIU}
00113     app.setSourceLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAFIV}{\bkmkend AAAAAAAFIV}
00114     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAFIW}{\bkmkend AAAAAAAFIW}
00115     \par
{\bkmkstart AAAAAAAFIX}{\bkmkend AAAAAAAFIX}
00116     {\cf20 // Test user management}\par
{\bkmkstart AAAAAAAFIY}{\bkmkend AAAAAAAFIY}
00117     EXPECT_TRUE(app.registerUser({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAFIZ}{\bkmkend AAAAAAAFIZ}
00118     EXPECT_TRUE(app.login({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAFJA}{\bkmkend AAAAAAAFJA}
00119     EXPECT_TRUE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAFJB}{\bkmkend AAAAAAAFJB}
00120     \par
{\bkmkstart AAAAAAAFJC}{\bkmkend AAAAAAAFJC}
00121     app.logout();\par
{\bkmkstart AAAAAAAFJD}{\bkmkend AAAAAAAFJD}
00122     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAFJE}{\bkmkend AAAAAAAFJE}
00123 \}\par
{\bkmkstart AAAAAAAFJF}{\bkmkend AAAAAAAFJF}
00124 \par
{\bkmkstart AAAAAAAFJG}{\bkmkend AAAAAAAFJG}
00125 {\cf20 // Test LanguageTranslatorApp translation}\par
{\bkmkstart AAAAAAAFJH}{\bkmkend AAAAAAAFJH}
00126 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppTranslation) \{\par
{\bkmkstart AAAAAAAFJI}{\bkmkend AAAAAAAFJI}
00127     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFJJ}{\bkmkend AAAAAAAFJJ}
00128     \par
{\bkmkstart AAAAAAAFJK}{\bkmkend AAAAAAAFJK}
00129     {\cf20 // Test translation functions}\par
{\bkmkstart AAAAAAAFJL}{\bkmkend AAAAAAAFJL}
00130     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFJM}{\bkmkend AAAAAAAFJM}
00131     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFJP}{\bkmkend AAAAAAAFJP}
00132     \par
{\bkmkstart AAAAAAAFJQ}{\bkmkend AAAAAAAFJQ}
00133     result = app.translateWord({\cf22 "hello"});\par
{\bkmkstart AAAAAAAFJR}{\bkmkend AAAAAAAFJR}
00134     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFJS}{\bkmkend AAAAAAAFJS}
00135     \par
{\bkmkstart AAAAAAAFJT}{\bkmkend AAAAAAAFJT}
00136     result = app.translatePhrase({\cf22 "good morning"});\par
{\bkmkstart AAAAAAAFJU}{\bkmkend AAAAAAAFJU}
00137     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFJV}{\bkmkend AAAAAAAFJV}
00138     \par
{\bkmkstart AAAAAAAFJW}{\bkmkend AAAAAAAFJW}
00139     {\cf20 // Test with empty input}\par
{\bkmkstart AAAAAAAFJX}{\bkmkend AAAAAAAFJX}
00140     result = app.translateText({\cf22 ""});\par
{\bkmkstart AAAAAAAFJY}{\bkmkend AAAAAAAFJY}
00141     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAFJZ}{\bkmkend AAAAAAAFJZ}
00142 \}\par
{\bkmkstart AAAAAAAFKA}{\bkmkend AAAAAAAFKA}
00143 \par
{\bkmkstart AAAAAAAFKB}{\bkmkend AAAAAAAFKB}
00144 {\cf20 // Test LanguageTranslatorApp data management}\par
{\bkmkstart AAAAAAAFKC}{\bkmkend AAAAAAAFKC}
00145 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppDataManagement) \{\par
{\bkmkstart AAAAAAAFKD}{\bkmkend AAAAAAAFKD}
00146     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFKE}{\bkmkend AAAAAAAFKE}
00147     \par
{\bkmkstart AAAAAAAFKF}{\bkmkend AAAAAAAFKF}
00148     {\cf20 // Test data management functions (should not crash)}\par
{\bkmkstart AAAAAAAFKG}{\bkmkend AAAAAAAFKG}
00149     EXPECT_NO_THROW(app.initializeDefaultData());\par
{\bkmkstart AAAAAAAFKH}{\bkmkend AAAAAAAFKH}
00150     EXPECT_NO_THROW(app.saveData());\par
{\bkmkstart AAAAAAAFKI}{\bkmkend AAAAAAAFKI}
00151     EXPECT_NO_THROW(app.loadData());\par
{\bkmkstart AAAAAAAFKJ}{\bkmkend AAAAAAAFKJ}
00152     EXPECT_NO_THROW(app.loadAllDictionaries());\par
{\bkmkstart AAAAAAAFKM}{\bkmkend AAAAAAAFKM}
00153 \}\par
{\bkmkstart AAAAAAAFKN}{\bkmkend AAAAAAAFKN}
00154 \par
{\bkmkstart AAAAAAAFKO}{\bkmkend AAAAAAAFKO}
00155 {\cf20 // Test LanguageTranslatorApp API functions}\par
{\bkmkstart AAAAAAAFKP}{\bkmkend AAAAAAAFKP}
00156 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppAPI) \{\par
{\bkmkstart AAAAAAAFKQ}{\bkmkend AAAAAAAFKQ}
00157     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFKR}{\bkmkend AAAAAAAFKR}
00158     \par
{\bkmkstart AAAAAAAFKS}{\bkmkend AAAAAAAFKS}
00159     {\cf20 // Test API functions}\par
{\bkmkstart AAAAAAAFKT}{\bkmkend AAAAAAAFKT}
00160     EXPECT_FALSE(app.isAPIAvailable());\par
{\bkmkstart AAAAAAAFKU}{\bkmkend AAAAAAAFKU}
00161     \par
{\bkmkstart AAAAAAAFKV}{\bkmkend AAAAAAAFKV}
00162     app.setAPIKey({\cf22 "test-api-key"});\par
{\bkmkstart AAAAAAAFKW}{\bkmkend AAAAAAAFKW}
00163     app.setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAAFKY}{\bkmkend AAAAAAAFKY}
00164     app.setAPIMode({\cf17 false});\par
{\bkmkstart AAAAAAAFKZ}{\bkmkend AAAAAAAFKZ}
00165     \par
{\bkmkstart AAAAAAAFLB}{\bkmkend AAAAAAAFLB}
00166     {\cf20 // Test API translation (should return empty string)}\par
{\bkmkstart AAAAAAAFLD}{\bkmkend AAAAAAAFLD}
00167     std::string result = app.translateWithGoogleAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAFLE}{\bkmkend AAAAAAAFLE}
00168     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAFLF}{\bkmkend AAAAAAAFLF}
00169     \par
{\bkmkstart AAAAAAAFLG}{\bkmkend AAAAAAAFLG}
00170     result = app.translateWithMicrosoftAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAFLH}{\bkmkend AAAAAAAFLH}
00171     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAFLI}{\bkmkend AAAAAAAFLI}
00172 \}\par
{\bkmkstart AAAAAAAFLJ}{\bkmkend AAAAAAAFLJ}
00173 \par
{\bkmkstart AAAAAAAFLK}{\bkmkend AAAAAAAFLK}
00174 {\cf20 // Test LanguageTranslatorApp phrase library}\par
{\bkmkstart AAAAAAAFLL}{\bkmkend AAAAAAAFLL}
00175 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPhraseLibrary) \{\par
{\bkmkstart AAAAAAAFLN}{\bkmkend AAAAAAAFLN}
00176     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFLP}{\bkmkend AAAAAAAFLP}
00177     \par
{\bkmkstart AAAAAAAFLQ}{\bkmkend AAAAAAAFLQ}
00178     {\cf20 // Test phrase library functions}\par
{\bkmkstart AAAAAAAFLR}{\bkmkend AAAAAAAFLR}
00179     app.addPhrase({\cf22 "Hello, how are you?"}, {\cf22 "greetings"});\par
{\bkmkstart AAAAAAAFLS}{\bkmkend AAAAAAAFLS}
00180     app.addPhrase({\cf22 "Thank you very much"}, {\cf22 "politeness"});\par
{\bkmkstart AAAAAAAFLV}{\bkmkend AAAAAAAFLV}
00181     \par
{\bkmkstart AAAAAAAFLW}{\bkmkend AAAAAAAFLW}
00182     {\cf20 // Test phrase translation}\par
{\bkmkstart AAAAAAAFLX}{\bkmkend AAAAAAAFLX}
00183     std::string result = app.translatePhrase({\cf22 "Hello, how are you?"});\par
{\bkmkstart AAAAAAAFLY}{\bkmkend AAAAAAAFLY}
00184     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFLZ}{\bkmkend AAAAAAAFLZ}
00185 \}\par
{\bkmkstart AAAAAAAFMA}{\bkmkend AAAAAAAFMA}
00186 \par
{\bkmkstart AAAAAAAFMB}{\bkmkend AAAAAAAFMB}
00187 {\cf20 // Test LanguageTranslatorApp learning tips}\par
{\bkmkstart AAAAAAAFMC}{\bkmkend AAAAAAAFMC}
00188 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLearningTips) \{\par
{\bkmkstart AAAAAAAFME}{\bkmkend AAAAAAAFME}
00189     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFMG}{\bkmkend AAAAAAAFMG}
00190     \par
{\bkmkstart AAAAAAAFMH}{\bkmkend AAAAAAAFMH}
00191     {\cf20 // Test learning tips functions}\par
{\bkmkstart AAAAAAAFMJ}{\bkmkend AAAAAAAFMJ}
00192     app.addLearningTip({\cf22 "Practice daily for better results"});\par
{\bkmkstart AAAAAAAFMK}{\bkmkend AAAAAAAFMK}
00193     app.addLearningTip({\cf22 "Use flashcards for vocabulary"});\par
{\bkmkstart AAAAAAAFMM}{\bkmkend AAAAAAAFMM}
00194     \par
{\bkmkstart AAAAAAAFMO}{\bkmkend AAAAAAAFMO}
00195     {\cf20 // Test showing learning tips (should not crash)}\par
{\bkmkstart AAAAAAAFMP}{\bkmkend AAAAAAAFMP}
00196     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAFMQ}{\bkmkend AAAAAAAFMQ}
00197 \}\par
{\bkmkstart AAAAAAAFMR}{\bkmkend AAAAAAAFMR}
00198 \par
{\bkmkstart AAAAAAAFMS}{\bkmkend AAAAAAAFMS}
00199 {\cf20 // Test LanguageTranslatorApp pronunciation guide}\par
{\bkmkstart AAAAAAAFMT}{\bkmkend AAAAAAAFMT}
00200 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPronunciationGuide) \{\par
{\bkmkstart AAAAAAAFMW}{\bkmkend AAAAAAAFMW}
00201     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFMY}{\bkmkend AAAAAAAFMY}
00202     \par
{\bkmkstart AAAAAAAFMZ}{\bkmkend AAAAAAAFMZ}
00203     {\cf20 // Test pronunciation guide functions}\par
{\bkmkstart AAAAAAAFNB}{\bkmkend AAAAAAAFNB}
00204     app.addPronunciation({\cf22 "hello"}, {\cf22 "heh-LOH"});\par
{\bkmkstart AAAAAAAFND}{\bkmkend AAAAAAAFND}
00205     app.addPronunciation({\cf22 "world"}, {\cf22 "wurld"});\par
{\bkmkstart AAAAAAAFNF}{\bkmkend AAAAAAAFNF}
00206     \par
{\bkmkstart AAAAAAAFNH}{\bkmkend AAAAAAAFNH}
00207     {\cf20 // Test showing pronunciation guide (should not crash)}\par
{\bkmkstart AAAAAAAFNI}{\bkmkend AAAAAAAFNI}
00208     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAFNL}{\bkmkend AAAAAAAFNL}
00209 \}\par
{\bkmkstart AAAAAAAFNN}{\bkmkend AAAAAAAFNN}
00210 \par
{\bkmkstart AAAAAAAFNO}{\bkmkend AAAAAAAFNO}
00211 {\cf20 // Test LanguageTranslatorApp language selection}\par
{\bkmkstart AAAAAAAFNP}{\bkmkend AAAAAAAFNP}
00212 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageSelection) \{\par
{\bkmkstart AAAAAAAFNT}{\bkmkend AAAAAAAFNT}
00213     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFNU}{\bkmkend AAAAAAAFNU}
00214     \par
{\bkmkstart AAAAAAAFNW}{\bkmkend AAAAAAAFNW}
00215     {\cf20 // Test language selection (should not crash)}\par
{\bkmkstart AAAAAAAFNX}{\bkmkend AAAAAAAFNX}
00216     EXPECT_NO_THROW(app.showLanguageSelection());\par
{\bkmkstart AAAAAAAFOA}{\bkmkend AAAAAAAFOA}
00217     \par
{\bkmkstart AAAAAAAFOB}{\bkmkend AAAAAAAFOB}
00218     {\cf20 // Test phrase library display (should not crash)}\par
{\bkmkstart AAAAAAAFOC}{\bkmkend AAAAAAAFOC}
00219     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAFOF}{\bkmkend AAAAAAAFOF}
00220 \}\par
{\bkmkstart AAAAAAAFOG}{\bkmkend AAAAAAAFOG}
00221 \par
{\bkmkstart AAAAAAAFOI}{\bkmkend AAAAAAAFOI}
00222 {\cf20 // Test LanguageTranslatorApp edge cases}\par
{\bkmkstart AAAAAAAFOL}{\bkmkend AAAAAAAFOL}
00223 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppEdgeCases) \{\par
{\bkmkstart AAAAAAAFOP}{\bkmkend AAAAAAAFOP}
00224     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFOT}{\bkmkend AAAAAAAFOT}
00225     \par
{\bkmkstart AAAAAAAFOU}{\bkmkend AAAAAAAFOU}
00226     {\cf20 // Test with very long text}\par
{\bkmkstart AAAAAAAFOV}{\bkmkend AAAAAAAFOV}
00227     std::string longText(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAFOY}{\bkmkend AAAAAAAFOY}
00228     std::string result = app.translateText(longText);\par
{\bkmkstart AAAAAAAFPA}{\bkmkend AAAAAAAFPA}
00229     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFPB}{\bkmkend AAAAAAAFPB}
00230     \par
{\bkmkstart AAAAAAAFPC}{\bkmkend AAAAAAAFPC}
00231     {\cf20 // Test with special characters}\par
{\bkmkstart AAAAAAAFPD}{\bkmkend AAAAAAAFPD}
00232     result = app.translateText({\cf22 "Hello, World! @#$%^&*()"});\par
{\bkmkstart AAAAAAAFPG}{\bkmkend AAAAAAAFPG}
00233     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFPH}{\bkmkend AAAAAAAFPH}
00234     \par
{\bkmkstart AAAAAAAFPI}{\bkmkend AAAAAAAFPI}
00235     {\cf20 // Test with numbers}\par
{\bkmkstart AAAAAAAFPJ}{\bkmkend AAAAAAAFPJ}
00236     result = app.translateText({\cf22 "123 456 789"});\par
{\bkmkstart AAAAAAAFPM}{\bkmkend AAAAAAAFPM}
00237     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFPP}{\bkmkend AAAAAAAFPP}
00238 \}\par
{\bkmkstart AAAAAAAFPQ}{\bkmkend AAAAAAAFPQ}
00239 \par
{\bkmkstart AAAAAAAFPR}{\bkmkend AAAAAAAFPR}
00240 {\cf20 // Test LanguageTranslatorApp menu handling}\par
{\bkmkstart AAAAAAAFPS}{\bkmkend AAAAAAAFPS}
00241 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppMenuHandling) \{\par
{\bkmkstart AAAAAAAFPX}{\bkmkend AAAAAAAFPX}
00242     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFPZ}{\bkmkend AAAAAAAFPZ}
00243     \par
{\bkmkstart AAAAAAAFQA}{\bkmkend AAAAAAAFQA}
00244     {\cf20 // Test handleUserChoice with various inputs (should not crash)}\par
{\bkmkstart AAAAAAAFQB}{\bkmkend AAAAAAAFQB}
00245     EXPECT_NO_THROW(app.handleUserChoice(0)); {\cf20 // Exit}\par
{\bkmkstart AAAAAAAFQC}{\bkmkend AAAAAAAFQC}
00246     EXPECT_NO_THROW(app.handleUserChoice(1)); {\cf20 // Login/Translate}\par
{\bkmkstart AAAAAAAFQD}{\bkmkend AAAAAAAFQD}
00247     EXPECT_NO_THROW(app.handleUserChoice(2)); {\cf20 // Register/Change Languages}\par
{\bkmkstart AAAAAAAFQE}{\bkmkend AAAAAAAFQE}
00248     EXPECT_NO_THROW(app.handleUserChoice(3)); {\cf20 // Phrase Library}\par
{\bkmkstart AAAAAAAFQF}{\bkmkend AAAAAAAFQF}
00249     EXPECT_NO_THROW(app.handleUserChoice(4)); {\cf20 // Learning Tips}\par
{\bkmkstart AAAAAAAFQG}{\bkmkend AAAAAAAFQG}
00250     EXPECT_NO_THROW(app.handleUserChoice(5)); {\cf20 // Pronunciation Guide}\par
{\bkmkstart AAAAAAAFQH}{\bkmkend AAAAAAAFQH}
00251     EXPECT_NO_THROW(app.handleUserChoice(6)); {\cf20 // Logout}\par
{\bkmkstart AAAAAAAFQI}{\bkmkend AAAAAAAFQI}
00252     EXPECT_NO_THROW(app.handleUserChoice(99)); {\cf20 // Invalid choice}\par
{\bkmkstart AAAAAAAFQJ}{\bkmkend AAAAAAAFQJ}
00253 \}\par
{\bkmkstart AAAAAAAFQK}{\bkmkend AAAAAAAFQK}
00254 \par
{\bkmkstart AAAAAAAFQL}{\bkmkend AAAAAAAFQL}
00255 {\cf20 // Test LanguageTranslatorApp performance}\par
{\bkmkstart AAAAAAAFQM}{\bkmkend AAAAAAAFQM}
00256 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPerformance) \{\par
{\bkmkstart AAAAAAAFQN}{\bkmkend AAAAAAAFQN}
00257     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFQO}{\bkmkend AAAAAAAFQO}
00258     \par
{\bkmkstart AAAAAAAFQP}{\bkmkend AAAAAAAFQP}
00259     {\cf20 // Test with many phrases}\par
{\bkmkstart AAAAAAAFQQ}{\bkmkend AAAAAAAFQQ}
00260     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAAFQR}{\bkmkend AAAAAAAFQR}
00261         app.addPhrase({\cf22 "phrase "} + std::to_string(i), {\cf22 "category"} + std::to_string(i % 5));\par
{\bkmkstart AAAAAAAFQS}{\bkmkend AAAAAAAFQS}
00262     \}\par
{\bkmkstart AAAAAAAFQT}{\bkmkend AAAAAAAFQT}
00263     \par
{\bkmkstart AAAAAAAFQU}{\bkmkend AAAAAAAFQU}
00264     {\cf20 // Test with many learning tips}\par
{\bkmkstart AAAAAAAFQV}{\bkmkend AAAAAAAFQV}
00265     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAFQW}{\bkmkend AAAAAAAFQW}
00266         app.addLearningTip({\cf22 "tip "} + std::to_string(i));\par
{\bkmkstart AAAAAAAFQX}{\bkmkend AAAAAAAFQX}
00267     \}\par
{\bkmkstart AAAAAAAFQY}{\bkmkend AAAAAAAFQY}
00268     \par
{\bkmkstart AAAAAAAFQZ}{\bkmkend AAAAAAAFQZ}
00269     {\cf20 // Test with many pronunciations}\par
{\bkmkstart AAAAAAAFRA}{\bkmkend AAAAAAAFRA}
00270     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAFRB}{\bkmkend AAAAAAAFRB}
00271         app.addPronunciation({\cf22 "word"} + std::to_string(i), {\cf22 "pronunciation"} + std::to_string(i));\par
{\bkmkstart AAAAAAAFRC}{\bkmkend AAAAAAAFRC}
00272     \}\par
{\bkmkstart AAAAAAAFRD}{\bkmkend AAAAAAAFRD}
00273     \par
{\bkmkstart AAAAAAAFRE}{\bkmkend AAAAAAAFRE}
00274     {\cf20 // Test that everything still works}\par
{\bkmkstart AAAAAAAFRF}{\bkmkend AAAAAAAFRF}
00275     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAFRG}{\bkmkend AAAAAAAFRG}
00276     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAFRI}{\bkmkend AAAAAAAFRI}
00277     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAFRJ}{\bkmkend AAAAAAAFRJ}
00278 \}\par
{\bkmkstart AAAAAAAFRK}{\bkmkend AAAAAAAFRK}
00279 \par
{\bkmkstart AAAAAAAFRL}{\bkmkend AAAAAAAFRL}
00280 {\cf20 // Test LanguageTranslatorApp consistency}\par
{\bkmkstart AAAAAAAFRM}{\bkmkend AAAAAAAFRM}
00281 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppConsistency) \{\par
{\bkmkstart AAAAAAAFRN}{\bkmkend AAAAAAAFRN}
00282     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFRO}{\bkmkend AAAAAAAFRO}
00283     \par
{\bkmkstart AAAAAAAFRP}{\bkmkend AAAAAAAFRP}
00284     {\cf20 // Test that same inputs give same outputs}\par
{\bkmkstart AAAAAAAFRQ}{\bkmkend AAAAAAAFRQ}
00285     std::string input = {\cf22 "hello world"};\par
{\bkmkstart AAAAAAAFRR}{\bkmkend AAAAAAAFRR}
00286     std::string result1 = app.translateText(input);\par
{\bkmkstart AAAAAAAFRS}{\bkmkend AAAAAAAFRS}
00287     std::string result2 = app.translateText(input);\par
{\bkmkstart AAAAAAAFRT}{\bkmkend AAAAAAAFRT}
00288     EXPECT_EQ(result1, result2);\par
{\bkmkstart AAAAAAAFRU}{\bkmkend AAAAAAAFRU}
00289 \}\par
{\bkmkstart AAAAAAAFRV}{\bkmkend AAAAAAAFRV}
00290 \par
{\bkmkstart AAAAAAAFRW}{\bkmkend AAAAAAAFRW}
00291 {\cf20 // Test LanguageTranslatorApp with different language combinations}\par
{\bkmkstart AAAAAAAFRX}{\bkmkend AAAAAAAFRX}
00292 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageCombinations) \{\par
{\bkmkstart AAAAAAAFRY}{\bkmkend AAAAAAAFRY}
00293     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAFRZ}{\bkmkend AAAAAAAFRZ}
00294     \par
{\bkmkstart AAAAAAAFSA}{\bkmkend AAAAAAAFSA}
00295     {\cf20 // Test English to Turkish}\par
{\bkmkstart AAAAAAAFSB}{\bkmkend AAAAAAAFSB}
00296     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAFSC}{\bkmkend AAAAAAAFSC}
00297     app.setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAFSD}{\bkmkend AAAAAAAFSD}
00298     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFSF}{\bkmkend AAAAAAAFSF}
00299     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFSG}{\bkmkend AAAAAAAFSG}
00300     \par
{\bkmkstart AAAAAAAFSH}{\bkmkend AAAAAAAFSH}
00301     {\cf20 // Test English to Spanish}\par
{\bkmkstart AAAAAAAFSI}{\bkmkend AAAAAAAFSI}
00302     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAFSK}{\bkmkend AAAAAAAFSK}
00303     app.setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAFSM}{\bkmkend AAAAAAAFSM}
00304     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFSN}{\bkmkend AAAAAAAFSN}
00305     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFSO}{\bkmkend AAAAAAAFSO}
00306     \par
{\bkmkstart AAAAAAAFSP}{\bkmkend AAAAAAAFSP}
00307     {\cf20 // Test English to French}\par
{\bkmkstart AAAAAAAFSQ}{\bkmkend AAAAAAAFSQ}
00308     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAFSR}{\bkmkend AAAAAAAFSR}
00309     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAFSS}{\bkmkend AAAAAAAFSS}
00310     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAFST}{\bkmkend AAAAAAAFST}
00311     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFSU}{\bkmkend AAAAAAAFSU}
00312     \par
{\bkmkstart AAAAAAAFSV}{\bkmkend AAAAAAAFSV}
00313     {\cf20 // Test Turkish to English}\par
{\bkmkstart AAAAAAAFSW}{\bkmkend AAAAAAAFSW}
00314     app.setSourceLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAFSY}{\bkmkend AAAAAAAFSY}
00315     app.setTargetLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAFSZ}{\bkmkend AAAAAAAFSZ}
00316     result = app.translateText({\cf22 "merhaba dünya"});\par
{\bkmkstart AAAAAAAFTA}{\bkmkend AAAAAAAFTA}
00317     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAFTC}{\bkmkend AAAAAAAFTC}
00318 \}\par
}
}