{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_simple_coverage_boost.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\bkmkstart AAAAAAAFMM}
{\bkmkend AAAAAAAFMM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFMO" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFOH}{\bkmkend AAAAAAAFOH}
00001 \par
{\bkmkstart AAAAAAAFOJ}{\bkmkend AAAAAAAFOJ}
00007 \par
{\bkmkstart AAAAAAAFOK}{\bkmkend AAAAAAAFOK}
00008 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAFQL}{\bkmkend AAAAAAAFQL}
00009 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAFQM}{\bkmkend AAAAAAAFQM}
00010 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAFQN}{\bkmkend AAAAAAAFQN}
00011 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAFQO}{\bkmkend AAAAAAAFQO}
00012 \par
{\bkmkstart AAAAAAAFQP}{\bkmkend AAAAAAAFQP}
00013 {\cf20 // Include only working headers}\par
{\bkmkstart AAAAAAAFQQ}{\bkmkend AAAAAAAFQQ}
00014 {\cf21 #include "../src/SafeChronoCalculator.h"}\par
{\bkmkstart AAAAAAAFQR}{\bkmkend AAAAAAAFQR}
00015 {\cf21 #include "../src/LanguageTranslator/header/LanguageTranslator.h"}\par
{\bkmkstart AAAAAAAFQS}{\bkmkend AAAAAAAFQS}
00016 \par
{\bkmkstart AAAAAAAFQT}{\bkmkend AAAAAAAFQT}
00017 {\cf17 using namespace }SafeChrono;\par
{\bkmkstart AAAAAAAFQU}{\bkmkend AAAAAAAFQU}
00018 {\cf17 using namespace }Coruh::LanguageTranslator;\par
{\bkmkstart AAAAAAAFQV}{\bkmkend AAAAAAAFQV}
00019 \par
{\bkmkstart AAAAAAAFQW}{\bkmkend AAAAAAAFQW}
00020 {\cf17 class }SimpleCoverageBoostTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAFQX}{\bkmkend AAAAAAAFQX}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAFQY}{\bkmkend AAAAAAAFQY}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFQZ}{\bkmkend AAAAAAAFQZ}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAFRA}{\bkmkend AAAAAAAFRA}
00024     \}\par
{\bkmkstart AAAAAAAFRB}{\bkmkend AAAAAAAFRB}
00025     \par
{\bkmkstart AAAAAAAFRC}{\bkmkend AAAAAAAFRC}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFRD}{\bkmkend AAAAAAAFRD}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAFRE}{\bkmkend AAAAAAAFRE}
00028     \}\par
{\bkmkstart AAAAAAAFRF}{\bkmkend AAAAAAAFRF}
00029 \};\par
{\bkmkstart AAAAAAAFRG}{\bkmkend AAAAAAAFRG}
00030 \par
{\bkmkstart AAAAAAAFRH}{\bkmkend AAAAAAAFRH}
00031 {\cf20 // Test SafeChronoCalculator static methods}\par
{\bkmkstart AAAAAAAFRI}{\bkmkend AAAAAAAFRI}
00032 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculator) \{\par
{\bkmkstart AAAAAAAFRJ}{\bkmkend AAAAAAAFRJ}
00033     {\cf20 // Test safe duration calculation}\par
{\bkmkstart AAAAAAAFRK}{\bkmkend AAAAAAAFRK}
00034     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFRL}{\bkmkend AAAAAAAFRL}
00035     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFRM}{\bkmkend AAAAAAAFRM}
00036     \par
{\bkmkstart AAAAAAAFRN}{\bkmkend AAAAAAAFRN}
00037     {\cf20 // Test 10MHz calculation}\par
{\bkmkstart AAAAAAAFRO}{\bkmkend AAAAAAAFRO}
00038     result = SafeChronoCalculator::calculateFor10MHz(1000);\par
{\bkmkstart AAAAAAAFRP}{\bkmkend AAAAAAAFRP}
00039     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFRQ}{\bkmkend AAAAAAAFRQ}
00040     \par
{\bkmkstart AAAAAAAFRR}{\bkmkend AAAAAAAFRR}
00041     {\cf20 // Test 24MHz calculation}\par
{\bkmkstart AAAAAAAFRS}{\bkmkend AAAAAAAFRS}
00042     result = SafeChronoCalculator::calculateFor24MHz(1000);\par
{\bkmkstart AAAAAAAFRT}{\bkmkend AAAAAAAFRT}
00043     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFRU}{\bkmkend AAAAAAAFRU}
00044     \par
{\bkmkstart AAAAAAAFRV}{\bkmkend AAAAAAAFRV}
00045     {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAAFRW}{\bkmkend AAAAAAAFRW}
00046     {\cf18 bool} wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, 1000);\par
{\bkmkstart AAAAAAAFRX}{\bkmkend AAAAAAAFRX}
00047     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAFRY}{\bkmkend AAAAAAAFRY}
00048     \par
{\bkmkstart AAAAAAAFRZ}{\bkmkend AAAAAAAFRZ}
00049     {\cf20 // Test with zero values}\par
{\bkmkstart AAAAAAAFSA}{\bkmkend AAAAAAAFSA}
00050     wouldOverflow = SafeChronoCalculator::wouldOverflow(0, 1000);\par
{\bkmkstart AAAAAAAFSB}{\bkmkend AAAAAAAFSB}
00051     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAFSC}{\bkmkend AAAAAAAFSC}
00052     \par
{\bkmkstart AAAAAAAFSD}{\bkmkend AAAAAAAFSD}
00053     {\cf20 // Test with large values}\par
{\bkmkstart AAAAAAAFSE}{\bkmkend AAAAAAAFSE}
00054     {\cf18 long} {\cf18 long} largeValue = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAFSH}{\bkmkend AAAAAAAFSH}
00055     wouldOverflow = SafeChronoCalculator::wouldOverflow(largeValue, 3);\par
{\bkmkstart AAAAAAAFSI}{\bkmkend AAAAAAAFSI}
00056     EXPECT_TRUE(wouldOverflow);\par
{\bkmkstart AAAAAAAFSJ}{\bkmkend AAAAAAAFSJ}
00057 \}\par
{\bkmkstart AAAAAAAFSK}{\bkmkend AAAAAAAFSK}
00058 \par
{\bkmkstart AAAAAAAFSL}{\bkmkend AAAAAAAFSL}
00059 {\cf20 // Test SafeChronoCalculator error handling}\par
{\bkmkstart AAAAAAAFSM}{\bkmkend AAAAAAAFSM}
00060 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorErrors) \{\par
{\bkmkstart AAAAAAAFSN}{\bkmkend AAAAAAAFSN}
00061     {\cf20 // Test invalid frequency}\par
{\bkmkstart AAAAAAAFSO}{\bkmkend AAAAAAAFSO}
00062     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 0, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFSP}{\bkmkend AAAAAAAFSP}
00063     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, -1000, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFSQ}{\bkmkend AAAAAAAFSQ}
00064     \par
{\bkmkstart AAAAAAAFSR}{\bkmkend AAAAAAAFSR}
00065     {\cf20 // Test invalid period denominator}\par
{\bkmkstart AAAAAAAFSS}{\bkmkend AAAAAAAFSS}
00066     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 0), std::invalid_argument);\par
{\bkmkstart AAAAAAAFST}{\bkmkend AAAAAAAFST}
00067     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, -1000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFSU}{\bkmkend AAAAAAAFSU}
00068 \}\par
{\bkmkstart AAAAAAAFSV}{\bkmkend AAAAAAAFSV}
00069 \par
{\bkmkstart AAAAAAAFSW}{\bkmkend AAAAAAAFSW}
00070 {\cf20 // Test SafeChronoCalculator edge cases}\par
{\bkmkstart AAAAAAAFSX}{\bkmkend AAAAAAAFSX}
00071 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorEdgeCases) \{\par
{\bkmkstart AAAAAAAFSY}{\bkmkend AAAAAAAFSY}
00072     {\cf20 // Test with very small values}\par
{\bkmkstart AAAAAAAFSZ}{\bkmkend AAAAAAAFSZ}
00073     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFTA}{\bkmkend AAAAAAAFTA}
00074     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFTB}{\bkmkend AAAAAAAFTB}
00075     \par
{\bkmkstart AAAAAAAFTC}{\bkmkend AAAAAAAFTC}
00076     {\cf20 // Test with zero counter}\par
{\bkmkstart AAAAAAAFTD}{\bkmkend AAAAAAAFTD}
00077     result = SafeChronoCalculator::safeCalculateDuration(0, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFTE}{\bkmkend AAAAAAAFTE}
00078     EXPECT_EQ(result.count(), 0);\par
{\bkmkstart AAAAAAAFTF}{\bkmkend AAAAAAAFTF}
00079     \par
{\bkmkstart AAAAAAAFTG}{\bkmkend AAAAAAAFTG}
00080     {\cf20 // Test with maximum safe values}\par
{\bkmkstart AAAAAAAFTH}{\bkmkend AAAAAAAFTH}
00081     {\cf18 long} {\cf18 long} maxSafe = std::numeric_limits<long long>::max() / 4;\par
{\bkmkstart AAAAAAAFXN}{\bkmkend AAAAAAAFXN}
00082     result = SafeChronoCalculator::safeCalculateDuration(maxSafe, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFXQ}{\bkmkend AAAAAAAFXQ}
00083     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFXS}{\bkmkend AAAAAAAFXS}
00084 \}\par
{\bkmkstart AAAAAAAFXT}{\bkmkend AAAAAAAFXT}
00085 \par
{\bkmkstart AAAAAAAFXV}{\bkmkend AAAAAAAFXV}
00086 {\cf20 // Test SafeChronoCalculator performance}\par
{\bkmkstart AAAAAAAFXY}{\bkmkend AAAAAAAFXY}
00087 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorPerformance) \{\par
{\bkmkstart AAAAAAAFYC}{\bkmkend AAAAAAAFYC}
00088     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFYF}{\bkmkend AAAAAAAFYF}
00089     \par
{\bkmkstart AAAAAAAFYH}{\bkmkend AAAAAAAFYH}
00090     {\cf20 // Perform many calculations}\par
{\bkmkstart AAAAAAAFYN}{\bkmkend AAAAAAAFYN}
00091     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAFYR}{\bkmkend AAAAAAAFYR}
00092         {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(i, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFYX}{\bkmkend AAAAAAAFYX}
00093         EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFYZ}{\bkmkend AAAAAAAFYZ}
00094     \}\par
{\bkmkstart AAAAAAAFZB}{\bkmkend AAAAAAAFZB}
00095     \par
{\bkmkstart AAAAAAAFZC}{\bkmkend AAAAAAAFZC}
00096     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFZH}{\bkmkend AAAAAAAFZH}
00097     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAFZL}{\bkmkend AAAAAAAFZL}
00098     \par
{\bkmkstart AAAAAAAFZM}{\bkmkend AAAAAAAFZM}
00099     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAFZO}{\bkmkend AAAAAAAFZO}
00100     EXPECT_LT(duration.count(), 1000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAFZR}{\bkmkend AAAAAAAFZR}
00101 \}\par
{\bkmkstart AAAAAAAFZS}{\bkmkend AAAAAAAFZS}
00102 \par
{\bkmkstart AAAAAAAFZT}{\bkmkend AAAAAAAFZT}
00103 {\cf20 // Test LanguageTranslatorApp basic functionality}\par
{\bkmkstart AAAAAAAFZV}{\bkmkend AAAAAAAFZV}
00104 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppBasic) \{\par
{\bkmkstart AAAAAAAFZZ}{\bkmkend AAAAAAAFZZ}
00105     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGAD}{\bkmkend AAAAAAAGAD}
00106     \par
{\bkmkstart AAAAAAAGAE}{\bkmkend AAAAAAAGAE}
00107     {\cf20 // Test basic properties}\par
{\bkmkstart AAAAAAAGAG}{\bkmkend AAAAAAAGAG}
00108     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAGAI}{\bkmkend AAAAAAAGAI}
00109     \par
{\bkmkstart AAAAAAAGAJ}{\bkmkend AAAAAAAGAJ}
00110     {\cf20 // Test language management}\par
{\bkmkstart AAAAAAAGAL}{\bkmkend AAAAAAAGAL}
00111     app.setSourceLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAGAO}{\bkmkend AAAAAAAGAO}
00112     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAGAP}{\bkmkend AAAAAAAGAP}
00113     \par
{\bkmkstart AAAAAAAGAQ}{\bkmkend AAAAAAAGAQ}
00114     {\cf20 // Test user management}\par
{\bkmkstart AAAAAAAGAS}{\bkmkend AAAAAAAGAS}
00115     EXPECT_TRUE(app.registerUser({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAGAU}{\bkmkend AAAAAAAGAU}
00116     EXPECT_TRUE(app.login({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAGAX}{\bkmkend AAAAAAAGAX}
00117     EXPECT_TRUE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAGBA}{\bkmkend AAAAAAAGBA}
00118     \par
{\bkmkstart AAAAAAAGBB}{\bkmkend AAAAAAAGBB}
00119     app.logout();\par
{\bkmkstart AAAAAAAGBE}{\bkmkend AAAAAAAGBE}
00120     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAGBH}{\bkmkend AAAAAAAGBH}
00121 \}\par
{\bkmkstart AAAAAAAGBI}{\bkmkend AAAAAAAGBI}
00122 \par
{\bkmkstart AAAAAAAGBJ}{\bkmkend AAAAAAAGBJ}
00123 {\cf20 // Test LanguageTranslatorApp translation}\par
{\bkmkstart AAAAAAAGBK}{\bkmkend AAAAAAAGBK}
00124 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppTranslation) \{\par
{\bkmkstart AAAAAAAGBL}{\bkmkend AAAAAAAGBL}
00125     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGBM}{\bkmkend AAAAAAAGBM}
00126     \par
{\bkmkstart AAAAAAAGBN}{\bkmkend AAAAAAAGBN}
00127     {\cf20 // Test translation functions}\par
{\bkmkstart AAAAAAAGBO}{\bkmkend AAAAAAAGBO}
00128     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAGBS}{\bkmkend AAAAAAAGBS}
00129     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGBV}{\bkmkend AAAAAAAGBV}
00130     \par
{\bkmkstart AAAAAAAGBW}{\bkmkend AAAAAAAGBW}
00131     result = app.translateWord({\cf22 "hello"});\par
{\bkmkstart AAAAAAAGBY}{\bkmkend AAAAAAAGBY}
00132     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGCA}{\bkmkend AAAAAAAGCA}
00133     \par
{\bkmkstart AAAAAAAGCC}{\bkmkend AAAAAAAGCC}
00134     result = app.translatePhrase({\cf22 "good morning"});\par
{\bkmkstart AAAAAAAGCD}{\bkmkend AAAAAAAGCD}
00135     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGCF}{\bkmkend AAAAAAAGCF}
00136     \par
{\bkmkstart AAAAAAAGCG}{\bkmkend AAAAAAAGCG}
00137     {\cf20 // Test with empty input}\par
{\bkmkstart AAAAAAAGCI}{\bkmkend AAAAAAAGCI}
00138     result = app.translateText({\cf22 ""});\par
{\bkmkstart AAAAAAAGCL}{\bkmkend AAAAAAAGCL}
00139     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAGCP}{\bkmkend AAAAAAAGCP}
00140 \}\par
{\bkmkstart AAAAAAAGCQ}{\bkmkend AAAAAAAGCQ}
00141 \par
{\bkmkstart AAAAAAAGCS}{\bkmkend AAAAAAAGCS}
00142 {\cf20 // Test LanguageTranslatorApp data management}\par
{\bkmkstart AAAAAAAGCT}{\bkmkend AAAAAAAGCT}
00143 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppDataManagement) \{\par
{\bkmkstart AAAAAAAGCX}{\bkmkend AAAAAAAGCX}
00144     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGDB}{\bkmkend AAAAAAAGDB}
00145     \par
{\bkmkstart AAAAAAAGDC}{\bkmkend AAAAAAAGDC}
00146     {\cf20 // Test data management functions (should not crash)}\par
{\bkmkstart AAAAAAAGDE}{\bkmkend AAAAAAAGDE}
00147     EXPECT_NO_THROW(app.initializeDefaultData());\par
{\bkmkstart AAAAAAAGDH}{\bkmkend AAAAAAAGDH}
00148     EXPECT_NO_THROW(app.saveData());\par
{\bkmkstart AAAAAAAGDJ}{\bkmkend AAAAAAAGDJ}
00149     EXPECT_NO_THROW(app.loadData());\par
{\bkmkstart AAAAAAAGDL}{\bkmkend AAAAAAAGDL}
00150     EXPECT_NO_THROW(app.loadAllDictionaries());\par
{\bkmkstart AAAAAAAGDM}{\bkmkend AAAAAAAGDM}
00151 \}\par
{\bkmkstart AAAAAAAGDO}{\bkmkend AAAAAAAGDO}
00152 \par
{\bkmkstart AAAAAAAGDQ}{\bkmkend AAAAAAAGDQ}
00153 {\cf20 // Test LanguageTranslatorApp API functions}\par
{\bkmkstart AAAAAAAGDT}{\bkmkend AAAAAAAGDT}
00154 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppAPI) \{\par
{\bkmkstart AAAAAAAGDW}{\bkmkend AAAAAAAGDW}
00155     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGDY}{\bkmkend AAAAAAAGDY}
00156     \par
{\bkmkstart AAAAAAAGEA}{\bkmkend AAAAAAAGEA}
00157     {\cf20 // Test API functions}\par
{\bkmkstart AAAAAAAGEC}{\bkmkend AAAAAAAGEC}
00158     EXPECT_FALSE(app.isAPIAvailable());\par
{\bkmkstart AAAAAAAGEE}{\bkmkend AAAAAAAGEE}
00159     \par
{\bkmkstart AAAAAAAGEG}{\bkmkend AAAAAAAGEG}
00160     app.setAPIKey({\cf22 "test-api-key"});\par
{\bkmkstart AAAAAAAGEI}{\bkmkend AAAAAAAGEI}
00161     app.setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAAGEK}{\bkmkend AAAAAAAGEK}
00162     app.setAPIMode({\cf17 false});\par
{\bkmkstart AAAAAAAGEM}{\bkmkend AAAAAAAGEM}
00163     \par
{\bkmkstart AAAAAAAGEN}{\bkmkend AAAAAAAGEN}
00164     {\cf20 // Test API translation (should return empty string)}\par
{\bkmkstart AAAAAAAGEP}{\bkmkend AAAAAAAGEP}
00165     std::string result = app.translateWithGoogleAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAGET}{\bkmkend AAAAAAAGET}
00166     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAGEV}{\bkmkend AAAAAAAGEV}
00167     \par
{\bkmkstart AAAAAAAGEY}{\bkmkend AAAAAAAGEY}
00168     result = app.translateWithMicrosoftAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAGFB}{\bkmkend AAAAAAAGFB}
00169     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAGFD}{\bkmkend AAAAAAAGFD}
00170 \}\par
{\bkmkstart AAAAAAAGFF}{\bkmkend AAAAAAAGFF}
00171 \par
{\bkmkstart AAAAAAAGFH}{\bkmkend AAAAAAAGFH}
00172 {\cf20 // Test LanguageTranslatorApp phrase library}\par
{\bkmkstart AAAAAAAGFI}{\bkmkend AAAAAAAGFI}
00173 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPhraseLibrary) \{\par
{\bkmkstart AAAAAAAGFK}{\bkmkend AAAAAAAGFK}
00174     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGFP}{\bkmkend AAAAAAAGFP}
00175     \par
{\bkmkstart AAAAAAAGFQ}{\bkmkend AAAAAAAGFQ}
00176     {\cf20 // Test phrase library functions}\par
{\bkmkstart AAAAAAAGFS}{\bkmkend AAAAAAAGFS}
00177     app.addPhrase({\cf22 "Hello, how are you?"}, {\cf22 "greetings"});\par
{\bkmkstart AAAAAAAGFV}{\bkmkend AAAAAAAGFV}
00178     app.addPhrase({\cf22 "Thank you very much"}, {\cf22 "politeness"});\par
{\bkmkstart AAAAAAAGSR}{\bkmkend AAAAAAAGSR}
00179     \par
{\bkmkstart AAAAAAAGST}{\bkmkend AAAAAAAGST}
00180     {\cf20 // Test phrase translation}\par
{\bkmkstart AAAAAAAGSW}{\bkmkend AAAAAAAGSW}
00181     std::string result = app.translatePhrase({\cf22 "Hello, how are you?"});\par
{\bkmkstart AAAAAAAGTA}{\bkmkend AAAAAAAGTA}
00182     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGTD}{\bkmkend AAAAAAAGTD}
00183 \}\par
{\bkmkstart AAAAAAAGTE}{\bkmkend AAAAAAAGTE}
00184 \par
{\bkmkstart AAAAAAAGTF}{\bkmkend AAAAAAAGTF}
00185 {\cf20 // Test LanguageTranslatorApp learning tips}\par
{\bkmkstart AAAAAAAGTG}{\bkmkend AAAAAAAGTG}
00186 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLearningTips) \{\par
{\bkmkstart AAAAAAAGTJ}{\bkmkend AAAAAAAGTJ}
00187     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGTN}{\bkmkend AAAAAAAGTN}
00188     \par
{\bkmkstart AAAAAAAGTO}{\bkmkend AAAAAAAGTO}
00189     {\cf20 // Test learning tips functions}\par
{\bkmkstart AAAAAAAGTP}{\bkmkend AAAAAAAGTP}
00190     app.addLearningTip({\cf22 "Practice daily for better results"});\par
{\bkmkstart AAAAAAAGTR}{\bkmkend AAAAAAAGTR}
00191     app.addLearningTip({\cf22 "Use flashcards for vocabulary"});\par
{\bkmkstart AAAAAAAGYA}{\bkmkend AAAAAAAGYA}
00192     \par
{\bkmkstart AAAAAAAGYD}{\bkmkend AAAAAAAGYD}
00193     {\cf20 // Test showing learning tips (should not crash)}\par
{\bkmkstart AAAAAAAGYH}{\bkmkend AAAAAAAGYH}
00194     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAGYO}{\bkmkend AAAAAAAGYO}
00195 \}\par
{\bkmkstart AAAAAAAGYQ}{\bkmkend AAAAAAAGYQ}
00196 \par
{\bkmkstart AAAAAAAGYR}{\bkmkend AAAAAAAGYR}
00197 {\cf20 // Test LanguageTranslatorApp pronunciation guide}\par
{\bkmkstart AAAAAAAGYT}{\bkmkend AAAAAAAGYT}
00198 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPronunciationGuide) \{\par
{\bkmkstart AAAAAAAGZC}{\bkmkend AAAAAAAGZC}
00199     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGZF}{\bkmkend AAAAAAAGZF}
00200     \par
{\bkmkstart AAAAAAAGZG}{\bkmkend AAAAAAAGZG}
00201     {\cf20 // Test pronunciation guide functions}\par
{\bkmkstart AAAAAAAGZO}{\bkmkend AAAAAAAGZO}
00202     app.addPronunciation({\cf22 "hello"}, {\cf22 "heh-LOH"});\par
{\bkmkstart AAAAAAAGZV}{\bkmkend AAAAAAAGZV}
00203     app.addPronunciation({\cf22 "world"}, {\cf22 "wurld"});\par
{\bkmkstart AAAAAAAGZW}{\bkmkend AAAAAAAGZW}
00204     \par
{\bkmkstart AAAAAAAGZY}{\bkmkend AAAAAAAGZY}
00205     {\cf20 // Test showing pronunciation guide (should not crash)}\par
{\bkmkstart AAAAAAAGZZ}{\bkmkend AAAAAAAGZZ}
00206     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAHAD}{\bkmkend AAAAAAAHAD}
00207 \}\par
{\bkmkstart AAAAAAAHAE}{\bkmkend AAAAAAAHAE}
00208 \par
{\bkmkstart AAAAAAAHAF}{\bkmkend AAAAAAAHAF}
00209 {\cf20 // Test LanguageTranslatorApp language selection}\par
{\bkmkstart AAAAAAAHAH}{\bkmkend AAAAAAAHAH}
00210 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageSelection) \{\par
{\bkmkstart AAAAAAAHAI}{\bkmkend AAAAAAAHAI}
00211     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHAM}{\bkmkend AAAAAAAHAM}
00212     \par
{\bkmkstart AAAAAAAHAN}{\bkmkend AAAAAAAHAN}
00213     {\cf20 // Test language selection (should not crash)}\par
{\bkmkstart AAAAAAAHAP}{\bkmkend AAAAAAAHAP}
00214     EXPECT_NO_THROW(app.showLanguageSelection());\par
{\bkmkstart AAAAAAAHAR}{\bkmkend AAAAAAAHAR}
00215     \par
{\bkmkstart AAAAAAAHAS}{\bkmkend AAAAAAAHAS}
00216     {\cf20 // Test phrase library display (should not crash)}\par
{\bkmkstart AAAAAAAHAT}{\bkmkend AAAAAAAHAT}
00217     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAHAU}{\bkmkend AAAAAAAHAU}
00218 \}\par
{\bkmkstart AAAAAAAHAV}{\bkmkend AAAAAAAHAV}
00219 \par
{\bkmkstart AAAAAAAHAW}{\bkmkend AAAAAAAHAW}
00220 {\cf20 // Test LanguageTranslatorApp edge cases}\par
{\bkmkstart AAAAAAAHAX}{\bkmkend AAAAAAAHAX}
00221 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppEdgeCases) \{\par
{\bkmkstart AAAAAAAHBB}{\bkmkend AAAAAAAHBB}
00222     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHBC}{\bkmkend AAAAAAAHBC}
00223     \par
{\bkmkstart AAAAAAAHBE}{\bkmkend AAAAAAAHBE}
00224     {\cf20 // Test with very long text}\par
{\bkmkstart AAAAAAAHBF}{\bkmkend AAAAAAAHBF}
00225     std::string longText(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAHBI}{\bkmkend AAAAAAAHBI}
00226     std::string result = app.translateText(longText);\par
{\bkmkstart AAAAAAAHBM}{\bkmkend AAAAAAAHBM}
00227     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHBO}{\bkmkend AAAAAAAHBO}
00228     \par
{\bkmkstart AAAAAAAHBP}{\bkmkend AAAAAAAHBP}
00229     {\cf20 // Test with special characters}\par
{\bkmkstart AAAAAAAHBQ}{\bkmkend AAAAAAAHBQ}
00230     result = app.translateText({\cf22 "Hello, World! @#$%^&*()"});\par
{\bkmkstart AAAAAAAHBS}{\bkmkend AAAAAAAHBS}
00231     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHBV}{\bkmkend AAAAAAAHBV}
00232     \par
{\bkmkstart AAAAAAAHBW}{\bkmkend AAAAAAAHBW}
00233     {\cf20 // Test with numbers}\par
{\bkmkstart AAAAAAAHBY}{\bkmkend AAAAAAAHBY}
00234     result = app.translateText({\cf22 "123 456 789"});\par
{\bkmkstart AAAAAAAHCB}{\bkmkend AAAAAAAHCB}
00235     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHCF}{\bkmkend AAAAAAAHCF}
00236 \}\par
{\bkmkstart AAAAAAAHCG}{\bkmkend AAAAAAAHCG}
00237 \par
{\bkmkstart AAAAAAAHCH}{\bkmkend AAAAAAAHCH}
00238 {\cf20 // Test LanguageTranslatorApp menu handling}\par
{\bkmkstart AAAAAAAHCI}{\bkmkend AAAAAAAHCI}
00239 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppMenuHandling) \{\par
{\bkmkstart AAAAAAAHCK}{\bkmkend AAAAAAAHCK}
00240     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHCM}{\bkmkend AAAAAAAHCM}
00241     \par
{\bkmkstart AAAAAAAHCN}{\bkmkend AAAAAAAHCN}
00242     {\cf20 // Test handleUserChoice with various inputs (should not crash)}\par
{\bkmkstart AAAAAAAHCP}{\bkmkend AAAAAAAHCP}
00243     EXPECT_NO_THROW(app.handleUserChoice(0)); {\cf20 // Exit}\par
{\bkmkstart AAAAAAAHCS}{\bkmkend AAAAAAAHCS}
00244     EXPECT_NO_THROW(app.handleUserChoice(1)); {\cf20 // Login/Translate}\par
{\bkmkstart AAAAAAAHCU}{\bkmkend AAAAAAAHCU}
00245     EXPECT_NO_THROW(app.handleUserChoice(2)); {\cf20 // Register/Change Languages}\par
{\bkmkstart AAAAAAAHCX}{\bkmkend AAAAAAAHCX}
00246     EXPECT_NO_THROW(app.handleUserChoice(3)); {\cf20 // Phrase Library}\par
{\bkmkstart AAAAAAAHCZ}{\bkmkend AAAAAAAHCZ}
00247     EXPECT_NO_THROW(app.handleUserChoice(4)); {\cf20 // Learning Tips}\par
{\bkmkstart AAAAAAAHDB}{\bkmkend AAAAAAAHDB}
00248     EXPECT_NO_THROW(app.handleUserChoice(5)); {\cf20 // Pronunciation Guide}\par
{\bkmkstart AAAAAAAHDD}{\bkmkend AAAAAAAHDD}
00249     EXPECT_NO_THROW(app.handleUserChoice(6)); {\cf20 // Logout}\par
{\bkmkstart AAAAAAAHDH}{\bkmkend AAAAAAAHDH}
00250     EXPECT_NO_THROW(app.handleUserChoice(99)); {\cf20 // Invalid choice}\par
{\bkmkstart AAAAAAAHDK}{\bkmkend AAAAAAAHDK}
00251 \}\par
{\bkmkstart AAAAAAAHDL}{\bkmkend AAAAAAAHDL}
00252 \par
{\bkmkstart AAAAAAAHDN}{\bkmkend AAAAAAAHDN}
00253 {\cf20 // Test LanguageTranslatorApp performance}\par
{\bkmkstart AAAAAAAHDO}{\bkmkend AAAAAAAHDO}
00254 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPerformance) \{\par
{\bkmkstart AAAAAAAHDQ}{\bkmkend AAAAAAAHDQ}
00255     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHDS}{\bkmkend AAAAAAAHDS}
00256     \par
{\bkmkstart AAAAAAAHDU}{\bkmkend AAAAAAAHDU}
00257     {\cf20 // Test with many phrases}\par
{\bkmkstart AAAAAAAHDW}{\bkmkend AAAAAAAHDW}
00258     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAAHDX}{\bkmkend AAAAAAAHDX}
00259         app.addPhrase({\cf22 "phrase "} + std::to_string(i), {\cf22 "category"} + std::to_string(i % 5));\par
{\bkmkstart AAAAAAAHEF}{\bkmkend AAAAAAAHEF}
00260     \}\par
{\bkmkstart AAAAAAAHEG}{\bkmkend AAAAAAAHEG}
00261     \par
{\bkmkstart AAAAAAAHEI}{\bkmkend AAAAAAAHEI}
00262     {\cf20 // Test with many learning tips}\par
{\bkmkstart AAAAAAAHEJ}{\bkmkend AAAAAAAHEJ}
00263     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAHEM}{\bkmkend AAAAAAAHEM}
00264         app.addLearningTip({\cf22 "tip "} + std::to_string(i));\par
{\bkmkstart AAAAAAAHEQ}{\bkmkend AAAAAAAHEQ}
00265     \}\par
{\bkmkstart AAAAAAAHER}{\bkmkend AAAAAAAHER}
00266     \par
{\bkmkstart AAAAAAAHES}{\bkmkend AAAAAAAHES}
00267     {\cf20 // Test with many pronunciations}\par
{\bkmkstart AAAAAAAHEU}{\bkmkend AAAAAAAHEU}
00268     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAHEX}{\bkmkend AAAAAAAHEX}
00269         app.addPronunciation({\cf22 "word"} + std::to_string(i), {\cf22 "pronunciation"} + std::to_string(i));\par
{\bkmkstart AAAAAAAHFA}{\bkmkend AAAAAAAHFA}
00270     \}\par
{\bkmkstart AAAAAAAHFB}{\bkmkend AAAAAAAHFB}
00271     \par
{\bkmkstart AAAAAAAHFC}{\bkmkend AAAAAAAHFC}
00272     {\cf20 // Test that everything still works}\par
{\bkmkstart AAAAAAAHFD}{\bkmkend AAAAAAAHFD}
00273     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAHFG}{\bkmkend AAAAAAAHFG}
00274     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAHFI}{\bkmkend AAAAAAAHFI}
00275     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAHFK}{\bkmkend AAAAAAAHFK}
00276 \}\par
{\bkmkstart AAAAAAAHFM}{\bkmkend AAAAAAAHFM}
00277 \par
{\bkmkstart AAAAAAAHFN}{\bkmkend AAAAAAAHFN}
00278 {\cf20 // Test LanguageTranslatorApp consistency}\par
{\bkmkstart AAAAAAAHFP}{\bkmkend AAAAAAAHFP}
00279 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppConsistency) \{\par
{\bkmkstart AAAAAAAHFT}{\bkmkend AAAAAAAHFT}
00280     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHFW}{\bkmkend AAAAAAAHFW}
00281     \par
{\bkmkstart AAAAAAAHFX}{\bkmkend AAAAAAAHFX}
00282     {\cf20 // Test that same inputs give same outputs}\par
{\bkmkstart AAAAAAAHFZ}{\bkmkend AAAAAAAHFZ}
00283     std::string input = {\cf22 "hello world"};\par
{\bkmkstart AAAAAAAHGC}{\bkmkend AAAAAAAHGC}
00284     std::string result1 = app.translateText(input);\par
{\bkmkstart AAAAAAAHGF}{\bkmkend AAAAAAAHGF}
00285     std::string result2 = app.translateText(input);\par
{\bkmkstart AAAAAAAHGI}{\bkmkend AAAAAAAHGI}
00286     EXPECT_EQ(result1, result2);\par
{\bkmkstart AAAAAAAHGK}{\bkmkend AAAAAAAHGK}
00287 \}\par
{\bkmkstart AAAAAAAHGM}{\bkmkend AAAAAAAHGM}
00288 \par
{\bkmkstart AAAAAAAHGN}{\bkmkend AAAAAAAHGN}
00289 {\cf20 // Test LanguageTranslatorApp with different language combinations}\par
{\bkmkstart AAAAAAAHGS}{\bkmkend AAAAAAAHGS}
00290 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageCombinations) \{\par
{\bkmkstart AAAAAAAHGW}{\bkmkend AAAAAAAHGW}
00291     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHGY}{\bkmkend AAAAAAAHGY}
00292     \par
{\bkmkstart AAAAAAAHHA}{\bkmkend AAAAAAAHHA}
00293     {\cf20 // Test English to Turkish}\par
{\bkmkstart AAAAAAAHHB}{\bkmkend AAAAAAAHHB}
00294     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHHE}{\bkmkend AAAAAAAHHE}
00295     app.setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAHHI}{\bkmkend AAAAAAAHHI}
00296     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHHL}{\bkmkend AAAAAAAHHL}
00297     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHHN}{\bkmkend AAAAAAAHHN}
00298     \par
{\bkmkstart AAAAAAAHHO}{\bkmkend AAAAAAAHHO}
00299     {\cf20 // Test English to Spanish}\par
{\bkmkstart AAAAAAAHHP}{\bkmkend AAAAAAAHHP}
00300     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHHR}{\bkmkend AAAAAAAHHR}
00301     app.setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAHHU}{\bkmkend AAAAAAAHHU}
00302     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHHW}{\bkmkend AAAAAAAHHW}
00303     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHHX}{\bkmkend AAAAAAAHHX}
00304     \par
{\bkmkstart AAAAAAAHHZ}{\bkmkend AAAAAAAHHZ}
00305     {\cf20 // Test English to French}\par
{\bkmkstart AAAAAAAHIB}{\bkmkend AAAAAAAHIB}
00306     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHIE}{\bkmkend AAAAAAAHIE}
00307     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAHLX}{\bkmkend AAAAAAAHLX}
00308     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHRA}{\bkmkend AAAAAAAHRA}
00309     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHRB}{\bkmkend AAAAAAAHRB}
00310     \par
{\bkmkstart AAAAAAAHRC}{\bkmkend AAAAAAAHRC}
00311     {\cf20 // Test Turkish to English}\par
{\bkmkstart AAAAAAAHRD}{\bkmkend AAAAAAAHRD}
00312     app.setSourceLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAHRE}{\bkmkend AAAAAAAHRE}
00313     app.setTargetLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHRF}{\bkmkend AAAAAAAHRF}
00314     result = app.translateText({\cf22 "merhaba dünya"});\par
{\bkmkstart AAAAAAAHRG}{\bkmkend AAAAAAAHRG}
00315     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHRH}{\bkmkend AAAAAAAHRH}
00316 \}\par
}
}