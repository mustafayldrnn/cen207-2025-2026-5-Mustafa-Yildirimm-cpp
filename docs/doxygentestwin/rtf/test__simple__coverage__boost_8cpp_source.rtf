{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_simple_coverage_boost.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\bkmkstart AAAAAAAEYX}
{\bkmkend AAAAAAAEYX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEYY" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEZB}{\bkmkend AAAAAAAEZB}
00001 \par
{\bkmkstart AAAAAAAEZC}{\bkmkend AAAAAAAEZC}
00007 \par
{\bkmkstart AAAAAAAEZD}{\bkmkend AAAAAAAEZD}
00008 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAEZH}{\bkmkend AAAAAAAEZH}
00009 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAEZL}{\bkmkend AAAAAAAEZL}
00010 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAEZN}{\bkmkend AAAAAAAEZN}
00011 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAEZQ}{\bkmkend AAAAAAAEZQ}
00012 \par
{\bkmkstart AAAAAAAEZR}{\bkmkend AAAAAAAEZR}
00013 {\cf20 // Include only working headers}\par
{\bkmkstart AAAAAAAEZS}{\bkmkend AAAAAAAEZS}
00014 {\cf21 #include "../src/SafeChronoCalculator.h"}\par
{\bkmkstart AAAAAAAEZV}{\bkmkend AAAAAAAEZV}
00015 {\cf21 #include "../src/LanguageTranslator/header/LanguageTranslator.h"}\par
{\bkmkstart AAAAAAAFAJ}{\bkmkend AAAAAAAFAJ}
00016 \par
{\bkmkstart AAAAAAAFAK}{\bkmkend AAAAAAAFAK}
00017 {\cf17 using namespace }SafeChrono;\par
{\bkmkstart AAAAAAAFAO}{\bkmkend AAAAAAAFAO}
00018 {\cf17 using namespace }Coruh::LanguageTranslator;\par
{\bkmkstart AAAAAAAFAS}{\bkmkend AAAAAAAFAS}
00019 \par
{\bkmkstart AAAAAAAFAT}{\bkmkend AAAAAAAFAT}
00020 {\cf17 class }SimpleCoverageBoostTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAFAZ}{\bkmkend AAAAAAAFAZ}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAFBD}{\bkmkend AAAAAAAFBD}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFBI}{\bkmkend AAAAAAAFBI}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAFBJ}{\bkmkend AAAAAAAFBJ}
00024     \}\par
{\bkmkstart AAAAAAAFBK}{\bkmkend AAAAAAAFBK}
00025     \par
{\bkmkstart AAAAAAAFBL}{\bkmkend AAAAAAAFBL}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAFBO}{\bkmkend AAAAAAAFBO}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAFBP}{\bkmkend AAAAAAAFBP}
00028     \}\par
{\bkmkstart AAAAAAAFBR}{\bkmkend AAAAAAAFBR}
00029 \};\par
{\bkmkstart AAAAAAAFBS}{\bkmkend AAAAAAAFBS}
00030 \par
{\bkmkstart AAAAAAAFBU}{\bkmkend AAAAAAAFBU}
00031 {\cf20 // Test SafeChronoCalculator static methods}\par
{\bkmkstart AAAAAAAFBV}{\bkmkend AAAAAAAFBV}
00032 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculator) \{\par
{\bkmkstart AAAAAAAFCM}{\bkmkend AAAAAAAFCM}
00033     {\cf20 // Test safe duration calculation}\par
{\bkmkstart AAAAAAAFCO}{\bkmkend AAAAAAAFCO}
00034     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFCV}{\bkmkend AAAAAAAFCV}
00035     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFDA}{\bkmkend AAAAAAAFDA}
00036     \par
{\bkmkstart AAAAAAAFDB}{\bkmkend AAAAAAAFDB}
00037     {\cf20 // Test 10MHz calculation}\par
{\bkmkstart AAAAAAAFDE}{\bkmkend AAAAAAAFDE}
00038     result = SafeChronoCalculator::calculateFor10MHz(1000);\par
{\bkmkstart AAAAAAAFDG}{\bkmkend AAAAAAAFDG}
00039     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFDK}{\bkmkend AAAAAAAFDK}
00040     \par
{\bkmkstart AAAAAAAFDL}{\bkmkend AAAAAAAFDL}
00041     {\cf20 // Test 24MHz calculation}\par
{\bkmkstart AAAAAAAFDO}{\bkmkend AAAAAAAFDO}
00042     result = SafeChronoCalculator::calculateFor24MHz(1000);\par
{\bkmkstart AAAAAAAFDR}{\bkmkend AAAAAAAFDR}
00043     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAFDU}{\bkmkend AAAAAAAFDU}
00044     \par
{\bkmkstart AAAAAAAFDX}{\bkmkend AAAAAAAFDX}
00045     {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAAFDZ}{\bkmkend AAAAAAAFDZ}
00046     {\cf18 bool} wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, 1000);\par
{\bkmkstart AAAAAAAFEF}{\bkmkend AAAAAAAFEF}
00047     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAFEK}{\bkmkend AAAAAAAFEK}
00048     \par
{\bkmkstart AAAAAAAFES}{\bkmkend AAAAAAAFES}
00049     {\cf20 // Test with zero values}\par
{\bkmkstart AAAAAAAFET}{\bkmkend AAAAAAAFET}
00050     wouldOverflow = SafeChronoCalculator::wouldOverflow(0, 1000);\par
{\bkmkstart AAAAAAAFFL}{\bkmkend AAAAAAAFFL}
00051     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAFUO}{\bkmkend AAAAAAAFUO}
00052     \par
{\bkmkstart AAAAAAAFUS}{\bkmkend AAAAAAAFUS}
00053     {\cf20 // Test with large values}\par
{\bkmkstart AAAAAAAFUW}{\bkmkend AAAAAAAFUW}
00054     {\cf18 long} {\cf18 long} largeValue = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAFXE}{\bkmkend AAAAAAAFXE}
00055     wouldOverflow = SafeChronoCalculator::wouldOverflow(largeValue, 3);\par
{\bkmkstart AAAAAAAFXL}{\bkmkend AAAAAAAFXL}
00056     EXPECT_TRUE(wouldOverflow);\par
{\bkmkstart AAAAAAAFXO}{\bkmkend AAAAAAAFXO}
00057 \}\par
{\bkmkstart AAAAAAAFXP}{\bkmkend AAAAAAAFXP}
00058 \par
{\bkmkstart AAAAAAAFXQ}{\bkmkend AAAAAAAFXQ}
00059 {\cf20 // Test SafeChronoCalculator error handling}\par
{\bkmkstart AAAAAAAFXV}{\bkmkend AAAAAAAFXV}
00060 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorErrors) \{\par
{\bkmkstart AAAAAAAFYE}{\bkmkend AAAAAAAFYE}
00061     {\cf20 // Test invalid frequency}\par
{\bkmkstart AAAAAAAFYH}{\bkmkend AAAAAAAFYH}
00062     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 0, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFYM}{\bkmkend AAAAAAAFYM}
00063     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, -1000, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFYX}{\bkmkend AAAAAAAFYX}
00064     \par
{\bkmkstart AAAAAAAFYY}{\bkmkend AAAAAAAFYY}
00065     {\cf20 // Test invalid period denominator}\par
{\bkmkstart AAAAAAAFYZ}{\bkmkend AAAAAAAFYZ}
00066     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 0), std::invalid_argument);\par
{\bkmkstart AAAAAAAFZD}{\bkmkend AAAAAAAFZD}
00067     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, -1000), std::invalid_argument);\par
{\bkmkstart AAAAAAAFZG}{\bkmkend AAAAAAAFZG}
00068 \}\par
{\bkmkstart AAAAAAAFZH}{\bkmkend AAAAAAAFZH}
00069 \par
{\bkmkstart AAAAAAAFZI}{\bkmkend AAAAAAAFZI}
00070 {\cf20 // Test SafeChronoCalculator edge cases}\par
{\bkmkstart AAAAAAAFZK}{\bkmkend AAAAAAAFZK}
00071 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorEdgeCases) \{\par
{\bkmkstart AAAAAAAFZO}{\bkmkend AAAAAAAFZO}
00072     {\cf20 // Test with very small values}\par
{\bkmkstart AAAAAAAFZQ}{\bkmkend AAAAAAAFZQ}
00073     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAFZS}{\bkmkend AAAAAAAFZS}
00074     {\cf20 // 1 tick may round down to 0 depending on integer division; accept non-negative}\par
{\bkmkstart AAAAAAAFZV}{\bkmkend AAAAAAAFZV}
00075     EXPECT_GE(result.count(), 0);\par
{\bkmkstart AAAAAAAFZX}{\bkmkend AAAAAAAFZX}
00076     \par
{\bkmkstart AAAAAAAFZZ}{\bkmkend AAAAAAAFZZ}
00077     {\cf20 // Test with zero counter}\par
{\bkmkstart AAAAAAAGAD}{\bkmkend AAAAAAAGAD}
00078     result = SafeChronoCalculator::safeCalculateDuration(0, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAGAK}{\bkmkend AAAAAAAGAK}
00079     EXPECT_EQ(result.count(), 0);\par
{\bkmkstart AAAAAAAGAN}{\bkmkend AAAAAAAGAN}
00080     \par
{\bkmkstart AAAAAAAGAP}{\bkmkend AAAAAAAGAP}
00081     {\cf20 // Test with maximum safe values}\par
{\bkmkstart AAAAAAAGAS}{\bkmkend AAAAAAAGAS}
00082     {\cf20 // Use a smaller value to avoid intermediate overflow in portable implementations}\par
{\bkmkstart AAAAAAAGAU}{\bkmkend AAAAAAAGAU}
00083     {\cf18 long} {\cf18 long} maxSafe = std::numeric_limits<long long>::max() / 8;\par
{\bkmkstart AAAAAAAGCD}{\bkmkend AAAAAAAGCD}
00084     result = SafeChronoCalculator::safeCalculateDuration(maxSafe, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAGCM}{\bkmkend AAAAAAAGCM}
00085     EXPECT_GE(result.count(), 0);\par
{\bkmkstart AAAAAAAGCQ}{\bkmkend AAAAAAAGCQ}
00086 \}\par
{\bkmkstart AAAAAAAGCR}{\bkmkend AAAAAAAGCR}
00087 \par
{\bkmkstart AAAAAAAGCS}{\bkmkend AAAAAAAGCS}
00088 {\cf20 // Test SafeChronoCalculator performance}\par
{\bkmkstart AAAAAAAGCV}{\bkmkend AAAAAAAGCV}
00089 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorPerformance) \{\par
{\bkmkstart AAAAAAAGDA}{\bkmkend AAAAAAAGDA}
00090     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAGDF}{\bkmkend AAAAAAAGDF}
00091     \par
{\bkmkstart AAAAAAAGDG}{\bkmkend AAAAAAAGDG}
00092     {\cf20 // Perform many calculations}\par
{\bkmkstart AAAAAAAGDH}{\bkmkend AAAAAAAGDH}
00093     {\cf19 for} ({\cf18 int} i = 1; i <= 1000; ++i) \{\par
{\bkmkstart AAAAAAAGDM}{\bkmkend AAAAAAAGDM}
00094         {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(i, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAGDR}{\bkmkend AAAAAAAGDR}
00095         EXPECT_GE(result.count(), 0);\par
{\bkmkstart AAAAAAAGDT}{\bkmkend AAAAAAAGDT}
00096     \}\par
{\bkmkstart AAAAAAAGDV}{\bkmkend AAAAAAAGDV}
00097     \par
{\bkmkstart AAAAAAAGDW}{\bkmkend AAAAAAAGDW}
00098     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAGED}{\bkmkend AAAAAAAGED}
00099     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAGEL}{\bkmkend AAAAAAAGEL}
00100     \par
{\bkmkstart AAAAAAAGEM}{\bkmkend AAAAAAAGEM}
00101     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAGEP}{\bkmkend AAAAAAAGEP}
00102     EXPECT_LT(duration.count(), 1000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAGES}{\bkmkend AAAAAAAGES}
00103 \}\par
{\bkmkstart AAAAAAAGET}{\bkmkend AAAAAAAGET}
00104 \par
{\bkmkstart AAAAAAAGEW}{\bkmkend AAAAAAAGEW}
00105 {\cf20 // Test LanguageTranslatorApp basic functionality}\par
{\bkmkstart AAAAAAAGEY}{\bkmkend AAAAAAAGEY}
00106 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppBasic) \{\par
{\bkmkstart AAAAAAAGFF}{\bkmkend AAAAAAAGFF}
00107     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGFL}{\bkmkend AAAAAAAGFL}
00108     \par
{\bkmkstart AAAAAAAGFM}{\bkmkend AAAAAAAGFM}
00109     {\cf20 // Test basic properties}\par
{\bkmkstart AAAAAAAGFO}{\bkmkend AAAAAAAGFO}
00110     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAGFU}{\bkmkend AAAAAAAGFU}
00111     \par
{\bkmkstart AAAAAAAGFX}{\bkmkend AAAAAAAGFX}
00112     {\cf20 // Test language management}\par
{\bkmkstart AAAAAAAGFY}{\bkmkend AAAAAAAGFY}
00113     app.setSourceLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAGGE}{\bkmkend AAAAAAAGGE}
00114     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAGGH}{\bkmkend AAAAAAAGGH}
00115     \par
{\bkmkstart AAAAAAAGGJ}{\bkmkend AAAAAAAGGJ}
00116     {\cf20 // Test user management}\par
{\bkmkstart AAAAAAAGGN}{\bkmkend AAAAAAAGGN}
00117     EXPECT_TRUE(app.registerUser({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAGGS}{\bkmkend AAAAAAAGGS}
00118     EXPECT_TRUE(app.login({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAGGW}{\bkmkend AAAAAAAGGW}
00119     EXPECT_TRUE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAGHA}{\bkmkend AAAAAAAGHA}
00120     \par
{\bkmkstart AAAAAAAGHC}{\bkmkend AAAAAAAGHC}
00121     app.logout();\par
{\bkmkstart AAAAAAAGHI}{\bkmkend AAAAAAAGHI}
00122     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAGHN}{\bkmkend AAAAAAAGHN}
00123 \}\par
{\bkmkstart AAAAAAAGHO}{\bkmkend AAAAAAAGHO}
00124 \par
{\bkmkstart AAAAAAAGHR}{\bkmkend AAAAAAAGHR}
00125 {\cf20 // Test LanguageTranslatorApp translation}\par
{\bkmkstart AAAAAAAGHS}{\bkmkend AAAAAAAGHS}
00126 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppTranslation) \{\par
{\bkmkstart AAAAAAAGIA}{\bkmkend AAAAAAAGIA}
00127     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGIC}{\bkmkend AAAAAAAGIC}
00128     \par
{\bkmkstart AAAAAAAGIF}{\bkmkend AAAAAAAGIF}
00129     {\cf20 // Test translation functions}\par
{\bkmkstart AAAAAAAGIJ}{\bkmkend AAAAAAAGIJ}
00130     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAGIO}{\bkmkend AAAAAAAGIO}
00131     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGIT}{\bkmkend AAAAAAAGIT}
00132     \par
{\bkmkstart AAAAAAAGIU}{\bkmkend AAAAAAAGIU}
00133     result = app.translateWord({\cf22 "hello"});\par
{\bkmkstart AAAAAAAGIZ}{\bkmkend AAAAAAAGIZ}
00134     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGJF}{\bkmkend AAAAAAAGJF}
00135     \par
{\bkmkstart AAAAAAAGNJ}{\bkmkend AAAAAAAGNJ}
00136     result = app.translatePhrase({\cf22 "good morning"});\par
{\bkmkstart AAAAAAAGNN}{\bkmkend AAAAAAAGNN}
00137     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGNP}{\bkmkend AAAAAAAGNP}
00138     \par
{\bkmkstart AAAAAAAGNR}{\bkmkend AAAAAAAGNR}
00139     {\cf20 // Test with empty input}\par
{\bkmkstart AAAAAAAGNT}{\bkmkend AAAAAAAGNT}
00140     result = app.translateText({\cf22 ""});\par
{\bkmkstart AAAAAAAGNX}{\bkmkend AAAAAAAGNX}
00141     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAGOF}{\bkmkend AAAAAAAGOF}
00142 \}\par
{\bkmkstart AAAAAAAGOH}{\bkmkend AAAAAAAGOH}
00143 \par
{\bkmkstart AAAAAAAGOI}{\bkmkend AAAAAAAGOI}
00144 {\cf20 // Test LanguageTranslatorApp data management}\par
{\bkmkstart AAAAAAAGOL}{\bkmkend AAAAAAAGOL}
00145 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppDataManagement) \{\par
{\bkmkstart AAAAAAAGOV}{\bkmkend AAAAAAAGOV}
00146     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGPB}{\bkmkend AAAAAAAGPB}
00147     \par
{\bkmkstart AAAAAAAGPD}{\bkmkend AAAAAAAGPD}
00148     {\cf20 // Test data management functions (should not crash)}\par
{\bkmkstart AAAAAAAGPH}{\bkmkend AAAAAAAGPH}
00149     EXPECT_NO_THROW(app.initializeDefaultData());\par
{\bkmkstart AAAAAAAGPN}{\bkmkend AAAAAAAGPN}
00150     EXPECT_NO_THROW(app.saveData());\par
{\bkmkstart AAAAAAAGPS}{\bkmkend AAAAAAAGPS}
00151     EXPECT_NO_THROW(app.loadData());\par
{\bkmkstart AAAAAAAGPY}{\bkmkend AAAAAAAGPY}
00152     EXPECT_NO_THROW(app.loadAllDictionaries());\par
{\bkmkstart AAAAAAAGQD}{\bkmkend AAAAAAAGQD}
00153 \}\par
{\bkmkstart AAAAAAAGQF}{\bkmkend AAAAAAAGQF}
00154 \par
{\bkmkstart AAAAAAAGQG}{\bkmkend AAAAAAAGQG}
00155 {\cf20 // Test LanguageTranslatorApp API functions}\par
{\bkmkstart AAAAAAAGQO}{\bkmkend AAAAAAAGQO}
00156 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppAPI) \{\par
{\bkmkstart AAAAAAAGQS}{\bkmkend AAAAAAAGQS}
00157     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGQZ}{\bkmkend AAAAAAAGQZ}
00158     \par
{\bkmkstart AAAAAAAGRA}{\bkmkend AAAAAAAGRA}
00159     {\cf20 // Test API functions}\par
{\bkmkstart AAAAAAAGRC}{\bkmkend AAAAAAAGRC}
00160     EXPECT_FALSE(app.isAPIAvailable());\par
{\bkmkstart AAAAAAAGRI}{\bkmkend AAAAAAAGRI}
00161     \par
{\bkmkstart AAAAAAAGRK}{\bkmkend AAAAAAAGRK}
00162     app.setAPIKey({\cf22 "test-api-key"});\par
{\bkmkstart AAAAAAAGRM}{\bkmkend AAAAAAAGRM}
00163     app.setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAAGRP}{\bkmkend AAAAAAAGRP}
00164     app.setAPIMode({\cf17 false});\par
{\bkmkstart AAAAAAAGRS}{\bkmkend AAAAAAAGRS}
00165     \par
{\bkmkstart AAAAAAAGRV}{\bkmkend AAAAAAAGRV}
00166     {\cf20 // Test API translation (should return empty string)}\par
{\bkmkstart AAAAAAAGRY}{\bkmkend AAAAAAAGRY}
00167     std::string result = app.translateWithGoogleAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAGSP}{\bkmkend AAAAAAAGSP}
00168     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAGST}{\bkmkend AAAAAAAGST}
00169     \par
{\bkmkstart AAAAAAAGSU}{\bkmkend AAAAAAAGSU}
00170     result = app.translateWithMicrosoftAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAGSW}{\bkmkend AAAAAAAGSW}
00171     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAGTA}{\bkmkend AAAAAAAGTA}
00172 \}\par
{\bkmkstart AAAAAAAGTC}{\bkmkend AAAAAAAGTC}
00173 \par
{\bkmkstart AAAAAAAGTE}{\bkmkend AAAAAAAGTE}
00174 {\cf20 // Test LanguageTranslatorApp phrase library}\par
{\bkmkstart AAAAAAAGTF}{\bkmkend AAAAAAAGTF}
00175 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPhraseLibrary) \{\par
{\bkmkstart AAAAAAAGTK}{\bkmkend AAAAAAAGTK}
00176     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGTT}{\bkmkend AAAAAAAGTT}
00177     \par
{\bkmkstart AAAAAAAGTX}{\bkmkend AAAAAAAGTX}
00178     {\cf20 // Test phrase library functions}\par
{\bkmkstart AAAAAAAGUA}{\bkmkend AAAAAAAGUA}
00179     app.addPhrase({\cf22 "Hello, how are you?"}, {\cf22 "greetings"});\par
{\bkmkstart AAAAAAAGUC}{\bkmkend AAAAAAAGUC}
00180     app.addPhrase({\cf22 "Thank you very much"}, {\cf22 "politeness"});\par
{\bkmkstart AAAAAAAGUG}{\bkmkend AAAAAAAGUG}
00181     \par
{\bkmkstart AAAAAAAGUH}{\bkmkend AAAAAAAGUH}
00182     {\cf20 // Test phrase translation}\par
{\bkmkstart AAAAAAAGUI}{\bkmkend AAAAAAAGUI}
00183     std::string result = app.translatePhrase({\cf22 "Hello, how are you?"});\par
{\bkmkstart AAAAAAAGUP}{\bkmkend AAAAAAAGUP}
00184     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAGUS}{\bkmkend AAAAAAAGUS}
00185 \}\par
{\bkmkstart AAAAAAAGUV}{\bkmkend AAAAAAAGUV}
00186 \par
{\bkmkstart AAAAAAAGUW}{\bkmkend AAAAAAAGUW}
00187 {\cf20 // Test LanguageTranslatorApp learning tips}\par
{\bkmkstart AAAAAAAGVA}{\bkmkend AAAAAAAGVA}
00188 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLearningTips) \{\par
{\bkmkstart AAAAAAAGVF}{\bkmkend AAAAAAAGVF}
00189     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGVM}{\bkmkend AAAAAAAGVM}
00190     \par
{\bkmkstart AAAAAAAGVO}{\bkmkend AAAAAAAGVO}
00191     {\cf20 // Test learning tips functions}\par
{\bkmkstart AAAAAAAGVR}{\bkmkend AAAAAAAGVR}
00192     app.addLearningTip({\cf22 "Practice daily for better results"});\par
{\bkmkstart AAAAAAAGVU}{\bkmkend AAAAAAAGVU}
00193     app.addLearningTip({\cf22 "Use flashcards for vocabulary"});\par
{\bkmkstart AAAAAAAGVY}{\bkmkend AAAAAAAGVY}
00194     \par
{\bkmkstart AAAAAAAGVZ}{\bkmkend AAAAAAAGVZ}
00195     {\cf20 // Test showing learning tips (should not crash)}\par
{\bkmkstart AAAAAAAGWB}{\bkmkend AAAAAAAGWB}
00196     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAGWI}{\bkmkend AAAAAAAGWI}
00197 \}\par
{\bkmkstart AAAAAAAGWK}{\bkmkend AAAAAAAGWK}
00198 \par
{\bkmkstart AAAAAAAGWM}{\bkmkend AAAAAAAGWM}
00199 {\cf20 // Test LanguageTranslatorApp pronunciation guide}\par
{\bkmkstart AAAAAAAGWO}{\bkmkend AAAAAAAGWO}
00200 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPronunciationGuide) \{\par
{\bkmkstart AAAAAAAGXA}{\bkmkend AAAAAAAGXA}
00201     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGXG}{\bkmkend AAAAAAAGXG}
00202     \par
{\bkmkstart AAAAAAAGXJ}{\bkmkend AAAAAAAGXJ}
00203     {\cf20 // Test pronunciation guide functions}\par
{\bkmkstart AAAAAAAGXM}{\bkmkend AAAAAAAGXM}
00204     app.addPronunciation({\cf22 "hello"}, {\cf22 "heh-LOH"});\par
{\bkmkstart AAAAAAAGXR}{\bkmkend AAAAAAAGXR}
00205     app.addPronunciation({\cf22 "world"}, {\cf22 "wurld"});\par
{\bkmkstart AAAAAAAGXX}{\bkmkend AAAAAAAGXX}
00206     \par
{\bkmkstart AAAAAAAGXZ}{\bkmkend AAAAAAAGXZ}
00207     {\cf20 // Test showing pronunciation guide (should not crash)}\par
{\bkmkstart AAAAAAAGYC}{\bkmkend AAAAAAAGYC}
00208     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAGYK}{\bkmkend AAAAAAAGYK}
00209 \}\par
{\bkmkstart AAAAAAAGYN}{\bkmkend AAAAAAAGYN}
00210 \par
{\bkmkstart AAAAAAAGYQ}{\bkmkend AAAAAAAGYQ}
00211 {\cf20 // Test LanguageTranslatorApp language selection}\par
{\bkmkstart AAAAAAAGYT}{\bkmkend AAAAAAAGYT}
00212 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageSelection) \{\par
{\bkmkstart AAAAAAAGYZ}{\bkmkend AAAAAAAGYZ}
00213     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAGZF}{\bkmkend AAAAAAAGZF}
00214     \par
{\bkmkstart AAAAAAAGZJ}{\bkmkend AAAAAAAGZJ}
00215     {\cf20 // Test language selection (should not crash)}\par
{\bkmkstart AAAAAAAGZL}{\bkmkend AAAAAAAGZL}
00216     EXPECT_NO_THROW(app.showLanguageSelection());\par
{\bkmkstart AAAAAAAGZR}{\bkmkend AAAAAAAGZR}
00217     \par
{\bkmkstart AAAAAAAGZT}{\bkmkend AAAAAAAGZT}
00218     {\cf20 // Test phrase library display (should not crash)}\par
{\bkmkstart AAAAAAAGZX}{\bkmkend AAAAAAAGZX}
00219     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAHAE}{\bkmkend AAAAAAAHAE}
00220 \}\par
{\bkmkstart AAAAAAAHAG}{\bkmkend AAAAAAAHAG}
00221 \par
{\bkmkstart AAAAAAAHAH}{\bkmkend AAAAAAAHAH}
00222 {\cf20 // Test LanguageTranslatorApp edge cases}\par
{\bkmkstart AAAAAAAHAK}{\bkmkend AAAAAAAHAK}
00223 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppEdgeCases) \{\par
{\bkmkstart AAAAAAAHAR}{\bkmkend AAAAAAAHAR}
00224     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHAX}{\bkmkend AAAAAAAHAX}
00225     \par
{\bkmkstart AAAAAAAHAY}{\bkmkend AAAAAAAHAY}
00226     {\cf20 // Test with very long text}\par
{\bkmkstart AAAAAAAHAZ}{\bkmkend AAAAAAAHAZ}
00227     std::string longText(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAHBH}{\bkmkend AAAAAAAHBH}
00228     std::string result = app.translateText(longText);\par
{\bkmkstart AAAAAAAHBM}{\bkmkend AAAAAAAHBM}
00229     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHBS}{\bkmkend AAAAAAAHBS}
00230     \par
{\bkmkstart AAAAAAAHBU}{\bkmkend AAAAAAAHBU}
00231     {\cf20 // Test with special characters}\par
{\bkmkstart AAAAAAAHBX}{\bkmkend AAAAAAAHBX}
00232     result = app.translateText({\cf22 "Hello, World! @#$%^&*()"});\par
{\bkmkstart AAAAAAAHCE}{\bkmkend AAAAAAAHCE}
00233     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHCH}{\bkmkend AAAAAAAHCH}
00234     \par
{\bkmkstart AAAAAAAHCK}{\bkmkend AAAAAAAHCK}
00235     {\cf20 // Test with numbers}\par
{\bkmkstart AAAAAAAHCM}{\bkmkend AAAAAAAHCM}
00236     result = app.translateText({\cf22 "123 456 789"});\par
{\bkmkstart AAAAAAAHCR}{\bkmkend AAAAAAAHCR}
00237     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHDH}{\bkmkend AAAAAAAHDH}
00238 \}\par
{\bkmkstart AAAAAAAHDI}{\bkmkend AAAAAAAHDI}
00239 \par
{\bkmkstart AAAAAAAHDJ}{\bkmkend AAAAAAAHDJ}
00240 {\cf20 // Test LanguageTranslatorApp menu handling}\par
{\bkmkstart AAAAAAAHDL}{\bkmkend AAAAAAAHDL}
00241 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppMenuHandling) \{\par
{\bkmkstart AAAAAAAHDR}{\bkmkend AAAAAAAHDR}
00242     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHDX}{\bkmkend AAAAAAAHDX}
00243     \par
{\bkmkstart AAAAAAAHDZ}{\bkmkend AAAAAAAHDZ}
00244     {\cf20 // Test handleUserChoice with various inputs (should not crash)}\par
{\bkmkstart AAAAAAAHEB}{\bkmkend AAAAAAAHEB}
00245     EXPECT_NO_THROW(app.handleUserChoice(0)); {\cf20 // Exit}\par
{\bkmkstart AAAAAAAHEE}{\bkmkend AAAAAAAHEE}
00246     EXPECT_NO_THROW(app.handleUserChoice(1)); {\cf20 // Login/Translate}\par
{\bkmkstart AAAAAAAHEM}{\bkmkend AAAAAAAHEM}
00247     EXPECT_NO_THROW(app.handleUserChoice(2)); {\cf20 // Register/Change Languages}\par
{\bkmkstart AAAAAAAHEQ}{\bkmkend AAAAAAAHEQ}
00248     EXPECT_NO_THROW(app.handleUserChoice(3)); {\cf20 // Phrase Library}\par
{\bkmkstart AAAAAAAHEU}{\bkmkend AAAAAAAHEU}
00249     EXPECT_NO_THROW(app.handleUserChoice(4)); {\cf20 // Learning Tips}\par
{\bkmkstart AAAAAAAHEZ}{\bkmkend AAAAAAAHEZ}
00250     EXPECT_NO_THROW(app.handleUserChoice(5)); {\cf20 // Pronunciation Guide}\par
{\bkmkstart AAAAAAAHFE}{\bkmkend AAAAAAAHFE}
00251     EXPECT_NO_THROW(app.handleUserChoice(6)); {\cf20 // Logout}\par
{\bkmkstart AAAAAAAHFI}{\bkmkend AAAAAAAHFI}
00252     EXPECT_NO_THROW(app.handleUserChoice(99)); {\cf20 // Invalid choice}\par
{\bkmkstart AAAAAAAHFL}{\bkmkend AAAAAAAHFL}
00253 \}\par
{\bkmkstart AAAAAAAHFO}{\bkmkend AAAAAAAHFO}
00254 \par
{\bkmkstart AAAAAAAHFQ}{\bkmkend AAAAAAAHFQ}
00255 {\cf20 // Test LanguageTranslatorApp performance}\par
{\bkmkstart AAAAAAAHFT}{\bkmkend AAAAAAAHFT}
00256 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPerformance) \{\par
{\bkmkstart AAAAAAAHFX}{\bkmkend AAAAAAAHFX}
00257     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHGE}{\bkmkend AAAAAAAHGE}
00258     \par
{\bkmkstart AAAAAAAHGG}{\bkmkend AAAAAAAHGG}
00259     {\cf20 // Test with many phrases}\par
{\bkmkstart AAAAAAAHGI}{\bkmkend AAAAAAAHGI}
00260     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAAHGS}{\bkmkend AAAAAAAHGS}
00261         app.addPhrase({\cf22 "phrase "} + std::to_string(i), {\cf22 "category"} + std::to_string(i % 5));\par
{\bkmkstart AAAAAAAHHI}{\bkmkend AAAAAAAHHI}
00262     \}\par
{\bkmkstart AAAAAAAHHJ}{\bkmkend AAAAAAAHHJ}
00263     \par
{\bkmkstart AAAAAAAHHM}{\bkmkend AAAAAAAHHM}
00264     {\cf20 // Test with many learning tips}\par
{\bkmkstart AAAAAAAHHP}{\bkmkend AAAAAAAHHP}
00265     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAHHU}{\bkmkend AAAAAAAHHU}
00266         app.addLearningTip({\cf22 "tip "} + std::to_string(i));\par
{\bkmkstart AAAAAAAHIA}{\bkmkend AAAAAAAHIA}
00267     \}\par
{\bkmkstart AAAAAAAHIC}{\bkmkend AAAAAAAHIC}
00268     \par
{\bkmkstart AAAAAAAHIF}{\bkmkend AAAAAAAHIF}
00269     {\cf20 // Test with many pronunciations}\par
{\bkmkstart AAAAAAAHIH}{\bkmkend AAAAAAAHIH}
00270     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAHIN}{\bkmkend AAAAAAAHIN}
00271         app.addPronunciation({\cf22 "word"} + std::to_string(i), {\cf22 "pronunciation"} + std::to_string(i));\par
{\bkmkstart AAAAAAAHIV}{\bkmkend AAAAAAAHIV}
00272     \}\par
{\bkmkstart AAAAAAAHIW}{\bkmkend AAAAAAAHIW}
00273     \par
{\bkmkstart AAAAAAAHIY}{\bkmkend AAAAAAAHIY}
00274     {\cf20 // Test that everything still works}\par
{\bkmkstart AAAAAAAHIZ}{\bkmkend AAAAAAAHIZ}
00275     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAHJF}{\bkmkend AAAAAAAHJF}
00276     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAHJK}{\bkmkend AAAAAAAHJK}
00277     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAHJQ}{\bkmkend AAAAAAAHJQ}
00278 \}\par
{\bkmkstart AAAAAAAHJS}{\bkmkend AAAAAAAHJS}
00279 \par
{\bkmkstart AAAAAAAHJU}{\bkmkend AAAAAAAHJU}
00280 {\cf20 // Test LanguageTranslatorApp consistency}\par
{\bkmkstart AAAAAAAHJX}{\bkmkend AAAAAAAHJX}
00281 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppConsistency) \{\par
{\bkmkstart AAAAAAAHKA}{\bkmkend AAAAAAAHKA}
00282     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHKD}{\bkmkend AAAAAAAHKD}
00283     \par
{\bkmkstart AAAAAAAHKF}{\bkmkend AAAAAAAHKF}
00284     {\cf20 // Test that same inputs give same outputs}\par
{\bkmkstart AAAAAAAHKH}{\bkmkend AAAAAAAHKH}
00285     std::string input = {\cf22 "hello world"};\par
{\bkmkstart AAAAAAAHKN}{\bkmkend AAAAAAAHKN}
00286     std::string result1 = app.translateText(input);\par
{\bkmkstart AAAAAAAHKU}{\bkmkend AAAAAAAHKU}
00287     std::string result2 = app.translateText(input);\par
{\bkmkstart AAAAAAAHLA}{\bkmkend AAAAAAAHLA}
00288     EXPECT_EQ(result1, result2);\par
{\bkmkstart AAAAAAAHLD}{\bkmkend AAAAAAAHLD}
00289 \}\par
{\bkmkstart AAAAAAAHLG}{\bkmkend AAAAAAAHLG}
00290 \par
{\bkmkstart AAAAAAAHLJ}{\bkmkend AAAAAAAHLJ}
00291 {\cf20 // Test LanguageTranslatorApp with different language combinations}\par
{\bkmkstart AAAAAAAHLL}{\bkmkend AAAAAAAHLL}
00292 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageCombinations) \{\par
{\bkmkstart AAAAAAAHLO}{\bkmkend AAAAAAAHLO}
00293     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAHLR}{\bkmkend AAAAAAAHLR}
00294     \par
{\bkmkstart AAAAAAAHLS}{\bkmkend AAAAAAAHLS}
00295     {\cf20 // Test English to Turkish}\par
{\bkmkstart AAAAAAAHLV}{\bkmkend AAAAAAAHLV}
00296     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHLY}{\bkmkend AAAAAAAHLY}
00297     app.setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAHMD}{\bkmkend AAAAAAAHMD}
00298     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHMH}{\bkmkend AAAAAAAHMH}
00299     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHMM}{\bkmkend AAAAAAAHMM}
00300     \par
{\bkmkstart AAAAAAAHMN}{\bkmkend AAAAAAAHMN}
00301     {\cf20 // Test English to Spanish}\par
{\bkmkstart AAAAAAAHMO}{\bkmkend AAAAAAAHMO}
00302     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHMQ}{\bkmkend AAAAAAAHMQ}
00303     app.setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAHMU}{\bkmkend AAAAAAAHMU}
00304     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHMY}{\bkmkend AAAAAAAHMY}
00305     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHNA}{\bkmkend AAAAAAAHNA}
00306     \par
{\bkmkstart AAAAAAAHND}{\bkmkend AAAAAAAHND}
00307     {\cf20 // Test English to French}\par
{\bkmkstart AAAAAAAHNH}{\bkmkend AAAAAAAHNH}
00308     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHNP}{\bkmkend AAAAAAAHNP}
00309     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAHNY}{\bkmkend AAAAAAAHNY}
00310     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAHOB}{\bkmkend AAAAAAAHOB}
00311     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHOE}{\bkmkend AAAAAAAHOE}
00312     \par
{\bkmkstart AAAAAAAHOF}{\bkmkend AAAAAAAHOF}
00313     {\cf20 // Test Turkish to English}\par
{\bkmkstart AAAAAAAHOH}{\bkmkend AAAAAAAHOH}
00314     app.setSourceLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAHOK}{\bkmkend AAAAAAAHOK}
00315     app.setTargetLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAHOM}{\bkmkend AAAAAAAHOM}
00316     result = app.translateText({\cf22 "merhaba dünya"});\par
{\bkmkstart AAAAAAAHON}{\bkmkend AAAAAAAHON}
00317     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAHOP}{\bkmkend AAAAAAAHOP}
00318 \}\par
}
}