{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_simple_coverage_boost.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_simple_coverage_boost.cpp}
{\bkmkstart AAAAAAADWT}
{\bkmkend AAAAAAADWT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADWU" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADXP}{\bkmkend AAAAAAADXP}
00001 \par
{\bkmkstart AAAAAAADXU}{\bkmkend AAAAAAADXU}
00007 \par
{\bkmkstart AAAAAAADXV}{\bkmkend AAAAAAADXV}
00008 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAADYK}{\bkmkend AAAAAAADYK}
00009 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAADYU}{\bkmkend AAAAAAADYU}
00010 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAADZD}{\bkmkend AAAAAAADZD}
00011 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAADZK}{\bkmkend AAAAAAADZK}
00012 \par
{\bkmkstart AAAAAAADZL}{\bkmkend AAAAAAADZL}
00013 {\cf20 // Include only working headers}\par
{\bkmkstart AAAAAAADZN}{\bkmkend AAAAAAADZN}
00014 {\cf21 #include "../src/SafeChronoCalculator.h"}\par
{\bkmkstart AAAAAAADZU}{\bkmkend AAAAAAADZU}
00015 {\cf21 #include "../src/LanguageTranslator/header/LanguageTranslator.h"}\par
{\bkmkstart AAAAAAAEAG}{\bkmkend AAAAAAAEAG}
00016 \par
{\bkmkstart AAAAAAAEAH}{\bkmkend AAAAAAAEAH}
00017 {\cf17 using namespace }SafeChrono;\par
{\bkmkstart AAAAAAAEAL}{\bkmkend AAAAAAAEAL}
00018 {\cf17 using namespace }Coruh::LanguageTranslator;\par
{\bkmkstart AAAAAAAEAO}{\bkmkend AAAAAAAEAO}
00019 \par
{\bkmkstart AAAAAAAEAQ}{\bkmkend AAAAAAAEAQ}
00020 {\cf17 class }SimpleCoverageBoostTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAEAT}{\bkmkend AAAAAAAEAT}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAEAU}{\bkmkend AAAAAAAEAU}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEAZ}{\bkmkend AAAAAAAEAZ}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAEBB}{\bkmkend AAAAAAAEBB}
00024     \}\par
{\bkmkstart AAAAAAAEBD}{\bkmkend AAAAAAAEBD}
00025     \par
{\bkmkstart AAAAAAAEBF}{\bkmkend AAAAAAAEBF}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAEBH}{\bkmkend AAAAAAAEBH}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAEBI}{\bkmkend AAAAAAAEBI}
00028     \}\par
{\bkmkstart AAAAAAAEBK}{\bkmkend AAAAAAAEBK}
00029 \};\par
{\bkmkstart AAAAAAAEBL}{\bkmkend AAAAAAAEBL}
00030 \par
{\bkmkstart AAAAAAAEBN}{\bkmkend AAAAAAAEBN}
00031 {\cf20 // Test SafeChronoCalculator static methods}\par
{\bkmkstart AAAAAAAEBO}{\bkmkend AAAAAAAEBO}
00032 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculator) \{\par
{\bkmkstart AAAAAAAEBX}{\bkmkend AAAAAAAEBX}
00033     {\cf20 // Test safe duration calculation}\par
{\bkmkstart AAAAAAAEBY}{\bkmkend AAAAAAAEBY}
00034     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEBZ}{\bkmkend AAAAAAAEBZ}
00035     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAECA}{\bkmkend AAAAAAAECA}
00036     \par
{\bkmkstart AAAAAAAECB}{\bkmkend AAAAAAAECB}
00037     {\cf20 // Test 10MHz calculation}\par
{\bkmkstart AAAAAAAECC}{\bkmkend AAAAAAAECC}
00038     result = SafeChronoCalculator::calculateFor10MHz(1000);\par
{\bkmkstart AAAAAAAECD}{\bkmkend AAAAAAAECD}
00039     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAECE}{\bkmkend AAAAAAAECE}
00040     \par
{\bkmkstart AAAAAAAECF}{\bkmkend AAAAAAAECF}
00041     {\cf20 // Test 24MHz calculation}\par
{\bkmkstart AAAAAAAECG}{\bkmkend AAAAAAAECG}
00042     result = SafeChronoCalculator::calculateFor24MHz(1000);\par
{\bkmkstart AAAAAAAECI}{\bkmkend AAAAAAAECI}
00043     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAECJ}{\bkmkend AAAAAAAECJ}
00044     \par
{\bkmkstart AAAAAAAECL}{\bkmkend AAAAAAAECL}
00045     {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAAECM}{\bkmkend AAAAAAAECM}
00046     {\cf18 bool} wouldOverflow = SafeChronoCalculator::wouldOverflow(1000, 1000);\par
{\bkmkstart AAAAAAAECR}{\bkmkend AAAAAAAECR}
00047     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAECT}{\bkmkend AAAAAAAECT}
00048     \par
{\bkmkstart AAAAAAAECU}{\bkmkend AAAAAAAECU}
00049     {\cf20 // Test with zero values}\par
{\bkmkstart AAAAAAAECV}{\bkmkend AAAAAAAECV}
00050     wouldOverflow = SafeChronoCalculator::wouldOverflow(0, 1000);\par
{\bkmkstart AAAAAAAECZ}{\bkmkend AAAAAAAECZ}
00051     EXPECT_FALSE(wouldOverflow);\par
{\bkmkstart AAAAAAAEDA}{\bkmkend AAAAAAAEDA}
00052     \par
{\bkmkstart AAAAAAAEEL}{\bkmkend AAAAAAAEEL}
00053     {\cf20 // Test with large values}\par
{\bkmkstart AAAAAAAEEN}{\bkmkend AAAAAAAEEN}
00054     {\cf18 long} {\cf18 long} largeValue = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAAEEY}{\bkmkend AAAAAAAEEY}
00055     wouldOverflow = SafeChronoCalculator::wouldOverflow(largeValue, 3);\par
{\bkmkstart AAAAAAAEFD}{\bkmkend AAAAAAAEFD}
00056     EXPECT_TRUE(wouldOverflow);\par
{\bkmkstart AAAAAAAEFE}{\bkmkend AAAAAAAEFE}
00057 \}\par
{\bkmkstart AAAAAAAEFF}{\bkmkend AAAAAAAEFF}
00058 \par
{\bkmkstart AAAAAAAEFH}{\bkmkend AAAAAAAEFH}
00059 {\cf20 // Test SafeChronoCalculator error handling}\par
{\bkmkstart AAAAAAAEFI}{\bkmkend AAAAAAAEFI}
00060 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorErrors) \{\par
{\bkmkstart AAAAAAAEFM}{\bkmkend AAAAAAAEFM}
00061     {\cf20 // Test invalid frequency}\par
{\bkmkstart AAAAAAAEFO}{\bkmkend AAAAAAAEFO}
00062     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 0, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAEFS}{\bkmkend AAAAAAAEFS}
00063     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, -1000, 1000000000), std::invalid_argument);\par
{\bkmkstart AAAAAAAEFU}{\bkmkend AAAAAAAEFU}
00064     \par
{\bkmkstart AAAAAAAEFW}{\bkmkend AAAAAAAEFW}
00065     {\cf20 // Test invalid period denominator}\par
{\bkmkstart AAAAAAAEFY}{\bkmkend AAAAAAAEFY}
00066     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, 0), std::invalid_argument);\par
{\bkmkstart AAAAAAAEGA}{\bkmkend AAAAAAAEGA}
00067     EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000, 1000000, -1000), std::invalid_argument);\par
{\bkmkstart AAAAAAAEGB}{\bkmkend AAAAAAAEGB}
00068 \}\par
{\bkmkstart AAAAAAAEGC}{\bkmkend AAAAAAAEGC}
00069 \par
{\bkmkstart AAAAAAAEGD}{\bkmkend AAAAAAAEGD}
00070 {\cf20 // Test SafeChronoCalculator edge cases}\par
{\bkmkstart AAAAAAAEGE}{\bkmkend AAAAAAAEGE}
00071 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorEdgeCases) \{\par
{\bkmkstart AAAAAAAEGF}{\bkmkend AAAAAAAEGF}
00072     {\cf20 // Test with very small values}\par
{\bkmkstart AAAAAAAEGG}{\bkmkend AAAAAAAEGG}
00073     {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(1, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEGI}{\bkmkend AAAAAAAEGI}
00074     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEGJ}{\bkmkend AAAAAAAEGJ}
00075     \par
{\bkmkstart AAAAAAAEGK}{\bkmkend AAAAAAAEGK}
00076     {\cf20 // Test with zero counter}\par
{\bkmkstart AAAAAAAEGL}{\bkmkend AAAAAAAEGL}
00077     result = SafeChronoCalculator::safeCalculateDuration(0, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEGO}{\bkmkend AAAAAAAEGO}
00078     EXPECT_EQ(result.count(), 0);\par
{\bkmkstart AAAAAAAEGP}{\bkmkend AAAAAAAEGP}
00079     \par
{\bkmkstart AAAAAAAEGQ}{\bkmkend AAAAAAAEGQ}
00080     {\cf20 // Test with maximum safe values}\par
{\bkmkstart AAAAAAAEGR}{\bkmkend AAAAAAAEGR}
00081     {\cf18 long} {\cf18 long} maxSafe = std::numeric_limits<long long>::max() / 4;\par
{\bkmkstart AAAAAAAEGS}{\bkmkend AAAAAAAEGS}
00082     result = SafeChronoCalculator::safeCalculateDuration(maxSafe, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEGT}{\bkmkend AAAAAAAEGT}
00083     EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEGU}{\bkmkend AAAAAAAEGU}
00084 \}\par
{\bkmkstart AAAAAAAEGV}{\bkmkend AAAAAAAEGV}
00085 \par
{\bkmkstart AAAAAAAEGW}{\bkmkend AAAAAAAEGW}
00086 {\cf20 // Test SafeChronoCalculator performance}\par
{\bkmkstart AAAAAAAEGX}{\bkmkend AAAAAAAEGX}
00087 TEST_F(SimpleCoverageBoostTest, TestSafeChronoCalculatorPerformance) \{\par
{\bkmkstart AAAAAAAEGY}{\bkmkend AAAAAAAEGY}
00088     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAEGZ}{\bkmkend AAAAAAAEGZ}
00089     \par
{\bkmkstart AAAAAAAEHA}{\bkmkend AAAAAAAEHA}
00090     {\cf20 // Perform many calculations}\par
{\bkmkstart AAAAAAAEHB}{\bkmkend AAAAAAAEHB}
00091     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAAEHC}{\bkmkend AAAAAAAEHC}
00092         {\cf17 auto} result = SafeChronoCalculator::safeCalculateDuration(i, 1000000, 1000000000);\par
{\bkmkstart AAAAAAAEHD}{\bkmkend AAAAAAAEHD}
00093         EXPECT_GT(result.count(), 0);\par
{\bkmkstart AAAAAAAEHE}{\bkmkend AAAAAAAEHE}
00094     \}\par
{\bkmkstart AAAAAAAEHF}{\bkmkend AAAAAAAEHF}
00095     \par
{\bkmkstart AAAAAAAEHG}{\bkmkend AAAAAAAEHG}
00096     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAEHH}{\bkmkend AAAAAAAEHH}
00097     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\par
{\bkmkstart AAAAAAAEHI}{\bkmkend AAAAAAAEHI}
00098     \par
{\bkmkstart AAAAAAAEHJ}{\bkmkend AAAAAAAEHJ}
00099     {\cf20 // Should complete in reasonable time}\par
{\bkmkstart AAAAAAAEHK}{\bkmkend AAAAAAAEHK}
00100     EXPECT_LT(duration.count(), 1000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAAEHL}{\bkmkend AAAAAAAEHL}
00101 \}\par
{\bkmkstart AAAAAAAEHM}{\bkmkend AAAAAAAEHM}
00102 \par
{\bkmkstart AAAAAAAEHN}{\bkmkend AAAAAAAEHN}
00103 {\cf20 // Test LanguageTranslatorApp basic functionality}\par
{\bkmkstart AAAAAAAEHO}{\bkmkend AAAAAAAEHO}
00104 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppBasic) \{\par
{\bkmkstart AAAAAAAEHP}{\bkmkend AAAAAAAEHP}
00105     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEHQ}{\bkmkend AAAAAAAEHQ}
00106     \par
{\bkmkstart AAAAAAAEHR}{\bkmkend AAAAAAAEHR}
00107     {\cf20 // Test basic properties}\par
{\bkmkstart AAAAAAAEHS}{\bkmkend AAAAAAAEHS}
00108     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAEHT}{\bkmkend AAAAAAAEHT}
00109     \par
{\bkmkstart AAAAAAAEHU}{\bkmkend AAAAAAAEHU}
00110     {\cf20 // Test language management}\par
{\bkmkstart AAAAAAAEHV}{\bkmkend AAAAAAAEHV}
00111     app.setSourceLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAEHW}{\bkmkend AAAAAAAEHW}
00112     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAEHX}{\bkmkend AAAAAAAEHX}
00113     \par
{\bkmkstart AAAAAAAEHY}{\bkmkend AAAAAAAEHY}
00114     {\cf20 // Test user management}\par
{\bkmkstart AAAAAAAEHZ}{\bkmkend AAAAAAAEHZ}
00115     EXPECT_TRUE(app.registerUser({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAEIA}{\bkmkend AAAAAAAEIA}
00116     EXPECT_TRUE(app.login({\cf22 "testuser"}, {\cf22 "password123"}));\par
{\bkmkstart AAAAAAAEIB}{\bkmkend AAAAAAAEIB}
00117     EXPECT_TRUE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAEIC}{\bkmkend AAAAAAAEIC}
00118     \par
{\bkmkstart AAAAAAAEID}{\bkmkend AAAAAAAEID}
00119     app.logout();\par
{\bkmkstart AAAAAAAEIE}{\bkmkend AAAAAAAEIE}
00120     EXPECT_FALSE(app.isUserLoggedIn());\par
{\bkmkstart AAAAAAAEIF}{\bkmkend AAAAAAAEIF}
00121 \}\par
{\bkmkstart AAAAAAAEIG}{\bkmkend AAAAAAAEIG}
00122 \par
{\bkmkstart AAAAAAAEIH}{\bkmkend AAAAAAAEIH}
00123 {\cf20 // Test LanguageTranslatorApp translation}\par
{\bkmkstart AAAAAAAEII}{\bkmkend AAAAAAAEII}
00124 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppTranslation) \{\par
{\bkmkstart AAAAAAAEIJ}{\bkmkend AAAAAAAEIJ}
00125     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEIK}{\bkmkend AAAAAAAEIK}
00126     \par
{\bkmkstart AAAAAAAEIL}{\bkmkend AAAAAAAEIL}
00127     {\cf20 // Test translation functions}\par
{\bkmkstart AAAAAAAEIM}{\bkmkend AAAAAAAEIM}
00128     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAEIN}{\bkmkend AAAAAAAEIN}
00129     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEIO}{\bkmkend AAAAAAAEIO}
00130     \par
{\bkmkstart AAAAAAAEIP}{\bkmkend AAAAAAAEIP}
00131     result = app.translateWord({\cf22 "hello"});\par
{\bkmkstart AAAAAAAEIQ}{\bkmkend AAAAAAAEIQ}
00132     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEIR}{\bkmkend AAAAAAAEIR}
00133     \par
{\bkmkstart AAAAAAAEIS}{\bkmkend AAAAAAAEIS}
00134     result = app.translatePhrase({\cf22 "good morning"});\par
{\bkmkstart AAAAAAAEIT}{\bkmkend AAAAAAAEIT}
00135     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEIU}{\bkmkend AAAAAAAEIU}
00136     \par
{\bkmkstart AAAAAAAEIV}{\bkmkend AAAAAAAEIV}
00137     {\cf20 // Test with empty input}\par
{\bkmkstart AAAAAAAEIW}{\bkmkend AAAAAAAEIW}
00138     result = app.translateText({\cf22 ""});\par
{\bkmkstart AAAAAAAEIX}{\bkmkend AAAAAAAEIX}
00139     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAEIY}{\bkmkend AAAAAAAEIY}
00140 \}\par
{\bkmkstart AAAAAAAEIZ}{\bkmkend AAAAAAAEIZ}
00141 \par
{\bkmkstart AAAAAAAEJA}{\bkmkend AAAAAAAEJA}
00142 {\cf20 // Test LanguageTranslatorApp data management}\par
{\bkmkstart AAAAAAAEJB}{\bkmkend AAAAAAAEJB}
00143 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppDataManagement) \{\par
{\bkmkstart AAAAAAAEJC}{\bkmkend AAAAAAAEJC}
00144     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEJD}{\bkmkend AAAAAAAEJD}
00145     \par
{\bkmkstart AAAAAAAEJE}{\bkmkend AAAAAAAEJE}
00146     {\cf20 // Test data management functions (should not crash)}\par
{\bkmkstart AAAAAAAEJF}{\bkmkend AAAAAAAEJF}
00147     EXPECT_NO_THROW(app.initializeDefaultData());\par
{\bkmkstart AAAAAAAEJG}{\bkmkend AAAAAAAEJG}
00148     EXPECT_NO_THROW(app.saveData());\par
{\bkmkstart AAAAAAAEJH}{\bkmkend AAAAAAAEJH}
00149     EXPECT_NO_THROW(app.loadData());\par
{\bkmkstart AAAAAAAEJI}{\bkmkend AAAAAAAEJI}
00150     EXPECT_NO_THROW(app.loadAllDictionaries());\par
{\bkmkstart AAAAAAAEJJ}{\bkmkend AAAAAAAEJJ}
00151 \}\par
{\bkmkstart AAAAAAAEJK}{\bkmkend AAAAAAAEJK}
00152 \par
{\bkmkstart AAAAAAAEJL}{\bkmkend AAAAAAAEJL}
00153 {\cf20 // Test LanguageTranslatorApp API functions}\par
{\bkmkstart AAAAAAAEJM}{\bkmkend AAAAAAAEJM}
00154 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppAPI) \{\par
{\bkmkstart AAAAAAAEJN}{\bkmkend AAAAAAAEJN}
00155     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEJO}{\bkmkend AAAAAAAEJO}
00156     \par
{\bkmkstart AAAAAAAEJP}{\bkmkend AAAAAAAEJP}
00157     {\cf20 // Test API functions}\par
{\bkmkstart AAAAAAAEJQ}{\bkmkend AAAAAAAEJQ}
00158     EXPECT_FALSE(app.isAPIAvailable());\par
{\bkmkstart AAAAAAAEJR}{\bkmkend AAAAAAAEJR}
00159     \par
{\bkmkstart AAAAAAAEJS}{\bkmkend AAAAAAAEJS}
00160     app.setAPIKey({\cf22 "test-api-key"});\par
{\bkmkstart AAAAAAAEJT}{\bkmkend AAAAAAAEJT}
00161     app.setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAAEJU}{\bkmkend AAAAAAAEJU}
00162     app.setAPIMode({\cf17 false});\par
{\bkmkstart AAAAAAAEJV}{\bkmkend AAAAAAAEJV}
00163     \par
{\bkmkstart AAAAAAAEJW}{\bkmkend AAAAAAAEJW}
00164     {\cf20 // Test API translation (should return empty string)}\par
{\bkmkstart AAAAAAAEJX}{\bkmkend AAAAAAAEJX}
00165     std::string result = app.translateWithGoogleAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAEJY}{\bkmkend AAAAAAAEJY}
00166     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAEJZ}{\bkmkend AAAAAAAEJZ}
00167     \par
{\bkmkstart AAAAAAAEKA}{\bkmkend AAAAAAAEKA}
00168     result = app.translateWithMicrosoftAPI({\cf22 "hello"}, {\cf22 "en"}, {\cf22 "tr"});\par
{\bkmkstart AAAAAAAEKB}{\bkmkend AAAAAAAEKB}
00169     EXPECT_TRUE(result.empty());\par
{\bkmkstart AAAAAAAEKC}{\bkmkend AAAAAAAEKC}
00170 \}\par
{\bkmkstart AAAAAAAEKD}{\bkmkend AAAAAAAEKD}
00171 \par
{\bkmkstart AAAAAAAEKE}{\bkmkend AAAAAAAEKE}
00172 {\cf20 // Test LanguageTranslatorApp phrase library}\par
{\bkmkstart AAAAAAAEKF}{\bkmkend AAAAAAAEKF}
00173 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPhraseLibrary) \{\par
{\bkmkstart AAAAAAAEKG}{\bkmkend AAAAAAAEKG}
00174     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEKH}{\bkmkend AAAAAAAEKH}
00175     \par
{\bkmkstart AAAAAAAEKI}{\bkmkend AAAAAAAEKI}
00176     {\cf20 // Test phrase library functions}\par
{\bkmkstart AAAAAAAEKJ}{\bkmkend AAAAAAAEKJ}
00177     app.addPhrase({\cf22 "Hello, how are you?"}, {\cf22 "greetings"});\par
{\bkmkstart AAAAAAAEKK}{\bkmkend AAAAAAAEKK}
00178     app.addPhrase({\cf22 "Thank you very much"}, {\cf22 "politeness"});\par
{\bkmkstart AAAAAAAEKL}{\bkmkend AAAAAAAEKL}
00179     \par
{\bkmkstart AAAAAAAEKM}{\bkmkend AAAAAAAEKM}
00180     {\cf20 // Test phrase translation}\par
{\bkmkstart AAAAAAAEKN}{\bkmkend AAAAAAAEKN}
00181     std::string result = app.translatePhrase({\cf22 "Hello, how are you?"});\par
{\bkmkstart AAAAAAAEKO}{\bkmkend AAAAAAAEKO}
00182     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEKP}{\bkmkend AAAAAAAEKP}
00183 \}\par
{\bkmkstart AAAAAAAEKQ}{\bkmkend AAAAAAAEKQ}
00184 \par
{\bkmkstart AAAAAAAEKR}{\bkmkend AAAAAAAEKR}
00185 {\cf20 // Test LanguageTranslatorApp learning tips}\par
{\bkmkstart AAAAAAAEKS}{\bkmkend AAAAAAAEKS}
00186 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLearningTips) \{\par
{\bkmkstart AAAAAAAEKT}{\bkmkend AAAAAAAEKT}
00187     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEKU}{\bkmkend AAAAAAAEKU}
00188     \par
{\bkmkstart AAAAAAAEKV}{\bkmkend AAAAAAAEKV}
00189     {\cf20 // Test learning tips functions}\par
{\bkmkstart AAAAAAAEKW}{\bkmkend AAAAAAAEKW}
00190     app.addLearningTip({\cf22 "Practice daily for better results"});\par
{\bkmkstart AAAAAAAEKX}{\bkmkend AAAAAAAEKX}
00191     app.addLearningTip({\cf22 "Use flashcards for vocabulary"});\par
{\bkmkstart AAAAAAAEKY}{\bkmkend AAAAAAAEKY}
00192     \par
{\bkmkstart AAAAAAAEKZ}{\bkmkend AAAAAAAEKZ}
00193     {\cf20 // Test showing learning tips (should not crash)}\par
{\bkmkstart AAAAAAAELA}{\bkmkend AAAAAAAELA}
00194     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAELB}{\bkmkend AAAAAAAELB}
00195 \}\par
{\bkmkstart AAAAAAAELC}{\bkmkend AAAAAAAELC}
00196 \par
{\bkmkstart AAAAAAAELD}{\bkmkend AAAAAAAELD}
00197 {\cf20 // Test LanguageTranslatorApp pronunciation guide}\par
{\bkmkstart AAAAAAAELE}{\bkmkend AAAAAAAELE}
00198 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPronunciationGuide) \{\par
{\bkmkstart AAAAAAAELF}{\bkmkend AAAAAAAELF}
00199     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAELG}{\bkmkend AAAAAAAELG}
00200     \par
{\bkmkstart AAAAAAAELH}{\bkmkend AAAAAAAELH}
00201     {\cf20 // Test pronunciation guide functions}\par
{\bkmkstart AAAAAAAELI}{\bkmkend AAAAAAAELI}
00202     app.addPronunciation({\cf22 "hello"}, {\cf22 "heh-LOH"});\par
{\bkmkstart AAAAAAAELJ}{\bkmkend AAAAAAAELJ}
00203     app.addPronunciation({\cf22 "world"}, {\cf22 "wurld"});\par
{\bkmkstart AAAAAAAELK}{\bkmkend AAAAAAAELK}
00204     \par
{\bkmkstart AAAAAAAELL}{\bkmkend AAAAAAAELL}
00205     {\cf20 // Test showing pronunciation guide (should not crash)}\par
{\bkmkstart AAAAAAAELM}{\bkmkend AAAAAAAELM}
00206     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAELN}{\bkmkend AAAAAAAELN}
00207 \}\par
{\bkmkstart AAAAAAAELO}{\bkmkend AAAAAAAELO}
00208 \par
{\bkmkstart AAAAAAAELP}{\bkmkend AAAAAAAELP}
00209 {\cf20 // Test LanguageTranslatorApp language selection}\par
{\bkmkstart AAAAAAAELQ}{\bkmkend AAAAAAAELQ}
00210 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageSelection) \{\par
{\bkmkstart AAAAAAAELR}{\bkmkend AAAAAAAELR}
00211     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAELS}{\bkmkend AAAAAAAELS}
00212     \par
{\bkmkstart AAAAAAAELT}{\bkmkend AAAAAAAELT}
00213     {\cf20 // Test language selection (should not crash)}\par
{\bkmkstart AAAAAAAELU}{\bkmkend AAAAAAAELU}
00214     EXPECT_NO_THROW(app.showLanguageSelection());\par
{\bkmkstart AAAAAAAELV}{\bkmkend AAAAAAAELV}
00215     \par
{\bkmkstart AAAAAAAELW}{\bkmkend AAAAAAAELW}
00216     {\cf20 // Test phrase library display (should not crash)}\par
{\bkmkstart AAAAAAAELX}{\bkmkend AAAAAAAELX}
00217     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAELY}{\bkmkend AAAAAAAELY}
00218 \}\par
{\bkmkstart AAAAAAAELZ}{\bkmkend AAAAAAAELZ}
00219 \par
{\bkmkstart AAAAAAAEMA}{\bkmkend AAAAAAAEMA}
00220 {\cf20 // Test LanguageTranslatorApp edge cases}\par
{\bkmkstart AAAAAAAEMB}{\bkmkend AAAAAAAEMB}
00221 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppEdgeCases) \{\par
{\bkmkstart AAAAAAAEMC}{\bkmkend AAAAAAAEMC}
00222     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEMD}{\bkmkend AAAAAAAEMD}
00223     \par
{\bkmkstart AAAAAAAEME}{\bkmkend AAAAAAAEME}
00224     {\cf20 // Test with very long text}\par
{\bkmkstart AAAAAAAEMF}{\bkmkend AAAAAAAEMF}
00225     std::string longText(1000, {\cf23 'a'});\par
{\bkmkstart AAAAAAAEMG}{\bkmkend AAAAAAAEMG}
00226     std::string result = app.translateText(longText);\par
{\bkmkstart AAAAAAAEMH}{\bkmkend AAAAAAAEMH}
00227     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEMI}{\bkmkend AAAAAAAEMI}
00228     \par
{\bkmkstart AAAAAAAEMJ}{\bkmkend AAAAAAAEMJ}
00229     {\cf20 // Test with special characters}\par
{\bkmkstart AAAAAAAEMK}{\bkmkend AAAAAAAEMK}
00230     result = app.translateText({\cf22 "Hello, World! @#$%^&*()"});\par
{\bkmkstart AAAAAAAEML}{\bkmkend AAAAAAAEML}
00231     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEMM}{\bkmkend AAAAAAAEMM}
00232     \par
{\bkmkstart AAAAAAAEMN}{\bkmkend AAAAAAAEMN}
00233     {\cf20 // Test with numbers}\par
{\bkmkstart AAAAAAAEMO}{\bkmkend AAAAAAAEMO}
00234     result = app.translateText({\cf22 "123 456 789"});\par
{\bkmkstart AAAAAAAEMP}{\bkmkend AAAAAAAEMP}
00235     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEMQ}{\bkmkend AAAAAAAEMQ}
00236 \}\par
{\bkmkstart AAAAAAAEMR}{\bkmkend AAAAAAAEMR}
00237 \par
{\bkmkstart AAAAAAAEMS}{\bkmkend AAAAAAAEMS}
00238 {\cf20 // Test LanguageTranslatorApp menu handling}\par
{\bkmkstart AAAAAAAEMT}{\bkmkend AAAAAAAEMT}
00239 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppMenuHandling) \{\par
{\bkmkstart AAAAAAAEMU}{\bkmkend AAAAAAAEMU}
00240     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEMV}{\bkmkend AAAAAAAEMV}
00241     \par
{\bkmkstart AAAAAAAEMW}{\bkmkend AAAAAAAEMW}
00242     {\cf20 // Test handleUserChoice with various inputs (should not crash)}\par
{\bkmkstart AAAAAAAEMX}{\bkmkend AAAAAAAEMX}
00243     EXPECT_NO_THROW(app.handleUserChoice(0)); {\cf20 // Exit}\par
{\bkmkstart AAAAAAAEMY}{\bkmkend AAAAAAAEMY}
00244     EXPECT_NO_THROW(app.handleUserChoice(1)); {\cf20 // Login/Translate}\par
{\bkmkstart AAAAAAAEMZ}{\bkmkend AAAAAAAEMZ}
00245     EXPECT_NO_THROW(app.handleUserChoice(2)); {\cf20 // Register/Change Languages}\par
{\bkmkstart AAAAAAAENA}{\bkmkend AAAAAAAENA}
00246     EXPECT_NO_THROW(app.handleUserChoice(3)); {\cf20 // Phrase Library}\par
{\bkmkstart AAAAAAAENB}{\bkmkend AAAAAAAENB}
00247     EXPECT_NO_THROW(app.handleUserChoice(4)); {\cf20 // Learning Tips}\par
{\bkmkstart AAAAAAAENC}{\bkmkend AAAAAAAENC}
00248     EXPECT_NO_THROW(app.handleUserChoice(5)); {\cf20 // Pronunciation Guide}\par
{\bkmkstart AAAAAAAEND}{\bkmkend AAAAAAAEND}
00249     EXPECT_NO_THROW(app.handleUserChoice(6)); {\cf20 // Logout}\par
{\bkmkstart AAAAAAAENE}{\bkmkend AAAAAAAENE}
00250     EXPECT_NO_THROW(app.handleUserChoice(99)); {\cf20 // Invalid choice}\par
{\bkmkstart AAAAAAAENF}{\bkmkend AAAAAAAENF}
00251 \}\par
{\bkmkstart AAAAAAAENG}{\bkmkend AAAAAAAENG}
00252 \par
{\bkmkstart AAAAAAAENH}{\bkmkend AAAAAAAENH}
00253 {\cf20 // Test LanguageTranslatorApp performance}\par
{\bkmkstart AAAAAAAENI}{\bkmkend AAAAAAAENI}
00254 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppPerformance) \{\par
{\bkmkstart AAAAAAAENJ}{\bkmkend AAAAAAAENJ}
00255     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAENK}{\bkmkend AAAAAAAENK}
00256     \par
{\bkmkstart AAAAAAAENL}{\bkmkend AAAAAAAENL}
00257     {\cf20 // Test with many phrases}\par
{\bkmkstart AAAAAAAENM}{\bkmkend AAAAAAAENM}
00258     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAAENN}{\bkmkend AAAAAAAENN}
00259         app.addPhrase({\cf22 "phrase "} + std::to_string(i), {\cf22 "category"} + std::to_string(i % 5));\par
{\bkmkstart AAAAAAAENO}{\bkmkend AAAAAAAENO}
00260     \}\par
{\bkmkstart AAAAAAAENP}{\bkmkend AAAAAAAENP}
00261     \par
{\bkmkstart AAAAAAAENQ}{\bkmkend AAAAAAAENQ}
00262     {\cf20 // Test with many learning tips}\par
{\bkmkstart AAAAAAAENR}{\bkmkend AAAAAAAENR}
00263     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAENS}{\bkmkend AAAAAAAENS}
00264         app.addLearningTip({\cf22 "tip "} + std::to_string(i));\par
{\bkmkstart AAAAAAAENT}{\bkmkend AAAAAAAENT}
00265     \}\par
{\bkmkstart AAAAAAAENU}{\bkmkend AAAAAAAENU}
00266     \par
{\bkmkstart AAAAAAAENV}{\bkmkend AAAAAAAENV}
00267     {\cf20 // Test with many pronunciations}\par
{\bkmkstart AAAAAAAENW}{\bkmkend AAAAAAAENW}
00268     {\cf19 for} ({\cf18 int} i = 0; i < 50; ++i) \{\par
{\bkmkstart AAAAAAAENX}{\bkmkend AAAAAAAENX}
00269         app.addPronunciation({\cf22 "word"} + std::to_string(i), {\cf22 "pronunciation"} + std::to_string(i));\par
{\bkmkstart AAAAAAAENY}{\bkmkend AAAAAAAENY}
00270     \}\par
{\bkmkstart AAAAAAAENZ}{\bkmkend AAAAAAAENZ}
00271     \par
{\bkmkstart AAAAAAAEOA}{\bkmkend AAAAAAAEOA}
00272     {\cf20 // Test that everything still works}\par
{\bkmkstart AAAAAAAEOB}{\bkmkend AAAAAAAEOB}
00273     EXPECT_NO_THROW(app.showPhraseLibrary());\par
{\bkmkstart AAAAAAAEOC}{\bkmkend AAAAAAAEOC}
00274     EXPECT_NO_THROW(app.showLearningTips());\par
{\bkmkstart AAAAAAAEOD}{\bkmkend AAAAAAAEOD}
00275     EXPECT_NO_THROW(app.showPronunciationGuide());\par
{\bkmkstart AAAAAAAEOE}{\bkmkend AAAAAAAEOE}
00276 \}\par
{\bkmkstart AAAAAAAEOF}{\bkmkend AAAAAAAEOF}
00277 \par
{\bkmkstart AAAAAAAEOG}{\bkmkend AAAAAAAEOG}
00278 {\cf20 // Test LanguageTranslatorApp consistency}\par
{\bkmkstart AAAAAAAEOH}{\bkmkend AAAAAAAEOH}
00279 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppConsistency) \{\par
{\bkmkstart AAAAAAAEOI}{\bkmkend AAAAAAAEOI}
00280     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEOJ}{\bkmkend AAAAAAAEOJ}
00281     \par
{\bkmkstart AAAAAAAEOK}{\bkmkend AAAAAAAEOK}
00282     {\cf20 // Test that same inputs give same outputs}\par
{\bkmkstart AAAAAAAEOL}{\bkmkend AAAAAAAEOL}
00283     std::string input = {\cf22 "hello world"};\par
{\bkmkstart AAAAAAAEOM}{\bkmkend AAAAAAAEOM}
00284     std::string result1 = app.translateText(input);\par
{\bkmkstart AAAAAAAEON}{\bkmkend AAAAAAAEON}
00285     std::string result2 = app.translateText(input);\par
{\bkmkstart AAAAAAAEOO}{\bkmkend AAAAAAAEOO}
00286     EXPECT_EQ(result1, result2);\par
{\bkmkstart AAAAAAAEOP}{\bkmkend AAAAAAAEOP}
00287 \}\par
{\bkmkstart AAAAAAAEOQ}{\bkmkend AAAAAAAEOQ}
00288 \par
{\bkmkstart AAAAAAAEOR}{\bkmkend AAAAAAAEOR}
00289 {\cf20 // Test LanguageTranslatorApp with different language combinations}\par
{\bkmkstart AAAAAAAEOS}{\bkmkend AAAAAAAEOS}
00290 TEST_F(SimpleCoverageBoostTest, TestLanguageTranslatorAppLanguageCombinations) \{\par
{\bkmkstart AAAAAAAEOT}{\bkmkend AAAAAAAEOT}
00291     LanguageTranslatorApp app;\par
{\bkmkstart AAAAAAAEOU}{\bkmkend AAAAAAAEOU}
00292     \par
{\bkmkstart AAAAAAAEOV}{\bkmkend AAAAAAAEOV}
00293     {\cf20 // Test English to Turkish}\par
{\bkmkstart AAAAAAAEOW}{\bkmkend AAAAAAAEOW}
00294     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAEOX}{\bkmkend AAAAAAAEOX}
00295     app.setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAEOY}{\bkmkend AAAAAAAEOY}
00296     std::string result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAEOZ}{\bkmkend AAAAAAAEOZ}
00297     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEPA}{\bkmkend AAAAAAAEPA}
00298     \par
{\bkmkstart AAAAAAAEPB}{\bkmkend AAAAAAAEPB}
00299     {\cf20 // Test English to Spanish}\par
{\bkmkstart AAAAAAAEPC}{\bkmkend AAAAAAAEPC}
00300     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAEPD}{\bkmkend AAAAAAAEPD}
00301     app.setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAEPE}{\bkmkend AAAAAAAEPE}
00302     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAEPF}{\bkmkend AAAAAAAEPF}
00303     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEPG}{\bkmkend AAAAAAAEPG}
00304     \par
{\bkmkstart AAAAAAAEPH}{\bkmkend AAAAAAAEPH}
00305     {\cf20 // Test English to French}\par
{\bkmkstart AAAAAAAEPI}{\bkmkend AAAAAAAEPI}
00306     app.setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAEPJ}{\bkmkend AAAAAAAEPJ}
00307     app.setTargetLanguage({\cf22 "French"});\par
{\bkmkstart AAAAAAAEPK}{\bkmkend AAAAAAAEPK}
00308     result = app.translateText({\cf22 "hello world"});\par
{\bkmkstart AAAAAAAEPL}{\bkmkend AAAAAAAEPL}
00309     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEPM}{\bkmkend AAAAAAAEPM}
00310     \par
{\bkmkstart AAAAAAAEPN}{\bkmkend AAAAAAAEPN}
00311     {\cf20 // Test Turkish to English}\par
{\bkmkstart AAAAAAAEPO}{\bkmkend AAAAAAAEPO}
00312     app.setSourceLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAEPP}{\bkmkend AAAAAAAEPP}
00313     app.setTargetLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAEPQ}{\bkmkend AAAAAAAEPQ}
00314     result = app.translateText({\cf22 "merhaba dünya"});\par
{\bkmkstart AAAAAAAEPR}{\bkmkend AAAAAAAEPR}
00315     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAAEPS}{\bkmkend AAAAAAAEPS}
00316 \}\par
}
}