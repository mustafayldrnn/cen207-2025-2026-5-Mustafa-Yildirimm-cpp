{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LanguageTranslator_test.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/LanguageTranslator_test.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/LanguageTranslator_test.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAE}{\bkmkend AAAAAAAAAE}
00001 \par
{\bkmkstart AAAAAAAAAF}{\bkmkend AAAAAAAAAF}
00005 \par
{\bkmkstart AAAAAAAAAG}{\bkmkend AAAAAAAAAG}
00006 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAM}{\bkmkend AAAAAAAAAM}
00007 {\cf21 #include "../src/LanguageTranslator/header/LanguageTranslator.h"}\par
{\bkmkstart AAAAAAAAAQ}{\bkmkend AAAAAAAAAQ}
00008 \par
{\bkmkstart AAAAAAAAAR}{\bkmkend AAAAAAAAAR}
00009 {\cf17 using namespace }Coruh::LanguageTranslator;\par
{\bkmkstart AAAAAAAAAU}{\bkmkend AAAAAAAAAU}
00010 \par
{\bkmkstart AAAAAAAAAV}{\bkmkend AAAAAAAAAV}
00011 {\cf17 class }LanguageTranslatorTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAAAZ}{\bkmkend AAAAAAAAAZ}
00012 {\cf17 protected}:\par
{\bkmkstart AAAAAAAABD}{\bkmkend AAAAAAAABD}
00013     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAABF}{\bkmkend AAAAAAAABF}
00014         app = {\cf17 new} LanguageTranslatorApp();\par
{\bkmkstart AAAAAAAABG}{\bkmkend AAAAAAAABG}
00015     \}\par
{\bkmkstart AAAAAAAABH}{\bkmkend AAAAAAAABH}
00016     \par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00017     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAABK}{\bkmkend AAAAAAAABK}
00018         {\cf17 delete} app;\par
{\bkmkstart AAAAAAAABM}{\bkmkend AAAAAAAABM}
00019     \}\par
{\bkmkstart AAAAAAAABN}{\bkmkend AAAAAAAABN}
00020     \par
{\bkmkstart AAAAAAAABO}{\bkmkend AAAAAAAABO}
00021     LanguageTranslatorApp* app;\par
{\bkmkstart AAAAAAAABP}{\bkmkend AAAAAAAABP}
00022 \};\par
{\bkmkstart AAAAAAAABQ}{\bkmkend AAAAAAAABQ}
00023 \par
{\bkmkstart AAAAAAAABR}{\bkmkend AAAAAAAABR}
00024 {\cf20 // Basic Translation Tests}\par
{\bkmkstart AAAAAAAABS}{\bkmkend AAAAAAAABS}
00025 TEST_F(LanguageTranslatorTest, BasicWordTranslation) \{\par
{\bkmkstart AAAAAAAABW}{\bkmkend AAAAAAAABW}
00026     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAAACA}{\bkmkend AAAAAAAACA}
00027     EXPECT_EQ(app->translateText({\cf22 "world"}), {\cf22 "dünya"});\par
{\bkmkstart AAAAAAAACB}{\bkmkend AAAAAAAACB}
00028     EXPECT_EQ(app->translateText({\cf22 "good"}), {\cf22 "iyi"});\par
{\bkmkstart AAAAAAAACC}{\bkmkend AAAAAAAACC}
00029     EXPECT_EQ(app->translateText({\cf22 "water"}), {\cf22 "su"});\par
{\bkmkstart AAAAAAAACE}{\bkmkend AAAAAAAACE}
00030     EXPECT_EQ(app->translateText({\cf22 "house"}), {\cf22 "ev"});\par
{\bkmkstart AAAAAAAACG}{\bkmkend AAAAAAAACG}
00031 \}\par
{\bkmkstart AAAAAAAACH}{\bkmkend AAAAAAAACH}
00032 \par
{\bkmkstart AAAAAAAACI}{\bkmkend AAAAAAAACI}
00033 TEST_F(LanguageTranslatorTest, PhraseTranslation) \{\par
{\bkmkstart AAAAAAAACL}{\bkmkend AAAAAAAACL}
00034     EXPECT_EQ(app->translateText({\cf22 "good morning"}), {\cf22 "günaydın"});\par
{\bkmkstart AAAAAAAACO}{\bkmkend AAAAAAAACO}
00035     EXPECT_EQ(app->translateText({\cf22 "thank you"}), {\cf22 "teşekkür ederim"});\par
{\bkmkstart AAAAAAAACP}{\bkmkend AAAAAAAACP}
00036     EXPECT_EQ(app->translateText({\cf22 "how are you"}), {\cf22 "nasılsın"});\par
{\bkmkstart AAAAAAAACU}{\bkmkend AAAAAAAACU}
00037     EXPECT_EQ(app->translateText({\cf22 "nice to meet you"}), {\cf22 "tanıştığımıza memnun oldum"});\par
{\bkmkstart AAAAAAAADA}{\bkmkend AAAAAAAADA}
00038 \}\par
{\bkmkstart AAAAAAAADC}{\bkmkend AAAAAAAADC}
00039 \par
{\bkmkstart AAAAAAAADE}{\bkmkend AAAAAAAADE}
00040 TEST_F(LanguageTranslatorTest, UnknownWordHandling) \{\par
{\bkmkstart AAAAAAAADL}{\bkmkend AAAAAAAADL}
00041     {\cf20 // Unknown words should return as-is}\par
{\bkmkstart AAAAAAAADO}{\bkmkend AAAAAAAADO}
00042     EXPECT_EQ(app->translateText({\cf22 "unknownword"}), {\cf22 "unknownword"});\par
{\bkmkstart AAAAAAAADP}{\bkmkend AAAAAAAADP}
00043     EXPECT_EQ(app->translateText({\cf22 "xyz123"}), {\cf22 "xyz123"});\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
00044     EXPECT_EQ(app->translateText({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00045 \}\par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00046 \par
{\bkmkstart AAAAAAAADY}{\bkmkend AAAAAAAADY}
00047 TEST_F(LanguageTranslatorTest, MixedKnownUnknownWords) \{\par
{\bkmkstart AAAAAAAAEA}{\bkmkend AAAAAAAAEA}
00048     {\cf20 // Mixed sentence with known and unknown words}\par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00049     std::string result = app->translateText({\cf22 "hello unknownword world"});\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00050     EXPECT_TRUE(result.find({\cf22 "merhaba"}) != std::string::npos);\par
{\bkmkstart AAAAAAAAEJ}{\bkmkend AAAAAAAAEJ}
00051     EXPECT_TRUE(result.find({\cf22 "unknownword"}) != std::string::npos);\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00052     EXPECT_TRUE(result.find({\cf22 "dünya"}) != std::string::npos);\par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00053 \}\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00054 \par
{\bkmkstart AAAAAAAAHD}{\bkmkend AAAAAAAAHD}
00055 TEST_F(LanguageTranslatorTest, SameLanguageTranslation) \{\par
{\bkmkstart AAAAAAAAHI}{\bkmkend AAAAAAAAHI}
00056     {\cf20 // When source and target are same, return original text}\par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00057     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAAHM}{\bkmkend AAAAAAAAHM}
00058     app->setTargetLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAAHN}{\bkmkend AAAAAAAAHN}
00059     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "hello"});\par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00060     EXPECT_EQ(app->translateText({\cf22 "world"}), {\cf22 "world"});\par
{\bkmkstart AAAAAAAAHP}{\bkmkend AAAAAAAAHP}
00061 \}\par
{\bkmkstart AAAAAAAAQS}{\bkmkend AAAAAAAAQS}
00062 \par
{\bkmkstart AAAAAAAAQX}{\bkmkend AAAAAAAAQX}
00063 {\cf20 // Language Management Tests}\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00064 TEST_F(LanguageTranslatorTest, LanguageSwitching) \{\par
{\bkmkstart AAAAAAAARD}{\bkmkend AAAAAAAARD}
00065     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAARL}{\bkmkend AAAAAAAARL}
00066     app->setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00067     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAAARW}{\bkmkend AAAAAAAARW}
00068     \par
{\bkmkstart AAAAAAAARZ}{\bkmkend AAAAAAAARZ}
00069     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAASB}{\bkmkend AAAAAAAASB}
00070     app->setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00071     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "hola"});\par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00072 \}\par
{\bkmkstart AAAAAAAASN}{\bkmkend AAAAAAAASN}
00073 \par
{\bkmkstart AAAAAAAASO}{\bkmkend AAAAAAAASO}
00074 TEST_F(LanguageTranslatorTest, GetSupportedLanguages) \{\par
{\bkmkstart AAAAAAAAST}{\bkmkend AAAAAAAAST}
00075     {\cf17 auto} languages = app->getSupportedLanguages();\par
{\bkmkstart AAAAAAAATA}{\bkmkend AAAAAAAATA}
00076     EXPECT_FALSE(languages.empty());\par
{\bkmkstart AAAAAAAATG}{\bkmkend AAAAAAAATG}
00077     EXPECT_TRUE(std::find(languages.begin(), languages.end(), {\cf22 "English"}) != languages.end());\par
{\bkmkstart AAAAAAAATT}{\bkmkend AAAAAAAATT}
00078     EXPECT_TRUE(std::find(languages.begin(), languages.end(), {\cf22 "Turkish"}) != languages.end());\par
{\bkmkstart AAAAAAAATY}{\bkmkend AAAAAAAATY}
00079 \}\par
{\bkmkstart AAAAAAAATZ}{\bkmkend AAAAAAAATZ}
00080 \par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00081 TEST_F(LanguageTranslatorTest, AddNewLanguage) \{\par
{\bkmkstart AAAAAAAAUF}{\bkmkend AAAAAAAAUF}
00082     app->addLanguage({\cf22 "Japanese"});\par
{\bkmkstart AAAAAAAAUH}{\bkmkend AAAAAAAAUH}
00083     {\cf17 auto} languages = app->getSupportedLanguages();\par
{\bkmkstart AAAAAAAAUJ}{\bkmkend AAAAAAAAUJ}
00084     EXPECT_TRUE(std::find(languages.begin(), languages.end(), {\cf22 "Japanese"}) != languages.end());\par
{\bkmkstart AAAAAAAAUR}{\bkmkend AAAAAAAAUR}
00085 \}\par
{\bkmkstart AAAAAAAAUT}{\bkmkend AAAAAAAAUT}
00086 \par
{\bkmkstart AAAAAAAAUU}{\bkmkend AAAAAAAAUU}
00087 {\cf20 // User Management Tests}\par
{\bkmkstart AAAAAAAAUX}{\bkmkend AAAAAAAAUX}
00088 TEST_F(LanguageTranslatorTest, UserLogin) \{\par
{\bkmkstart AAAAAAAAUZ}{\bkmkend AAAAAAAAUZ}
00089     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAVC}{\bkmkend AAAAAAAAVC}
00090     \par
{\bkmkstart AAAAAAAAVD}{\bkmkend AAAAAAAAVD}
00091     {\cf18 bool} loginResult = app->login({\cf22 "admin"}, {\cf22 "admin"});\par
{\bkmkstart AAAAAAAAVG}{\bkmkend AAAAAAAAVG}
00092     EXPECT_TRUE(loginResult);\par
{\bkmkstart AAAAAAAAVK}{\bkmkend AAAAAAAAVK}
00093     EXPECT_TRUE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAVL}{\bkmkend AAAAAAAAVL}
00094 \}\par
{\bkmkstart AAAAAAAAVN}{\bkmkend AAAAAAAAVN}
00095 \par
{\bkmkstart AAAAAAAAVO}{\bkmkend AAAAAAAAVO}
00096 TEST_F(LanguageTranslatorTest, UserLogout) \{\par
{\bkmkstart AAAAAAAAVS}{\bkmkend AAAAAAAAVS}
00097     app->login({\cf22 "admin"}, {\cf22 "admin"});\par
{\bkmkstart AAAAAAAAVX}{\bkmkend AAAAAAAAVX}
00098     EXPECT_TRUE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAWA}{\bkmkend AAAAAAAAWA}
00099     \par
{\bkmkstart AAAAAAAAWD}{\bkmkend AAAAAAAAWD}
00100     app->logout();\par
{\bkmkstart AAAAAAAAWE}{\bkmkend AAAAAAAAWE}
00101     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAWJ}{\bkmkend AAAAAAAAWJ}
00102 \}\par
{\bkmkstart AAAAAAAAWM}{\bkmkend AAAAAAAAWM}
00103 \par
{\bkmkstart AAAAAAAAWO}{\bkmkend AAAAAAAAWO}
00104 TEST_F(LanguageTranslatorTest, InvalidLogin) \{\par
{\bkmkstart AAAAAAAAWS}{\bkmkend AAAAAAAAWS}
00105     {\cf18 bool} loginResult = app->login({\cf22 "wronguser"}, {\cf22 "wrongpass"});\par
{\bkmkstart AAAAAAAAWU}{\bkmkend AAAAAAAAWU}
00106     EXPECT_FALSE(loginResult);\par
{\bkmkstart AAAAAAAAWY}{\bkmkend AAAAAAAAWY}
00107     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAXC}{\bkmkend AAAAAAAAXC}
00108 \}\par
{\bkmkstart AAAAAAAAXD}{\bkmkend AAAAAAAAXD}
00109 \par
{\bkmkstart AAAAAAAAXE}{\bkmkend AAAAAAAAXE}
00110 TEST_F(LanguageTranslatorTest, UserRegistration) \{\par
{\bkmkstart AAAAAAAAXJ}{\bkmkend AAAAAAAAXJ}
00111     {\cf18 bool} registerResult = app->registerUser({\cf22 "newuser"}, {\cf22 "newpass"});\par
{\bkmkstart AAAAAAAAXP}{\bkmkend AAAAAAAAXP}
00112     EXPECT_TRUE(registerResult);\par
{\bkmkstart AAAAAAAAXW}{\bkmkend AAAAAAAAXW}
00113 \}\par
{\bkmkstart AAAAAAAAXY}{\bkmkend AAAAAAAAXY}
00114 \par
{\bkmkstart AAAAAAAAYA}{\bkmkend AAAAAAAAYA}
00115 {\cf20 // Individual Translation Function Tests}\par
{\bkmkstart AAAAAAAAYD}{\bkmkend AAAAAAAAYD}
00116 TEST_F(LanguageTranslatorTest, TranslateWordFunction) \{\par
{\bkmkstart AAAAAAAAYL}{\bkmkend AAAAAAAAYL}
00117     EXPECT_EQ(app->translateWord({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAAAYP}{\bkmkend AAAAAAAAYP}
00118     EXPECT_EQ(app->translateWord({\cf22 "world"}), {\cf22 "dünya"});\par
{\bkmkstart AAAAAAAAYT}{\bkmkend AAAAAAAAYT}
00119     EXPECT_EQ(app->translateWord({\cf22 "unknown"}), {\cf22 "unknown"});\par
{\bkmkstart AAAAAAAAZI}{\bkmkend AAAAAAAAZI}
00120 \}\par
{\bkmkstart AAAAAAAAZJ}{\bkmkend AAAAAAAAZJ}
00121 \par
{\bkmkstart AAAAAAAAZK}{\bkmkend AAAAAAAAZK}
00122 TEST_F(LanguageTranslatorTest, TranslatePhraseFunction) \{\par
{\bkmkstart AAAAAAAAZO}{\bkmkend AAAAAAAAZO}
00123     EXPECT_EQ(app->translatePhrase({\cf22 "good morning"}), {\cf22 "günaydın"});\par
{\bkmkstart AAAAAAAAZQ}{\bkmkend AAAAAAAAZQ}
00124     EXPECT_EQ(app->translatePhrase({\cf22 "thank you"}), {\cf22 "teşekkür ederim"});\par
{\bkmkstart AAAAAAABAG}{\bkmkend AAAAAAABAG}
00125     EXPECT_EQ(app->translatePhrase({\cf22 "unknown phrase"}), {\cf22 "unknown phrase"});\par
{\bkmkstart AAAAAAABAM}{\bkmkend AAAAAAABAM}
00126 \}\par
{\bkmkstart AAAAAAABAN}{\bkmkend AAAAAAABAN}
00127 \par
{\bkmkstart AAAAAAABAO}{\bkmkend AAAAAAABAO}
00128 {\cf20 // API Tests}\par
{\bkmkstart AAAAAAABAQ}{\bkmkend AAAAAAABAQ}
00129 TEST_F(LanguageTranslatorTest, APIModeToggle) \{\par
{\bkmkstart AAAAAAABAW}{\bkmkend AAAAAAABAW}
00130     {\cf20 // API is not implemented yet, so it should always return false}\par
{\bkmkstart AAAAAAABAZ}{\bkmkend AAAAAAABAZ}
00131     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAABBE}{\bkmkend AAAAAAABBE}
00132     \par
{\bkmkstart AAAAAAABBG}{\bkmkend AAAAAAABBG}
00133     app->setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAABBJ}{\bkmkend AAAAAAABBJ}
00134     app->setAPIKey({\cf22 "test_key"});\par
{\bkmkstart AAAAAAABBP}{\bkmkend AAAAAAABBP}
00135     {\cf20 // API is not implemented yet, so it should always return false}\par
{\bkmkstart AAAAAAABBU}{\bkmkend AAAAAAABBU}
00136     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAABBY}{\bkmkend AAAAAAABBY}
00137     \par
{\bkmkstart AAAAAAABCA}{\bkmkend AAAAAAABCA}
00138     app->setAPIMode({\cf17 false});\par
{\bkmkstart AAAAAAABCG}{\bkmkend AAAAAAABCG}
00139     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAABCK}{\bkmkend AAAAAAABCK}
00140 \}\par
{\bkmkstart AAAAAAABCN}{\bkmkend AAAAAAABCN}
00141 \par
{\bkmkstart AAAAAAABCQ}{\bkmkend AAAAAAABCQ}
00142 TEST_F(LanguageTranslatorTest, APIKeyManagement) \{\par
{\bkmkstart AAAAAAABCV}{\bkmkend AAAAAAABCV}
00143     app->setAPIKey({\cf22 "test_api_key"});\par
{\bkmkstart AAAAAAABCZ}{\bkmkend AAAAAAABCZ}
00144     app->setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAABDE}{\bkmkend AAAAAAABDE}
00145     {\cf20 // API is not implemented yet, so it should always return false}\par
{\bkmkstart AAAAAAABDJ}{\bkmkend AAAAAAABDJ}
00146     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAABDP}{\bkmkend AAAAAAABDP}
00147     \par
{\bkmkstart AAAAAAABDR}{\bkmkend AAAAAAABDR}
00148     app->setAPIKey({\cf22 ""});\par
{\bkmkstart AAAAAAABEB}{\bkmkend AAAAAAABEB}
00149     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAABEJ}{\bkmkend AAAAAAABEJ}
00150 \}\par
{\bkmkstart AAAAAAABEM}{\bkmkend AAAAAAABEM}
00151 \par
{\bkmkstart AAAAAAABEQ}{\bkmkend AAAAAAABEQ}
00152 {\cf20 // Edge Cases and Error Handling}\par
{\bkmkstart AAAAAAABET}{\bkmkend AAAAAAABET}
00153 TEST_F(LanguageTranslatorTest, EmptyStringTranslation) \{\par
{\bkmkstart AAAAAAABEX}{\bkmkend AAAAAAABEX}
00154     EXPECT_EQ(app->translateText({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAABFF}{\bkmkend AAAAAAABFF}
00155     EXPECT_EQ(app->translateWord({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAABFM}{\bkmkend AAAAAAABFM}
00156     EXPECT_EQ(app->translatePhrase({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAABFS}{\bkmkend AAAAAAABFS}
00157 \}\par
{\bkmkstart AAAAAAABFU}{\bkmkend AAAAAAABFU}
00158 \par
{\bkmkstart AAAAAAABFX}{\bkmkend AAAAAAABFX}
00159 TEST_F(LanguageTranslatorTest, WhitespaceHandling) \{\par
{\bkmkstart AAAAAAABGC}{\bkmkend AAAAAAABGC}
00160     {\cf20 // Test whitespace handling - current implementation doesn't trim}\par
{\bkmkstart AAAAAAABGE}{\bkmkend AAAAAAABGE}
00161     EXPECT_EQ(app->translateText({\cf22 "  hello  "}), {\cf22 "merhaba "});\par
{\bkmkstart AAAAAAABGO}{\bkmkend AAAAAAABGO}
00162     EXPECT_EQ(app->translateText({\cf22 "   "}), {\cf22 "   "});\par
{\bkmkstart AAAAAAABGW}{\bkmkend AAAAAAABGW}
00163 \}\par
{\bkmkstart AAAAAAABHE}{\bkmkend AAAAAAABHE}
00164 \par
{\bkmkstart AAAAAAABHG}{\bkmkend AAAAAAABHG}
00165 TEST_F(LanguageTranslatorTest, SpecialCharacters) \{\par
{\bkmkstart AAAAAAABHN}{\bkmkend AAAAAAABHN}
00166     {\cf20 // Test special characters - current implementation doesn't handle punctuation}\par
{\bkmkstart AAAAAAABHQ}{\bkmkend AAAAAAABHQ}
00167     EXPECT_EQ(app->translateText({\cf22 "hello!"}), {\cf22 "hello!"});\par
{\bkmkstart AAAAAAABHX}{\bkmkend AAAAAAABHX}
00168     EXPECT_EQ(app->translateText({\cf22 "hello, world"}), {\cf22 "hello, dünya"});\par
{\bkmkstart AAAAAAABIE}{\bkmkend AAAAAAABIE}
00169     EXPECT_EQ(app->translateText({\cf22 "hello.world"}), {\cf22 "hello.world"});\par
{\bkmkstart AAAAAAABIM}{\bkmkend AAAAAAABIM}
00170 \}\par
{\bkmkstart AAAAAAABIN}{\bkmkend AAAAAAABIN}
00171 \par
{\bkmkstart AAAAAAABIO}{\bkmkend AAAAAAABIO}
00172 TEST_F(LanguageTranslatorTest, CaseInsensitiveTranslation) \{\par
{\bkmkstart AAAAAAABIU}{\bkmkend AAAAAAABIU}
00173     {\cf20 // Test case insensitive - current implementation is case sensitive}\par
{\bkmkstart AAAAAAABIX}{\bkmkend AAAAAAABIX}
00174     EXPECT_EQ(app->translateText({\cf22 "HELLO"}), {\cf22 "HELLO"});\par
{\bkmkstart AAAAAAABJE}{\bkmkend AAAAAAABJE}
00175     EXPECT_EQ(app->translateText({\cf22 "Hello"}), {\cf22 "Hello"});\par
{\bkmkstart AAAAAAABJL}{\bkmkend AAAAAAABJL}
00176     EXPECT_EQ(app->translateText({\cf22 "hELLo"}), {\cf22 "hELLo"});\par
{\bkmkstart AAAAAAABJQ}{\bkmkend AAAAAAABJQ}
00177 \}\par
{\bkmkstart AAAAAAABJU}{\bkmkend AAAAAAABJU}
00178 \par
{\bkmkstart AAAAAAABJW}{\bkmkend AAAAAAABJW}
00179 {\cf20 // Data Management Tests}\par
{\bkmkstart AAAAAAABJZ}{\bkmkend AAAAAAABJZ}
00180 TEST_F(LanguageTranslatorTest, DataInitialization) \{\par
{\bkmkstart AAAAAAABKI}{\bkmkend AAAAAAABKI}
00181     {\cf20 // Test that default data is loaded}\par
{\bkmkstart AAAAAAABKP}{\bkmkend AAAAAAABKP}
00182     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABKU}{\bkmkend AAAAAAABKU}
00183     EXPECT_EQ(app->translateText({\cf22 "good morning"}), {\cf22 "günaydın"});\par
{\bkmkstart AAAAAAABKZ}{\bkmkend AAAAAAABKZ}
00184 \}\par
{\bkmkstart AAAAAAABLB}{\bkmkend AAAAAAABLB}
00185 \par
{\bkmkstart AAAAAAABLF}{\bkmkend AAAAAAABLF}
00186 TEST_F(LanguageTranslatorTest, DataSaveLoad) \{\par
{\bkmkstart AAAAAAABLL}{\bkmkend AAAAAAABLL}
00187     {\cf20 // These functions should not crash}\par
{\bkmkstart AAAAAAABLN}{\bkmkend AAAAAAABLN}
00188     app->saveData();\par
{\bkmkstart AAAAAAABLS}{\bkmkend AAAAAAABLS}
00189     app->loadData();\par
{\bkmkstart AAAAAAABLX}{\bkmkend AAAAAAABLX}
00190     \par
{\bkmkstart AAAAAAABLZ}{\bkmkend AAAAAAABLZ}
00191     {\cf20 // Data should still be available after save/load}\par
{\bkmkstart AAAAAAABMA}{\bkmkend AAAAAAABMA}
00192     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABMF}{\bkmkend AAAAAAABMF}
00193 \}\par
{\bkmkstart AAAAAAABMI}{\bkmkend AAAAAAABMI}
00194 \par
{\bkmkstart AAAAAAABMK}{\bkmkend AAAAAAABMK}
00195 {\cf20 // Dictionary Management Tests}\par
{\bkmkstart AAAAAAABML}{\bkmkend AAAAAAABML}
00196 TEST_F(LanguageTranslatorTest, DictionaryFileLoading) \{\par
{\bkmkstart AAAAAAABMR}{\bkmkend AAAAAAABMR}
00197     {\cf20 // Test dictionary file loading (file may not exist, should handle gracefully)}\par
{\bkmkstart AAAAAAABMS}{\bkmkend AAAAAAABMS}
00198     {\cf18 bool} result = app->loadDictionaryFromFile({\cf22 "English"}, {\cf22 "Turkish"}, {\cf22 "nonexistent_file.txt"});\par
{\bkmkstart AAAAAAABNE}{\bkmkend AAAAAAABNE}
00199     EXPECT_FALSE(result); {\cf20 // File doesn't exist}\par
{\bkmkstart AAAAAAABNO}{\bkmkend AAAAAAABNO}
00200     \par
{\bkmkstart AAAAAAABNR}{\bkmkend AAAAAAABNR}
00201     {\cf20 // Should still work with default data}\par
{\bkmkstart AAAAAAABNS}{\bkmkend AAAAAAABNS}
00202     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABOD}{\bkmkend AAAAAAABOD}
00203 \}\par
{\bkmkstart AAAAAAABOG}{\bkmkend AAAAAAABOG}
00204 \par
{\bkmkstart AAAAAAABOJ}{\bkmkend AAAAAAABOJ}
00205 TEST_F(LanguageTranslatorTest, LoadAllDictionaries) \{\par
{\bkmkstart AAAAAAABOT}{\bkmkend AAAAAAABOT}
00206     {\cf20 // This should not crash even if files don't exist}\par
{\bkmkstart AAAAAAABOY}{\bkmkend AAAAAAABOY}
00207     app->loadAllDictionaries();\par
{\bkmkstart AAAAAAABPH}{\bkmkend AAAAAAABPH}
00208     \par
{\bkmkstart AAAAAAABPJ}{\bkmkend AAAAAAABPJ}
00209     {\cf20 // Default translations should still work}\par
{\bkmkstart AAAAAAABPM}{\bkmkend AAAAAAABPM}
00210     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABPY}{\bkmkend AAAAAAABPY}
00211 \}\par
{\bkmkstart AAAAAAABQB}{\bkmkend AAAAAAABQB}
00212 \par
{\bkmkstart AAAAAAABQF}{\bkmkend AAAAAAABQF}
00213 {\cf20 // Performance and Stress Tests}\par
{\bkmkstart AAAAAAABQI}{\bkmkend AAAAAAABQI}
00214 TEST_F(LanguageTranslatorTest, LongTextTranslation) \{\par
{\bkmkstart AAAAAAABQN}{\bkmkend AAAAAAABQN}
00215     std::string longText = {\cf22 "hello world good morning thank you water food house car book computer phone friend family work"};\par
{\bkmkstart AAAAAAABQT}{\bkmkend AAAAAAABQT}
00216     std::string result = app->translateText(longText);\par
{\bkmkstart AAAAAAABRA}{\bkmkend AAAAAAABRA}
00217     \par
{\bkmkstart AAAAAAABRC}{\bkmkend AAAAAAABRC}
00218     {\cf20 // Should not be empty}\par
{\bkmkstart AAAAAAABRE}{\bkmkend AAAAAAABRE}
00219     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAABRJ}{\bkmkend AAAAAAABRJ}
00220     \par
{\bkmkstart AAAAAAABRL}{\bkmkend AAAAAAABRL}
00221     {\cf20 // Should contain at least one translated word (be more flexible)}\par
{\bkmkstart AAAAAAABRO}{\bkmkend AAAAAAABRO}
00222     {\cf18 bool} hasTranslation = (result.find({\cf22 "merhaba"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00223                          (result.find({\cf22 "dünya"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00224                          (result.find({\cf22 "günaydın"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSK}{\bkmkend AAAAAAABSK}
00225                          (result.find({\cf22 "araba"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSM}{\bkmkend AAAAAAABSM}
00226                          (result.find({\cf22 "kitap"}) != std::string::npos);\par
{\bkmkstart AAAAAAABSS}{\bkmkend AAAAAAABSS}
00227     EXPECT_TRUE(hasTranslation);\par
{\bkmkstart AAAAAAABTA}{\bkmkend AAAAAAABTA}
00228 \}\par
{\bkmkstart AAAAAAABTB}{\bkmkend AAAAAAABTB}
00229 \par
{\bkmkstart AAAAAAABTJ}{\bkmkend AAAAAAABTJ}
00230 TEST_F(LanguageTranslatorTest, RepeatedTranslation) \{\par
{\bkmkstart AAAAAAABTP}{\bkmkend AAAAAAABTP}
00231     {\cf20 // Test multiple translations of same text}\par
{\bkmkstart AAAAAAABTT}{\bkmkend AAAAAAABTT}
00232     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAABTZ}{\bkmkend AAAAAAABTZ}
00233         EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABUE}{\bkmkend AAAAAAABUE}
00234     \}\par
{\bkmkstart AAAAAAABUH}{\bkmkend AAAAAAABUH}
00235 \}\par
{\bkmkstart AAAAAAABUI}{\bkmkend AAAAAAABUI}
00236 \par
{\bkmkstart AAAAAAABUK}{\bkmkend AAAAAAABUK}
00237 {\cf20 // Integration Tests}\par
{\bkmkstart AAAAAAABUN}{\bkmkend AAAAAAABUN}
00238 TEST_F(LanguageTranslatorTest, FullTranslationWorkflow) \{\par
{\bkmkstart AAAAAAABUT}{\bkmkend AAAAAAABUT}
00239     {\cf20 // Login}\par
{\bkmkstart AAAAAAABUW}{\bkmkend AAAAAAABUW}
00240     app->login({\cf22 "admin"}, {\cf22 "admin"});\par
{\bkmkstart AAAAAAABVA}{\bkmkend AAAAAAABVA}
00241     EXPECT_TRUE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAABVL}{\bkmkend AAAAAAABVL}
00242     \par
{\bkmkstart AAAAAAABVM}{\bkmkend AAAAAAABVM}
00243     {\cf20 // Set languages}\par
{\bkmkstart AAAAAAABVO}{\bkmkend AAAAAAABVO}
00244     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAABVQ}{\bkmkend AAAAAAABVQ}
00245     app->setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAABVV}{\bkmkend AAAAAAABVV}
00246     \par
{\bkmkstart AAAAAAABVX}{\bkmkend AAAAAAABVX}
00247     {\cf20 // Translate}\par
{\bkmkstart AAAAAAABVZ}{\bkmkend AAAAAAABVZ}
00248     EXPECT_EQ(app->translateText({\cf22 "hello world"}), {\cf22 "merhaba dünya"});\par
{\bkmkstart AAAAAAABWH}{\bkmkend AAAAAAABWH}
00249     \par
{\bkmkstart AAAAAAABWJ}{\bkmkend AAAAAAABWJ}
00250     {\cf20 // Switch to Spanish}\par
{\bkmkstart AAAAAAABWM}{\bkmkend AAAAAAABWM}
00251     app->setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAABWQ}{\bkmkend AAAAAAABWQ}
00252     EXPECT_EQ(app->translateText({\cf22 "hello world"}), {\cf22 "hola mundo"});\par
{\bkmkstart AAAAAAABWW}{\bkmkend AAAAAAABWW}
00253     \par
{\bkmkstart AAAAAAABWZ}{\bkmkend AAAAAAABWZ}
00254     {\cf20 // Logout}\par
{\bkmkstart AAAAAAABXD}{\bkmkend AAAAAAABXD}
00255     app->logout();\par
{\bkmkstart AAAAAAABXJ}{\bkmkend AAAAAAABXJ}
00256     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAABXS}{\bkmkend AAAAAAABXS}
00257 \}\par
}
}