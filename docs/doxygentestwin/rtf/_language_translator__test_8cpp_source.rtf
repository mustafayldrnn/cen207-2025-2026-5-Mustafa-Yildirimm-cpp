{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
LanguageTranslator_test.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/LanguageTranslator_test.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/LanguageTranslator_test.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAK" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAABF}{\bkmkend AAAAAAAABF}
00001 \par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00005 \par
{\bkmkstart AAAAAAAABK}{\bkmkend AAAAAAAABK}
00006 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAACG}{\bkmkend AAAAAAAACG}
00007 {\cf21 #include "../src/LanguageTranslator/header/LanguageTranslator.h"}\par
{\bkmkstart AAAAAAAADD}{\bkmkend AAAAAAAADD}
00008 \par
{\bkmkstart AAAAAAAADE}{\bkmkend AAAAAAAADE}
00009 {\cf17 using namespace }Coruh::LanguageTranslator;\par
{\bkmkstart AAAAAAAADM}{\bkmkend AAAAAAAADM}
00010 \par
{\bkmkstart AAAAAAAADN}{\bkmkend AAAAAAAADN}
00011 {\cf17 class }LanguageTranslatorTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
00012 {\cf17 protected}:\par
{\bkmkstart AAAAAAAADS}{\bkmkend AAAAAAAADS}
00013     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADV}{\bkmkend AAAAAAAADV}
00014         app = {\cf17 new} LanguageTranslatorApp();\par
{\bkmkstart AAAAAAAAEA}{\bkmkend AAAAAAAAEA}
00015     \}\par
{\bkmkstart AAAAAAAAEB}{\bkmkend AAAAAAAAEB}
00016     \par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00017     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
00018         {\cf17 delete} app;\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00019     \}\par
{\bkmkstart AAAAAAAAEK}{\bkmkend AAAAAAAAEK}
00020     \par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00021     LanguageTranslatorApp* app;\par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00022 \};\par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00023 \par
{\bkmkstart AAAAAAAAET}{\bkmkend AAAAAAAAET}
00024 {\cf20 // Basic Translation Tests}\par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00025 TEST_F(LanguageTranslatorTest, BasicWordTranslation) \{\par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00026     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAAAFD}{\bkmkend AAAAAAAAFD}
00027     EXPECT_EQ(app->translateText({\cf22 "world"}), {\cf22 "dünya"});\par
{\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
00028     EXPECT_EQ(app->translateText({\cf22 "good"}), {\cf22 "iyi"});\par
{\bkmkstart AAAAAAAAFK}{\bkmkend AAAAAAAAFK}
00029     EXPECT_EQ(app->translateText({\cf22 "water"}), {\cf22 "su"});\par
{\bkmkstart AAAAAAAAFL}{\bkmkend AAAAAAAAFL}
00030     EXPECT_EQ(app->translateText({\cf22 "house"}), {\cf22 "ev"});\par
{\bkmkstart AAAAAAAAFN}{\bkmkend AAAAAAAAFN}
00031 \}\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00032 \par
{\bkmkstart AAAAAAAAFQ}{\bkmkend AAAAAAAAFQ}
00033 TEST_F(LanguageTranslatorTest, PhraseTranslation) \{\par
{\bkmkstart AAAAAAAAFS}{\bkmkend AAAAAAAAFS}
00034     EXPECT_EQ(app->translateText({\cf22 "good morning"}), {\cf22 "günaydın"});\par
{\bkmkstart AAAAAAAAFW}{\bkmkend AAAAAAAAFW}
00035     EXPECT_EQ(app->translateText({\cf22 "thank you"}), {\cf22 "teşekkür ederim"});\par
{\bkmkstart AAAAAAAAFY}{\bkmkend AAAAAAAAFY}
00036     EXPECT_EQ(app->translateText({\cf22 "how are you"}), {\cf22 "nasılsın"});\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00037     EXPECT_EQ(app->translateText({\cf22 "nice to meet you"}), {\cf22 "tanıştığımıza memnun oldum"});\par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00038 \}\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00039 \par
{\bkmkstart AAAAAAAAGM}{\bkmkend AAAAAAAAGM}
00040 TEST_F(LanguageTranslatorTest, UnknownWordHandling) \{\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00041     {\cf20 // Unknown words should return as-is}\par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00042     EXPECT_EQ(app->translateText({\cf22 "unknownword"}), {\cf22 "unknownword"});\par
{\bkmkstart AAAAAAAAGV}{\bkmkend AAAAAAAAGV}
00043     EXPECT_EQ(app->translateText({\cf22 "xyz123"}), {\cf22 "xyz123"});\par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00044     EXPECT_EQ(app->translateText({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAAAGZ}{\bkmkend AAAAAAAAGZ}
00045 \}\par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00046 \par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00047 TEST_F(LanguageTranslatorTest, MixedKnownUnknownWords) \{\par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00048     {\cf20 // Mixed sentence with known and unknown words}\par
{\bkmkstart AAAAAAAAHL}{\bkmkend AAAAAAAAHL}
00049     std::string result = app->translateText({\cf22 "hello unknownword world"});\par
{\bkmkstart AAAAAAAAHT}{\bkmkend AAAAAAAAHT}
00050     EXPECT_TRUE(result.find({\cf22 "merhaba"}) != std::string::npos);\par
{\bkmkstart AAAAAAAAHZ}{\bkmkend AAAAAAAAHZ}
00051     EXPECT_TRUE(result.find({\cf22 "unknownword"}) != std::string::npos);\par
{\bkmkstart AAAAAAAAID}{\bkmkend AAAAAAAAID}
00052     EXPECT_TRUE(result.find({\cf22 "dünya"}) != std::string::npos);\par
{\bkmkstart AAAAAAAAIJ}{\bkmkend AAAAAAAAIJ}
00053 \}\par
{\bkmkstart AAAAAAAAIK}{\bkmkend AAAAAAAAIK}
00054 \par
{\bkmkstart AAAAAAAAIN}{\bkmkend AAAAAAAAIN}
00055 TEST_F(LanguageTranslatorTest, SameLanguageTranslation) \{\par
{\bkmkstart AAAAAAAAIR}{\bkmkend AAAAAAAAIR}
00056     {\cf20 // When source and target are same, return original text}\par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00057     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAAIX}{\bkmkend AAAAAAAAIX}
00058     app->setTargetLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAAJA}{\bkmkend AAAAAAAAJA}
00059     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "hello"});\par
{\bkmkstart AAAAAAAAJG}{\bkmkend AAAAAAAAJG}
00060     EXPECT_EQ(app->translateText({\cf22 "world"}), {\cf22 "world"});\par
{\bkmkstart AAAAAAAAJJ}{\bkmkend AAAAAAAAJJ}
00061 \}\par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00062 \par
{\bkmkstart AAAAAAAAJM}{\bkmkend AAAAAAAAJM}
00063 {\cf20 // Language Management Tests}\par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00064 TEST_F(LanguageTranslatorTest, LanguageSwitching) \{\par
{\bkmkstart AAAAAAAAJU}{\bkmkend AAAAAAAAJU}
00065     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAAJV}{\bkmkend AAAAAAAAJV}
00066     app->setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
00067     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAAAJZ}{\bkmkend AAAAAAAAJZ}
00068     \par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00069     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAAAKB}{\bkmkend AAAAAAAAKB}
00070     app->setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00071     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "hola"});\par
{\bkmkstart AAAAAAAAKF}{\bkmkend AAAAAAAAKF}
00072 \}\par
{\bkmkstart AAAAAAAAKI}{\bkmkend AAAAAAAAKI}
00073 \par
{\bkmkstart AAAAAAAAKJ}{\bkmkend AAAAAAAAKJ}
00074 TEST_F(LanguageTranslatorTest, GetSupportedLanguages) \{\par
{\bkmkstart AAAAAAAAKN}{\bkmkend AAAAAAAAKN}
00075     {\cf17 auto} languages = app->getSupportedLanguages();\par
{\bkmkstart AAAAAAAAKR}{\bkmkend AAAAAAAAKR}
00076     EXPECT_FALSE(languages.empty());\par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00077     EXPECT_TRUE(std::find(languages.begin(), languages.end(), {\cf22 "English"}) != languages.end());\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00078     EXPECT_TRUE(std::find(languages.begin(), languages.end(), {\cf22 "Turkish"}) != languages.end());\par
{\bkmkstart AAAAAAAALL}{\bkmkend AAAAAAAALL}
00079 \}\par
{\bkmkstart AAAAAAAALM}{\bkmkend AAAAAAAALM}
00080 \par
{\bkmkstart AAAAAAAALN}{\bkmkend AAAAAAAALN}
00081 TEST_F(LanguageTranslatorTest, AddNewLanguage) \{\par
{\bkmkstart AAAAAAAALR}{\bkmkend AAAAAAAALR}
00082     app->addLanguage({\cf22 "Japanese"});\par
{\bkmkstart AAAAAAAALS}{\bkmkend AAAAAAAALS}
00083     {\cf17 auto} languages = app->getSupportedLanguages();\par
{\bkmkstart AAAAAAAALX}{\bkmkend AAAAAAAALX}
00084     EXPECT_TRUE(std::find(languages.begin(), languages.end(), {\cf22 "Japanese"}) != languages.end());\par
{\bkmkstart AAAAAAAAMA}{\bkmkend AAAAAAAAMA}
00085 \}\par
{\bkmkstart AAAAAAAAMB}{\bkmkend AAAAAAAAMB}
00086 \par
{\bkmkstart AAAAAAAAMC}{\bkmkend AAAAAAAAMC}
00087 {\cf20 // User Management Tests}\par
{\bkmkstart AAAAAAAAMD}{\bkmkend AAAAAAAAMD}
00088 TEST_F(LanguageTranslatorTest, UserLogin) \{\par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00089     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00090     \par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00091     {\cf18 bool} loginResult = app->login({\cf22 "admin"}, {\cf22 "admin"});\par
{\bkmkstart AAAAAAAAMV}{\bkmkend AAAAAAAAMV}
00092     EXPECT_TRUE(loginResult);\par
{\bkmkstart AAAAAAAAMX}{\bkmkend AAAAAAAAMX}
00093     EXPECT_TRUE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00094 \}\par
{\bkmkstart AAAAAAAANC}{\bkmkend AAAAAAAANC}
00095 \par
{\bkmkstart AAAAAAAANE}{\bkmkend AAAAAAAANE}
00096 TEST_F(LanguageTranslatorTest, UserLogout) \{\par
{\bkmkstart AAAAAAAANJ}{\bkmkend AAAAAAAANJ}
00097     app->login({\cf22 "admin"}, {\cf22 "admin"});\par
{\bkmkstart AAAAAAAANN}{\bkmkend AAAAAAAANN}
00098     EXPECT_TRUE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAANR}{\bkmkend AAAAAAAANR}
00099     \par
{\bkmkstart AAAAAAAANU}{\bkmkend AAAAAAAANU}
00100     app->logout();\par
{\bkmkstart AAAAAAAANX}{\bkmkend AAAAAAAANX}
00101     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00102 \}\par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00103 \par
{\bkmkstart AAAAAAAAOG}{\bkmkend AAAAAAAAOG}
00104 TEST_F(LanguageTranslatorTest, InvalidLogin) \{\par
{\bkmkstart AAAAAAAAOI}{\bkmkend AAAAAAAAOI}
00105     {\cf18 bool} loginResult = app->login({\cf22 "wronguser"}, {\cf22 "wrongpass"});\par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00106     EXPECT_FALSE(loginResult);\par
{\bkmkstart AAAAAAAAOR}{\bkmkend AAAAAAAAOR}
00107     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00108 \}\par
{\bkmkstart AAAAAAAAOV}{\bkmkend AAAAAAAAOV}
00109 \par
{\bkmkstart AAAAAAAAOW}{\bkmkend AAAAAAAAOW}
00110 TEST_F(LanguageTranslatorTest, UserRegistration) \{\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00111     {\cf18 bool} registerResult = app->registerUser({\cf22 "newuser"}, {\cf22 "newpass"});\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00112     EXPECT_TRUE(registerResult);\par
{\bkmkstart AAAAAAAAPQ}{\bkmkend AAAAAAAAPQ}
00113 \}\par
{\bkmkstart AAAAAAAAPS}{\bkmkend AAAAAAAAPS}
00114 \par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00115 {\cf20 // Individual Translation Function Tests}\par
{\bkmkstart AAAAAAAAPX}{\bkmkend AAAAAAAAPX}
00116 TEST_F(LanguageTranslatorTest, TranslateWordFunction) \{\par
{\bkmkstart AAAAAAAAQH}{\bkmkend AAAAAAAAQH}
00117     EXPECT_EQ(app->translateWord({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00118     EXPECT_EQ(app->translateWord({\cf22 "world"}), {\cf22 "dünya"});\par
{\bkmkstart AAAAAAAAQS}{\bkmkend AAAAAAAAQS}
00119     EXPECT_EQ(app->translateWord({\cf22 "unknown"}), {\cf22 "unknown"});\par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00120 \}\par
{\bkmkstart AAAAAAAARA}{\bkmkend AAAAAAAARA}
00121 \par
{\bkmkstart AAAAAAAARD}{\bkmkend AAAAAAAARD}
00122 TEST_F(LanguageTranslatorTest, TranslatePhraseFunction) \{\par
{\bkmkstart AAAAAAAARJ}{\bkmkend AAAAAAAARJ}
00123     EXPECT_EQ(app->translatePhrase({\cf22 "good morning"}), {\cf22 "günaydın"});\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00124     EXPECT_EQ(app->translatePhrase({\cf22 "thank you"}), {\cf22 "teşekkür ederim"});\par
{\bkmkstart AAAAAAAARW}{\bkmkend AAAAAAAARW}
00125     EXPECT_EQ(app->translatePhrase({\cf22 "unknown phrase"}), {\cf22 "unknown phrase"});\par
{\bkmkstart AAAAAAAASC}{\bkmkend AAAAAAAASC}
00126 \}\par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00127 \par
{\bkmkstart AAAAAAAASG}{\bkmkend AAAAAAAASG}
00128 {\cf20 // API Tests}\par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00129 TEST_F(LanguageTranslatorTest, APIModeToggle) \{\par
{\bkmkstart AAAAAAAASQ}{\bkmkend AAAAAAAASQ}
00130     {\cf20 // API is not implemented yet, so it should always return false}\par
{\bkmkstart AAAAAAAAST}{\bkmkend AAAAAAAAST}
00131     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAAATC}{\bkmkend AAAAAAAATC}
00132     \par
{\bkmkstart AAAAAAAATD}{\bkmkend AAAAAAAATD}
00133     app->setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAAATM}{\bkmkend AAAAAAAATM}
00134     app->setAPIKey({\cf22 "test_key"});\par
{\bkmkstart AAAAAAAATW}{\bkmkend AAAAAAAATW}
00135     {\cf20 // API is not implemented yet, so it should always return false}\par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00136     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAAAUH}{\bkmkend AAAAAAAAUH}
00137     \par
{\bkmkstart AAAAAAAAUL}{\bkmkend AAAAAAAAUL}
00138     app->setAPIMode({\cf17 false});\par
{\bkmkstart AAAAAAAAUQ}{\bkmkend AAAAAAAAUQ}
00139     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAAAVA}{\bkmkend AAAAAAAAVA}
00140 \}\par
{\bkmkstart AAAAAAAAVC}{\bkmkend AAAAAAAAVC}
00141 \par
{\bkmkstart AAAAAAAAVF}{\bkmkend AAAAAAAAVF}
00142 TEST_F(LanguageTranslatorTest, APIKeyManagement) \{\par
{\bkmkstart AAAAAAAAVR}{\bkmkend AAAAAAAAVR}
00143     app->setAPIKey({\cf22 "test_api_key"});\par
{\bkmkstart AAAAAAAAVY}{\bkmkend AAAAAAAAVY}
00144     app->setAPIMode({\cf17 true});\par
{\bkmkstart AAAAAAAAWE}{\bkmkend AAAAAAAAWE}
00145     {\cf20 // API is not implemented yet, so it should always return false}\par
{\bkmkstart AAAAAAAAWL}{\bkmkend AAAAAAAAWL}
00146     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAAAWR}{\bkmkend AAAAAAAAWR}
00147     \par
{\bkmkstart AAAAAAAAWV}{\bkmkend AAAAAAAAWV}
00148     app->setAPIKey({\cf22 ""});\par
{\bkmkstart AAAAAAAAXD}{\bkmkend AAAAAAAAXD}
00149     EXPECT_FALSE(app->isAPIAvailable());\par
{\bkmkstart AAAAAAAAXM}{\bkmkend AAAAAAAAXM}
00150 \}\par
{\bkmkstart AAAAAAAAXR}{\bkmkend AAAAAAAAXR}
00151 \par
{\bkmkstart AAAAAAAAXV}{\bkmkend AAAAAAAAXV}
00152 {\cf20 // Edge Cases and Error Handling}\par
{\bkmkstart AAAAAAAAXZ}{\bkmkend AAAAAAAAXZ}
00153 TEST_F(LanguageTranslatorTest, EmptyStringTranslation) \{\par
{\bkmkstart AAAAAAAAYQ}{\bkmkend AAAAAAAAYQ}
00154     EXPECT_EQ(app->translateText({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAAAZA}{\bkmkend AAAAAAAAZA}
00155     EXPECT_EQ(app->translateWord({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAAAZK}{\bkmkend AAAAAAAAZK}
00156     EXPECT_EQ(app->translatePhrase({\cf22 ""}), {\cf22 ""});\par
{\bkmkstart AAAAAAAAZV}{\bkmkend AAAAAAAAZV}
00157 \}\par
{\bkmkstart AAAAAAAAZY}{\bkmkend AAAAAAAAZY}
00158 \par
{\bkmkstart AAAAAAABAA}{\bkmkend AAAAAAABAA}
00159 TEST_F(LanguageTranslatorTest, WhitespaceHandling) \{\par
{\bkmkstart AAAAAAABAJ}{\bkmkend AAAAAAABAJ}
00160     {\cf20 // Test whitespace handling - current implementation doesn't trim}\par
{\bkmkstart AAAAAAABAO}{\bkmkend AAAAAAABAO}
00161     EXPECT_EQ(app->translateText({\cf22 "  hello  "}), {\cf22 "merhaba "});\par
{\bkmkstart AAAAAAABBF}{\bkmkend AAAAAAABBF}
00162     EXPECT_EQ(app->translateText({\cf22 "   "}), {\cf22 "   "});\par
{\bkmkstart AAAAAAABBL}{\bkmkend AAAAAAABBL}
00163 \}\par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00164 \par
{\bkmkstart AAAAAAABCF}{\bkmkend AAAAAAABCF}
00165 TEST_F(LanguageTranslatorTest, SpecialCharacters) \{\par
{\bkmkstart AAAAAAABCP}{\bkmkend AAAAAAABCP}
00166     {\cf20 // Test special characters - current implementation doesn't handle punctuation}\par
{\bkmkstart AAAAAAABCS}{\bkmkend AAAAAAABCS}
00167     EXPECT_EQ(app->translateText({\cf22 "hello!"}), {\cf22 "hello!"});\par
{\bkmkstart AAAAAAABDA}{\bkmkend AAAAAAABDA}
00168     EXPECT_EQ(app->translateText({\cf22 "hello, world"}), {\cf22 "hello, dünya"});\par
{\bkmkstart AAAAAAABDM}{\bkmkend AAAAAAABDM}
00169     EXPECT_EQ(app->translateText({\cf22 "hello.world"}), {\cf22 "hello.world"});\par
{\bkmkstart AAAAAAABDS}{\bkmkend AAAAAAABDS}
00170 \}\par
{\bkmkstart AAAAAAABDX}{\bkmkend AAAAAAABDX}
00171 \par
{\bkmkstart AAAAAAABDZ}{\bkmkend AAAAAAABDZ}
00172 TEST_F(LanguageTranslatorTest, CaseInsensitiveTranslation) \{\par
{\bkmkstart AAAAAAABEL}{\bkmkend AAAAAAABEL}
00173     {\cf20 // Test case insensitive - current implementation is case sensitive}\par
{\bkmkstart AAAAAAABEP}{\bkmkend AAAAAAABEP}
00174     EXPECT_EQ(app->translateText({\cf22 "HELLO"}), {\cf22 "HELLO"});\par
{\bkmkstart AAAAAAABEZ}{\bkmkend AAAAAAABEZ}
00175     EXPECT_EQ(app->translateText({\cf22 "Hello"}), {\cf22 "Hello"});\par
{\bkmkstart AAAAAAABFK}{\bkmkend AAAAAAABFK}
00176     EXPECT_EQ(app->translateText({\cf22 "hELLo"}), {\cf22 "hELLo"});\par
{\bkmkstart AAAAAAABFR}{\bkmkend AAAAAAABFR}
00177 \}\par
{\bkmkstart AAAAAAABFV}{\bkmkend AAAAAAABFV}
00178 \par
{\bkmkstart AAAAAAABGC}{\bkmkend AAAAAAABGC}
00179 {\cf20 // Data Management Tests}\par
{\bkmkstart AAAAAAABGE}{\bkmkend AAAAAAABGE}
00180 TEST_F(LanguageTranslatorTest, DataInitialization) \{\par
{\bkmkstart AAAAAAABGP}{\bkmkend AAAAAAABGP}
00181     {\cf20 // Test that default data is loaded}\par
{\bkmkstart AAAAAAABHA}{\bkmkend AAAAAAABHA}
00182     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABHM}{\bkmkend AAAAAAABHM}
00183     EXPECT_EQ(app->translateText({\cf22 "good morning"}), {\cf22 "günaydın"});\par
{\bkmkstart AAAAAAABIU}{\bkmkend AAAAAAABIU}
00184 \}\par
{\bkmkstart AAAAAAABJB}{\bkmkend AAAAAAABJB}
00185 \par
{\bkmkstart AAAAAAABJF}{\bkmkend AAAAAAABJF}
00186 TEST_F(LanguageTranslatorTest, DataSaveLoad) \{\par
{\bkmkstart AAAAAAABJO}{\bkmkend AAAAAAABJO}
00187     {\cf20 // These functions should not crash}\par
{\bkmkstart AAAAAAABJS}{\bkmkend AAAAAAABJS}
00188     app->saveData();\par
{\bkmkstart AAAAAAABJW}{\bkmkend AAAAAAABJW}
00189     app->loadData();\par
{\bkmkstart AAAAAAABKD}{\bkmkend AAAAAAABKD}
00190     \par
{\bkmkstart AAAAAAABKG}{\bkmkend AAAAAAABKG}
00191     {\cf20 // Data should still be available after save/load}\par
{\bkmkstart AAAAAAABKN}{\bkmkend AAAAAAABKN}
00192     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABKX}{\bkmkend AAAAAAABKX}
00193 \}\par
{\bkmkstart AAAAAAABLD}{\bkmkend AAAAAAABLD}
00194 \par
{\bkmkstart AAAAAAABLF}{\bkmkend AAAAAAABLF}
00195 {\cf20 // Dictionary Management Tests}\par
{\bkmkstart AAAAAAABLK}{\bkmkend AAAAAAABLK}
00196 TEST_F(LanguageTranslatorTest, DictionaryFileLoading) \{\par
{\bkmkstart AAAAAAABLZ}{\bkmkend AAAAAAABLZ}
00197     {\cf20 // Test dictionary file loading (file may not exist, should handle gracefully)}\par
{\bkmkstart AAAAAAABME}{\bkmkend AAAAAAABME}
00198     {\cf18 bool} result = app->loadDictionaryFromFile({\cf22 "English"}, {\cf22 "Turkish"}, {\cf22 "nonexistent_file.txt"});\par
{\bkmkstart AAAAAAABMV}{\bkmkend AAAAAAABMV}
00199     EXPECT_FALSE(result); {\cf20 // File doesn't exist}\par
{\bkmkstart AAAAAAABNO}{\bkmkend AAAAAAABNO}
00200     \par
{\bkmkstart AAAAAAABNS}{\bkmkend AAAAAAABNS}
00201     {\cf20 // Should still work with default data}\par
{\bkmkstart AAAAAAABNU}{\bkmkend AAAAAAABNU}
00202     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABOE}{\bkmkend AAAAAAABOE}
00203 \}\par
{\bkmkstart AAAAAAABOK}{\bkmkend AAAAAAABOK}
00204 \par
{\bkmkstart AAAAAAABOL}{\bkmkend AAAAAAABOL}
00205 TEST_F(LanguageTranslatorTest, LoadAllDictionaries) \{\par
{\bkmkstart AAAAAAABOU}{\bkmkend AAAAAAABOU}
00206     {\cf20 // This should not crash even if files don't exist}\par
{\bkmkstart AAAAAAABOZ}{\bkmkend AAAAAAABOZ}
00207     app->loadAllDictionaries();\par
{\bkmkstart AAAAAAABPC}{\bkmkend AAAAAAABPC}
00208     \par
{\bkmkstart AAAAAAABPF}{\bkmkend AAAAAAABPF}
00209     {\cf20 // Default translations should still work}\par
{\bkmkstart AAAAAAABPH}{\bkmkend AAAAAAABPH}
00210     EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABPQ}{\bkmkend AAAAAAABPQ}
00211 \}\par
{\bkmkstart AAAAAAABPT}{\bkmkend AAAAAAABPT}
00212 \par
{\bkmkstart AAAAAAABPV}{\bkmkend AAAAAAABPV}
00213 {\cf20 // Performance and Stress Tests}\par
{\bkmkstart AAAAAAABPX}{\bkmkend AAAAAAABPX}
00214 TEST_F(LanguageTranslatorTest, LongTextTranslation) \{\par
{\bkmkstart AAAAAAABQF}{\bkmkend AAAAAAABQF}
00215     std::string longText = {\cf22 "hello world good morning thank you water food house car book computer phone friend family work"};\par
{\bkmkstart AAAAAAABQN}{\bkmkend AAAAAAABQN}
00216     std::string result = app->translateText(longText);\par
{\bkmkstart AAAAAAABQX}{\bkmkend AAAAAAABQX}
00217     \par
{\bkmkstart AAAAAAABQZ}{\bkmkend AAAAAAABQZ}
00218     {\cf20 // Should not be empty}\par
{\bkmkstart AAAAAAABRA}{\bkmkend AAAAAAABRA}
00219     EXPECT_FALSE(result.empty());\par
{\bkmkstart AAAAAAABRJ}{\bkmkend AAAAAAABRJ}
00220     \par
{\bkmkstart AAAAAAABRO}{\bkmkend AAAAAAABRO}
00221     {\cf20 // Should contain at least one translated word (be more flexible)}\par
{\bkmkstart AAAAAAABRW}{\bkmkend AAAAAAABRW}
00222     {\cf18 bool} hasTranslation = (result.find({\cf22 "merhaba"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSC}{\bkmkend AAAAAAABSC}
00223                          (result.find({\cf22 "dünya"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00224                          (result.find({\cf22 "günaydın"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSL}{\bkmkend AAAAAAABSL}
00225                          (result.find({\cf22 "araba"}) != std::string::npos) ||\par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00226                          (result.find({\cf22 "kitap"}) != std::string::npos);\par
{\bkmkstart AAAAAAABSW}{\bkmkend AAAAAAABSW}
00227     EXPECT_TRUE(hasTranslation);\par
{\bkmkstart AAAAAAABTA}{\bkmkend AAAAAAABTA}
00228 \}\par
{\bkmkstart AAAAAAABTD}{\bkmkend AAAAAAABTD}
00229 \par
{\bkmkstart AAAAAAABTF}{\bkmkend AAAAAAABTF}
00230 TEST_F(LanguageTranslatorTest, RepeatedTranslation) \{\par
{\bkmkstart AAAAAAABTN}{\bkmkend AAAAAAABTN}
00231     {\cf20 // Test multiple translations of same text}\par
{\bkmkstart AAAAAAABTO}{\bkmkend AAAAAAABTO}
00232     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAABTU}{\bkmkend AAAAAAABTU}
00233         EXPECT_EQ(app->translateText({\cf22 "hello"}), {\cf22 "merhaba"});\par
{\bkmkstart AAAAAAABTY}{\bkmkend AAAAAAABTY}
00234     \}\par
{\bkmkstart AAAAAAABUA}{\bkmkend AAAAAAABUA}
00235 \}\par
{\bkmkstart AAAAAAABUC}{\bkmkend AAAAAAABUC}
00236 \par
{\bkmkstart AAAAAAABUD}{\bkmkend AAAAAAABUD}
00237 {\cf20 // Integration Tests}\par
{\bkmkstart AAAAAAABUF}{\bkmkend AAAAAAABUF}
00238 TEST_F(LanguageTranslatorTest, FullTranslationWorkflow) \{\par
{\bkmkstart AAAAAAABUJ}{\bkmkend AAAAAAABUJ}
00239     {\cf20 // Login}\par
{\bkmkstart AAAAAAABUM}{\bkmkend AAAAAAABUM}
00240     app->login({\cf22 "admin"}, {\cf22 "admin"});\par
{\bkmkstart AAAAAAABUP}{\bkmkend AAAAAAABUP}
00241     EXPECT_TRUE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAABUT}{\bkmkend AAAAAAABUT}
00242     \par
{\bkmkstart AAAAAAABUV}{\bkmkend AAAAAAABUV}
00243     {\cf20 // Set languages}\par
{\bkmkstart AAAAAAABUW}{\bkmkend AAAAAAABUW}
00244     app->setSourceLanguage({\cf22 "English"});\par
{\bkmkstart AAAAAAABVC}{\bkmkend AAAAAAABVC}
00245     app->setTargetLanguage({\cf22 "Turkish"});\par
{\bkmkstart AAAAAAABVG}{\bkmkend AAAAAAABVG}
00246     \par
{\bkmkstart AAAAAAABVH}{\bkmkend AAAAAAABVH}
00247     {\cf20 // Translate}\par
{\bkmkstart AAAAAAABVI}{\bkmkend AAAAAAABVI}
00248     EXPECT_EQ(app->translateText({\cf22 "hello world"}), {\cf22 "merhaba dünya"});\par
{\bkmkstart AAAAAAABVL}{\bkmkend AAAAAAABVL}
00249     \par
{\bkmkstart AAAAAAABVN}{\bkmkend AAAAAAABVN}
00250     {\cf20 // Switch to Spanish}\par
{\bkmkstart AAAAAAABVR}{\bkmkend AAAAAAABVR}
00251     app->setTargetLanguage({\cf22 "Spanish"});\par
{\bkmkstart AAAAAAABVZ}{\bkmkend AAAAAAABVZ}
00252     EXPECT_EQ(app->translateText({\cf22 "hello world"}), {\cf22 "hola mundo"});\par
{\bkmkstart AAAAAAABWC}{\bkmkend AAAAAAABWC}
00253     \par
{\bkmkstart AAAAAAABWE}{\bkmkend AAAAAAABWE}
00254     {\cf20 // Logout}\par
{\bkmkstart AAAAAAABWH}{\bkmkend AAAAAAABWH}
00255     app->logout();\par
{\bkmkstart AAAAAAABWL}{\bkmkend AAAAAAABWL}
00256     EXPECT_FALSE(app->isUserLoggedIn());\par
{\bkmkstart AAAAAAABWS}{\bkmkend AAAAAAABWS}
00257 \}\par
}
}