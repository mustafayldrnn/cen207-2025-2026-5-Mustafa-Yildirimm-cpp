{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_chrono_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAT}{\bkmkend AAAAAAAAAT}
00001 \par
{\bkmkstart AAAAAAAAAX}{\bkmkend AAAAAAAAAX}
00008 \par
{\bkmkstart AAAAAAAAAY}{\bkmkend AAAAAAAAAY}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAABL}{\bkmkend AAAAAAAABL}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAABZ}{\bkmkend AAAAAAAABZ}
00011 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAACJ}{\bkmkend AAAAAAAACJ}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAACS}{\bkmkend AAAAAAAACS}
00013 \par
{\bkmkstart AAAAAAAACT}{\bkmkend AAAAAAAACT}
00014 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAACV}{\bkmkend AAAAAAAACV}
00015 \par
{\bkmkstart AAAAAAAACY}{\bkmkend AAAAAAAACY}
00020 {\cf17 class }ChronoCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAADI}{\bkmkend AAAAAAAADI}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAADK}{\bkmkend AAAAAAAADK}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADQ}{\bkmkend AAAAAAAADQ}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAADS}{\bkmkend AAAAAAAADS}
00024     \}\par
{\bkmkstart AAAAAAAADT}{\bkmkend AAAAAAAADT}
00025     \par
{\bkmkstart AAAAAAAADV}{\bkmkend AAAAAAAADV}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADZ}{\bkmkend AAAAAAAADZ}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAAEB}{\bkmkend AAAAAAAAEB}
00028     \}\par
{\bkmkstart AAAAAAAAED}{\bkmkend AAAAAAAAED}
00029 \};\par
{\bkmkstart AAAAAAAAEE}{\bkmkend AAAAAAAAEE}
00030 \par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
00035 TEST_F(ChronoCoverageTest, TestHighResolutionClock) \{\par
{\bkmkstart AAAAAAAAEM}{\bkmkend AAAAAAAAEM}
00036     {\cf20 // Test high_resolution_clock}\par
{\bkmkstart AAAAAAAAEN}{\bkmkend AAAAAAAAEN}
00037     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00038     \par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00039     {\cf20 // Perform some work}\par
{\bkmkstart AAAAAAAAER}{\bkmkend AAAAAAAAER}
00040     std::this_thread::sleep_for(std::chrono::milliseconds(1));\par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00041     \par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00042     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAEV}{\bkmkend AAAAAAAAEV}
00043     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00044     \par
{\bkmkstart AAAAAAAAEY}{\bkmkend AAAAAAAAEY}
00045     EXPECT_GT(duration.count(), 0);\par
{\bkmkstart AAAAAAAAEZ}{\bkmkend AAAAAAAAEZ}
00046 \}\par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00047 \par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00052 TEST_F(ChronoCoverageTest, TestSteadyClock) \{\par
{\bkmkstart AAAAAAAAFD}{\bkmkend AAAAAAAAFD}
00053     {\cf20 // Test steady_clock}\par
{\bkmkstart AAAAAAAAFE}{\bkmkend AAAAAAAAFE}
00054     {\cf17 auto} start = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAAFH}{\bkmkend AAAAAAAAFH}
00055     \par
{\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
00056     {\cf20 // Perform some work}\par
{\bkmkstart AAAAAAAAFJ}{\bkmkend AAAAAAAAFJ}
00057     std::this_thread::sleep_for(std::chrono::milliseconds(1));\par
{\bkmkstart AAAAAAAAFL}{\bkmkend AAAAAAAAFL}
00058     \par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00059     {\cf17 auto} end = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAAFO}{\bkmkend AAAAAAAAFO}
00060     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAAFV}{\bkmkend AAAAAAAAFV}
00061     \par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00062     EXPECT_GT(duration.count(), 0);\par
{\bkmkstart AAAAAAAAGB}{\bkmkend AAAAAAAAGB}
00063 \}\par
{\bkmkstart AAAAAAAAGC}{\bkmkend AAAAAAAAGC}
00064 \par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00069 TEST_F(ChronoCoverageTest, TestSystemClock) \{\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00070     {\cf20 // Test system_clock}\par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00071     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAAGI}{\bkmkend AAAAAAAAGI}
00072     {\cf17 auto} time_t_now = std::chrono::system_clock::to_time_t(now);\par
{\bkmkstart AAAAAAAAGL}{\bkmkend AAAAAAAAGL}
00073     \par
{\bkmkstart AAAAAAAAGM}{\bkmkend AAAAAAAAGM}
00074     EXPECT_GT(time_t_now, 0);\par
{\bkmkstart AAAAAAAAGN}{\bkmkend AAAAAAAAGN}
00075 \}\par
{\bkmkstart AAAAAAAAGO}{\bkmkend AAAAAAAAGO}
00076 \par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00081 TEST_F(ChronoCoverageTest, TestDurationOperations) \{\par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00082     {\cf20 // Test different duration types}\par
{\bkmkstart AAAAAAAAGS}{\bkmkend AAAAAAAAGS}
00083     {\cf17 auto} duration1 = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAGT}{\bkmkend AAAAAAAAGT}
00084     {\cf17 auto} duration2 = std::chrono::milliseconds(1000);\par
{\bkmkstart AAAAAAAAGU}{\bkmkend AAAAAAAAGU}
00085     {\cf17 auto} duration3 = std::chrono::microseconds(1000000);\par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00086     {\cf17 auto} duration4 = std::chrono::nanoseconds(1000000000);\par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00087     \par
{\bkmkstart AAAAAAAAGZ}{\bkmkend AAAAAAAAGZ}
00088     {\cf20 // Test duration arithmetic}\par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00089     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAAAHE}{\bkmkend AAAAAAAAHE}
00090     {\cf17 auto} diff = duration3 - duration4;\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00091     \par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00092     EXPECT_EQ(sum.count(), 2000);\par
{\bkmkstart AAAAAAAAHH}{\bkmkend AAAAAAAAHH}
00093     EXPECT_EQ(diff.count(), 0);\par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00094 \}\par
{\bkmkstart AAAAAAAAIW}{\bkmkend AAAAAAAAIW}
00095 \par
{\bkmkstart AAAAAAAAJA}{\bkmkend AAAAAAAAJA}
00100 TEST_F(ChronoCoverageTest, TestTimePointOperations) \{\par
{\bkmkstart AAAAAAAAJE}{\bkmkend AAAAAAAAJE}
00101     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAAJL}{\bkmkend AAAAAAAAJL}
00102     {\cf17 auto} later = now + std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00103     {\cf17 auto} earlier = now - std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAJW}{\bkmkend AAAAAAAAJW}
00104     \par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
00105     EXPECT_GT(later, now);\par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00106     EXPECT_LT(earlier, now);\par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00107 \}\par
{\bkmkstart AAAAAAAAKH}{\bkmkend AAAAAAAAKH}
00108 \par
{\bkmkstart AAAAAAAAKI}{\bkmkend AAAAAAAAKI}
00113 TEST_F(ChronoCoverageTest, TestDurationCast) \{\par
{\bkmkstart AAAAAAAAKL}{\bkmkend AAAAAAAAKL}
00114     {\cf17 auto} seconds = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAKQ}{\bkmkend AAAAAAAAKQ}
00115     {\cf17 auto} milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(seconds);\par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00116     {\cf17 auto} microseconds = std::chrono::duration_cast<std::chrono::microseconds>(seconds);\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00117     {\cf17 auto} nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(seconds);\par
{\bkmkstart AAAAAAAALK}{\bkmkend AAAAAAAALK}
00118     \par
{\bkmkstart AAAAAAAALM}{\bkmkend AAAAAAAALM}
00119     EXPECT_EQ(milliseconds.count(), 1000);\par
{\bkmkstart AAAAAAAALR}{\bkmkend AAAAAAAALR}
00120     EXPECT_EQ(microseconds.count(), 1000000);\par
{\bkmkstart AAAAAAAALU}{\bkmkend AAAAAAAALU}
00121     EXPECT_EQ(nanoseconds.count(), 1000000000);\par
{\bkmkstart AAAAAAAALX}{\bkmkend AAAAAAAALX}
00122 \}\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00123 \par
{\bkmkstart AAAAAAAAMD}{\bkmkend AAAAAAAAMD}
00128 TEST_F(ChronoCoverageTest, TestClockProperties) \{\par
{\bkmkstart AAAAAAAAMF}{\bkmkend AAAAAAAAMF}
00129     {\cf20 // Test clock properties}\par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00130     EXPECT_TRUE(std::chrono::high_resolution_clock::is_steady || \par
{\bkmkstart AAAAAAAAML}{\bkmkend AAAAAAAAML}
00131                 !std::chrono::high_resolution_clock::is_steady);\par
{\bkmkstart AAAAAAAAMS}{\bkmkend AAAAAAAAMS}
00132     \par
{\bkmkstart AAAAAAAAMU}{\bkmkend AAAAAAAAMU}
00133     EXPECT_TRUE(std::chrono::steady_clock::is_steady);\par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00134     \par
{\bkmkstart AAAAAAAAMY}{\bkmkend AAAAAAAAMY}
00135     EXPECT_TRUE(std::chrono::system_clock::is_steady || \par
{\bkmkstart AAAAAAAANF}{\bkmkend AAAAAAAANF}
00136                 !std::chrono::system_clock::is_steady);\par
{\bkmkstart AAAAAAAANL}{\bkmkend AAAAAAAANL}
00137 \}\par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00138 \par
{\bkmkstart AAAAAAAANP}{\bkmkend AAAAAAAANP}
00143 TEST_F(ChronoCoverageTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAANW}{\bkmkend AAAAAAAANW}
00144     {\cf20 // Test zero duration}\par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
00145     {\cf17 auto} zero_duration = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAAAOA}{\bkmkend AAAAAAAAOA}
00146     EXPECT_EQ(zero_duration.count(), 0);\par
{\bkmkstart AAAAAAAAOD}{\bkmkend AAAAAAAAOD}
00147     \par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00148     {\cf20 // Test negative duration}\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00149     {\cf17 auto} negative_duration = std::chrono::seconds(-1);\par
{\bkmkstart AAAAAAAARC}{\bkmkend AAAAAAAARC}
00150     EXPECT_EQ(negative_duration.count(), -1);\par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00151     \par
{\bkmkstart AAAAAAAARH}{\bkmkend AAAAAAAARH}
00152     {\cf20 // Test large duration}\par
{\bkmkstart AAAAAAAARK}{\bkmkend AAAAAAAARK}
00153     {\cf17 auto} large_duration = std::chrono::hours(24);\par
{\bkmkstart AAAAAAAARS}{\bkmkend AAAAAAAARS}
00154     EXPECT_EQ(large_duration.count(), 24);\par
{\bkmkstart AAAAAAAARU}{\bkmkend AAAAAAAARU}
00155 \}\par
{\bkmkstart AAAAAAAARV}{\bkmkend AAAAAAAARV}
00156 \par
{\bkmkstart AAAAAAAARX}{\bkmkend AAAAAAAARX}
00161 TEST_F(ChronoCoverageTest, TestChronoLiterals) \{\par
{\bkmkstart AAAAAAAASD}{\bkmkend AAAAAAAASD}
00162     {\cf17 using namespace }std::chrono_literals;\par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00163     \par
{\bkmkstart AAAAAAAASM}{\bkmkend AAAAAAAASM}
00164     {\cf17 auto} duration1 = 1s;\par
{\bkmkstart AAAAAAAASP}{\bkmkend AAAAAAAASP}
00165     {\cf17 auto} duration2 = 1000ms;\par
{\bkmkstart AAAAAAAASR}{\bkmkend AAAAAAAASR}
00166     {\cf17 auto} duration3 = 1000000us;\par
{\bkmkstart AAAAAAAASU}{\bkmkend AAAAAAAASU}
00167     {\cf17 auto} duration4 = 1000000000ns;\par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00168     \par
{\bkmkstart AAAAAAAATB}{\bkmkend AAAAAAAATB}
00169     EXPECT_EQ(duration1.count(), 1);\par
{\bkmkstart AAAAAAAATF}{\bkmkend AAAAAAAATF}
00170     EXPECT_EQ(duration2.count(), 1000);\par
{\bkmkstart AAAAAAAATI}{\bkmkend AAAAAAAATI}
00171     EXPECT_EQ(duration3.count(), 1000000);\par
{\bkmkstart AAAAAAAATK}{\bkmkend AAAAAAAATK}
00172     EXPECT_EQ(duration4.count(), 1000000000);\par
{\bkmkstart AAAAAAAATN}{\bkmkend AAAAAAAATN}
00173 \}\par
{\bkmkstart AAAAAAAATQ}{\bkmkend AAAAAAAATQ}
00174 \par
{\bkmkstart AAAAAAAATS}{\bkmkend AAAAAAAATS}
00179 TEST_F(ChronoCoverageTest, TestChronoComparison) \{\par
{\bkmkstart AAAAAAAATX}{\bkmkend AAAAAAAATX}
00180     {\cf17 auto} duration1 = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAUC}{\bkmkend AAAAAAAAUC}
00181     {\cf17 auto} duration2 = std::chrono::seconds(2);\par
{\bkmkstart AAAAAAAAUG}{\bkmkend AAAAAAAAUG}
00182     {\cf17 auto} duration3 = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAUL}{\bkmkend AAAAAAAAUL}
00183     \par
{\bkmkstart AAAAAAAAUN}{\bkmkend AAAAAAAAUN}
00184     EXPECT_LT(duration1, duration2);\par
{\bkmkstart AAAAAAAAUP}{\bkmkend AAAAAAAAUP}
00185     EXPECT_GT(duration2, duration1);\par
{\bkmkstart AAAAAAAAUQ}{\bkmkend AAAAAAAAUQ}
00186     EXPECT_EQ(duration1, duration3);\par
{\bkmkstart AAAAAAAAUS}{\bkmkend AAAAAAAAUS}
00187     EXPECT_NE(duration1, duration2);\par
{\bkmkstart AAAAAAAAUV}{\bkmkend AAAAAAAAUV}
00188 \}\par
{\bkmkstart AAAAAAAAUW}{\bkmkend AAAAAAAAUW}
00189 \par
{\bkmkstart AAAAAAAAUY}{\bkmkend AAAAAAAAUY}
00194 TEST_F(ChronoCoverageTest, TestChronoArithmetic) \{\par
{\bkmkstart AAAAAAAAVB}{\bkmkend AAAAAAAAVB}
00195     {\cf17 auto} duration1 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAAVE}{\bkmkend AAAAAAAAVE}
00196     {\cf17 auto} duration2 = std::chrono::seconds(3);\par
{\bkmkstart AAAAAAAAVI}{\bkmkend AAAAAAAAVI}
00197     \par
{\bkmkstart AAAAAAAAVJ}{\bkmkend AAAAAAAAVJ}
00198     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAAAVM}{\bkmkend AAAAAAAAVM}
00199     {\cf17 auto} diff = duration1 - duration2;\par
{\bkmkstart AAAAAAAAVP}{\bkmkend AAAAAAAAVP}
00200     {\cf17 auto} mult = duration1 * 2;\par
{\bkmkstart AAAAAAAAVR}{\bkmkend AAAAAAAAVR}
00201     {\cf17 auto} div = duration1 / 2;\par
{\bkmkstart AAAAAAAAVT}{\bkmkend AAAAAAAAVT}
00202     \par
{\bkmkstart AAAAAAAAVV}{\bkmkend AAAAAAAAVV}
00203     EXPECT_EQ(sum.count(), 8);\par
{\bkmkstart AAAAAAAAVY}{\bkmkend AAAAAAAAVY}
00204     EXPECT_EQ(diff.count(), 2);\par
{\bkmkstart AAAAAAAAWC}{\bkmkend AAAAAAAAWC}
00205     EXPECT_EQ(mult.count(), 10);\par
{\bkmkstart AAAAAAAAWF}{\bkmkend AAAAAAAAWF}
00206     EXPECT_EQ(div.count(), 2);\par
{\bkmkstart AAAAAAAAWI}{\bkmkend AAAAAAAAWI}
00207 \}\par
{\bkmkstart AAAAAAAAWL}{\bkmkend AAAAAAAAWL}
00208 \par
{\bkmkstart AAAAAAAAWQ}{\bkmkend AAAAAAAAWQ}
00213 TEST_F(ChronoCoverageTest, TestAdvancedDurationOperations) \{\par
{\bkmkstart AAAAAAABAT}{\bkmkend AAAAAAABAT}
00214     {\cf20 // Test different duration types with complex operations}\par
{\bkmkstart AAAAAAABBB}{\bkmkend AAAAAAABBB}
00215     {\cf17 auto} hours = std::chrono::hours(2);\par
{\bkmkstart AAAAAAABBH}{\bkmkend AAAAAAABBH}
00216     {\cf17 auto} minutes = std::chrono::minutes(30);\par
{\bkmkstart AAAAAAABBN}{\bkmkend AAAAAAABBN}
00217     {\cf17 auto} seconds = std::chrono::seconds(45);\par
{\bkmkstart AAAAAAABBW}{\bkmkend AAAAAAABBW}
00218     {\cf17 auto} milliseconds = std::chrono::milliseconds(500);\par
{\bkmkstart AAAAAAABCB}{\bkmkend AAAAAAABCB}
00219     \par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00220     {\cf20 // Test complex arithmetic}\par
{\bkmkstart AAAAAAABCH}{\bkmkend AAAAAAABCH}
00221     {\cf17 auto} total = hours + minutes + seconds + milliseconds;\par
{\bkmkstart AAAAAAABCP}{\bkmkend AAAAAAABCP}
00222     {\cf17 auto} total_ms = std::chrono::duration_cast<std::chrono::milliseconds>(total);\par
{\bkmkstart AAAAAAABCX}{\bkmkend AAAAAAABCX}
00223     \par
{\bkmkstart AAAAAAABDH}{\bkmkend AAAAAAABDH}
00224     EXPECT_GT(total_ms.count(), 0);\par
{\bkmkstart AAAAAAABDM}{\bkmkend AAAAAAABDM}
00225     \par
{\bkmkstart AAAAAAABDN}{\bkmkend AAAAAAABDN}
00226     {\cf20 // Test duration ratios}\par
{\bkmkstart AAAAAAABDQ}{\bkmkend AAAAAAABDQ}
00227     {\cf17 auto} ratio = std::chrono::duration_cast<std::chrono::nanoseconds>(total);\par
{\bkmkstart AAAAAAABED}{\bkmkend AAAAAAABED}
00228     EXPECT_GT(ratio.count(), 0);\par
{\bkmkstart AAAAAAABEK}{\bkmkend AAAAAAABEK}
00229 \}\par
{\bkmkstart AAAAAAABEP}{\bkmkend AAAAAAABEP}
00230 \par
{\bkmkstart AAAAAAABEV}{\bkmkend AAAAAAABEV}
00235 TEST_F(ChronoCoverageTest, TestClockPrecision) \{\par
{\bkmkstart AAAAAAABFE}{\bkmkend AAAAAAABFE}
00236     {\cf20 // Test high resolution clock precision}\par
{\bkmkstart AAAAAAABFI}{\bkmkend AAAAAAABFI}
00237     {\cf17 auto} start_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAABFP}{\bkmkend AAAAAAABFP}
00238     std::this_thread::sleep_for(std::chrono::microseconds(100));\par
{\bkmkstart AAAAAAABFW}{\bkmkend AAAAAAABFW}
00239     {\cf17 auto} end_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAABGA}{\bkmkend AAAAAAABGA}
00240     {\cf17 auto} duration_hr = std::chrono::duration_cast<std::chrono::nanoseconds>(end_hr - start_hr);\par
{\bkmkstart AAAAAAABGH}{\bkmkend AAAAAAABGH}
00241     \par
{\bkmkstart AAAAAAABGK}{\bkmkend AAAAAAABGK}
00242     EXPECT_GT(duration_hr.count(), 0);\par
{\bkmkstart AAAAAAABGR}{\bkmkend AAAAAAABGR}
00243     \par
{\bkmkstart AAAAAAABGT}{\bkmkend AAAAAAABGT}
00244     {\cf20 // Test steady clock precision}\par
{\bkmkstart AAAAAAABGU}{\bkmkend AAAAAAABGU}
00245     {\cf17 auto} start_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAABHC}{\bkmkend AAAAAAABHC}
00246     std::this_thread::sleep_for(std::chrono::microseconds(100));\par
{\bkmkstart AAAAAAABHI}{\bkmkend AAAAAAABHI}
00247     {\cf17 auto} end_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAABHO}{\bkmkend AAAAAAABHO}
00248     {\cf17 auto} duration_sc = std::chrono::duration_cast<std::chrono::nanoseconds>(end_sc - start_sc);\par
{\bkmkstart AAAAAAABHW}{\bkmkend AAAAAAABHW}
00249     \par
{\bkmkstart AAAAAAABHZ}{\bkmkend AAAAAAABHZ}
00250     EXPECT_GT(duration_sc.count(), 0);\par
{\bkmkstart AAAAAAABID}{\bkmkend AAAAAAABID}
00251 \}\par
{\bkmkstart AAAAAAABIG}{\bkmkend AAAAAAABIG}
00252 \par
{\bkmkstart AAAAAAABIJ}{\bkmkend AAAAAAABIJ}
00257 TEST_F(ChronoCoverageTest, TestTimePointArithmetic) \{\par
{\bkmkstart AAAAAAABIR}{\bkmkend AAAAAAABIR}
00258     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAABJA}{\bkmkend AAAAAAABJA}
00259     {\cf17 auto} one_second = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABJG}{\bkmkend AAAAAAABJG}
00260     {\cf17 auto} one_minute = std::chrono::minutes(1);\par
{\bkmkstart AAAAAAABJM}{\bkmkend AAAAAAABJM}
00261     {\cf17 auto} one_hour = std::chrono::hours(1);\par
{\bkmkstart AAAAAAABJP}{\bkmkend AAAAAAABJP}
00262     \par
{\bkmkstart AAAAAAABJT}{\bkmkend AAAAAAABJT}
00263     {\cf20 // Test addition}\par
{\bkmkstart AAAAAAABJX}{\bkmkend AAAAAAABJX}
00264     {\cf17 auto} future1 = now + one_second;\par
{\bkmkstart AAAAAAABKC}{\bkmkend AAAAAAABKC}
00265     {\cf17 auto} future2 = now + one_minute;\par
{\bkmkstart AAAAAAABKH}{\bkmkend AAAAAAABKH}
00266     {\cf17 auto} future3 = now + one_hour;\par
{\bkmkstart AAAAAAABKM}{\bkmkend AAAAAAABKM}
00267     \par
{\bkmkstart AAAAAAABKO}{\bkmkend AAAAAAABKO}
00268     EXPECT_GT(future1, now);\par
{\bkmkstart AAAAAAABMC}{\bkmkend AAAAAAABMC}
00269     EXPECT_GT(future2, now);\par
{\bkmkstart AAAAAAABMH}{\bkmkend AAAAAAABMH}
00270     EXPECT_GT(future3, now);\par
{\bkmkstart AAAAAAABMT}{\bkmkend AAAAAAABMT}
00271     \par
{\bkmkstart AAAAAAABMW}{\bkmkend AAAAAAABMW}
00272     {\cf20 // Test subtraction}\par
{\bkmkstart AAAAAAABNB}{\bkmkend AAAAAAABNB}
00273     {\cf17 auto} past1 = now - one_second;\par
{\bkmkstart AAAAAAABNG}{\bkmkend AAAAAAABNG}
00274     {\cf17 auto} past2 = now - one_minute;\par
{\bkmkstart AAAAAAABNL}{\bkmkend AAAAAAABNL}
00275     {\cf17 auto} past3 = now - one_hour;\par
{\bkmkstart AAAAAAABNT}{\bkmkend AAAAAAABNT}
00276     \par
{\bkmkstart AAAAAAABNX}{\bkmkend AAAAAAABNX}
00277     EXPECT_LT(past1, now);\par
{\bkmkstart AAAAAAABOC}{\bkmkend AAAAAAABOC}
00278     EXPECT_LT(past2, now);\par
{\bkmkstart AAAAAAABOI}{\bkmkend AAAAAAABOI}
00279     EXPECT_LT(past3, now);\par
{\bkmkstart AAAAAAABOM}{\bkmkend AAAAAAABOM}
00280 \}\par
{\bkmkstart AAAAAAABON}{\bkmkend AAAAAAABON}
00281 \par
{\bkmkstart AAAAAAABOR}{\bkmkend AAAAAAABOR}
00286 TEST_F(ChronoCoverageTest, TestDurationSpecialCases) \{\par
{\bkmkstart AAAAAAABPE}{\bkmkend AAAAAAABPE}
00287     {\cf20 // Test zero duration}\par
{\bkmkstart AAAAAAABPI}{\bkmkend AAAAAAABPI}
00288     {\cf17 auto} zero_sec = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAABPS}{\bkmkend AAAAAAABPS}
00289     {\cf17 auto} zero_ms = std::chrono::milliseconds(0);\par
{\bkmkstart AAAAAAABQE}{\bkmkend AAAAAAABQE}
00290     {\cf17 auto} zero_us = std::chrono::microseconds(0);\par
{\bkmkstart AAAAAAABQL}{\bkmkend AAAAAAABQL}
00291     {\cf17 auto} zero_ns = std::chrono::nanoseconds(0);\par
{\bkmkstart AAAAAAABQR}{\bkmkend AAAAAAABQR}
00292     \par
{\bkmkstart AAAAAAABQU}{\bkmkend AAAAAAABQU}
00293     EXPECT_EQ(zero_sec.count(), 0);\par
{\bkmkstart AAAAAAABRD}{\bkmkend AAAAAAABRD}
00294     EXPECT_EQ(zero_ms.count(), 0);\par
{\bkmkstart AAAAAAABRH}{\bkmkend AAAAAAABRH}
00295     EXPECT_EQ(zero_us.count(), 0);\par
{\bkmkstart AAAAAAABRM}{\bkmkend AAAAAAABRM}
00296     EXPECT_EQ(zero_ns.count(), 0);\par
{\bkmkstart AAAAAAABRQ}{\bkmkend AAAAAAABRQ}
00297     \par
{\bkmkstart AAAAAAABRT}{\bkmkend AAAAAAABRT}
00298     {\cf20 // Test negative duration}\par
{\bkmkstart AAAAAAABRY}{\bkmkend AAAAAAABRY}
00299     {\cf17 auto} neg_sec = std::chrono::seconds(-1);\par
{\bkmkstart AAAAAAABSH}{\bkmkend AAAAAAABSH}
00300     {\cf17 auto} neg_ms = std::chrono::milliseconds(-1000);\par
{\bkmkstart AAAAAAABSP}{\bkmkend AAAAAAABSP}
00301     \par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00302     EXPECT_EQ(neg_sec.count(), -1);\par
{\bkmkstart AAAAAAABSY}{\bkmkend AAAAAAABSY}
00303     EXPECT_EQ(neg_ms.count(), -1000);\par
{\bkmkstart AAAAAAABTG}{\bkmkend AAAAAAABTG}
00304     \par
{\bkmkstart AAAAAAABTH}{\bkmkend AAAAAAABTH}
00305     {\cf20 // Test large duration}\par
{\bkmkstart AAAAAAABTK}{\bkmkend AAAAAAABTK}
00306     {\cf17 auto} large_sec = std::chrono::seconds(INT_MAX);\par
{\bkmkstart AAAAAAABTQ}{\bkmkend AAAAAAABTQ}
00307     {\cf17 auto} large_ms = std::chrono::milliseconds(INT_MAX);\par
{\bkmkstart AAAAAAABTY}{\bkmkend AAAAAAABTY}
00308     \par
{\bkmkstart AAAAAAABUB}{\bkmkend AAAAAAABUB}
00309     EXPECT_EQ(large_sec.count(), INT_MAX);\par
{\bkmkstart AAAAAAABUG}{\bkmkend AAAAAAABUG}
00310     EXPECT_EQ(large_ms.count(), INT_MAX);\par
{\bkmkstart AAAAAAABUL}{\bkmkend AAAAAAABUL}
00311 \}\par
{\bkmkstart AAAAAAABUO}{\bkmkend AAAAAAABUO}
00312 \par
{\bkmkstart AAAAAAABUR}{\bkmkend AAAAAAABUR}
00317 TEST_F(ChronoCoverageTest, TestClockConversion) \{\par
{\bkmkstart AAAAAAABUX}{\bkmkend AAAAAAABUX}
00318     {\cf20 // Test system clock to time_t conversion}\par
{\bkmkstart AAAAAAABVD}{\bkmkend AAAAAAABVD}
00319     {\cf17 auto} now_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAABVN}{\bkmkend AAAAAAABVN}
00320     {\cf17 auto} time_t_now = std::chrono::system_clock::to_time_t(now_sys);\par
{\bkmkstart AAAAAAABVW}{\bkmkend AAAAAAABVW}
00321     {\cf17 auto} back_to_sys = std::chrono::system_clock::from_time_t(time_t_now);\par
{\bkmkstart AAAAAAABWX}{\bkmkend AAAAAAABWX}
00322     \par
{\bkmkstart AAAAAAABXC}{\bkmkend AAAAAAABXC}
00323     EXPECT_GT(time_t_now, 0);\par
{\bkmkstart AAAAAAABXK}{\bkmkend AAAAAAABXK}
00324     \par
{\bkmkstart AAAAAAABXO}{\bkmkend AAAAAAABXO}
00325     {\cf20 // Test duration conversions between different types}\par
{\bkmkstart AAAAAAABXR}{\bkmkend AAAAAAABXR}
00326     {\cf17 auto} seconds_val = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABXV}{\bkmkend AAAAAAABXV}
00327     {\cf17 auto} milliseconds_val = std::chrono::duration_cast<std::chrono::milliseconds>(seconds_val);\par
{\bkmkstart AAAAAAABYD}{\bkmkend AAAAAAABYD}
00328     {\cf17 auto} microseconds_val = std::chrono::duration_cast<std::chrono::microseconds>(seconds_val);\par
{\bkmkstart AAAAAAABYN}{\bkmkend AAAAAAABYN}
00329     {\cf17 auto} nanoseconds_val = std::chrono::duration_cast<std::chrono::nanoseconds>(seconds_val);\par
{\bkmkstart AAAAAAABYV}{\bkmkend AAAAAAABYV}
00330     \par
{\bkmkstart AAAAAAABYY}{\bkmkend AAAAAAABYY}
00331     EXPECT_EQ(milliseconds_val.count(), 1000);\par
{\bkmkstart AAAAAAABZD}{\bkmkend AAAAAAABZD}
00332     EXPECT_EQ(microseconds_val.count(), 1000000);\par
{\bkmkstart AAAAAAABZM}{\bkmkend AAAAAAABZM}
00333     EXPECT_EQ(nanoseconds_val.count(), 1000000000);\par
{\bkmkstart AAAAAAABZQ}{\bkmkend AAAAAAABZQ}
00334 \}\par
{\bkmkstart AAAAAAABZR}{\bkmkend AAAAAAABZR}
00335 \par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00340 TEST_F(ChronoCoverageTest, TestChronoLiteralsAdvanced) \{\par
{\bkmkstart AAAAAAACAB}{\bkmkend AAAAAAACAB}
00341     {\cf17 using namespace }std::chrono_literals;\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00342     \par
{\bkmkstart AAAAAAACAM}{\bkmkend AAAAAAACAM}
00343     {\cf20 // Test various literal combinations}\par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00344     {\cf17 auto} duration1 = 1h + 30min + 45s + 500ms;\par
{\bkmkstart AAAAAAACAY}{\bkmkend AAAAAAACAY}
00345     {\cf17 auto} duration2 = 2h - 15min + 30s;\par
{\bkmkstart AAAAAAACBD}{\bkmkend AAAAAAACBD}
00346     {\cf17 auto} duration3 = 3h * 2;\par
{\bkmkstart AAAAAAACBG}{\bkmkend AAAAAAACBG}
00347     {\cf17 auto} duration4 = 6h / 3;\par
{\bkmkstart AAAAAAACBJ}{\bkmkend AAAAAAACBJ}
00348     \par
{\bkmkstart AAAAAAACBL}{\bkmkend AAAAAAACBL}
00349     EXPECT_GT(duration1.count(), 0);\par
{\bkmkstart AAAAAAACBN}{\bkmkend AAAAAAACBN}
00350     EXPECT_GT(duration2.count(), 0);\par
{\bkmkstart AAAAAAACBP}{\bkmkend AAAAAAACBP}
00351     EXPECT_GT(duration3.count(), 0);\par
{\bkmkstart AAAAAAACBR}{\bkmkend AAAAAAACBR}
00352     EXPECT_GT(duration4.count(), 0);\par
{\bkmkstart AAAAAAACBU}{\bkmkend AAAAAAACBU}
00353     \par
{\bkmkstart AAAAAAACBW}{\bkmkend AAAAAAACBW}
00354     {\cf20 // Test literal arithmetic}\par
{\bkmkstart AAAAAAACBY}{\bkmkend AAAAAAACBY}
00355     {\cf17 auto} sum = 1h + 2h + 3h;\par
{\bkmkstart AAAAAAACCB}{\bkmkend AAAAAAACCB}
00356     {\cf17 auto} diff = 10h - 5h;\par
{\bkmkstart AAAAAAACCF}{\bkmkend AAAAAAACCF}
00357     {\cf17 auto} mult = 2h * 3;\par
{\bkmkstart AAAAAAACCH}{\bkmkend AAAAAAACCH}
00358     {\cf17 auto} div = 12h / 4;\par
{\bkmkstart AAAAAAACCJ}{\bkmkend AAAAAAACCJ}
00359     \par
{\bkmkstart AAAAAAACCL}{\bkmkend AAAAAAACCL}
00360     EXPECT_EQ(sum.count(), 6);\par
{\bkmkstart AAAAAAACCP}{\bkmkend AAAAAAACCP}
00361     EXPECT_EQ(diff.count(), 5);\par
{\bkmkstart AAAAAAACCR}{\bkmkend AAAAAAACCR}
00362     EXPECT_EQ(mult.count(), 6);\par
{\bkmkstart AAAAAAACCT}{\bkmkend AAAAAAACCT}
00363     EXPECT_EQ(div.count(), 3);\par
{\bkmkstart AAAAAAACCW}{\bkmkend AAAAAAACCW}
00364 \}\par
{\bkmkstart AAAAAAACCX}{\bkmkend AAAAAAACCX}
00365 \par
{\bkmkstart AAAAAAACDC}{\bkmkend AAAAAAACDC}
00370 TEST_F(ChronoCoverageTest, TestClockPropertiesAdvanced) \{\par
{\bkmkstart AAAAAAACDG}{\bkmkend AAAAAAACDG}
00371     {\cf20 // Test clock period information}\par
{\bkmkstart AAAAAAACDJ}{\bkmkend AAAAAAACDJ}
00372     {\cf17 using }hr_clock = std::chrono::high_resolution_clock;\par
{\bkmkstart AAAAAAACDO}{\bkmkend AAAAAAACDO}
00373     {\cf17 using }sc_clock = std::chrono::steady_clock;\par
{\bkmkstart AAAAAAACDS}{\bkmkend AAAAAAACDS}
00374     {\cf17 using }sys_clock = std::chrono::system_clock;\par
{\bkmkstart AAAAAAACDW}{\bkmkend AAAAAAACDW}
00375     \par
{\bkmkstart AAAAAAACDX}{\bkmkend AAAAAAACDX}
00376     {\cf20 // Test clock period ratios}\par
{\bkmkstart AAAAAAACDZ}{\bkmkend AAAAAAACDZ}
00377     {\cf17 auto} hr_period = hr_clock::period::num;\par
{\bkmkstart AAAAAAACEE}{\bkmkend AAAAAAACEE}
00378     {\cf17 auto} sc_period = sc_clock::period::num;\par
{\bkmkstart AAAAAAACEH}{\bkmkend AAAAAAACEH}
00379     {\cf17 auto} sys_period = sys_clock::period::num;\par
{\bkmkstart AAAAAAACEN}{\bkmkend AAAAAAACEN}
00380     \par
{\bkmkstart AAAAAAACEO}{\bkmkend AAAAAAACEO}
00381     EXPECT_GT(hr_period, 0);\par
{\bkmkstart AAAAAAACER}{\bkmkend AAAAAAACER}
00382     EXPECT_GT(sc_period, 0);\par
{\bkmkstart AAAAAAACEX}{\bkmkend AAAAAAACEX}
00383     EXPECT_GT(sys_period, 0);\par
{\bkmkstart AAAAAAACFC}{\bkmkend AAAAAAACFC}
00384     \par
{\bkmkstart AAAAAAACFD}{\bkmkend AAAAAAACFD}
00385     {\cf20 // Test clock duration types}\par
{\bkmkstart AAAAAAACFG}{\bkmkend AAAAAAACFG}
00386     {\cf17 using }hr_duration = hr_clock::duration;\par
{\bkmkstart AAAAAAACFM}{\bkmkend AAAAAAACFM}
00387     {\cf17 using }sc_duration = sc_clock::duration;\par
{\bkmkstart AAAAAAACFS}{\bkmkend AAAAAAACFS}
00388     {\cf17 using }sys_duration = sys_clock::duration;\par
{\bkmkstart AAAAAAACFW}{\bkmkend AAAAAAACFW}
00389     \par
{\bkmkstart AAAAAAACGA}{\bkmkend AAAAAAACGA}
00390     {\cf17 auto} hr_dur = hr_duration(1);\par
{\bkmkstart AAAAAAACGF}{\bkmkend AAAAAAACGF}
00391     {\cf17 auto} sc_dur = sc_duration(1);\par
{\bkmkstart AAAAAAACGJ}{\bkmkend AAAAAAACGJ}
00392     {\cf17 auto} sys_dur = sys_duration(1);\par
{\bkmkstart AAAAAAACGM}{\bkmkend AAAAAAACGM}
00393     \par
{\bkmkstart AAAAAAACGQ}{\bkmkend AAAAAAACGQ}
00394     EXPECT_GT(hr_dur.count(), 0);\par
{\bkmkstart AAAAAAACGS}{\bkmkend AAAAAAACGS}
00395     EXPECT_GT(sc_dur.count(), 0);\par
{\bkmkstart AAAAAAACGU}{\bkmkend AAAAAAACGU}
00396     EXPECT_GT(sys_dur.count(), 0);\par
{\bkmkstart AAAAAAACHA}{\bkmkend AAAAAAACHA}
00397 \}\par
{\bkmkstart AAAAAAACHC}{\bkmkend AAAAAAACHC}
00398 \par
{\bkmkstart AAAAAAACHG}{\bkmkend AAAAAAACHG}
00403 TEST_F(ChronoCoverageTest, TestChronoErrorHandling) \{\par
{\bkmkstart AAAAAAACHK}{\bkmkend AAAAAAACHK}
00404     {\cf20 // Test overflow protection}\par
{\bkmkstart AAAAAAACHM}{\bkmkend AAAAAAACHM}
00405     {\cf17 auto} max_duration = std::chrono::seconds(INT_MAX);\par
{\bkmkstart AAAAAAACHV}{\bkmkend AAAAAAACHV}
00406     {\cf17 auto} min_duration = std::chrono::seconds(INT_MIN);\par
{\bkmkstart AAAAAAACIB}{\bkmkend AAAAAAACIB}
00407     \par
{\bkmkstart AAAAAAACID}{\bkmkend AAAAAAACID}
00408     EXPECT_EQ(max_duration.count(), INT_MAX);\par
{\bkmkstart AAAAAAACIG}{\bkmkend AAAAAAACIG}
00409     EXPECT_EQ(min_duration.count(), INT_MIN);\par
{\bkmkstart AAAAAAACIH}{\bkmkend AAAAAAACIH}
00410     \par
{\bkmkstart AAAAAAACIJ}{\bkmkend AAAAAAACIJ}
00411     {\cf20 // Test duration bounds}\par
{\bkmkstart AAAAAAACIK}{\bkmkend AAAAAAACIK}
00412     {\cf17 auto} zero_duration = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAACIL}{\bkmkend AAAAAAACIL}
00413     {\cf17 auto} small_duration = std::chrono::nanoseconds(1);\par
{\bkmkstart AAAAAAACIQ}{\bkmkend AAAAAAACIQ}
00414     {\cf17 auto} large_duration = std::chrono::hours(24);\par
{\bkmkstart AAAAAAACIU}{\bkmkend AAAAAAACIU}
00415     \par
{\bkmkstart AAAAAAACIW}{\bkmkend AAAAAAACIW}
00416     EXPECT_EQ(zero_duration.count(), 0);\par
{\bkmkstart AAAAAAACIY}{\bkmkend AAAAAAACIY}
00417     EXPECT_EQ(small_duration.count(), 1);\par
{\bkmkstart AAAAAAACJG}{\bkmkend AAAAAAACJG}
00418     EXPECT_EQ(large_duration.count(), 24);\par
{\bkmkstart AAAAAAACJM}{\bkmkend AAAAAAACJM}
00419 \}\par
{\bkmkstart AAAAAAACJQ}{\bkmkend AAAAAAACJQ}
00420 \par
{\bkmkstart AAAAAAACJZ}{\bkmkend AAAAAAACJZ}
00425 TEST_F(ChronoCoverageTest, TestChronoPerformance) \{\par
{\bkmkstart AAAAAAACKG}{\bkmkend AAAAAAACKG}
00426     {\cf20 // Test timing accuracy with multiple measurements}\par
{\bkmkstart AAAAAAACKI}{\bkmkend AAAAAAACKI}
00427     std::vector<std::chrono::nanoseconds> measurements;\par
{\bkmkstart AAAAAAACKO}{\bkmkend AAAAAAACKO}
00428     \par
{\bkmkstart AAAAAAACKP}{\bkmkend AAAAAAACKP}
00429     {\cf19 for} ({\cf18 int} i = 0; i < 10; ++i) \{\par
{\bkmkstart AAAAAAACKX}{\bkmkend AAAAAAACKX}
00430         {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAACLI}{\bkmkend AAAAAAACLI}
00431         std::this_thread::sleep_for(std::chrono::microseconds(100));\par
{\bkmkstart AAAAAAACLS}{\bkmkend AAAAAAACLS}
00432         {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAACMC}{\bkmkend AAAAAAACMC}
00433         \par
{\bkmkstart AAAAAAACMI}{\bkmkend AAAAAAACMI}
00434         {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start);\par
{\bkmkstart AAAAAAACMY}{\bkmkend AAAAAAACMY}
00435         measurements.push_back(duration);\par
{\bkmkstart AAAAAAACNH}{\bkmkend AAAAAAACNH}
00436     \}\par
{\bkmkstart AAAAAAACNO}{\bkmkend AAAAAAACNO}
00437     \par
{\bkmkstart AAAAAAACNQ}{\bkmkend AAAAAAACNQ}
00438     {\cf20 // Verify all measurements are positive}\par
{\bkmkstart AAAAAAACNW}{\bkmkend AAAAAAACNW}
00439     {\cf19 for} ({\cf17 const} {\cf17 auto}& measurement : measurements) \{\par
{\bkmkstart AAAAAAACOF}{\bkmkend AAAAAAACOF}
00440         EXPECT_GT(measurement.count(), 0);\par
{\bkmkstart AAAAAAACON}{\bkmkend AAAAAAACON}
00441     \}\par
{\bkmkstart AAAAAAACOP}{\bkmkend AAAAAAACOP}
00442     \par
{\bkmkstart AAAAAAACOS}{\bkmkend AAAAAAACOS}
00443     {\cf20 // Test duration statistics}\par
{\bkmkstart AAAAAAACOV}{\bkmkend AAAAAAACOV}
00444     {\cf17 auto} total_duration = std::chrono::nanoseconds(0);\par
{\bkmkstart AAAAAAACPA}{\bkmkend AAAAAAACPA}
00445     {\cf19 for} ({\cf17 const} {\cf17 auto}& measurement : measurements) \{\par
{\bkmkstart AAAAAAACPG}{\bkmkend AAAAAAACPG}
00446         total_duration += measurement;\par
{\bkmkstart AAAAAAACPL}{\bkmkend AAAAAAACPL}
00447     \}\par
{\bkmkstart AAAAAAACPO}{\bkmkend AAAAAAACPO}
00448     \par
{\bkmkstart AAAAAAACPQ}{\bkmkend AAAAAAACPQ}
00449     EXPECT_GT(total_duration.count(), 0);\par
{\bkmkstart AAAAAAACPW}{\bkmkend AAAAAAACPW}
00450 \}\par
{\bkmkstart AAAAAAACPY}{\bkmkend AAAAAAACPY}
00451 \par
{\bkmkstart AAAAAAACQC}{\bkmkend AAAAAAACQC}
00452 \} {\cf20 // namespace}\par
}
}