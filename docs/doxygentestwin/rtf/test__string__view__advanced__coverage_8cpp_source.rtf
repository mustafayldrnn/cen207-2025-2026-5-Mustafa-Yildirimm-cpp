{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_advanced_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\bkmkstart AAAAAAACCS}
{\bkmkend AAAAAAACCS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACCU" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACQC}{\bkmkend AAAAAAACQC}
00001 \par
{\bkmkstart AAAAAAACQL}{\bkmkend AAAAAAACQL}
00008 \par
{\bkmkstart AAAAAAACQN}{\bkmkend AAAAAAACQN}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAACRK}{\bkmkend AAAAAAACRK}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAACRT}{\bkmkend AAAAAAACRT}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAACSK}{\bkmkend AAAAAAACSK}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAACTD}{\bkmkend AAAAAAACTD}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAACTX}{\bkmkend AAAAAAACTX}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAACUK}{\bkmkend AAAAAAACUK}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAACUZ}{\bkmkend AAAAAAACUZ}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAACVL}{\bkmkend AAAAAAACVL}
00017 {\cf21 #include <sstream>}\par
{\bkmkstart AAAAAAACVV}{\bkmkend AAAAAAACVV}
00018 {\cf21 #include <iomanip>}\par
{\bkmkstart AAAAAAACWG}{\bkmkend AAAAAAACWG}
00019 \par
{\bkmkstart AAAAAAACWH}{\bkmkend AAAAAAACWH}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAACWI}{\bkmkend AAAAAAACWI}
00021 \par
{\bkmkstart AAAAAAACWJ}{\bkmkend AAAAAAACWJ}
00026 {\cf17 class }StringViewAdvancedCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAACWK}{\bkmkend AAAAAAACWK}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAACWL}{\bkmkend AAAAAAACWL}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAACWM}{\bkmkend AAAAAAACWM}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAACWN}{\bkmkend AAAAAAACWN}
00030     \}\par
{\bkmkstart AAAAAAACWO}{\bkmkend AAAAAAACWO}
00031     \par
{\bkmkstart AAAAAAACWP}{\bkmkend AAAAAAACWP}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAACWQ}{\bkmkend AAAAAAACWQ}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAACWR}{\bkmkend AAAAAAACWR}
00034     \}\par
{\bkmkstart AAAAAAACWS}{\bkmkend AAAAAAACWS}
00035 \};\par
{\bkmkstart AAAAAAACWT}{\bkmkend AAAAAAACWT}
00036 \par
{\bkmkstart AAAAAAACWU}{\bkmkend AAAAAAACWU}
00041 TEST_F(StringViewAdvancedCoverageTest, TestStringViewComparisonOperators) \{\par
{\bkmkstart AAAAAAACWV}{\bkmkend AAAAAAACWV}
00042     std::string_view sv1({\cf22 "abc"});\par
{\bkmkstart AAAAAAACWW}{\bkmkend AAAAAAACWW}
00043     std::string_view sv2({\cf22 "def"});\par
{\bkmkstart AAAAAAACWX}{\bkmkend AAAAAAACWX}
00044     std::string_view sv3({\cf22 "abc"});\par
{\bkmkstart AAAAAAACWY}{\bkmkend AAAAAAACWY}
00045     \par
{\bkmkstart AAAAAAACWZ}{\bkmkend AAAAAAACWZ}
00046     {\cf20 // Test operator==}\par
{\bkmkstart AAAAAAACXA}{\bkmkend AAAAAAACXA}
00047     EXPECT_TRUE(sv1 == sv3);\par
{\bkmkstart AAAAAAACXB}{\bkmkend AAAAAAACXB}
00048     EXPECT_FALSE(sv1 == sv2);\par
{\bkmkstart AAAAAAACXC}{\bkmkend AAAAAAACXC}
00049     \par
{\bkmkstart AAAAAAACXD}{\bkmkend AAAAAAACXD}
00050     {\cf20 // Test operator!=}\par
{\bkmkstart AAAAAAACXE}{\bkmkend AAAAAAACXE}
00051     EXPECT_TRUE(sv1 != sv2);\par
{\bkmkstart AAAAAAACXF}{\bkmkend AAAAAAACXF}
00052     EXPECT_FALSE(sv1 != sv3);\par
{\bkmkstart AAAAAAACXG}{\bkmkend AAAAAAACXG}
00053     \par
{\bkmkstart AAAAAAACXH}{\bkmkend AAAAAAACXH}
00054     {\cf20 // Test operator<}\par
{\bkmkstart AAAAAAACXI}{\bkmkend AAAAAAACXI}
00055     EXPECT_TRUE(sv1 < sv2);\par
{\bkmkstart AAAAAAACXJ}{\bkmkend AAAAAAACXJ}
00056     EXPECT_FALSE(sv2 < sv1);\par
{\bkmkstart AAAAAAACXK}{\bkmkend AAAAAAACXK}
00057     EXPECT_FALSE(sv1 < sv3);\par
{\bkmkstart AAAAAAACXL}{\bkmkend AAAAAAACXL}
00058     \par
{\bkmkstart AAAAAAACXM}{\bkmkend AAAAAAACXM}
00059     {\cf20 // Test operator<=}\par
{\bkmkstart AAAAAAACXN}{\bkmkend AAAAAAACXN}
00060     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAACXO}{\bkmkend AAAAAAACXO}
00061     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAACXP}{\bkmkend AAAAAAACXP}
00062     EXPECT_FALSE(sv2 <= sv1);\par
{\bkmkstart AAAAAAACXQ}{\bkmkend AAAAAAACXQ}
00063     \par
{\bkmkstart AAAAAAACXR}{\bkmkend AAAAAAACXR}
00064     {\cf20 // Test operator>}\par
{\bkmkstart AAAAAAACXS}{\bkmkend AAAAAAACXS}
00065     EXPECT_TRUE(sv2 > sv1);\par
{\bkmkstart AAAAAAACXT}{\bkmkend AAAAAAACXT}
00066     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAACXU}{\bkmkend AAAAAAACXU}
00067     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAACXV}{\bkmkend AAAAAAACXV}
00068     \par
{\bkmkstart AAAAAAACXW}{\bkmkend AAAAAAACXW}
00069     {\cf20 // Test operator>=}\par
{\bkmkstart AAAAAAACXX}{\bkmkend AAAAAAACXX}
00070     EXPECT_TRUE(sv2 >= sv1);\par
{\bkmkstart AAAAAAACXY}{\bkmkend AAAAAAACXY}
00071     EXPECT_TRUE(sv1 >= sv3);\par
{\bkmkstart AAAAAAACXZ}{\bkmkend AAAAAAACXZ}
00072     EXPECT_FALSE(sv1 >= sv2);\par
{\bkmkstart AAAAAAACYA}{\bkmkend AAAAAAACYA}
00073     \par
{\bkmkstart AAAAAAACYB}{\bkmkend AAAAAAACYB}
00074     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAACYC}{\bkmkend AAAAAAACYC}
00075     std::string str = {\cf22 "abc"};\par
{\bkmkstart AAAAAAACYD}{\bkmkend AAAAAAACYD}
00076     {\cf17 const} {\cf18 char}* cstr = {\cf22 "abc"};\par
{\bkmkstart AAAAAAACYE}{\bkmkend AAAAAAACYE}
00077     \par
{\bkmkstart AAAAAAACYF}{\bkmkend AAAAAAACYF}
00078     EXPECT_TRUE(sv1 == str);\par
{\bkmkstart AAAAAAACYG}{\bkmkend AAAAAAACYG}
00079     EXPECT_TRUE(sv1 == cstr);\par
{\bkmkstart AAAAAAACYH}{\bkmkend AAAAAAACYH}
00080     EXPECT_TRUE(str == sv1);\par
{\bkmkstart AAAAAAACYI}{\bkmkend AAAAAAACYI}
00081     EXPECT_TRUE(cstr == sv1);\par
{\bkmkstart AAAAAAACYJ}{\bkmkend AAAAAAACYJ}
00082     \par
{\bkmkstart AAAAAAACYK}{\bkmkend AAAAAAACYK}
00083     EXPECT_TRUE(sv1 != {\cf22 "def"});\par
{\bkmkstart AAAAAAACYL}{\bkmkend AAAAAAACYL}
00084     EXPECT_TRUE({\cf22 "def"} != sv1);\par
{\bkmkstart AAAAAAACYM}{\bkmkend AAAAAAACYM}
00085 \}\par
{\bkmkstart AAAAAAACYN}{\bkmkend AAAAAAACYN}
00086 \par
{\bkmkstart AAAAAAACYO}{\bkmkend AAAAAAACYO}
00091 TEST_F(StringViewAdvancedCoverageTest, TestStringViewStreamOutput) \{\par
{\bkmkstart AAAAAAACYP}{\bkmkend AAAAAAACYP}
00092     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACYQ}{\bkmkend AAAAAAACYQ}
00093     std::ostringstream oss;\par
{\bkmkstart AAAAAAACYR}{\bkmkend AAAAAAACYR}
00094     \par
{\bkmkstart AAAAAAACYS}{\bkmkend AAAAAAACYS}
00095     {\cf20 // Test basic stream output}\par
{\bkmkstart AAAAAAACYT}{\bkmkend AAAAAAACYT}
00096     oss << sv;\par
{\bkmkstart AAAAAAACYU}{\bkmkend AAAAAAACYU}
00097     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACYV}{\bkmkend AAAAAAACYV}
00098     \par
{\bkmkstart AAAAAAACYW}{\bkmkend AAAAAAACYW}
00099     {\cf20 // Test with multiple string_views}\par
{\bkmkstart AAAAAAACYX}{\bkmkend AAAAAAACYX}
00100     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAACYY}{\bkmkend AAAAAAACYY}
00101     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACYZ}{\bkmkend AAAAAAACYZ}
00102     std::string_view sv2({\cf22 ", "});\par
{\bkmkstart AAAAAAACZA}{\bkmkend AAAAAAACZA}
00103     std::string_view sv3({\cf22 "World!"});\par
{\bkmkstart AAAAAAACZB}{\bkmkend AAAAAAACZB}
00104     oss << sv1 << sv2 << sv3;\par
{\bkmkstart AAAAAAACZC}{\bkmkend AAAAAAACZC}
00105     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACZD}{\bkmkend AAAAAAACZD}
00106     \par
{\bkmkstart AAAAAAACZE}{\bkmkend AAAAAAACZE}
00107     {\cf20 // Test with formatting}\par
{\bkmkstart AAAAAAACZF}{\bkmkend AAAAAAACZF}
00108     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAACZG}{\bkmkend AAAAAAACZG}
00109     oss << std::setw(20) << sv;\par
{\bkmkstart AAAAAAACZH}{\bkmkend AAAAAAACZH}
00110     EXPECT_EQ(oss.str().length(), 20);\par
{\bkmkstart AAAAAAACZI}{\bkmkend AAAAAAACZI}
00111     EXPECT_TRUE(oss.str().find({\cf22 "Hello, World!"}) != std::string::npos);\par
{\bkmkstart AAAAAAACZJ}{\bkmkend AAAAAAACZJ}
00112 \}\par
{\bkmkstart AAAAAAACZK}{\bkmkend AAAAAAACZK}
00113 \par
{\bkmkstart AAAAAAACZL}{\bkmkend AAAAAAACZL}
00118 TEST_F(StringViewAdvancedCoverageTest, TestStringViewConstMethods) \{\par
{\bkmkstart AAAAAAACZM}{\bkmkend AAAAAAACZM}
00119     {\cf17 const} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACZN}{\bkmkend AAAAAAACZN}
00120     \par
{\bkmkstart AAAAAAACZO}{\bkmkend AAAAAAACZO}
00121     {\cf20 // Test const access methods}\par
{\bkmkstart AAAAAAACZP}{\bkmkend AAAAAAACZP}
00122     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAACZQ}{\bkmkend AAAAAAACZQ}
00123     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAACZR}{\bkmkend AAAAAAACZR}
00124     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAACZS}{\bkmkend AAAAAAACZS}
00125     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAACZT}{\bkmkend AAAAAAACZT}
00126     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAACZU}{\bkmkend AAAAAAACZU}
00127     \par
{\bkmkstart AAAAAAACZV}{\bkmkend AAAAAAACZV}
00128     {\cf20 // Test const size methods}\par
{\bkmkstart AAAAAAACZW}{\bkmkend AAAAAAACZW}
00129     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAACZX}{\bkmkend AAAAAAACZX}
00130     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAACZY}{\bkmkend AAAAAAACZY}
00131     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAACZZ}{\bkmkend AAAAAAACZZ}
00132     \par
{\bkmkstart AAAAAAADAA}{\bkmkend AAAAAAADAA}
00133     {\cf20 // Test const iterator methods}\par
{\bkmkstart AAAAAAADAB}{\bkmkend AAAAAAADAB}
00134     EXPECT_NE(sv.begin(), sv.end());\par
{\bkmkstart AAAAAAADAC}{\bkmkend AAAAAAADAC}
00135     EXPECT_NE(sv.cbegin(), sv.cend());\par
{\bkmkstart AAAAAAADAD}{\bkmkend AAAAAAADAD}
00136     EXPECT_NE(sv.rbegin(), sv.rend());\par
{\bkmkstart AAAAAAADAE}{\bkmkend AAAAAAADAE}
00137     EXPECT_NE(sv.crbegin(), sv.crend());\par
{\bkmkstart AAAAAAADAF}{\bkmkend AAAAAAADAF}
00138     \par
{\bkmkstart AAAAAAADAG}{\bkmkend AAAAAAADAG}
00139     {\cf20 // Test const find methods}\par
{\bkmkstart AAAAAAADAH}{\bkmkend AAAAAAADAH}
00140     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADAI}{\bkmkend AAAAAAADAI}
00141     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAADAJ}{\bkmkend AAAAAAADAJ}
00142     EXPECT_EQ(sv.rfind({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAADAK}{\bkmkend AAAAAAADAK}
00143     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1);\par
{\bkmkstart AAAAAAADAL}{\bkmkend AAAAAAADAL}
00144     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 8);\par
{\bkmkstart AAAAAAADAM}{\bkmkend AAAAAAADAM}
00145     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAADAN}{\bkmkend AAAAAAADAN}
00146     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 11);\par
{\bkmkstart AAAAAAADAO}{\bkmkend AAAAAAADAO}
00147     \par
{\bkmkstart AAAAAAADAP}{\bkmkend AAAAAAADAP}
00148     {\cf20 // Test const contains methods using find}\par
{\bkmkstart AAAAAAADAQ}{\bkmkend AAAAAAADAQ}
00149     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADAR}{\bkmkend AAAAAAADAR}
00150     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADAS}{\bkmkend AAAAAAADAS}
00151     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAADAT}{\bkmkend AAAAAAADAT}
00152     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAADAU}{\bkmkend AAAAAAADAU}
00153 \}\par
{\bkmkstart AAAAAAADAV}{\bkmkend AAAAAAADAV}
00154 \par
{\bkmkstart AAAAAAADAW}{\bkmkend AAAAAAADAW}
00159 TEST_F(StringViewAdvancedCoverageTest, TestStringViewSubstrEdgeCases) \{\par
{\bkmkstart AAAAAAADAX}{\bkmkend AAAAAAADAX}
00160     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADAY}{\bkmkend AAAAAAADAY}
00161     \par
{\bkmkstart AAAAAAADAZ}{\bkmkend AAAAAAADAZ}
00162     {\cf20 // Test substr with zero length}\par
{\bkmkstart AAAAAAADBA}{\bkmkend AAAAAAADBA}
00163     std::string_view sub1 = sv.substr(0, 0);\par
{\bkmkstart AAAAAAADBB}{\bkmkend AAAAAAADBB}
00164     EXPECT_TRUE(sub1.empty());\par
{\bkmkstart AAAAAAADBC}{\bkmkend AAAAAAADBC}
00165     EXPECT_EQ(sub1.size(), 0);\par
{\bkmkstart AAAAAAADBD}{\bkmkend AAAAAAADBD}
00166     \par
{\bkmkstart AAAAAAADBE}{\bkmkend AAAAAAADBE}
00167     {\cf20 // Test substr with length beyond string}\par
{\bkmkstart AAAAAAADBF}{\bkmkend AAAAAAADBF}
00168     std::string_view sub2 = sv.substr(10, 100);\par
{\bkmkstart AAAAAAADBG}{\bkmkend AAAAAAADBG}
00169     EXPECT_EQ(sub2, {\cf22 "d!"});\par
{\bkmkstart AAAAAAADBH}{\bkmkend AAAAAAADBH}
00170     EXPECT_EQ(sub2.size(), 3);\par
{\bkmkstart AAAAAAADBI}{\bkmkend AAAAAAADBI}
00171     \par
{\bkmkstart AAAAAAADBJ}{\bkmkend AAAAAAADBJ}
00172     {\cf20 // Test substr at end of string}\par
{\bkmkstart AAAAAAADBK}{\bkmkend AAAAAAADBK}
00173     std::string_view sub3 = sv.substr(12, 1);\par
{\bkmkstart AAAAAAADBL}{\bkmkend AAAAAAADBL}
00174     EXPECT_EQ(sub3, {\cf22 "!"});\par
{\bkmkstart AAAAAAADBM}{\bkmkend AAAAAAADBM}
00175     EXPECT_EQ(sub3.size(), 1);\par
{\bkmkstart AAAAAAADBN}{\bkmkend AAAAAAADBN}
00176     \par
{\bkmkstart AAAAAAADBO}{\bkmkend AAAAAAADBO}
00177     {\cf20 // Test substr with npos}\par
{\bkmkstart AAAAAAADBP}{\bkmkend AAAAAAADBP}
00178     std::string_view sub4 = sv.substr(std::string_view::npos);\par
{\bkmkstart AAAAAAADBQ}{\bkmkend AAAAAAADBQ}
00179     EXPECT_TRUE(sub4.empty());\par
{\bkmkstart AAAAAAADBR}{\bkmkend AAAAAAADBR}
00180     \par
{\bkmkstart AAAAAAADBS}{\bkmkend AAAAAAADBS}
00181     {\cf20 // Test substr with very large position}\par
{\bkmkstart AAAAAAADBT}{\bkmkend AAAAAAADBT}
00182     std::string_view sub5 = sv.substr(1000);\par
{\bkmkstart AAAAAAADBU}{\bkmkend AAAAAAADBU}
00183     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAADBV}{\bkmkend AAAAAAADBV}
00184 \}\par
{\bkmkstart AAAAAAADBW}{\bkmkend AAAAAAADBW}
00185 \par
{\bkmkstart AAAAAAADBX}{\bkmkend AAAAAAADBX}
00190 TEST_F(StringViewAdvancedCoverageTest, TestStringViewFindEdgeCases) \{\par
{\bkmkstart AAAAAAADBY}{\bkmkend AAAAAAADBY}
00191     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADBZ}{\bkmkend AAAAAAADBZ}
00192     \par
{\bkmkstart AAAAAAADCA}{\bkmkend AAAAAAADCA}
00193     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAADCB}{\bkmkend AAAAAAADCB}
00194     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADCC}{\bkmkend AAAAAAADCC}
00195     EXPECT_EQ(empty_sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADCD}{\bkmkend AAAAAAADCD}
00196     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADCE}{\bkmkend AAAAAAADCE}
00197     \par
{\bkmkstart AAAAAAADCF}{\bkmkend AAAAAAADCF}
00198     {\cf20 // Test find with position beyond string}\par
{\bkmkstart AAAAAAADCG}{\bkmkend AAAAAAADCG}
00199     EXPECT_EQ(sv.find({\cf23 'H'}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAADCH}{\bkmkend AAAAAAADCH}
00200     EXPECT_EQ(sv.find({\cf22 "Hello"}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAADCI}{\bkmkend AAAAAAADCI}
00201     \par
{\bkmkstart AAAAAAADCJ}{\bkmkend AAAAAAADCJ}
00202     {\cf20 // Test find with empty search string}\par
{\bkmkstart AAAAAAADCK}{\bkmkend AAAAAAADCK}
00203     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAADCL}{\bkmkend AAAAAAADCL}
00204     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAADCM}{\bkmkend AAAAAAADCM}
00205     \par
{\bkmkstart AAAAAAADCN}{\bkmkend AAAAAAADCN}
00206     {\cf20 // Test find with single character at boundaries}\par
{\bkmkstart AAAAAAADCO}{\bkmkend AAAAAAADCO}
00207     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADCP}{\bkmkend AAAAAAADCP}
00208     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAADCQ}{\bkmkend AAAAAAADCQ}
00209     \par
{\bkmkstart AAAAAAADCR}{\bkmkend AAAAAAADCR}
00210     {\cf20 // Test find with repeated characters}\par
{\bkmkstart AAAAAAADCS}{\bkmkend AAAAAAADCS}
00211     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAADCT}{\bkmkend AAAAAAADCT}
00212     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAADCU}{\bkmkend AAAAAAADCU}
00213     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAADCV}{\bkmkend AAAAAAADCV}
00214     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAADCW}{\bkmkend AAAAAAADCW}
00215     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAADCX}{\bkmkend AAAAAAADCX}
00216 \}\par
{\bkmkstart AAAAAAADCY}{\bkmkend AAAAAAADCY}
00217 \par
{\bkmkstart AAAAAAADCZ}{\bkmkend AAAAAAADCZ}
00222 TEST_F(StringViewAdvancedCoverageTest, TestStringViewCopyEdgeCases) \{\par
{\bkmkstart AAAAAAADDA}{\bkmkend AAAAAAADDA}
00223     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADDB}{\bkmkend AAAAAAADDB}
00224     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAADDC}{\bkmkend AAAAAAADDC}
00225     \par
{\bkmkstart AAAAAAADDD}{\bkmkend AAAAAAADDD}
00226     {\cf20 // Test copy with zero length}\par
{\bkmkstart AAAAAAADDE}{\bkmkend AAAAAAADDE}
00227     {\cf18 size_t} copied = sv.copy(buffer, 0);\par
{\bkmkstart AAAAAAADDF}{\bkmkend AAAAAAADDF}
00228     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAADDG}{\bkmkend AAAAAAADDG}
00229     \par
{\bkmkstart AAAAAAADDH}{\bkmkend AAAAAAADDH}
00230     {\cf20 // Test copy with position beyond string}\par
{\bkmkstart AAAAAAADDI}{\bkmkend AAAAAAADDI}
00231     copied = sv.copy(buffer, 5, 100);\par
{\bkmkstart AAAAAAADDJ}{\bkmkend AAAAAAADDJ}
00232     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAADDK}{\bkmkend AAAAAAADDK}
00233     \par
{\bkmkstart AAAAAAADDL}{\bkmkend AAAAAAADDL}
00234     {\cf20 // Test copy with npos position}\par
{\bkmkstart AAAAAAADDM}{\bkmkend AAAAAAADDM}
00235     copied = sv.copy(buffer, 5, std::string_view::npos);\par
{\bkmkstart AAAAAAADDN}{\bkmkend AAAAAAADDN}
00236     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAADDO}{\bkmkend AAAAAAADDO}
00237     \par
{\bkmkstart AAAAAAADDP}{\bkmkend AAAAAAADDP}
00238     {\cf20 // Test copy with exact length}\par
{\bkmkstart AAAAAAADDQ}{\bkmkend AAAAAAADDQ}
00239     copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAADDR}{\bkmkend AAAAAAADDR}
00240     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAADDS}{\bkmkend AAAAAAADDS}
00241     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADDT}{\bkmkend AAAAAAADDT}
00242     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADDU}{\bkmkend AAAAAAADDU}
00243     \par
{\bkmkstart AAAAAAADDV}{\bkmkend AAAAAAADDV}
00244     {\cf20 // Test copy with small buffer}\par
{\bkmkstart AAAAAAADDW}{\bkmkend AAAAAAADDW}
00245     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAADDX}{\bkmkend AAAAAAADDX}
00246     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAADDY}{\bkmkend AAAAAAADDY}
00247     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAADDZ}{\bkmkend AAAAAAADDZ}
00248     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADEA}{\bkmkend AAAAAAADEA}
00249     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAADEB}{\bkmkend AAAAAAADEB}
00250 \}\par
{\bkmkstart AAAAAAADEC}{\bkmkend AAAAAAADEC}
00251 \par
{\bkmkstart AAAAAAADED}{\bkmkend AAAAAAADED}
00256 TEST_F(StringViewAdvancedCoverageTest, TestStringViewStartsWithEndsWithEdgeCases) \{\par
{\bkmkstart AAAAAAADEE}{\bkmkend AAAAAAADEE}
00257     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADEF}{\bkmkend AAAAAAADEF}
00258     \par
{\bkmkstart AAAAAAADEG}{\bkmkend AAAAAAADEG}
00259     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAADEH}{\bkmkend AAAAAAADEH}
00260     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADEI}{\bkmkend AAAAAAADEI}
00261     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAADEJ}{\bkmkend AAAAAAADEJ}
00262     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAADEK}{\bkmkend AAAAAAADEK}
00263     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADEL}{\bkmkend AAAAAAADEL}
00264     EXPECT_EQ(empty_sv.find({\cf22 "World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADEM}{\bkmkend AAAAAAADEM}
00265     \par
{\bkmkstart AAAAAAADEN}{\bkmkend AAAAAAADEN}
00266     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAADEO}{\bkmkend AAAAAAADEO}
00267     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAADEP}{\bkmkend AAAAAAADEP}
00268     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAADEQ}{\bkmkend AAAAAAADEQ}
00269     \par
{\bkmkstart AAAAAAADER}{\bkmkend AAAAAAADER}
00270     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAADES}{\bkmkend AAAAAAADES}
00271     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAADET}{\bkmkend AAAAAAADET}
00272     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAADEU}{\bkmkend AAAAAAADEU}
00273     \par
{\bkmkstart AAAAAAADEV}{\bkmkend AAAAAAADEV}
00274     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAADEW}{\bkmkend AAAAAAADEW}
00275     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADEX}{\bkmkend AAAAAAADEX}
00276     EXPECT_EQ(sv.find({\cf22 "Extra Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADEY}{\bkmkend AAAAAAADEY}
00277     \par
{\bkmkstart AAAAAAADEZ}{\bkmkend AAAAAAADEZ}
00278     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAADFA}{\bkmkend AAAAAAADFA}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAADFB}{\bkmkend AAAAAAADFB}
00280     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAADFC}{\bkmkend AAAAAAADFC}
00281     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFD}{\bkmkend AAAAAAADFD}
00282     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFE}{\bkmkend AAAAAAADFE}
00283 \}\par
{\bkmkstart AAAAAAADFF}{\bkmkend AAAAAAADFF}
00284 \par
{\bkmkstart AAAAAAADFG}{\bkmkend AAAAAAADFG}
00289 TEST_F(StringViewAdvancedCoverageTest, TestStringViewContainsEdgeCases) \{\par
{\bkmkstart AAAAAAADFH}{\bkmkend AAAAAAADFH}
00290     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADFI}{\bkmkend AAAAAAADFI}
00291     \par
{\bkmkstart AAAAAAADFJ}{\bkmkend AAAAAAADFJ}
00292     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAADFK}{\bkmkend AAAAAAADFK}
00293     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADFL}{\bkmkend AAAAAAADFL}
00294     EXPECT_NE(empty_sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFM}{\bkmkend AAAAAAADFM}
00295     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFN}{\bkmkend AAAAAAADFN}
00296     \par
{\bkmkstart AAAAAAADFO}{\bkmkend AAAAAAADFO}
00297     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAADFP}{\bkmkend AAAAAAADFP}
00298     EXPECT_NE(sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFQ}{\bkmkend AAAAAAADFQ}
00299     \par
{\bkmkstart AAAAAAADFR}{\bkmkend AAAAAAADFR}
00300     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAADFS}{\bkmkend AAAAAAADFS}
00301     EXPECT_NE(sv.find({\cf22 "Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFT}{\bkmkend AAAAAAADFT}
00302     \par
{\bkmkstart AAAAAAADFU}{\bkmkend AAAAAAADFU}
00303     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAADFV}{\bkmkend AAAAAAADFV}
00304     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFW}{\bkmkend AAAAAAADFW}
00305     \par
{\bkmkstart AAAAAAADFX}{\bkmkend AAAAAAADFX}
00306     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAADFY}{\bkmkend AAAAAAADFY}
00307     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADFZ}{\bkmkend AAAAAAADFZ}
00308     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADGA}{\bkmkend AAAAAAADGA}
00309     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADGB}{\bkmkend AAAAAAADGB}
00310     \par
{\bkmkstart AAAAAAADGC}{\bkmkend AAAAAAADGC}
00311     {\cf20 // Test with repeated characters}\par
{\bkmkstart AAAAAAADGD}{\bkmkend AAAAAAADGD}
00312     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAADGE}{\bkmkend AAAAAAADGE}
00313     EXPECT_NE(repeated.find({\cf23 'a'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADGF}{\bkmkend AAAAAAADGF}
00314     EXPECT_NE(repeated.find({\cf22 "aa"}), std::string_view::npos);\par
{\bkmkstart AAAAAAADGG}{\bkmkend AAAAAAADGG}
00315     EXPECT_EQ(repeated.find({\cf23 'b'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADGH}{\bkmkend AAAAAAADGH}
00316 \}\par
{\bkmkstart AAAAAAADGI}{\bkmkend AAAAAAADGI}
00317 \par
{\bkmkstart AAAAAAADGJ}{\bkmkend AAAAAAADGJ}
00322 TEST_F(StringViewAdvancedCoverageTest, TestStringViewRemovePrefixSuffixEdgeCases) \{\par
{\bkmkstart AAAAAAADGK}{\bkmkend AAAAAAADGK}
00323     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADGL}{\bkmkend AAAAAAADGL}
00324     \par
{\bkmkstart AAAAAAADGM}{\bkmkend AAAAAAADGM}
00325     {\cf20 // Test remove_prefix with zero}\par
{\bkmkstart AAAAAAADGN}{\bkmkend AAAAAAADGN}
00326     sv.remove_prefix(0);\par
{\bkmkstart AAAAAAADGO}{\bkmkend AAAAAAADGO}
00327     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADGP}{\bkmkend AAAAAAADGP}
00328     \par
{\bkmkstart AAAAAAADGQ}{\bkmkend AAAAAAADGQ}
00329     {\cf20 // Test remove_suffix with zero}\par
{\bkmkstart AAAAAAADGR}{\bkmkend AAAAAAADGR}
00330     sv.remove_suffix(0);\par
{\bkmkstart AAAAAAADGS}{\bkmkend AAAAAAADGS}
00331     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADGT}{\bkmkend AAAAAAADGT}
00332     \par
{\bkmkstart AAAAAAADGU}{\bkmkend AAAAAAADGU}
00333     {\cf20 // Test remove_prefix with full length}\par
{\bkmkstart AAAAAAADGV}{\bkmkend AAAAAAADGV}
00334     sv.remove_prefix(sv.size());\par
{\bkmkstart AAAAAAADGW}{\bkmkend AAAAAAADGW}
00335     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAADGX}{\bkmkend AAAAAAADGX}
00336     \par
{\bkmkstart AAAAAAADGY}{\bkmkend AAAAAAADGY}
00337     {\cf20 // Reset and test remove_suffix with full length}\par
{\bkmkstart AAAAAAADGZ}{\bkmkend AAAAAAADGZ}
00338     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAADHA}{\bkmkend AAAAAAADHA}
00339     sv.remove_suffix(sv.size());\par
{\bkmkstart AAAAAAADHB}{\bkmkend AAAAAAADHB}
00340     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAADHC}{\bkmkend AAAAAAADHC}
00341     \par
{\bkmkstart AAAAAAADHD}{\bkmkend AAAAAAADHD}
00342     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAADHE}{\bkmkend AAAAAAADHE}
00343     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADHF}{\bkmkend AAAAAAADHF}
00344     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAADHG}{\bkmkend AAAAAAADHG}
00345     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAADHH}{\bkmkend AAAAAAADHH}
00346     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADHI}{\bkmkend AAAAAAADHI}
00347 \}\par
{\bkmkstart AAAAAAADHJ}{\bkmkend AAAAAAADHJ}
00348 \par
{\bkmkstart AAAAAAADHK}{\bkmkend AAAAAAADHK}
00353 TEST_F(StringViewAdvancedCoverageTest, TestStringViewHashEdgeCases) \{\par
{\bkmkstart AAAAAAADHL}{\bkmkend AAAAAAADHL}
00354     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAADHM}{\bkmkend AAAAAAADHM}
00355     \par
{\bkmkstart AAAAAAADHN}{\bkmkend AAAAAAADHN}
00356     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAADHO}{\bkmkend AAAAAAADHO}
00357     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADHP}{\bkmkend AAAAAAADHP}
00358     {\cf17 auto} empty_hash = hasher(empty_sv);\par
{\bkmkstart AAAAAAADHQ}{\bkmkend AAAAAAADHQ}
00359     EXPECT_EQ(empty_hash, hasher(empty_sv));\par
{\bkmkstart AAAAAAADHR}{\bkmkend AAAAAAADHR}
00360     \par
{\bkmkstart AAAAAAADHS}{\bkmkend AAAAAAADHS}
00361     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAADHT}{\bkmkend AAAAAAADHT}
00362     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAADHU}{\bkmkend AAAAAAADHU}
00363     {\cf17 auto} single_hash = hasher(single_sv);\par
{\bkmkstart AAAAAAADHV}{\bkmkend AAAAAAADHV}
00364     EXPECT_NE(empty_hash, single_hash);\par
{\bkmkstart AAAAAAADHW}{\bkmkend AAAAAAADHW}
00365     \par
{\bkmkstart AAAAAAADHX}{\bkmkend AAAAAAADHX}
00366     {\cf20 // Test same content different sources}\par
{\bkmkstart AAAAAAADHY}{\bkmkend AAAAAAADHY}
00367     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAADHZ}{\bkmkend AAAAAAADHZ}
00368     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAADIA}{\bkmkend AAAAAAADIA}
00369     std::string_view sv1(str);\par
{\bkmkstart AAAAAAADIB}{\bkmkend AAAAAAADIB}
00370     std::string_view sv2(cstr);\par
{\bkmkstart AAAAAAADIC}{\bkmkend AAAAAAADIC}
00371     \par
{\bkmkstart AAAAAAADID}{\bkmkend AAAAAAADID}
00372     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAADIE}{\bkmkend AAAAAAADIE}
00373     \par
{\bkmkstart AAAAAAADIF}{\bkmkend AAAAAAADIF}
00374     {\cf20 // Test different content same length}\par
{\bkmkstart AAAAAAADIG}{\bkmkend AAAAAAADIG}
00375     std::string_view sv3({\cf22 "Hello"});\par
{\bkmkstart AAAAAAADIH}{\bkmkend AAAAAAADIH}
00376     std::string_view sv4({\cf22 "World"});\par
{\bkmkstart AAAAAAADII}{\bkmkend AAAAAAADII}
00377     EXPECT_NE(hasher(sv3), hasher(sv4));\par
{\bkmkstart AAAAAAADIJ}{\bkmkend AAAAAAADIJ}
00378 \}\par
{\bkmkstart AAAAAAADIK}{\bkmkend AAAAAAADIK}
00379 \par
{\bkmkstart AAAAAAADIL}{\bkmkend AAAAAAADIL}
00384 TEST_F(StringViewAdvancedCoverageTest, TestStringViewIteratorEdgeCases) \{\par
{\bkmkstart AAAAAAADIM}{\bkmkend AAAAAAADIM}
00385     {\cf20 // Test empty string_view iterators}\par
{\bkmkstart AAAAAAADIN}{\bkmkend AAAAAAADIN}
00386     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADIO}{\bkmkend AAAAAAADIO}
00387     EXPECT_EQ(empty_sv.begin(), empty_sv.end());\par
{\bkmkstart AAAAAAADIP}{\bkmkend AAAAAAADIP}
00388     EXPECT_EQ(empty_sv.cbegin(), empty_sv.cend());\par
{\bkmkstart AAAAAAADIQ}{\bkmkend AAAAAAADIQ}
00389     EXPECT_EQ(empty_sv.rbegin(), empty_sv.rend());\par
{\bkmkstart AAAAAAADIR}{\bkmkend AAAAAAADIR}
00390     EXPECT_EQ(empty_sv.crbegin(), empty_sv.crend());\par
{\bkmkstart AAAAAAADIS}{\bkmkend AAAAAAADIS}
00391     \par
{\bkmkstart AAAAAAADIT}{\bkmkend AAAAAAADIT}
00392     {\cf20 // Test single character iterators}\par
{\bkmkstart AAAAAAADIU}{\bkmkend AAAAAAADIU}
00393     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAADIV}{\bkmkend AAAAAAADIV}
00394     EXPECT_NE(single_sv.begin(), single_sv.end());\par
{\bkmkstart AAAAAAADIW}{\bkmkend AAAAAAADIW}
00395     EXPECT_EQ(single_sv.begin() + 1, single_sv.end());\par
{\bkmkstart AAAAAAADIX}{\bkmkend AAAAAAADIX}
00396     EXPECT_EQ(*single_sv.begin(), {\cf23 'A'});\par
{\bkmkstart AAAAAAADIY}{\bkmkend AAAAAAADIY}
00397     EXPECT_EQ(*(single_sv.end() - 1), {\cf23 'A'});\par
{\bkmkstart AAAAAAADIZ}{\bkmkend AAAAAAADIZ}
00398     \par
{\bkmkstart AAAAAAADJA}{\bkmkend AAAAAAADJA}
00399     {\cf20 // Test reverse iterators}\par
{\bkmkstart AAAAAAADJB}{\bkmkend AAAAAAADJB}
00400     std::string_view sv({\cf22 "ABC"});\par
{\bkmkstart AAAAAAADJC}{\bkmkend AAAAAAADJC}
00401     {\cf17 auto} rit = sv.rbegin();\par
{\bkmkstart AAAAAAADJD}{\bkmkend AAAAAAADJD}
00402     EXPECT_EQ(*rit, {\cf23 'C'});\par
{\bkmkstart AAAAAAADJE}{\bkmkend AAAAAAADJE}
00403     ++rit;\par
{\bkmkstart AAAAAAADJF}{\bkmkend AAAAAAADJF}
00404     EXPECT_EQ(*rit, {\cf23 'B'});\par
{\bkmkstart AAAAAAADJG}{\bkmkend AAAAAAADJG}
00405     ++rit;\par
{\bkmkstart AAAAAAADJH}{\bkmkend AAAAAAADJH}
00406     EXPECT_EQ(*rit, {\cf23 'A'});\par
{\bkmkstart AAAAAAADJI}{\bkmkend AAAAAAADJI}
00407     ++rit;\par
{\bkmkstart AAAAAAADJJ}{\bkmkend AAAAAAADJJ}
00408     EXPECT_EQ(rit, sv.rend());\par
{\bkmkstart AAAAAAADJK}{\bkmkend AAAAAAADJK}
00409 \}\par
{\bkmkstart AAAAAAADJL}{\bkmkend AAAAAAADJL}
00410 \par
{\bkmkstart AAAAAAADJM}{\bkmkend AAAAAAADJM}
00415 TEST_F(StringViewAdvancedCoverageTest, TestStringViewConstexprEdgeCases) \{\par
{\bkmkstart AAAAAAADJN}{\bkmkend AAAAAAADJN}
00416     {\cf20 // Test constexpr with empty string}\par
{\bkmkstart AAAAAAADJO}{\bkmkend AAAAAAADJO}
00417     {\cf17 constexpr} std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAADJP}{\bkmkend AAAAAAADJP}
00418     {\cf17 static_assert}(empty_sv.empty());\par
{\bkmkstart AAAAAAADJQ}{\bkmkend AAAAAAADJQ}
00419     {\cf17 static_assert}(empty_sv.size() == 0);\par
{\bkmkstart AAAAAAADJR}{\bkmkend AAAAAAADJR}
00420     \par
{\bkmkstart AAAAAAADJS}{\bkmkend AAAAAAADJS}
00421     {\cf20 // Test constexpr with single character}\par
{\bkmkstart AAAAAAADJT}{\bkmkend AAAAAAADJT}
00422     {\cf17 constexpr} std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAADJU}{\bkmkend AAAAAAADJU}
00423     {\cf17 static_assert}(single_sv.size() == 1);\par
{\bkmkstart AAAAAAADJV}{\bkmkend AAAAAAADJV}
00424     {\cf17 static_assert}(single_sv[0] == {\cf23 'A'});\par
{\bkmkstart AAAAAAADJW}{\bkmkend AAAAAAADJW}
00425     \par
{\bkmkstart AAAAAAADJX}{\bkmkend AAAAAAADJX}
00426     {\cf20 // Test constexpr find operations}\par
{\bkmkstart AAAAAAADJY}{\bkmkend AAAAAAADJY}
00427     {\cf17 constexpr} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADJZ}{\bkmkend AAAAAAADJZ}
00428     {\cf17 constexpr} {\cf18 size_t} pos1 = sv.find({\cf22 "World"});\par
{\bkmkstart AAAAAAADKA}{\bkmkend AAAAAAADKA}
00429     {\cf17 static_assert}(pos1 == 7);\par
{\bkmkstart AAAAAAADKB}{\bkmkend AAAAAAADKB}
00430     \par
{\bkmkstart AAAAAAADKC}{\bkmkend AAAAAAADKC}
00431     {\cf17 constexpr} {\cf18 size_t} pos2 = sv.find({\cf22 "xyz"});\par
{\bkmkstart AAAAAAADKD}{\bkmkend AAAAAAADKD}
00432     {\cf17 static_assert}(pos2 == std::string_view::npos);\par
{\bkmkstart AAAAAAADKE}{\bkmkend AAAAAAADKE}
00433     \par
{\bkmkstart AAAAAAADKF}{\bkmkend AAAAAAADKF}
00434     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAADKG}{\bkmkend AAAAAAADKG}
00435     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAADKH}{\bkmkend AAAAAAADKH}
00436     {\cf17 static_assert}(sv.find({\cf22 "World!"}) == 7);\par
{\bkmkstart AAAAAAADKI}{\bkmkend AAAAAAADKI}
00437     {\cf17 static_assert}(sv.find({\cf22 "World"}) == 7);\par
{\bkmkstart AAAAAAADKJ}{\bkmkend AAAAAAADKJ}
00438     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAADKK}{\bkmkend AAAAAAADKK}
00439     \par
{\bkmkstart AAAAAAADKL}{\bkmkend AAAAAAADKL}
00440     {\cf20 // Test constexpr contains using find}\par
{\bkmkstart AAAAAAADKM}{\bkmkend AAAAAAADKM}
00441     {\cf17 static_assert}(sv.find({\cf22 "lo, Wo"}) != std::string_view::npos);\par
{\bkmkstart AAAAAAADKN}{\bkmkend AAAAAAADKN}
00442     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAADKO}{\bkmkend AAAAAAADKO}
00443 \}\par
{\bkmkstart AAAAAAADKP}{\bkmkend AAAAAAADKP}
00444 \par
{\bkmkstart AAAAAAADKQ}{\bkmkend AAAAAAADKQ}
00449 TEST_F(StringViewAdvancedCoverageTest, TestStringViewPerformanceEdgeCases) \{\par
{\bkmkstart AAAAAAADKR}{\bkmkend AAAAAAADKR}
00450     {\cf20 // Test with very large string}\par
{\bkmkstart AAAAAAADKS}{\bkmkend AAAAAAADKS}
00451     std::string large_string(100000, {\cf23 'A'});\par
{\bkmkstart AAAAAAADKT}{\bkmkend AAAAAAADKT}
00452     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAADKU}{\bkmkend AAAAAAADKU}
00453     \par
{\bkmkstart AAAAAAADKV}{\bkmkend AAAAAAADKV}
00454     {\cf20 // Test operations that should be fast}\par
{\bkmkstart AAAAAAADKW}{\bkmkend AAAAAAADKW}
00455     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAADKX}{\bkmkend AAAAAAADKX}
00456     \par
{\bkmkstart AAAAAAADKY}{\bkmkend AAAAAAADKY}
00457     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAADKZ}{\bkmkend AAAAAAADKZ}
00458     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAADLA}{\bkmkend AAAAAAADLA}
00459         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAADLB}{\bkmkend AAAAAAADLB}
00460         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAADLC}{\bkmkend AAAAAAADLC}
00461         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAADLD}{\bkmkend AAAAAAADLD}
00462         {\cf17 auto} starts = sv.find({\cf22 "AAAA"}) == 0;\par
{\bkmkstart AAAAAAADLE}{\bkmkend AAAAAAADLE}
00463         {\cf17 auto} ends = sv.find({\cf22 "AAAA"}) == (sv.size() - 4);\par
{\bkmkstart AAAAAAADLF}{\bkmkend AAAAAAADLF}
00464         (void)sub; (void)pos; (void)contains; (void)starts; (void)ends;\par
{\bkmkstart AAAAAAADLG}{\bkmkend AAAAAAADLG}
00465     \}\par
{\bkmkstart AAAAAAADLH}{\bkmkend AAAAAAADLH}
00466     \par
{\bkmkstart AAAAAAADLI}{\bkmkend AAAAAAADLI}
00467     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAADLJ}{\bkmkend AAAAAAADLJ}
00468     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAADLK}{\bkmkend AAAAAAADLK}
00469     \par
{\bkmkstart AAAAAAADLL}{\bkmkend AAAAAAADLL}
00470     {\cf20 // Should complete quickly}\par
{\bkmkstart AAAAAAADLM}{\bkmkend AAAAAAADLM}
00471     EXPECT_LT(duration.count(), 100000); {\cf20 // Less than 0.1 second}\par
{\bkmkstart AAAAAAADLN}{\bkmkend AAAAAAADLN}
00472 \}\par
{\bkmkstart AAAAAAADLO}{\bkmkend AAAAAAADLO}
00473 \par
{\bkmkstart AAAAAAADLP}{\bkmkend AAAAAAADLP}
00474 \} {\cf20 // namespace}\par
}
}