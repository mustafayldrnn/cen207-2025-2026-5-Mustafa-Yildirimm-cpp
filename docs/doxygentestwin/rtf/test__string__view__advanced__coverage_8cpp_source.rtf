{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_advanced_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\bkmkstart AAAAAAACVM}
{\bkmkend AAAAAAACVM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACVN" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACWG}{\bkmkend AAAAAAACWG}
00001 \par
{\bkmkstart AAAAAAACWN}{\bkmkend AAAAAAACWN}
00008 \par
{\bkmkstart AAAAAAACWP}{\bkmkend AAAAAAACWP}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAACXE}{\bkmkend AAAAAAACXE}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAACXP}{\bkmkend AAAAAAACXP}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAACXR}{\bkmkend AAAAAAACXR}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAACXS}{\bkmkend AAAAAAACXS}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAACXT}{\bkmkend AAAAAAACXT}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAACXU}{\bkmkend AAAAAAACXU}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAACXV}{\bkmkend AAAAAAACXV}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAACXX}{\bkmkend AAAAAAACXX}
00017 {\cf21 #include <sstream>}\par
{\bkmkstart AAAAAAACYF}{\bkmkend AAAAAAACYF}
00018 {\cf21 #include <iomanip>}\par
{\bkmkstart AAAAAAACYN}{\bkmkend AAAAAAACYN}
00019 \par
{\bkmkstart AAAAAAACYO}{\bkmkend AAAAAAACYO}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAACYP}{\bkmkend AAAAAAACYP}
00021 \par
{\bkmkstart AAAAAAACYQ}{\bkmkend AAAAAAACYQ}
00026 {\cf17 class }StringViewAdvancedCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAACYU}{\bkmkend AAAAAAACYU}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAACYW}{\bkmkend AAAAAAACYW}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAACZE}{\bkmkend AAAAAAACZE}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAACZF}{\bkmkend AAAAAAACZF}
00030     \}\par
{\bkmkstart AAAAAAACZG}{\bkmkend AAAAAAACZG}
00031     \par
{\bkmkstart AAAAAAACZH}{\bkmkend AAAAAAACZH}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAACZL}{\bkmkend AAAAAAACZL}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAACZN}{\bkmkend AAAAAAACZN}
00034     \}\par
{\bkmkstart AAAAAAACZO}{\bkmkend AAAAAAACZO}
00035 \};\par
{\bkmkstart AAAAAAACZP}{\bkmkend AAAAAAACZP}
00036 \par
{\bkmkstart AAAAAAACZT}{\bkmkend AAAAAAACZT}
00041 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewComparisonOperators) \{\par
{\bkmkstart AAAAAAADVN}{\bkmkend AAAAAAADVN}
00042     std::string_view sv1({\cf22 "abc"});\par
{\bkmkstart AAAAAAADVQ}{\bkmkend AAAAAAADVQ}
00043     std::string_view sv2({\cf22 "def"});\par
{\bkmkstart AAAAAAADVR}{\bkmkend AAAAAAADVR}
00044     std::string_view sv3({\cf22 "abc"});\par
{\bkmkstart AAAAAAADVT}{\bkmkend AAAAAAADVT}
00045     \par
{\bkmkstart AAAAAAADVV}{\bkmkend AAAAAAADVV}
00046     {\cf20 // Test operator==}\par
{\bkmkstart AAAAAAADVW}{\bkmkend AAAAAAADVW}
00047     EXPECT_TRUE(sv1 == sv3);\par
{\bkmkstart AAAAAAADVZ}{\bkmkend AAAAAAADVZ}
00048     EXPECT_FALSE(sv1 == sv2);\par
{\bkmkstart AAAAAAADWB}{\bkmkend AAAAAAADWB}
00049     \par
{\bkmkstart AAAAAAADWC}{\bkmkend AAAAAAADWC}
00050     {\cf20 // Test operator!=}\par
{\bkmkstart AAAAAAADWD}{\bkmkend AAAAAAADWD}
00051     EXPECT_TRUE(sv1 != sv2);\par
{\bkmkstart AAAAAAADWE}{\bkmkend AAAAAAADWE}
00052     EXPECT_FALSE(sv1 != sv3);\par
{\bkmkstart AAAAAAADWG}{\bkmkend AAAAAAADWG}
00053     \par
{\bkmkstart AAAAAAADWH}{\bkmkend AAAAAAADWH}
00054     {\cf20 // Test operator<}\par
{\bkmkstart AAAAAAADWI}{\bkmkend AAAAAAADWI}
00055     EXPECT_TRUE(sv1 < sv2);\par
{\bkmkstart AAAAAAADWK}{\bkmkend AAAAAAADWK}
00056     EXPECT_FALSE(sv2 < sv1);\par
{\bkmkstart AAAAAAADWM}{\bkmkend AAAAAAADWM}
00057     EXPECT_FALSE(sv1 < sv3);\par
{\bkmkstart AAAAAAADWP}{\bkmkend AAAAAAADWP}
00058     \par
{\bkmkstart AAAAAAADWR}{\bkmkend AAAAAAADWR}
00059     {\cf20 // Test operator<=}\par
{\bkmkstart AAAAAAADWS}{\bkmkend AAAAAAADWS}
00060     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAADWV}{\bkmkend AAAAAAADWV}
00061     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAADWW}{\bkmkend AAAAAAADWW}
00062     EXPECT_FALSE(sv2 <= sv1);\par
{\bkmkstart AAAAAAADWY}{\bkmkend AAAAAAADWY}
00063     \par
{\bkmkstart AAAAAAADXA}{\bkmkend AAAAAAADXA}
00064     {\cf20 // Test operator>}\par
{\bkmkstart AAAAAAADXC}{\bkmkend AAAAAAADXC}
00065     EXPECT_TRUE(sv2 > sv1);\par
{\bkmkstart AAAAAAADXE}{\bkmkend AAAAAAADXE}
00066     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAADXH}{\bkmkend AAAAAAADXH}
00067     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAADXJ}{\bkmkend AAAAAAADXJ}
00068     \par
{\bkmkstart AAAAAAADXK}{\bkmkend AAAAAAADXK}
00069     {\cf20 // Test operator>=}\par
{\bkmkstart AAAAAAADXL}{\bkmkend AAAAAAADXL}
00070     EXPECT_TRUE(sv2 >= sv1);\par
{\bkmkstart AAAAAAADXO}{\bkmkend AAAAAAADXO}
00071     EXPECT_TRUE(sv1 >= sv3);\par
{\bkmkstart AAAAAAADXQ}{\bkmkend AAAAAAADXQ}
00072     EXPECT_FALSE(sv1 >= sv2);\par
{\bkmkstart AAAAAAADXS}{\bkmkend AAAAAAADXS}
00073     \par
{\bkmkstart AAAAAAADXU}{\bkmkend AAAAAAADXU}
00074     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAADXV}{\bkmkend AAAAAAADXV}
00075     std::string str = {\cf22 "abc"};\par
{\bkmkstart AAAAAAADXY}{\bkmkend AAAAAAADXY}
00076     {\cf17 const} {\cf18 char}* cstr = {\cf22 "abc"};\par
{\bkmkstart AAAAAAADYA}{\bkmkend AAAAAAADYA}
00077     \par
{\bkmkstart AAAAAAADYB}{\bkmkend AAAAAAADYB}
00078     EXPECT_TRUE(sv1 == str);\par
{\bkmkstart AAAAAAADYD}{\bkmkend AAAAAAADYD}
00079     EXPECT_TRUE(sv1 == cstr);\par
{\bkmkstart AAAAAAADYG}{\bkmkend AAAAAAADYG}
00080     EXPECT_TRUE(str == sv1);\par
{\bkmkstart AAAAAAADYH}{\bkmkend AAAAAAADYH}
00081     EXPECT_TRUE(cstr == sv1);\par
{\bkmkstart AAAAAAADYJ}{\bkmkend AAAAAAADYJ}
00082     \par
{\bkmkstart AAAAAAADYL}{\bkmkend AAAAAAADYL}
00083     EXPECT_TRUE(sv1 != {\cf22 "def"});\par
{\bkmkstart AAAAAAADYM}{\bkmkend AAAAAAADYM}
00084     EXPECT_TRUE({\cf22 "def"} != sv1);\par
{\bkmkstart AAAAAAADYO}{\bkmkend AAAAAAADYO}
00085 \}\par
{\bkmkstart AAAAAAADYP}{\bkmkend AAAAAAADYP}
00086 \par
{\bkmkstart AAAAAAADYS}{\bkmkend AAAAAAADYS}
00091 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewStreamOutput) \{\par
{\bkmkstart AAAAAAADYU}{\bkmkend AAAAAAADYU}
00092     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADYY}{\bkmkend AAAAAAADYY}
00093     std::ostringstream oss;\par
{\bkmkstart AAAAAAADZC}{\bkmkend AAAAAAADZC}
00094     \par
{\bkmkstart AAAAAAADZE}{\bkmkend AAAAAAADZE}
00095     {\cf20 // Test basic stream output}\par
{\bkmkstart AAAAAAADZG}{\bkmkend AAAAAAADZG}
00096     oss << sv;\par
{\bkmkstart AAAAAAADZH}{\bkmkend AAAAAAADZH}
00097     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADZK}{\bkmkend AAAAAAADZK}
00098     \par
{\bkmkstart AAAAAAADZL}{\bkmkend AAAAAAADZL}
00099     {\cf20 // Test with multiple string_views}\par
{\bkmkstart AAAAAAADZM}{\bkmkend AAAAAAADZM}
00100     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAADZO}{\bkmkend AAAAAAADZO}
00101     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAADZQ}{\bkmkend AAAAAAADZQ}
00102     std::string_view sv2({\cf22 ", "});\par
{\bkmkstart AAAAAAADZT}{\bkmkend AAAAAAADZT}
00103     std::string_view sv3({\cf22 "World!"});\par
{\bkmkstart AAAAAAADZV}{\bkmkend AAAAAAADZV}
00104     oss << sv1 << sv2 << sv3;\par
{\bkmkstart AAAAAAADZX}{\bkmkend AAAAAAADZX}
00105     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADZZ}{\bkmkend AAAAAAADZZ}
00106     \par
{\bkmkstart AAAAAAAEAA}{\bkmkend AAAAAAAEAA}
00107     {\cf20 // Test with formatting}\par
{\bkmkstart AAAAAAAEAB}{\bkmkend AAAAAAAEAB}
00108     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAAEAD}{\bkmkend AAAAAAAEAD}
00109     oss << std::setw(20) << sv;\par
{\bkmkstart AAAAAAAEEN}{\bkmkend AAAAAAAEEN}
00110     EXPECT_EQ(oss.str().length(), 20);\par
{\bkmkstart AAAAAAAEEP}{\bkmkend AAAAAAAEEP}
00111     EXPECT_TRUE(oss.str().find({\cf22 "Hello, World!"}) != std::string::npos);\par
{\bkmkstart AAAAAAAEET}{\bkmkend AAAAAAAEET}
00112 \}\par
{\bkmkstart AAAAAAAEEV}{\bkmkend AAAAAAAEEV}
00113 \par
{\bkmkstart AAAAAAAEEX}{\bkmkend AAAAAAAEEX}
00118 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewConstMethods) \{\par
{\bkmkstart AAAAAAAEFC}{\bkmkend AAAAAAAEFC}
00119     {\cf17 const} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEFE}{\bkmkend AAAAAAAEFE}
00120     \par
{\bkmkstart AAAAAAAEFF}{\bkmkend AAAAAAAEFF}
00121     {\cf20 // Test const access methods}\par
{\bkmkstart AAAAAAAEFH}{\bkmkend AAAAAAAEFH}
00122     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAEFI}{\bkmkend AAAAAAAEFI}
00123     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAEFL}{\bkmkend AAAAAAAEFL}
00124     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAEFN}{\bkmkend AAAAAAAEFN}
00125     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAEFP}{\bkmkend AAAAAAAEFP}
00126     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAEFS}{\bkmkend AAAAAAAEFS}
00127     \par
{\bkmkstart AAAAAAAEFT}{\bkmkend AAAAAAAEFT}
00128     {\cf20 // Test const size methods}\par
{\bkmkstart AAAAAAAEFV}{\bkmkend AAAAAAAEFV}
00129     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAEFX}{\bkmkend AAAAAAAEFX}
00130     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAEFZ}{\bkmkend AAAAAAAEFZ}
00131     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAEGA}{\bkmkend AAAAAAAEGA}
00132     \par
{\bkmkstart AAAAAAAEGC}{\bkmkend AAAAAAAEGC}
00133     {\cf20 // Test const iterator methods}\par
{\bkmkstart AAAAAAAEGD}{\bkmkend AAAAAAAEGD}
00134     EXPECT_NE(sv.begin(), sv.end());\par
{\bkmkstart AAAAAAAEGF}{\bkmkend AAAAAAAEGF}
00135     EXPECT_NE(sv.cbegin(), sv.cend());\par
{\bkmkstart AAAAAAAEGI}{\bkmkend AAAAAAAEGI}
00136     EXPECT_NE(sv.rbegin(), sv.rend());\par
{\bkmkstart AAAAAAAEGJ}{\bkmkend AAAAAAAEGJ}
00137     EXPECT_NE(sv.crbegin(), sv.crend());\par
{\bkmkstart AAAAAAAEGK}{\bkmkend AAAAAAAEGK}
00138     \par
{\bkmkstart AAAAAAAEGL}{\bkmkend AAAAAAAEGL}
00139     {\cf20 // Test const find methods}\par
{\bkmkstart AAAAAAAEGM}{\bkmkend AAAAAAAEGM}
00140     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEGN}{\bkmkend AAAAAAAEGN}
00141     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAEGO}{\bkmkend AAAAAAAEGO}
00142     EXPECT_EQ(sv.rfind({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAEGP}{\bkmkend AAAAAAAEGP}
00143     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1);\par
{\bkmkstart AAAAAAAEGQ}{\bkmkend AAAAAAAEGQ}
00144     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 8);\par
{\bkmkstart AAAAAAAEGR}{\bkmkend AAAAAAAEGR}
00145     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAEGS}{\bkmkend AAAAAAAEGS}
00146     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 11);\par
{\bkmkstart AAAAAAAEGZ}{\bkmkend AAAAAAAEGZ}
00147     \par
{\bkmkstart AAAAAAAEHB}{\bkmkend AAAAAAAEHB}
00148     {\cf20 // Test const contains methods using find}\par
{\bkmkstart AAAAAAAEHC}{\bkmkend AAAAAAAEHC}
00149     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEHF}{\bkmkend AAAAAAAEHF}
00150     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEHI}{\bkmkend AAAAAAAEHI}
00151     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAEHK}{\bkmkend AAAAAAAEHK}
00152     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAEHM}{\bkmkend AAAAAAAEHM}
00153 \}\par
{\bkmkstart AAAAAAAEHP}{\bkmkend AAAAAAAEHP}
00154 \par
{\bkmkstart AAAAAAAEHQ}{\bkmkend AAAAAAAEHQ}
00159 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewSubstrEdgeCases) \{\par
{\bkmkstart AAAAAAAEHV}{\bkmkend AAAAAAAEHV}
00160     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEHX}{\bkmkend AAAAAAAEHX}
00161     \par
{\bkmkstart AAAAAAAEHZ}{\bkmkend AAAAAAAEHZ}
00162     {\cf20 // Test substr with zero length}\par
{\bkmkstart AAAAAAAEIA}{\bkmkend AAAAAAAEIA}
00163     std::string_view sub1 = sv.substr(0, 0);\par
{\bkmkstart AAAAAAAEIC}{\bkmkend AAAAAAAEIC}
00164     EXPECT_TRUE(sub1.empty());\par
{\bkmkstart AAAAAAAEIE}{\bkmkend AAAAAAAEIE}
00165     EXPECT_EQ(sub1.size(), 0);\par
{\bkmkstart AAAAAAAEIH}{\bkmkend AAAAAAAEIH}
00166     \par
{\bkmkstart AAAAAAAEII}{\bkmkend AAAAAAAEII}
00167     {\cf20 // Test substr with length beyond string}\par
{\bkmkstart AAAAAAAEIJ}{\bkmkend AAAAAAAEIJ}
00168     std::string_view sub2 = sv.substr(10, 100);\par
{\bkmkstart AAAAAAAEIK}{\bkmkend AAAAAAAEIK}
00169     EXPECT_EQ(sub2, {\cf22 "d!"});\par
{\bkmkstart AAAAAAAEIP}{\bkmkend AAAAAAAEIP}
00170     EXPECT_EQ(sub2.size(), 3);\par
{\bkmkstart AAAAAAAEIR}{\bkmkend AAAAAAAEIR}
00171     \par
{\bkmkstart AAAAAAAEIT}{\bkmkend AAAAAAAEIT}
00172     {\cf20 // Test substr at end of string}\par
{\bkmkstart AAAAAAAEIU}{\bkmkend AAAAAAAEIU}
00173     std::string_view sub3 = sv.substr(12, 1);\par
{\bkmkstart AAAAAAAEIX}{\bkmkend AAAAAAAEIX}
00174     EXPECT_EQ(sub3, {\cf22 "!"});\par
{\bkmkstart AAAAAAAEIY}{\bkmkend AAAAAAAEIY}
00175     EXPECT_EQ(sub3.size(), 1);\par
{\bkmkstart AAAAAAAEJB}{\bkmkend AAAAAAAEJB}
00176     \par
{\bkmkstart AAAAAAAEJD}{\bkmkend AAAAAAAEJD}
00177     {\cf20 // Test substr with npos}\par
{\bkmkstart AAAAAAAEJE}{\bkmkend AAAAAAAEJE}
00178     std::string_view sub4 = sv.substr(std::string_view::npos);\par
{\bkmkstart AAAAAAAEJG}{\bkmkend AAAAAAAEJG}
00179     EXPECT_TRUE(sub4.empty());\par
{\bkmkstart AAAAAAAEJI}{\bkmkend AAAAAAAEJI}
00180     \par
{\bkmkstart AAAAAAAEJJ}{\bkmkend AAAAAAAEJJ}
00181     {\cf20 // Test substr with very large position}\par
{\bkmkstart AAAAAAAEJL}{\bkmkend AAAAAAAEJL}
00182     std::string_view sub5 = sv.substr(1000);\par
{\bkmkstart AAAAAAAEJN}{\bkmkend AAAAAAAEJN}
00183     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAEJP}{\bkmkend AAAAAAAEJP}
00184 \}\par
{\bkmkstart AAAAAAAEJR}{\bkmkend AAAAAAAEJR}
00185 \par
{\bkmkstart AAAAAAAEJU}{\bkmkend AAAAAAAEJU}
00190 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewFindEdgeCases) \{\par
{\bkmkstart AAAAAAAEJV}{\bkmkend AAAAAAAEJV}
00191     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEJY}{\bkmkend AAAAAAAEJY}
00192     \par
{\bkmkstart AAAAAAAEJZ}{\bkmkend AAAAAAAEJZ}
00193     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAEKB}{\bkmkend AAAAAAAEKB}
00194     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEKD}{\bkmkend AAAAAAAEKD}
00195     EXPECT_EQ(empty_sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEKF}{\bkmkend AAAAAAAEKF}
00196     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEKI}{\bkmkend AAAAAAAEKI}
00197     \par
{\bkmkstart AAAAAAAEKK}{\bkmkend AAAAAAAEKK}
00198     {\cf20 // Test find with position beyond string}\par
{\bkmkstart AAAAAAAEKL}{\bkmkend AAAAAAAEKL}
00199     EXPECT_EQ(sv.find({\cf23 'H'}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAAEKN}{\bkmkend AAAAAAAEKN}
00200     EXPECT_EQ(sv.find({\cf22 "Hello"}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAAEKQ}{\bkmkend AAAAAAAEKQ}
00201     \par
{\bkmkstart AAAAAAAEKS}{\bkmkend AAAAAAAEKS}
00202     {\cf20 // Test find with empty search string}\par
{\bkmkstart AAAAAAAEKT}{\bkmkend AAAAAAAEKT}
00203     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEKV}{\bkmkend AAAAAAAEKV}
00204     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAEKW}{\bkmkend AAAAAAAEKW}
00205     \par
{\bkmkstart AAAAAAAEKY}{\bkmkend AAAAAAAEKY}
00206     {\cf20 // Test find with single character at boundaries}\par
{\bkmkstart AAAAAAAELA}{\bkmkend AAAAAAAELA}
00207     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAELC}{\bkmkend AAAAAAAELC}
00208     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAELD}{\bkmkend AAAAAAAELD}
00209     \par
{\bkmkstart AAAAAAAELE}{\bkmkend AAAAAAAELE}
00210     {\cf20 // Test find with repeated characters}\par
{\bkmkstart AAAAAAAELF}{\bkmkend AAAAAAAELF}
00211     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAELI}{\bkmkend AAAAAAAELI}
00212     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAELK}{\bkmkend AAAAAAAELK}
00213     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAELL}{\bkmkend AAAAAAAELL}
00214     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAELN}{\bkmkend AAAAAAAELN}
00215     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAELQ}{\bkmkend AAAAAAAELQ}
00216 \}\par
{\bkmkstart AAAAAAAELR}{\bkmkend AAAAAAAELR}
00217 \par
{\bkmkstart AAAAAAAELU}{\bkmkend AAAAAAAELU}
00222 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewCopyEdgeCases) \{\par
{\bkmkstart AAAAAAAELX}{\bkmkend AAAAAAAELX}
00223     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAELZ}{\bkmkend AAAAAAAELZ}
00224     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAEMA}{\bkmkend AAAAAAAEMA}
00225     \par
{\bkmkstart AAAAAAAEMC}{\bkmkend AAAAAAAEMC}
00226     {\cf20 // Test copy with zero length}\par
{\bkmkstart AAAAAAAEMD}{\bkmkend AAAAAAAEMD}
00227     {\cf18 size_t} copied = sv.copy(buffer, 0);\par
{\bkmkstart AAAAAAAEME}{\bkmkend AAAAAAAEME}
00228     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAAEMF}{\bkmkend AAAAAAAEMF}
00229     \par
{\bkmkstart AAAAAAAEMH}{\bkmkend AAAAAAAEMH}
00230     {\cf20 // Test copy with position beyond string}\par
{\bkmkstart AAAAAAAEMJ}{\bkmkend AAAAAAAEMJ}
00231     copied = sv.copy(buffer, 5, 100);\par
{\bkmkstart AAAAAAAEML}{\bkmkend AAAAAAAEML}
00232     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAAEMO}{\bkmkend AAAAAAAEMO}
00233     \par
{\bkmkstart AAAAAAAEMP}{\bkmkend AAAAAAAEMP}
00234     {\cf20 // Test copy with npos position}\par
{\bkmkstart AAAAAAAEMQ}{\bkmkend AAAAAAAEMQ}
00235     copied = sv.copy(buffer, 5, std::string_view::npos);\par
{\bkmkstart AAAAAAAEMS}{\bkmkend AAAAAAAEMS}
00236     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAAEMT}{\bkmkend AAAAAAAEMT}
00237     \par
{\bkmkstart AAAAAAAEMU}{\bkmkend AAAAAAAEMU}
00238     {\cf20 // Test copy with exact length}\par
{\bkmkstart AAAAAAAEMW}{\bkmkend AAAAAAAEMW}
00239     copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAEMY}{\bkmkend AAAAAAAEMY}
00240     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAENB}{\bkmkend AAAAAAAENB}
00241     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAEND}{\bkmkend AAAAAAAEND}
00242     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAENG}{\bkmkend AAAAAAAENG}
00243     \par
{\bkmkstart AAAAAAAENH}{\bkmkend AAAAAAAENH}
00244     {\cf20 // Test copy with small buffer}\par
{\bkmkstart AAAAAAAENI}{\bkmkend AAAAAAAENI}
00245     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAENK}{\bkmkend AAAAAAAENK}
00246     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAENL}{\bkmkend AAAAAAAENL}
00247     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAENN}{\bkmkend AAAAAAAENN}
00248     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAENP}{\bkmkend AAAAAAAENP}
00249     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAENR}{\bkmkend AAAAAAAENR}
00250 \}\par
{\bkmkstart AAAAAAAENT}{\bkmkend AAAAAAAENT}
00251 \par
{\bkmkstart AAAAAAAENV}{\bkmkend AAAAAAAENV}
00256 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewStartsWithEndsWithEdgeCases) \{\par
{\bkmkstart AAAAAAAENY}{\bkmkend AAAAAAAENY}
00257     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEOA}{\bkmkend AAAAAAAEOA}
00258     \par
{\bkmkstart AAAAAAAEOB}{\bkmkend AAAAAAAEOB}
00259     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAEOC}{\bkmkend AAAAAAAEOC}
00260     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEOE}{\bkmkend AAAAAAAEOE}
00261     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEOG}{\bkmkend AAAAAAAEOG}
00262     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEOI}{\bkmkend AAAAAAAEOI}
00263     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEOL}{\bkmkend AAAAAAAEOL}
00264     EXPECT_EQ(empty_sv.find({\cf22 "World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEON}{\bkmkend AAAAAAAEON}
00265     \par
{\bkmkstart AAAAAAAEOO}{\bkmkend AAAAAAAEOO}
00266     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAAEOQ}{\bkmkend AAAAAAAEOQ}
00267     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEOR}{\bkmkend AAAAAAAEOR}
00268     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAEOT}{\bkmkend AAAAAAAEOT}
00269     \par
{\bkmkstart AAAAAAAEOU}{\bkmkend AAAAAAAEOU}
00270     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAAEOW}{\bkmkend AAAAAAAEOW}
00271     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAEOY}{\bkmkend AAAAAAAEOY}
00272     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAEPB}{\bkmkend AAAAAAAEPB}
00273     \par
{\bkmkstart AAAAAAAEPD}{\bkmkend AAAAAAAEPD}
00274     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAAEPE}{\bkmkend AAAAAAAEPE}
00275     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEPG}{\bkmkend AAAAAAAEPG}
00276     EXPECT_EQ(sv.find({\cf22 "Extra Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEPJ}{\bkmkend AAAAAAAEPJ}
00277     \par
{\bkmkstart AAAAAAAEPK}{\bkmkend AAAAAAAEPK}
00278     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAEPL}{\bkmkend AAAAAAAEPL}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAEPN}{\bkmkend AAAAAAAEPN}
00280     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAEPQ}{\bkmkend AAAAAAAEPQ}
00281     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEPS}{\bkmkend AAAAAAAEPS}
00282     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEPU}{\bkmkend AAAAAAAEPU}
00283 \}\par
{\bkmkstart AAAAAAAEPV}{\bkmkend AAAAAAAEPV}
00284 \par
{\bkmkstart AAAAAAAEPW}{\bkmkend AAAAAAAEPW}
00289 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewContainsEdgeCases) \{\par
{\bkmkstart AAAAAAAEQA}{\bkmkend AAAAAAAEQA}
00290     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEQD}{\bkmkend AAAAAAAEQD}
00291     \par
{\bkmkstart AAAAAAAEQF}{\bkmkend AAAAAAAEQF}
00292     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAEQG}{\bkmkend AAAAAAAEQG}
00293     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEQH}{\bkmkend AAAAAAAEQH}
00294     EXPECT_NE(empty_sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQI}{\bkmkend AAAAAAAEQI}
00295     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQL}{\bkmkend AAAAAAAEQL}
00296     \par
{\bkmkstart AAAAAAAEQM}{\bkmkend AAAAAAAEQM}
00297     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAAEQO}{\bkmkend AAAAAAAEQO}
00298     EXPECT_NE(sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQR}{\bkmkend AAAAAAAEQR}
00299     \par
{\bkmkstart AAAAAAAEQT}{\bkmkend AAAAAAAEQT}
00300     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAAEQU}{\bkmkend AAAAAAAEQU}
00301     EXPECT_NE(sv.find({\cf22 "Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAEQX}{\bkmkend AAAAAAAEQX}
00302     \par
{\bkmkstart AAAAAAAEQZ}{\bkmkend AAAAAAAEQZ}
00303     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAAERB}{\bkmkend AAAAAAAERB}
00304     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERE}{\bkmkend AAAAAAAERE}
00305     \par
{\bkmkstart AAAAAAAERF}{\bkmkend AAAAAAAERF}
00306     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAERH}{\bkmkend AAAAAAAERH}
00307     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERI}{\bkmkend AAAAAAAERI}
00308     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERJ}{\bkmkend AAAAAAAERJ}
00309     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERM}{\bkmkend AAAAAAAERM}
00310     \par
{\bkmkstart AAAAAAAERO}{\bkmkend AAAAAAAERO}
00311     {\cf20 // Test with repeated characters}\par
{\bkmkstart AAAAAAAERQ}{\bkmkend AAAAAAAERQ}
00312     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAERS}{\bkmkend AAAAAAAERS}
00313     EXPECT_NE(repeated.find({\cf23 'a'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERV}{\bkmkend AAAAAAAERV}
00314     EXPECT_NE(repeated.find({\cf22 "aa"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERW}{\bkmkend AAAAAAAERW}
00315     EXPECT_EQ(repeated.find({\cf23 'b'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAERY}{\bkmkend AAAAAAAERY}
00316 \}\par
{\bkmkstart AAAAAAAESA}{\bkmkend AAAAAAAESA}
00317 \par
{\bkmkstart AAAAAAAESC}{\bkmkend AAAAAAAESC}
00322 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewRemovePrefixSuffixEdgeCases) \{\par
{\bkmkstart AAAAAAAESF}{\bkmkend AAAAAAAESF}
00323     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAESH}{\bkmkend AAAAAAAESH}
00324     \par
{\bkmkstart AAAAAAAESI}{\bkmkend AAAAAAAESI}
00325     {\cf20 // Test remove_prefix with zero}\par
{\bkmkstart AAAAAAAESJ}{\bkmkend AAAAAAAESJ}
00326     sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAESK}{\bkmkend AAAAAAAESK}
00327     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAESN}{\bkmkend AAAAAAAESN}
00328     \par
{\bkmkstart AAAAAAAESP}{\bkmkend AAAAAAAESP}
00329     {\cf20 // Test remove_suffix with zero}\par
{\bkmkstart AAAAAAAESR}{\bkmkend AAAAAAAESR}
00330     sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAEST}{\bkmkend AAAAAAAEST}
00331     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAESV}{\bkmkend AAAAAAAESV}
00332     \par
{\bkmkstart AAAAAAAESW}{\bkmkend AAAAAAAESW}
00333     {\cf20 // Test remove_prefix with full length}\par
{\bkmkstart AAAAAAAESY}{\bkmkend AAAAAAAESY}
00334     sv.remove_prefix(sv.size());\par
{\bkmkstart AAAAAAAESZ}{\bkmkend AAAAAAAESZ}
00335     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAAETB}{\bkmkend AAAAAAAETB}
00336     \par
{\bkmkstart AAAAAAAETD}{\bkmkend AAAAAAAETD}
00337     {\cf20 // Reset and test remove_suffix with full length}\par
{\bkmkstart AAAAAAAETE}{\bkmkend AAAAAAAETE}
00338     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAETG}{\bkmkend AAAAAAAETG}
00339     sv.remove_suffix(sv.size());\par
{\bkmkstart AAAAAAAETI}{\bkmkend AAAAAAAETI}
00340     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAAETK}{\bkmkend AAAAAAAETK}
00341     \par
{\bkmkstart AAAAAAAETL}{\bkmkend AAAAAAAETL}
00342     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAETM}{\bkmkend AAAAAAAETM}
00343     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAETP}{\bkmkend AAAAAAAETP}
00344     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAETQ}{\bkmkend AAAAAAAETQ}
00345     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAETU}{\bkmkend AAAAAAAETU}
00346     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAETW}{\bkmkend AAAAAAAETW}
00347 \}\par
{\bkmkstart AAAAAAAETX}{\bkmkend AAAAAAAETX}
00348 \par
{\bkmkstart AAAAAAAEUB}{\bkmkend AAAAAAAEUB}
00353 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewHashEdgeCases) \{\par
{\bkmkstart AAAAAAAEUF}{\bkmkend AAAAAAAEUF}
00354     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAEUI}{\bkmkend AAAAAAAEUI}
00355     \par
{\bkmkstart AAAAAAAEUJ}{\bkmkend AAAAAAAEUJ}
00356     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAEUK}{\bkmkend AAAAAAAEUK}
00357     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEUM}{\bkmkend AAAAAAAEUM}
00358     {\cf17 auto} empty_hash = hasher(empty_sv);\par
{\bkmkstart AAAAAAAEUO}{\bkmkend AAAAAAAEUO}
00359     EXPECT_EQ(empty_hash, hasher(empty_sv));\par
{\bkmkstart AAAAAAAEUS}{\bkmkend AAAAAAAEUS}
00360     \par
{\bkmkstart AAAAAAAEUT}{\bkmkend AAAAAAAEUT}
00361     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAAEUV}{\bkmkend AAAAAAAEUV}
00362     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAEUX}{\bkmkend AAAAAAAEUX}
00363     {\cf17 auto} single_hash = hasher(single_sv);\par
{\bkmkstart AAAAAAAEUZ}{\bkmkend AAAAAAAEUZ}
00364     EXPECT_NE(empty_hash, single_hash);\par
{\bkmkstart AAAAAAAEVB}{\bkmkend AAAAAAAEVB}
00365     \par
{\bkmkstart AAAAAAAEVC}{\bkmkend AAAAAAAEVC}
00366     {\cf20 // Test same content different sources}\par
{\bkmkstart AAAAAAAEVE}{\bkmkend AAAAAAAEVE}
00367     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEVH}{\bkmkend AAAAAAAEVH}
00368     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAEVL}{\bkmkend AAAAAAAEVL}
00369     std::string_view sv1(str);\par
{\bkmkstart AAAAAAAEVN}{\bkmkend AAAAAAAEVN}
00370     std::string_view sv2(cstr);\par
{\bkmkstart AAAAAAAEVQ}{\bkmkend AAAAAAAEVQ}
00371     \par
{\bkmkstart AAAAAAAEVS}{\bkmkend AAAAAAAEVS}
00372     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAEVU}{\bkmkend AAAAAAAEVU}
00373     \par
{\bkmkstart AAAAAAAEVV}{\bkmkend AAAAAAAEVV}
00374     {\cf20 // Test different content same length}\par
{\bkmkstart AAAAAAAEVW}{\bkmkend AAAAAAAEVW}
00375     std::string_view sv3({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAEVX}{\bkmkend AAAAAAAEVX}
00376     std::string_view sv4({\cf22 "World"});\par
{\bkmkstart AAAAAAAEVY}{\bkmkend AAAAAAAEVY}
00377     EXPECT_NE(hasher(sv3), hasher(sv4));\par
{\bkmkstart AAAAAAAEVZ}{\bkmkend AAAAAAAEVZ}
00378 \}\par
{\bkmkstart AAAAAAAEWA}{\bkmkend AAAAAAAEWA}
00379 \par
{\bkmkstart AAAAAAAEWB}{\bkmkend AAAAAAAEWB}
00384 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewIteratorEdgeCases) \{\par
{\bkmkstart AAAAAAAEWC}{\bkmkend AAAAAAAEWC}
00385     {\cf20 // Test empty string_view iterators}\par
{\bkmkstart AAAAAAAEWD}{\bkmkend AAAAAAAEWD}
00386     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAEWE}{\bkmkend AAAAAAAEWE}
00387     EXPECT_EQ(empty_sv.begin(), empty_sv.end());\par
{\bkmkstart AAAAAAAEWF}{\bkmkend AAAAAAAEWF}
00388     EXPECT_EQ(empty_sv.cbegin(), empty_sv.cend());\par
{\bkmkstart AAAAAAAEWG}{\bkmkend AAAAAAAEWG}
00389     EXPECT_EQ(empty_sv.rbegin(), empty_sv.rend());\par
{\bkmkstart AAAAAAAEWI}{\bkmkend AAAAAAAEWI}
00390     EXPECT_EQ(empty_sv.crbegin(), empty_sv.crend());\par
{\bkmkstart AAAAAAAEWL}{\bkmkend AAAAAAAEWL}
00391     \par
{\bkmkstart AAAAAAAEWN}{\bkmkend AAAAAAAEWN}
00392     {\cf20 // Test single character iterators}\par
{\bkmkstart AAAAAAAEWO}{\bkmkend AAAAAAAEWO}
00393     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAEWQ}{\bkmkend AAAAAAAEWQ}
00394     EXPECT_NE(single_sv.begin(), single_sv.end());\par
{\bkmkstart AAAAAAAEWR}{\bkmkend AAAAAAAEWR}
00395     EXPECT_EQ(single_sv.begin() + 1, single_sv.end());\par
{\bkmkstart AAAAAAAEWS}{\bkmkend AAAAAAAEWS}
00396     EXPECT_EQ(*single_sv.begin(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAEWU}{\bkmkend AAAAAAAEWU}
00397     EXPECT_EQ(*(single_sv.end() - 1), {\cf23 'A'});\par
{\bkmkstart AAAAAAAEWX}{\bkmkend AAAAAAAEWX}
00398     \par
{\bkmkstart AAAAAAAEWZ}{\bkmkend AAAAAAAEWZ}
00399     {\cf20 // Test reverse iterators}\par
{\bkmkstart AAAAAAAEXB}{\bkmkend AAAAAAAEXB}
00400     std::string_view sv({\cf22 "ABC"});\par
{\bkmkstart AAAAAAAEXD}{\bkmkend AAAAAAAEXD}
00401     {\cf17 auto} rit = sv.rbegin();\par
{\bkmkstart AAAAAAAEXG}{\bkmkend AAAAAAAEXG}
00402     EXPECT_EQ(*rit, {\cf23 'C'});\par
{\bkmkstart AAAAAAAEXI}{\bkmkend AAAAAAAEXI}
00403     ++rit;\par
{\bkmkstart AAAAAAAEXJ}{\bkmkend AAAAAAAEXJ}
00404     EXPECT_EQ(*rit, {\cf23 'B'});\par
{\bkmkstart AAAAAAAEXL}{\bkmkend AAAAAAAEXL}
00405     ++rit;\par
{\bkmkstart AAAAAAAEXN}{\bkmkend AAAAAAAEXN}
00406     EXPECT_EQ(*rit, {\cf23 'A'});\par
{\bkmkstart AAAAAAAEXP}{\bkmkend AAAAAAAEXP}
00407     ++rit;\par
{\bkmkstart AAAAAAAEXR}{\bkmkend AAAAAAAEXR}
00408     EXPECT_EQ(rit, sv.rend());\par
{\bkmkstart AAAAAAAEXS}{\bkmkend AAAAAAAEXS}
00409 \}\par
{\bkmkstart AAAAAAAEXT}{\bkmkend AAAAAAAEXT}
00410 \par
{\bkmkstart AAAAAAAEXV}{\bkmkend AAAAAAAEXV}
00415 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewConstexprEdgeCases) \{\par
{\bkmkstart AAAAAAAEXY}{\bkmkend AAAAAAAEXY}
00416     {\cf20 // Test constexpr with empty string}\par
{\bkmkstart AAAAAAAEXZ}{\bkmkend AAAAAAAEXZ}
00417     {\cf17 constexpr} std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAEYA}{\bkmkend AAAAAAAEYA}
00418     {\cf17 static_assert}(empty_sv.empty());\par
{\bkmkstart AAAAAAAEYB}{\bkmkend AAAAAAAEYB}
00419     {\cf17 static_assert}(empty_sv.size() == 0);\par
{\bkmkstart AAAAAAAEYD}{\bkmkend AAAAAAAEYD}
00420     \par
{\bkmkstart AAAAAAAEYE}{\bkmkend AAAAAAAEYE}
00421     {\cf20 // Test constexpr with single character}\par
{\bkmkstart AAAAAAAEYG}{\bkmkend AAAAAAAEYG}
00422     {\cf17 constexpr} std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAEYI}{\bkmkend AAAAAAAEYI}
00423     {\cf17 static_assert}(single_sv.size() == 1);\par
{\bkmkstart AAAAAAAEYK}{\bkmkend AAAAAAAEYK}
00424     {\cf17 static_assert}(single_sv[0] == {\cf23 'A'});\par
{\bkmkstart AAAAAAAEYM}{\bkmkend AAAAAAAEYM}
00425     \par
{\bkmkstart AAAAAAAEYN}{\bkmkend AAAAAAAEYN}
00426     {\cf20 // Test constexpr find operations}\par
{\bkmkstart AAAAAAAEYP}{\bkmkend AAAAAAAEYP}
00427     {\cf17 constexpr} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAEYS}{\bkmkend AAAAAAAEYS}
00428     {\cf17 constexpr} {\cf18 size_t} pos1 = sv.find({\cf22 "World"});\par
{\bkmkstart AAAAAAAEYU}{\bkmkend AAAAAAAEYU}
00429     {\cf17 static_assert}(pos1 == 7);\par
{\bkmkstart AAAAAAAEYW}{\bkmkend AAAAAAAEYW}
00430     \par
{\bkmkstart AAAAAAAEYY}{\bkmkend AAAAAAAEYY}
00431     {\cf17 constexpr} {\cf18 size_t} pos2 = sv.find({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAEZA}{\bkmkend AAAAAAAEZA}
00432     {\cf17 static_assert}(pos2 == std::string_view::npos);\par
{\bkmkstart AAAAAAAEZE}{\bkmkend AAAAAAAEZE}
00433     \par
{\bkmkstart AAAAAAAEZF}{\bkmkend AAAAAAAEZF}
00434     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAEZG}{\bkmkend AAAAAAAEZG}
00435     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAAEZI}{\bkmkend AAAAAAAEZI}
00436     {\cf17 static_assert}(sv.find({\cf22 "World!"}) == 7);\par
{\bkmkstart AAAAAAAEZK}{\bkmkend AAAAAAAEZK}
00437     {\cf17 static_assert}(sv.find({\cf22 "World"}) == 7);\par
{\bkmkstart AAAAAAAEZN}{\bkmkend AAAAAAAEZN}
00438     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAAEZO}{\bkmkend AAAAAAAEZO}
00439     \par
{\bkmkstart AAAAAAAEZP}{\bkmkend AAAAAAAEZP}
00440     {\cf20 // Test constexpr contains using find}\par
{\bkmkstart AAAAAAAEZQ}{\bkmkend AAAAAAAEZQ}
00441     {\cf17 static_assert}(sv.find({\cf22 "lo, Wo"}) != std::string_view::npos);\par
{\bkmkstart AAAAAAAEZR}{\bkmkend AAAAAAAEZR}
00442     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAEZV}{\bkmkend AAAAAAAEZV}
00443     \par
{\bkmkstart AAAAAAAEZW}{\bkmkend AAAAAAAEZW}
00444     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAEZY}{\bkmkend AAAAAAAEZY}
00445     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAFAA}{\bkmkend AAAAAAAFAA}
00446     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAFAC}{\bkmkend AAAAAAAFAC}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAFAE}{\bkmkend AAAAAAAFAE}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAFAI}{\bkmkend AAAAAAAFAI}
00449     EXPECT_EQ(pos1, 7);\par
{\bkmkstart AAAAAAAFAJ}{\bkmkend AAAAAAAFAJ}
00450     EXPECT_EQ(pos2, std::string_view::npos);\par
{\bkmkstart AAAAAAAFAM}{\bkmkend AAAAAAAFAM}
00451     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAFAO}{\bkmkend AAAAAAAFAO}
00452     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAFAQ}{\bkmkend AAAAAAAFAQ}
00453     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFAS}{\bkmkend AAAAAAAFAS}
00454     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAFAV}{\bkmkend AAAAAAAFAV}
00455 \}\par
{\bkmkstart AAAAAAAFAW}{\bkmkend AAAAAAAFAW}
00456 \par
{\bkmkstart AAAAAAAFAZ}{\bkmkend AAAAAAAFAZ}
00461 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAGS" }{}}{\fldrslt {\cs37\ul\cf2 TEST_F}}}
(StringViewAdvancedCoverageTest, TestStringViewPerformanceEdgeCases) \{\par
{\bkmkstart AAAAAAAFBD}{\bkmkend AAAAAAAFBD}
00462     {\cf20 // Test with very large string}\par
{\bkmkstart AAAAAAAFBF}{\bkmkend AAAAAAAFBF}
00463     std::string large_string(100000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAFBI}{\bkmkend AAAAAAAFBI}
00464     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAFBL}{\bkmkend AAAAAAAFBL}
00465     \par
{\bkmkstart AAAAAAAFBN}{\bkmkend AAAAAAAFBN}
00466     {\cf20 // Test operations that should be fast}\par
{\bkmkstart AAAAAAAFBO}{\bkmkend AAAAAAAFBO}
00467     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFCH}{\bkmkend AAAAAAAFCH}
00468     \par
{\bkmkstart AAAAAAAFCI}{\bkmkend AAAAAAAFCI}
00469     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAFCJ}{\bkmkend AAAAAAAFCJ}
00470     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAAFCL}{\bkmkend AAAAAAAFCL}
00471         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAFCM}{\bkmkend AAAAAAAFCM}
00472         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAFCN}{\bkmkend AAAAAAAFCN}
00473         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAFCO}{\bkmkend AAAAAAAFCO}
00474         {\cf17 auto} starts = sv.find({\cf22 "AAAA"}) == 0;\par
{\bkmkstart AAAAAAAFCP}{\bkmkend AAAAAAAFCP}
00475         {\cf17 auto} ends = sv.find({\cf22 "AAAA"}) == (sv.size() - 4);\par
{\bkmkstart AAAAAAAFCQ}{\bkmkend AAAAAAAFCQ}
00476         (void)sub; (void)pos; (void)contains; (void)starts; (void)ends;\par
{\bkmkstart AAAAAAAFCR}{\bkmkend AAAAAAAFCR}
00477     \}\par
{\bkmkstart AAAAAAAFCS}{\bkmkend AAAAAAAFCS}
00478     \par
{\bkmkstart AAAAAAAFCT}{\bkmkend AAAAAAAFCT}
00479     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAFCU}{\bkmkend AAAAAAAFCU}
00480     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAFCV}{\bkmkend AAAAAAAFCV}
00481     \par
{\bkmkstart AAAAAAAFCW}{\bkmkend AAAAAAAFCW}
00482     {\cf20 // Should complete quickly}\par
{\bkmkstart AAAAAAAFCX}{\bkmkend AAAAAAAFCX}
00483     EXPECT_LT(duration.count(), 100000); {\cf20 // Less than 0.1 second}\par
{\bkmkstart AAAAAAAFCY}{\bkmkend AAAAAAAFCY}
00484 \}\par
{\bkmkstart AAAAAAAFCZ}{\bkmkend AAAAAAAFCZ}
00485 \par
{\bkmkstart AAAAAAAFDA}{\bkmkend AAAAAAAFDA}
00486 \} {\cf20 // namespace}\par
}
}