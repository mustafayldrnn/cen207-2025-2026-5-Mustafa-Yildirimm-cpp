{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_advanced_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\bkmkstart AAAAAAAFZV}
{\bkmkend AAAAAAAFZV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZW" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGAQ}{\bkmkend AAAAAAAGAQ}
00001 \par
{\bkmkstart AAAAAAAGAR}{\bkmkend AAAAAAAGAR}
00008 \par
{\bkmkstart AAAAAAAGAS}{\bkmkend AAAAAAAGAS}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAGBG}{\bkmkend AAAAAAAGBG}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAAGBN}{\bkmkend AAAAAAAGBN}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAGBP}{\bkmkend AAAAAAAGBP}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAGCL}{\bkmkend AAAAAAAGCL}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAGCX}{\bkmkend AAAAAAAGCX}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAGDE}{\bkmkend AAAAAAAGDE}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAGDH}{\bkmkend AAAAAAAGDH}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAGDM}{\bkmkend AAAAAAAGDM}
00017 {\cf21 #include <sstream>}\par
{\bkmkstart AAAAAAAGEA}{\bkmkend AAAAAAAGEA}
00018 {\cf21 #include <iomanip>}\par
{\bkmkstart AAAAAAAGEL}{\bkmkend AAAAAAAGEL}
00019 \par
{\bkmkstart AAAAAAAGEM}{\bkmkend AAAAAAAGEM}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAGEN}{\bkmkend AAAAAAAGEN}
00021 \par
{\bkmkstart AAAAAAAGEO}{\bkmkend AAAAAAAGEO}
00026 {\cf17 class }StringViewAdvancedCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAGEP}{\bkmkend AAAAAAAGEP}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAAGEQ}{\bkmkend AAAAAAAGEQ}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGEW}{\bkmkend AAAAAAAGEW}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAGEX}{\bkmkend AAAAAAAGEX}
00030     \}\par
{\bkmkstart AAAAAAAGEY}{\bkmkend AAAAAAAGEY}
00031     \par
{\bkmkstart AAAAAAAGEZ}{\bkmkend AAAAAAAGEZ}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAGFG}{\bkmkend AAAAAAAGFG}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAGFH}{\bkmkend AAAAAAAGFH}
00034     \}\par
{\bkmkstart AAAAAAAGFI}{\bkmkend AAAAAAAGFI}
00035 \};\par
{\bkmkstart AAAAAAAGFK}{\bkmkend AAAAAAAGFK}
00036 \par
{\bkmkstart AAAAAAAGFM}{\bkmkend AAAAAAAGFM}
00041 TEST_F(StringViewAdvancedCoverageTest, TestStringViewComparisonOperators) \{\par
{\bkmkstart AAAAAAAGFU}{\bkmkend AAAAAAAGFU}
00042     std::string_view sv1({\cf22 "abc"});\par
{\bkmkstart AAAAAAAGFV}{\bkmkend AAAAAAAGFV}
00043     std::string_view sv2({\cf22 "def"});\par
{\bkmkstart AAAAAAAGFW}{\bkmkend AAAAAAAGFW}
00044     std::string_view sv3({\cf22 "abc"});\par
{\bkmkstart AAAAAAAGFZ}{\bkmkend AAAAAAAGFZ}
00045     \par
{\bkmkstart AAAAAAAGGC}{\bkmkend AAAAAAAGGC}
00046     {\cf20 // Test operator==}\par
{\bkmkstart AAAAAAAGGD}{\bkmkend AAAAAAAGGD}
00047     EXPECT_TRUE(sv1 == sv3);\par
{\bkmkstart AAAAAAAGGG}{\bkmkend AAAAAAAGGG}
00048     EXPECT_FALSE(sv1 == sv2);\par
{\bkmkstart AAAAAAAGGI}{\bkmkend AAAAAAAGGI}
00049     \par
{\bkmkstart AAAAAAAGGK}{\bkmkend AAAAAAAGGK}
00050     {\cf20 // Test operator!=}\par
{\bkmkstart AAAAAAAGGM}{\bkmkend AAAAAAAGGM}
00051     EXPECT_TRUE(sv1 != sv2);\par
{\bkmkstart AAAAAAAGGP}{\bkmkend AAAAAAAGGP}
00052     EXPECT_FALSE(sv1 != sv3);\par
{\bkmkstart AAAAAAAGGR}{\bkmkend AAAAAAAGGR}
00053     \par
{\bkmkstart AAAAAAAGGS}{\bkmkend AAAAAAAGGS}
00054     {\cf20 // Test operator<}\par
{\bkmkstart AAAAAAAGGU}{\bkmkend AAAAAAAGGU}
00055     EXPECT_TRUE(sv1 < sv2);\par
{\bkmkstart AAAAAAAGGW}{\bkmkend AAAAAAAGGW}
00056     EXPECT_FALSE(sv2 < sv1);\par
{\bkmkstart AAAAAAAGGY}{\bkmkend AAAAAAAGGY}
00057     EXPECT_FALSE(sv1 < sv3);\par
{\bkmkstart AAAAAAAGGZ}{\bkmkend AAAAAAAGGZ}
00058     \par
{\bkmkstart AAAAAAAGHA}{\bkmkend AAAAAAAGHA}
00059     {\cf20 // Test operator<=}\par
{\bkmkstart AAAAAAAGHB}{\bkmkend AAAAAAAGHB}
00060     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAAGHC}{\bkmkend AAAAAAAGHC}
00061     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAAGHD}{\bkmkend AAAAAAAGHD}
00062     EXPECT_FALSE(sv2 <= sv1);\par
{\bkmkstart AAAAAAAGHE}{\bkmkend AAAAAAAGHE}
00063     \par
{\bkmkstart AAAAAAAGHF}{\bkmkend AAAAAAAGHF}
00064     {\cf20 // Test operator>}\par
{\bkmkstart AAAAAAAGHG}{\bkmkend AAAAAAAGHG}
00065     EXPECT_TRUE(sv2 > sv1);\par
{\bkmkstart AAAAAAAGHJ}{\bkmkend AAAAAAAGHJ}
00066     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAAGHL}{\bkmkend AAAAAAAGHL}
00067     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAAGHN}{\bkmkend AAAAAAAGHN}
00068     \par
{\bkmkstart AAAAAAAGHO}{\bkmkend AAAAAAAGHO}
00069     {\cf20 // Test operator>=}\par
{\bkmkstart AAAAAAAGHQ}{\bkmkend AAAAAAAGHQ}
00070     EXPECT_TRUE(sv2 >= sv1);\par
{\bkmkstart AAAAAAAGHS}{\bkmkend AAAAAAAGHS}
00071     EXPECT_TRUE(sv1 >= sv3);\par
{\bkmkstart AAAAAAAGHT}{\bkmkend AAAAAAAGHT}
00072     EXPECT_FALSE(sv1 >= sv2);\par
{\bkmkstart AAAAAAAGHU}{\bkmkend AAAAAAAGHU}
00073     \par
{\bkmkstart AAAAAAAGHV}{\bkmkend AAAAAAAGHV}
00074     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAAGHW}{\bkmkend AAAAAAAGHW}
00075     std::string str = {\cf22 "abc"};\par
{\bkmkstart AAAAAAAGHX}{\bkmkend AAAAAAAGHX}
00076     {\cf17 const} {\cf18 char}* cstr = {\cf22 "abc"};\par
{\bkmkstart AAAAAAAGHY}{\bkmkend AAAAAAAGHY}
00077     \par
{\bkmkstart AAAAAAAGHZ}{\bkmkend AAAAAAAGHZ}
00078     EXPECT_TRUE(sv1 == str);\par
{\bkmkstart AAAAAAAGIA}{\bkmkend AAAAAAAGIA}
00079     EXPECT_TRUE(sv1 == cstr);\par
{\bkmkstart AAAAAAAGIB}{\bkmkend AAAAAAAGIB}
00080     EXPECT_TRUE(str == sv1);\par
{\bkmkstart AAAAAAAGIC}{\bkmkend AAAAAAAGIC}
00081     EXPECT_TRUE(cstr == sv1);\par
{\bkmkstart AAAAAAAGID}{\bkmkend AAAAAAAGID}
00082     \par
{\bkmkstart AAAAAAAGIE}{\bkmkend AAAAAAAGIE}
00083     EXPECT_TRUE(sv1 != {\cf22 "def"});\par
{\bkmkstart AAAAAAAGIF}{\bkmkend AAAAAAAGIF}
00084     EXPECT_TRUE({\cf22 "def"} != sv1);\par
{\bkmkstart AAAAAAAGIG}{\bkmkend AAAAAAAGIG}
00085 \}\par
{\bkmkstart AAAAAAAGIH}{\bkmkend AAAAAAAGIH}
00086 \par
{\bkmkstart AAAAAAAGII}{\bkmkend AAAAAAAGII}
00091 TEST_F(StringViewAdvancedCoverageTest, TestStringViewStreamOutput) \{\par
{\bkmkstart AAAAAAAGIJ}{\bkmkend AAAAAAAGIJ}
00092     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGIK}{\bkmkend AAAAAAAGIK}
00093     std::ostringstream oss;\par
{\bkmkstart AAAAAAAGIL}{\bkmkend AAAAAAAGIL}
00094     \par
{\bkmkstart AAAAAAAGIM}{\bkmkend AAAAAAAGIM}
00095     {\cf20 // Test basic stream output}\par
{\bkmkstart AAAAAAAGIN}{\bkmkend AAAAAAAGIN}
00096     oss << sv;\par
{\bkmkstart AAAAAAAGIO}{\bkmkend AAAAAAAGIO}
00097     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGIP}{\bkmkend AAAAAAAGIP}
00098     \par
{\bkmkstart AAAAAAAGIQ}{\bkmkend AAAAAAAGIQ}
00099     {\cf20 // Test with multiple string_views}\par
{\bkmkstart AAAAAAAGIR}{\bkmkend AAAAAAAGIR}
00100     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAAGIS}{\bkmkend AAAAAAAGIS}
00101     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGIT}{\bkmkend AAAAAAAGIT}
00102     std::string_view sv2({\cf22 ", "});\par
{\bkmkstart AAAAAAAGIU}{\bkmkend AAAAAAAGIU}
00103     std::string_view sv3({\cf22 "World!"});\par
{\bkmkstart AAAAAAAGIV}{\bkmkend AAAAAAAGIV}
00104     oss << sv1 << sv2 << sv3;\par
{\bkmkstart AAAAAAAGIW}{\bkmkend AAAAAAAGIW}
00105     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGIX}{\bkmkend AAAAAAAGIX}
00106     \par
{\bkmkstart AAAAAAAGIY}{\bkmkend AAAAAAAGIY}
00107     {\cf20 // Test with formatting}\par
{\bkmkstart AAAAAAAGIZ}{\bkmkend AAAAAAAGIZ}
00108     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAAGJA}{\bkmkend AAAAAAAGJA}
00109     oss << std::setw(20) << sv;\par
{\bkmkstart AAAAAAAGJB}{\bkmkend AAAAAAAGJB}
00110     EXPECT_EQ(oss.str().length(), 20);\par
{\bkmkstart AAAAAAAGJC}{\bkmkend AAAAAAAGJC}
00111     EXPECT_TRUE(oss.str().find({\cf22 "Hello, World!"}) != std::string::npos);\par
{\bkmkstart AAAAAAAGJD}{\bkmkend AAAAAAAGJD}
00112 \}\par
{\bkmkstart AAAAAAAGJE}{\bkmkend AAAAAAAGJE}
00113 \par
{\bkmkstart AAAAAAAGJF}{\bkmkend AAAAAAAGJF}
00118 TEST_F(StringViewAdvancedCoverageTest, TestStringViewConstMethods) \{\par
{\bkmkstart AAAAAAAGJG}{\bkmkend AAAAAAAGJG}
00119     {\cf17 const} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGJH}{\bkmkend AAAAAAAGJH}
00120     \par
{\bkmkstart AAAAAAAGJI}{\bkmkend AAAAAAAGJI}
00121     {\cf20 // Test const access methods}\par
{\bkmkstart AAAAAAAGJJ}{\bkmkend AAAAAAAGJJ}
00122     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJK}{\bkmkend AAAAAAAGJK}
00123     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJL}{\bkmkend AAAAAAAGJL}
00124     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJM}{\bkmkend AAAAAAAGJM}
00125     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAAGJN}{\bkmkend AAAAAAAGJN}
00126     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAAGJO}{\bkmkend AAAAAAAGJO}
00127     \par
{\bkmkstart AAAAAAAGJP}{\bkmkend AAAAAAAGJP}
00128     {\cf20 // Test const size methods}\par
{\bkmkstart AAAAAAAGJQ}{\bkmkend AAAAAAAGJQ}
00129     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAAGJR}{\bkmkend AAAAAAAGJR}
00130     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAAGJS}{\bkmkend AAAAAAAGJS}
00131     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAAGJT}{\bkmkend AAAAAAAGJT}
00132     \par
{\bkmkstart AAAAAAAGJU}{\bkmkend AAAAAAAGJU}
00133     {\cf20 // Test const iterator methods}\par
{\bkmkstart AAAAAAAGJV}{\bkmkend AAAAAAAGJV}
00134     EXPECT_NE(sv.begin(), sv.end());\par
{\bkmkstart AAAAAAAGJW}{\bkmkend AAAAAAAGJW}
00135     EXPECT_NE(sv.cbegin(), sv.cend());\par
{\bkmkstart AAAAAAAGJX}{\bkmkend AAAAAAAGJX}
00136     EXPECT_NE(sv.rbegin(), sv.rend());\par
{\bkmkstart AAAAAAAGJY}{\bkmkend AAAAAAAGJY}
00137     EXPECT_NE(sv.crbegin(), sv.crend());\par
{\bkmkstart AAAAAAAGJZ}{\bkmkend AAAAAAAGJZ}
00138     \par
{\bkmkstart AAAAAAAGKA}{\bkmkend AAAAAAAGKA}
00139     {\cf20 // Test const find methods}\par
{\bkmkstart AAAAAAAGKB}{\bkmkend AAAAAAAGKB}
00140     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGKC}{\bkmkend AAAAAAAGKC}
00141     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGKD}{\bkmkend AAAAAAAGKD}
00142     EXPECT_EQ(sv.rfind({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAGKE}{\bkmkend AAAAAAAGKE}
00143     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1);\par
{\bkmkstart AAAAAAAGKF}{\bkmkend AAAAAAAGKF}
00144     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 8);\par
{\bkmkstart AAAAAAAGKG}{\bkmkend AAAAAAAGKG}
00145     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAAGKH}{\bkmkend AAAAAAAGKH}
00146     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 11);\par
{\bkmkstart AAAAAAAGKI}{\bkmkend AAAAAAAGKI}
00147     \par
{\bkmkstart AAAAAAAGKJ}{\bkmkend AAAAAAAGKJ}
00148     {\cf20 // Test const contains methods using find}\par
{\bkmkstart AAAAAAAGKK}{\bkmkend AAAAAAAGKK}
00149     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGKL}{\bkmkend AAAAAAAGKL}
00150     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGKM}{\bkmkend AAAAAAAGKM}
00151     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGKN}{\bkmkend AAAAAAAGKN}
00152     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAGKO}{\bkmkend AAAAAAAGKO}
00153 \}\par
{\bkmkstart AAAAAAAGKP}{\bkmkend AAAAAAAGKP}
00154 \par
{\bkmkstart AAAAAAAGKQ}{\bkmkend AAAAAAAGKQ}
00159 TEST_F(StringViewAdvancedCoverageTest, TestStringViewSubstrEdgeCases) \{\par
{\bkmkstart AAAAAAAGKR}{\bkmkend AAAAAAAGKR}
00160     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGKS}{\bkmkend AAAAAAAGKS}
00161     \par
{\bkmkstart AAAAAAAGKT}{\bkmkend AAAAAAAGKT}
00162     {\cf20 // Test substr with zero length}\par
{\bkmkstart AAAAAAAGKU}{\bkmkend AAAAAAAGKU}
00163     std::string_view sub1 = sv.substr(0, 0);\par
{\bkmkstart AAAAAAAGKV}{\bkmkend AAAAAAAGKV}
00164     EXPECT_TRUE(sub1.empty());\par
{\bkmkstart AAAAAAAGKW}{\bkmkend AAAAAAAGKW}
00165     EXPECT_EQ(sub1.size(), 0);\par
{\bkmkstart AAAAAAAGKX}{\bkmkend AAAAAAAGKX}
00166     \par
{\bkmkstart AAAAAAAGKY}{\bkmkend AAAAAAAGKY}
00167     {\cf20 // Test substr with length beyond string}\par
{\bkmkstart AAAAAAAGKZ}{\bkmkend AAAAAAAGKZ}
00168     std::string_view sub2 = sv.substr(10, 100);\par
{\bkmkstart AAAAAAAGLA}{\bkmkend AAAAAAAGLA}
00169     EXPECT_EQ(sub2, {\cf22 "d!"});\par
{\bkmkstart AAAAAAAGLB}{\bkmkend AAAAAAAGLB}
00170     EXPECT_EQ(sub2.size(), 3);\par
{\bkmkstart AAAAAAAGLC}{\bkmkend AAAAAAAGLC}
00171     \par
{\bkmkstart AAAAAAAGLD}{\bkmkend AAAAAAAGLD}
00172     {\cf20 // Test substr at end of string}\par
{\bkmkstart AAAAAAAGLE}{\bkmkend AAAAAAAGLE}
00173     std::string_view sub3 = sv.substr(12, 1);\par
{\bkmkstart AAAAAAAGLF}{\bkmkend AAAAAAAGLF}
00174     EXPECT_EQ(sub3, {\cf22 "!"});\par
{\bkmkstart AAAAAAAGLG}{\bkmkend AAAAAAAGLG}
00175     EXPECT_EQ(sub3.size(), 1);\par
{\bkmkstart AAAAAAAGLH}{\bkmkend AAAAAAAGLH}
00176     \par
{\bkmkstart AAAAAAAGLI}{\bkmkend AAAAAAAGLI}
00177     {\cf20 // Test substr with npos}\par
{\bkmkstart AAAAAAAGLJ}{\bkmkend AAAAAAAGLJ}
00178     std::string_view sub4 = sv.substr(std::string_view::npos);\par
{\bkmkstart AAAAAAAGLK}{\bkmkend AAAAAAAGLK}
00179     EXPECT_TRUE(sub4.empty());\par
{\bkmkstart AAAAAAAGLL}{\bkmkend AAAAAAAGLL}
00180     \par
{\bkmkstart AAAAAAAGLM}{\bkmkend AAAAAAAGLM}
00181     {\cf20 // Test substr with very large position}\par
{\bkmkstart AAAAAAAGLN}{\bkmkend AAAAAAAGLN}
00182     std::string_view sub5 = sv.substr(1000);\par
{\bkmkstart AAAAAAAGLO}{\bkmkend AAAAAAAGLO}
00183     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAAGLP}{\bkmkend AAAAAAAGLP}
00184 \}\par
{\bkmkstart AAAAAAAGLQ}{\bkmkend AAAAAAAGLQ}
00185 \par
{\bkmkstart AAAAAAAGLR}{\bkmkend AAAAAAAGLR}
00190 TEST_F(StringViewAdvancedCoverageTest, TestStringViewFindEdgeCases) \{\par
{\bkmkstart AAAAAAAGLS}{\bkmkend AAAAAAAGLS}
00191     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGLT}{\bkmkend AAAAAAAGLT}
00192     \par
{\bkmkstart AAAAAAAGLU}{\bkmkend AAAAAAAGLU}
00193     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAAGLV}{\bkmkend AAAAAAAGLV}
00194     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGLW}{\bkmkend AAAAAAAGLW}
00195     EXPECT_EQ(empty_sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGLX}{\bkmkend AAAAAAAGLX}
00196     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGLY}{\bkmkend AAAAAAAGLY}
00197     \par
{\bkmkstart AAAAAAAGLZ}{\bkmkend AAAAAAAGLZ}
00198     {\cf20 // Test find with position beyond string}\par
{\bkmkstart AAAAAAAGMA}{\bkmkend AAAAAAAGMA}
00199     EXPECT_EQ(sv.find({\cf23 'H'}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAAGMB}{\bkmkend AAAAAAAGMB}
00200     EXPECT_EQ(sv.find({\cf22 "Hello"}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAAGMC}{\bkmkend AAAAAAAGMC}
00201     \par
{\bkmkstart AAAAAAAGMD}{\bkmkend AAAAAAAGMD}
00202     {\cf20 // Test find with empty search string}\par
{\bkmkstart AAAAAAAGME}{\bkmkend AAAAAAAGME}
00203     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAGMF}{\bkmkend AAAAAAAGMF}
00204     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAAGMG}{\bkmkend AAAAAAAGMG}
00205     \par
{\bkmkstart AAAAAAAGMH}{\bkmkend AAAAAAAGMH}
00206     {\cf20 // Test find with single character at boundaries}\par
{\bkmkstart AAAAAAAGMI}{\bkmkend AAAAAAAGMI}
00207     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGMJ}{\bkmkend AAAAAAAGMJ}
00208     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAGMK}{\bkmkend AAAAAAAGMK}
00209     \par
{\bkmkstart AAAAAAAGML}{\bkmkend AAAAAAAGML}
00210     {\cf20 // Test find with repeated characters}\par
{\bkmkstart AAAAAAAGMM}{\bkmkend AAAAAAAGMM}
00211     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAGMN}{\bkmkend AAAAAAAGMN}
00212     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAAGMO}{\bkmkend AAAAAAAGMO}
00213     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAAGMP}{\bkmkend AAAAAAAGMP}
00214     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAAGMQ}{\bkmkend AAAAAAAGMQ}
00215     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAAGMR}{\bkmkend AAAAAAAGMR}
00216 \}\par
{\bkmkstart AAAAAAAGMS}{\bkmkend AAAAAAAGMS}
00217 \par
{\bkmkstart AAAAAAAGMT}{\bkmkend AAAAAAAGMT}
00222 TEST_F(StringViewAdvancedCoverageTest, TestStringViewCopyEdgeCases) \{\par
{\bkmkstart AAAAAAAGMU}{\bkmkend AAAAAAAGMU}
00223     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGMV}{\bkmkend AAAAAAAGMV}
00224     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAAGMW}{\bkmkend AAAAAAAGMW}
00225     \par
{\bkmkstart AAAAAAAGMX}{\bkmkend AAAAAAAGMX}
00226     {\cf20 // Test copy with zero length}\par
{\bkmkstart AAAAAAAGMY}{\bkmkend AAAAAAAGMY}
00227     {\cf18 size_t} copied = sv.copy(buffer, 0);\par
{\bkmkstart AAAAAAAGMZ}{\bkmkend AAAAAAAGMZ}
00228     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAAGNA}{\bkmkend AAAAAAAGNA}
00229     \par
{\bkmkstart AAAAAAAGNB}{\bkmkend AAAAAAAGNB}
00230     {\cf20 // Test copy with position beyond string}\par
{\bkmkstart AAAAAAAGNC}{\bkmkend AAAAAAAGNC}
00231     copied = sv.copy(buffer, 5, 100);\par
{\bkmkstart AAAAAAAGND}{\bkmkend AAAAAAAGND}
00232     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAAGNE}{\bkmkend AAAAAAAGNE}
00233     \par
{\bkmkstart AAAAAAAGNF}{\bkmkend AAAAAAAGNF}
00234     {\cf20 // Test copy with npos position}\par
{\bkmkstart AAAAAAAGNG}{\bkmkend AAAAAAAGNG}
00235     copied = sv.copy(buffer, 5, std::string_view::npos);\par
{\bkmkstart AAAAAAAGNH}{\bkmkend AAAAAAAGNH}
00236     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAAGNI}{\bkmkend AAAAAAAGNI}
00237     \par
{\bkmkstart AAAAAAAGNJ}{\bkmkend AAAAAAAGNJ}
00238     {\cf20 // Test copy with exact length}\par
{\bkmkstart AAAAAAAGNK}{\bkmkend AAAAAAAGNK}
00239     copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAAGNL}{\bkmkend AAAAAAAGNL}
00240     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAAGNM}{\bkmkend AAAAAAAGNM}
00241     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAGNN}{\bkmkend AAAAAAAGNN}
00242     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGNO}{\bkmkend AAAAAAAGNO}
00243     \par
{\bkmkstart AAAAAAAGNP}{\bkmkend AAAAAAAGNP}
00244     {\cf20 // Test copy with small buffer}\par
{\bkmkstart AAAAAAAGNQ}{\bkmkend AAAAAAAGNQ}
00245     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAAGNR}{\bkmkend AAAAAAAGNR}
00246     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAAGNS}{\bkmkend AAAAAAAGNS}
00247     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAAGNT}{\bkmkend AAAAAAAGNT}
00248     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAAGNU}{\bkmkend AAAAAAAGNU}
00249     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAAGNV}{\bkmkend AAAAAAAGNV}
00250 \}\par
{\bkmkstart AAAAAAAGNW}{\bkmkend AAAAAAAGNW}
00251 \par
{\bkmkstart AAAAAAAGNX}{\bkmkend AAAAAAAGNX}
00256 TEST_F(StringViewAdvancedCoverageTest, TestStringViewStartsWithEndsWithEdgeCases) \{\par
{\bkmkstart AAAAAAAGNY}{\bkmkend AAAAAAAGNY}
00257     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGNZ}{\bkmkend AAAAAAAGNZ}
00258     \par
{\bkmkstart AAAAAAAGOA}{\bkmkend AAAAAAAGOA}
00259     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAGOB}{\bkmkend AAAAAAAGOB}
00260     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGOC}{\bkmkend AAAAAAAGOC}
00261     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAGOD}{\bkmkend AAAAAAAGOD}
00262     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAGOE}{\bkmkend AAAAAAAGOE}
00263     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGOF}{\bkmkend AAAAAAAGOF}
00264     EXPECT_EQ(empty_sv.find({\cf22 "World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGOG}{\bkmkend AAAAAAAGOG}
00265     \par
{\bkmkstart AAAAAAAGOH}{\bkmkend AAAAAAAGOH}
00266     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAAGOI}{\bkmkend AAAAAAAGOI}
00267     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAGOJ}{\bkmkend AAAAAAAGOJ}
00268     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAAGOK}{\bkmkend AAAAAAAGOK}
00269     \par
{\bkmkstart AAAAAAAGOL}{\bkmkend AAAAAAAGOL}
00270     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAAGOM}{\bkmkend AAAAAAAGOM}
00271     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAGON}{\bkmkend AAAAAAAGON}
00272     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAAGOO}{\bkmkend AAAAAAAGOO}
00273     \par
{\bkmkstart AAAAAAAGOP}{\bkmkend AAAAAAAGOP}
00274     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAAGOQ}{\bkmkend AAAAAAAGOQ}
00275     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGOR}{\bkmkend AAAAAAAGOR}
00276     EXPECT_EQ(sv.find({\cf22 "Extra Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGOS}{\bkmkend AAAAAAAGOS}
00277     \par
{\bkmkstart AAAAAAAGOT}{\bkmkend AAAAAAAGOT}
00278     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAGOU}{\bkmkend AAAAAAAGOU}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAAGOV}{\bkmkend AAAAAAAGOV}
00280     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAAGOW}{\bkmkend AAAAAAAGOW}
00281     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGOX}{\bkmkend AAAAAAAGOX}
00282     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGOY}{\bkmkend AAAAAAAGOY}
00283 \}\par
{\bkmkstart AAAAAAAGOZ}{\bkmkend AAAAAAAGOZ}
00284 \par
{\bkmkstart AAAAAAAGPA}{\bkmkend AAAAAAAGPA}
00289 TEST_F(StringViewAdvancedCoverageTest, TestStringViewContainsEdgeCases) \{\par
{\bkmkstart AAAAAAAGPB}{\bkmkend AAAAAAAGPB}
00290     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGPC}{\bkmkend AAAAAAAGPC}
00291     \par
{\bkmkstart AAAAAAAGPD}{\bkmkend AAAAAAAGPD}
00292     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAGPE}{\bkmkend AAAAAAAGPE}
00293     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGPF}{\bkmkend AAAAAAAGPF}
00294     EXPECT_NE(empty_sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPG}{\bkmkend AAAAAAAGPG}
00295     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPH}{\bkmkend AAAAAAAGPH}
00296     \par
{\bkmkstart AAAAAAAGPI}{\bkmkend AAAAAAAGPI}
00297     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAAGPJ}{\bkmkend AAAAAAAGPJ}
00298     EXPECT_NE(sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPK}{\bkmkend AAAAAAAGPK}
00299     \par
{\bkmkstart AAAAAAAGPL}{\bkmkend AAAAAAAGPL}
00300     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAAGPM}{\bkmkend AAAAAAAGPM}
00301     EXPECT_NE(sv.find({\cf22 "Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPN}{\bkmkend AAAAAAAGPN}
00302     \par
{\bkmkstart AAAAAAAGPO}{\bkmkend AAAAAAAGPO}
00303     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAAGPP}{\bkmkend AAAAAAAGPP}
00304     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPQ}{\bkmkend AAAAAAAGPQ}
00305     \par
{\bkmkstart AAAAAAAGPR}{\bkmkend AAAAAAAGPR}
00306     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAAGPS}{\bkmkend AAAAAAAGPS}
00307     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPT}{\bkmkend AAAAAAAGPT}
00308     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPU}{\bkmkend AAAAAAAGPU}
00309     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPV}{\bkmkend AAAAAAAGPV}
00310     \par
{\bkmkstart AAAAAAAGPW}{\bkmkend AAAAAAAGPW}
00311     {\cf20 // Test with repeated characters}\par
{\bkmkstart AAAAAAAGPX}{\bkmkend AAAAAAAGPX}
00312     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAAGPY}{\bkmkend AAAAAAAGPY}
00313     EXPECT_NE(repeated.find({\cf23 'a'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGPZ}{\bkmkend AAAAAAAGPZ}
00314     EXPECT_NE(repeated.find({\cf22 "aa"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGQA}{\bkmkend AAAAAAAGQA}
00315     EXPECT_EQ(repeated.find({\cf23 'b'}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGQB}{\bkmkend AAAAAAAGQB}
00316 \}\par
{\bkmkstart AAAAAAAGQC}{\bkmkend AAAAAAAGQC}
00317 \par
{\bkmkstart AAAAAAAGQD}{\bkmkend AAAAAAAGQD}
00322 TEST_F(StringViewAdvancedCoverageTest, TestStringViewRemovePrefixSuffixEdgeCases) \{\par
{\bkmkstart AAAAAAAGQE}{\bkmkend AAAAAAAGQE}
00323     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGQF}{\bkmkend AAAAAAAGQF}
00324     \par
{\bkmkstart AAAAAAAGQG}{\bkmkend AAAAAAAGQG}
00325     {\cf20 // Test remove_prefix with zero}\par
{\bkmkstart AAAAAAAGQH}{\bkmkend AAAAAAAGQH}
00326     sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAGQI}{\bkmkend AAAAAAAGQI}
00327     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGQJ}{\bkmkend AAAAAAAGQJ}
00328     \par
{\bkmkstart AAAAAAAGQK}{\bkmkend AAAAAAAGQK}
00329     {\cf20 // Test remove_suffix with zero}\par
{\bkmkstart AAAAAAAGQL}{\bkmkend AAAAAAAGQL}
00330     sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAGQM}{\bkmkend AAAAAAAGQM}
00331     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGQN}{\bkmkend AAAAAAAGQN}
00332     \par
{\bkmkstart AAAAAAAGQO}{\bkmkend AAAAAAAGQO}
00333     {\cf20 // Test remove_prefix with full length}\par
{\bkmkstart AAAAAAAGQP}{\bkmkend AAAAAAAGQP}
00334     sv.remove_prefix(sv.size());\par
{\bkmkstart AAAAAAAGQQ}{\bkmkend AAAAAAAGQQ}
00335     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAAGQR}{\bkmkend AAAAAAAGQR}
00336     \par
{\bkmkstart AAAAAAAGQS}{\bkmkend AAAAAAAGQS}
00337     {\cf20 // Reset and test remove_suffix with full length}\par
{\bkmkstart AAAAAAAGQT}{\bkmkend AAAAAAAGQT}
00338     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAAGQU}{\bkmkend AAAAAAAGQU}
00339     sv.remove_suffix(sv.size());\par
{\bkmkstart AAAAAAAGQV}{\bkmkend AAAAAAAGQV}
00340     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAAGQW}{\bkmkend AAAAAAAGQW}
00341     \par
{\bkmkstart AAAAAAAGQX}{\bkmkend AAAAAAAGQX}
00342     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAAGQY}{\bkmkend AAAAAAAGQY}
00343     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGQZ}{\bkmkend AAAAAAAGQZ}
00344     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAAGRA}{\bkmkend AAAAAAAGRA}
00345     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAAGRB}{\bkmkend AAAAAAAGRB}
00346     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAGRC}{\bkmkend AAAAAAAGRC}
00347 \}\par
{\bkmkstart AAAAAAAGRD}{\bkmkend AAAAAAAGRD}
00348 \par
{\bkmkstart AAAAAAAGRE}{\bkmkend AAAAAAAGRE}
00353 TEST_F(StringViewAdvancedCoverageTest, TestStringViewHashEdgeCases) \{\par
{\bkmkstart AAAAAAAGRF}{\bkmkend AAAAAAAGRF}
00354     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAAGRG}{\bkmkend AAAAAAAGRG}
00355     \par
{\bkmkstart AAAAAAAGRH}{\bkmkend AAAAAAAGRH}
00356     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAAGRI}{\bkmkend AAAAAAAGRI}
00357     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGRJ}{\bkmkend AAAAAAAGRJ}
00358     {\cf17 auto} empty_hash = hasher(empty_sv);\par
{\bkmkstart AAAAAAAGRK}{\bkmkend AAAAAAAGRK}
00359     EXPECT_EQ(empty_hash, hasher(empty_sv));\par
{\bkmkstart AAAAAAAGRL}{\bkmkend AAAAAAAGRL}
00360     \par
{\bkmkstart AAAAAAAGRM}{\bkmkend AAAAAAAGRM}
00361     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAAGRN}{\bkmkend AAAAAAAGRN}
00362     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAGRO}{\bkmkend AAAAAAAGRO}
00363     {\cf17 auto} single_hash = hasher(single_sv);\par
{\bkmkstart AAAAAAAGRP}{\bkmkend AAAAAAAGRP}
00364     EXPECT_NE(empty_hash, single_hash);\par
{\bkmkstart AAAAAAAGRQ}{\bkmkend AAAAAAAGRQ}
00365     \par
{\bkmkstart AAAAAAAGRR}{\bkmkend AAAAAAAGRR}
00366     {\cf20 // Test same content different sources}\par
{\bkmkstart AAAAAAAGRS}{\bkmkend AAAAAAAGRS}
00367     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGRT}{\bkmkend AAAAAAAGRT}
00368     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAAGRU}{\bkmkend AAAAAAAGRU}
00369     std::string_view sv1(str);\par
{\bkmkstart AAAAAAAGRV}{\bkmkend AAAAAAAGRV}
00370     std::string_view sv2(cstr);\par
{\bkmkstart AAAAAAAGRW}{\bkmkend AAAAAAAGRW}
00371     \par
{\bkmkstart AAAAAAAGRX}{\bkmkend AAAAAAAGRX}
00372     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAAGRY}{\bkmkend AAAAAAAGRY}
00373     \par
{\bkmkstart AAAAAAAGRZ}{\bkmkend AAAAAAAGRZ}
00374     {\cf20 // Test different content same length}\par
{\bkmkstart AAAAAAAGSA}{\bkmkend AAAAAAAGSA}
00375     std::string_view sv3({\cf22 "Hello"});\par
{\bkmkstart AAAAAAAGSB}{\bkmkend AAAAAAAGSB}
00376     std::string_view sv4({\cf22 "World"});\par
{\bkmkstart AAAAAAAGSD}{\bkmkend AAAAAAAGSD}
00377     EXPECT_NE(hasher(sv3), hasher(sv4));\par
{\bkmkstart AAAAAAAGSF}{\bkmkend AAAAAAAGSF}
00378 \}\par
{\bkmkstart AAAAAAAGSG}{\bkmkend AAAAAAAGSG}
00379 \par
{\bkmkstart AAAAAAAGSH}{\bkmkend AAAAAAAGSH}
00384 TEST_F(StringViewAdvancedCoverageTest, TestStringViewIteratorEdgeCases) \{\par
{\bkmkstart AAAAAAAGSI}{\bkmkend AAAAAAAGSI}
00385     {\cf20 // Test empty string_view iterators}\par
{\bkmkstart AAAAAAAGSJ}{\bkmkend AAAAAAAGSJ}
00386     std::string_view empty_sv;\par
{\bkmkstart AAAAAAAGSK}{\bkmkend AAAAAAAGSK}
00387     EXPECT_EQ(empty_sv.begin(), empty_sv.end());\par
{\bkmkstart AAAAAAAGSL}{\bkmkend AAAAAAAGSL}
00388     EXPECT_EQ(empty_sv.cbegin(), empty_sv.cend());\par
{\bkmkstart AAAAAAAGSM}{\bkmkend AAAAAAAGSM}
00389     EXPECT_EQ(empty_sv.rbegin(), empty_sv.rend());\par
{\bkmkstart AAAAAAAGSN}{\bkmkend AAAAAAAGSN}
00390     EXPECT_EQ(empty_sv.crbegin(), empty_sv.crend());\par
{\bkmkstart AAAAAAAGSO}{\bkmkend AAAAAAAGSO}
00391     \par
{\bkmkstart AAAAAAAGSP}{\bkmkend AAAAAAAGSP}
00392     {\cf20 // Test single character iterators}\par
{\bkmkstart AAAAAAAGSQ}{\bkmkend AAAAAAAGSQ}
00393     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAGSR}{\bkmkend AAAAAAAGSR}
00394     EXPECT_NE(single_sv.begin(), single_sv.end());\par
{\bkmkstart AAAAAAAGSS}{\bkmkend AAAAAAAGSS}
00395     EXPECT_EQ(single_sv.begin() + 1, single_sv.end());\par
{\bkmkstart AAAAAAAGST}{\bkmkend AAAAAAAGST}
00396     EXPECT_EQ(*single_sv.begin(), {\cf23 'A'});\par
{\bkmkstart AAAAAAAGSU}{\bkmkend AAAAAAAGSU}
00397     EXPECT_EQ(*(single_sv.end() - 1), {\cf23 'A'});\par
{\bkmkstart AAAAAAAGSV}{\bkmkend AAAAAAAGSV}
00398     \par
{\bkmkstart AAAAAAAGSW}{\bkmkend AAAAAAAGSW}
00399     {\cf20 // Test reverse iterators}\par
{\bkmkstart AAAAAAAGTA}{\bkmkend AAAAAAAGTA}
00400     std::string_view sv({\cf22 "ABC"});\par
{\bkmkstart AAAAAAAGTB}{\bkmkend AAAAAAAGTB}
00401     {\cf17 auto} rit = sv.rbegin();\par
{\bkmkstart AAAAAAAGTC}{\bkmkend AAAAAAAGTC}
00402     EXPECT_EQ(*rit, {\cf23 'C'});\par
{\bkmkstart AAAAAAAGTD}{\bkmkend AAAAAAAGTD}
00403     ++rit;\par
{\bkmkstart AAAAAAAGTE}{\bkmkend AAAAAAAGTE}
00404     EXPECT_EQ(*rit, {\cf23 'B'});\par
{\bkmkstart AAAAAAAGTF}{\bkmkend AAAAAAAGTF}
00405     ++rit;\par
{\bkmkstart AAAAAAAGTG}{\bkmkend AAAAAAAGTG}
00406     EXPECT_EQ(*rit, {\cf23 'A'});\par
{\bkmkstart AAAAAAAGTH}{\bkmkend AAAAAAAGTH}
00407     ++rit;\par
{\bkmkstart AAAAAAAGTI}{\bkmkend AAAAAAAGTI}
00408     EXPECT_EQ(rit, sv.rend());\par
{\bkmkstart AAAAAAAGTJ}{\bkmkend AAAAAAAGTJ}
00409 \}\par
{\bkmkstart AAAAAAAGTK}{\bkmkend AAAAAAAGTK}
00410 \par
{\bkmkstart AAAAAAAGTL}{\bkmkend AAAAAAAGTL}
00415 TEST_F(StringViewAdvancedCoverageTest, TestStringViewConstexprEdgeCases) \{\par
{\bkmkstart AAAAAAAGTM}{\bkmkend AAAAAAAGTM}
00416     {\cf20 // Test constexpr with empty string}\par
{\bkmkstart AAAAAAAGTN}{\bkmkend AAAAAAAGTN}
00417     {\cf17 constexpr} std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAAGTO}{\bkmkend AAAAAAAGTO}
00418     {\cf17 static_assert}(empty_sv.empty());\par
{\bkmkstart AAAAAAAGTP}{\bkmkend AAAAAAAGTP}
00419     {\cf17 static_assert}(empty_sv.size() == 0);\par
{\bkmkstart AAAAAAAGTR}{\bkmkend AAAAAAAGTR}
00420     \par
{\bkmkstart AAAAAAAGTS}{\bkmkend AAAAAAAGTS}
00421     {\cf20 // Test constexpr with single character}\par
{\bkmkstart AAAAAAAGTT}{\bkmkend AAAAAAAGTT}
00422     {\cf17 constexpr} std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAAGTU}{\bkmkend AAAAAAAGTU}
00423     {\cf17 static_assert}(single_sv.size() == 1);\par
{\bkmkstart AAAAAAAGTV}{\bkmkend AAAAAAAGTV}
00424     {\cf17 static_assert}(single_sv[0] == {\cf23 'A'});\par
{\bkmkstart AAAAAAAGTW}{\bkmkend AAAAAAAGTW}
00425     \par
{\bkmkstart AAAAAAAGTX}{\bkmkend AAAAAAAGTX}
00426     {\cf20 // Test constexpr find operations}\par
{\bkmkstart AAAAAAAGTY}{\bkmkend AAAAAAAGTY}
00427     {\cf17 constexpr} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAAGUA}{\bkmkend AAAAAAAGUA}
00428     {\cf17 constexpr} {\cf18 size_t} pos1 = sv.find({\cf22 "World"});\par
{\bkmkstart AAAAAAAGUB}{\bkmkend AAAAAAAGUB}
00429     {\cf17 static_assert}(pos1 == 7);\par
{\bkmkstart AAAAAAAGUC}{\bkmkend AAAAAAAGUC}
00430     \par
{\bkmkstart AAAAAAAGUD}{\bkmkend AAAAAAAGUD}
00431     {\cf17 constexpr} {\cf18 size_t} pos2 = sv.find({\cf22 "xyz"});\par
{\bkmkstart AAAAAAAGUE}{\bkmkend AAAAAAAGUE}
00432     {\cf17 static_assert}(pos2 == std::string_view::npos);\par
{\bkmkstart AAAAAAAGUF}{\bkmkend AAAAAAAGUF}
00433     \par
{\bkmkstart AAAAAAAGUG}{\bkmkend AAAAAAAGUG}
00434     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAAGUH}{\bkmkend AAAAAAAGUH}
00435     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAAGUI}{\bkmkend AAAAAAAGUI}
00436     {\cf17 static_assert}(sv.find({\cf22 "World!"}) == 7);\par
{\bkmkstart AAAAAAAGUJ}{\bkmkend AAAAAAAGUJ}
00437     {\cf17 static_assert}(sv.find({\cf22 "World"}) == 7);\par
{\bkmkstart AAAAAAAGUK}{\bkmkend AAAAAAAGUK}
00438     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAAGUL}{\bkmkend AAAAAAAGUL}
00439     \par
{\bkmkstart AAAAAAAGUM}{\bkmkend AAAAAAAGUM}
00440     {\cf20 // Test constexpr contains using find}\par
{\bkmkstart AAAAAAAGUN}{\bkmkend AAAAAAAGUN}
00441     {\cf17 static_assert}(sv.find({\cf22 "lo, Wo"}) != std::string_view::npos);\par
{\bkmkstart AAAAAAAGUP}{\bkmkend AAAAAAAGUP}
00442     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAAGUQ}{\bkmkend AAAAAAAGUQ}
00443     \par
{\bkmkstart AAAAAAAGUR}{\bkmkend AAAAAAAGUR}
00444     {\cf20 // Runtime tests to ensure functionality works}\par
{\bkmkstart AAAAAAAGUS}{\bkmkend AAAAAAAGUS}
00445     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAAGUT}{\bkmkend AAAAAAAGUT}
00446     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAAGUU}{\bkmkend AAAAAAAGUU}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAAGUV}{\bkmkend AAAAAAAGUV}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAAGUW}{\bkmkend AAAAAAAGUW}
00449     EXPECT_EQ(pos1, 7);\par
{\bkmkstart AAAAAAAGUX}{\bkmkend AAAAAAAGUX}
00450     EXPECT_EQ(pos2, std::string_view::npos);\par
{\bkmkstart AAAAAAAGUY}{\bkmkend AAAAAAAGUY}
00451     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAAGUZ}{\bkmkend AAAAAAAGUZ}
00452     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAAGVA}{\bkmkend AAAAAAAGVA}
00453     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGVB}{\bkmkend AAAAAAAGVB}
00454     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAAGVC}{\bkmkend AAAAAAAGVC}
00455 \}\par
{\bkmkstart AAAAAAAGVD}{\bkmkend AAAAAAAGVD}
00456 \par
{\bkmkstart AAAAAAAGVE}{\bkmkend AAAAAAAGVE}
00461 TEST_F(StringViewAdvancedCoverageTest, TestStringViewPerformanceEdgeCases) \{\par
{\bkmkstart AAAAAAAGVF}{\bkmkend AAAAAAAGVF}
00462     {\cf20 // Test with very large string}\par
{\bkmkstart AAAAAAAGVG}{\bkmkend AAAAAAAGVG}
00463     std::string large_string(100000, {\cf23 'A'});\par
{\bkmkstart AAAAAAAGVH}{\bkmkend AAAAAAAGVH}
00464     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAAGVJ}{\bkmkend AAAAAAAGVJ}
00465     \par
{\bkmkstart AAAAAAAGVK}{\bkmkend AAAAAAAGVK}
00466     {\cf20 // Test operations that should be fast}\par
{\bkmkstart AAAAAAAGVL}{\bkmkend AAAAAAAGVL}
00467     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAGVM}{\bkmkend AAAAAAAGVM}
00468     \par
{\bkmkstart AAAAAAAGVN}{\bkmkend AAAAAAAGVN}
00469     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAAGVO}{\bkmkend AAAAAAAGVO}
00470     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAAGVP}{\bkmkend AAAAAAAGVP}
00471         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAAGVQ}{\bkmkend AAAAAAAGVQ}
00472         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAAGVR}{\bkmkend AAAAAAAGVR}
00473         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAAGVT}{\bkmkend AAAAAAAGVT}
00474         {\cf17 auto} starts = sv.find({\cf22 "AAAA"}) == 0;\par
{\bkmkstart AAAAAAAGVU}{\bkmkend AAAAAAAGVU}
00475         {\cf17 auto} ends = sv.find({\cf22 "AAAA"}) == (sv.size() - 4);\par
{\bkmkstart AAAAAAAGVV}{\bkmkend AAAAAAAGVV}
00476         (void)sub; (void)pos; (void)contains; (void)starts; (void)ends;\par
{\bkmkstart AAAAAAAGVW}{\bkmkend AAAAAAAGVW}
00477     \}\par
{\bkmkstart AAAAAAAGVX}{\bkmkend AAAAAAAGVX}
00478     \par
{\bkmkstart AAAAAAAGVY}{\bkmkend AAAAAAAGVY}
00479     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAGWA}{\bkmkend AAAAAAAGWA}
00480     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAGWB}{\bkmkend AAAAAAAGWB}
00481     \par
{\bkmkstart AAAAAAAGWC}{\bkmkend AAAAAAAGWC}
00482     {\cf20 // Should complete quickly}\par
{\bkmkstart AAAAAAAGWD}{\bkmkend AAAAAAAGWD}
00483     EXPECT_LT(duration.count(), 100000); {\cf20 // Less than 0.1 second}\par
{\bkmkstart AAAAAAAGWE}{\bkmkend AAAAAAAGWE}
00484 \}\par
{\bkmkstart AAAAAAAGWF}{\bkmkend AAAAAAAGWF}
00485 \par
{\bkmkstart AAAAAAAGWG}{\bkmkend AAAAAAAGWG}
00486 \} {\cf20 // namespace}\par
}
}