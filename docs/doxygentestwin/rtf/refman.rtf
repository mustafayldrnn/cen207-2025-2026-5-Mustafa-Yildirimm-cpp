{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment Calculator Windows Library API Unit Test Documentation  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}Calculator Windows  Library API Unit Test Documentation}
{\comment Generated by doxygen 1.14.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Calculator Windows Library API Unit Test Documentation}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
BASIC Translator (C++17) }\par \pard\plain 
{\tc\tcl1 \v BASIC Translator (C++17)}
{\xe \v BASIC Translator (C++17)}
{\bkmkstart AAAAAAADMD}
{\bkmkend AAAAAAADMD}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAADME}
{\bkmkend AAAAAAADME}
\par
This project provides:{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Core data structures with meaningful use-cases: Doubly Linked List, XOR Linked List, Sparse Matrix, Stack/Queue, Binary Heap, Graph (BFS/DFS), Hash Table.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
A BASIC language translator skeleton with Lexer and Parser scaffolding.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
GoogleTest unit tests for each data structure (100% pass expected once GTest is fetched).\par}
\par
Build (CMake){
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Configure: {\f2 cmake -S . -B build -DTRANSLATOR_ENABLE_TESTS=ON} \par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Build: {\f2 cmake --build build --config Release} \par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Run tests: {\f2 ctest --test-dir build} \par}
\par
Notes{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Tests use GoogleTest via FetchContent. First configure requires network to download googletest.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Translator CLI: {\f2 translator input.bas -o output.cpp} \par}
\par
Planned next steps{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Flesh out parser (shunting-yard for expressions), AST, symbol table, CFG analysis, and codegen. \par}
\par
}}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 test_chrono_advanced_coverage.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Advanced test file to maximize coverage for _msvc_chrono.hpp })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 test_chrono_coverage.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to increase coverage for _msvc_chrono.hpp })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQG" }{}}{\fldrslt {\cs37\ul\cf2 test_doubly_linked_list.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 test_graph_bfs_dfs.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 test_hash_table.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALU" }{}}{\fldrslt {\cs37\ul\cf2 test_heap.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 test_lexer_parser_codegen.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARK" }{}}{\fldrslt {\cs37\ul\cf2 test_overflow_protection.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to verify integer overflow protection in chrono calculations })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 test_sparse_matrix.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABHW" }{}}{\fldrslt {\cs37\ul\cf2 test_stack_queue.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIM" }{}}{\fldrslt {\cs37\ul\cf2 test_string_view_advanced_coverage.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Advanced test file to maximize coverage for _msvc_string_view.hpp })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNM" }{}}{\fldrslt {\cs37\ul\cf2 test_string_view_coverage.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to increase coverage for _msvc_string_view.hpp })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOE" }{}}{\fldrslt {\cs37\ul\cf2 test_string_view_internal_utilities.cpp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to cover internal utility functions in _msvc_string_view.hpp })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNO" }{}}{\fldrslt {\cs37\ul\cf2 test_xor_linked_list.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/README.md File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/README.md}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/README.md}
{\bkmkstart AAAAAAADLQ}
{\bkmkend AAAAAAADLQ}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Advanced test file to maximize coverage for _msvc_chrono.hpp. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include <chrono>}\par
{\f2 #include <thread>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <limits>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_chrono_advanced_coverage.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__chrono__advanced__coverage_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Advanced test file to maximize coverage for _msvc_chrono.hpp. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test file targets remaining uncovered lines in _msvc_chrono.hpp to achieve 100% line coverage \par
}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 test_chrono_advanced_coverage.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_chrono_advanced_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_advanced_coverage.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAB" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAE}{\bkmkend AAAAAAAAAE}
00001 \par
{\bkmkstart AAAAAAAAAF}{\bkmkend AAAAAAAAAF}
00008 \par
{\bkmkstart AAAAAAAAAG}{\bkmkend AAAAAAAAAG}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAK}{\bkmkend AAAAAAAAAK}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAAAQ}{\bkmkend AAAAAAAAAQ}
00011 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAAAU}{\bkmkend AAAAAAAAAU}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAAAW}{\bkmkend AAAAAAAAAW}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00015 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAACX}{\bkmkend AAAAAAAACX}
00016 \par
{\bkmkstart AAAAAAAACY}{\bkmkend AAAAAAAACY}
00017 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAADB}{\bkmkend AAAAAAAADB}
00018 \par
{\bkmkstart AAAAAAAADD}{\bkmkend AAAAAAAADD}
00023 {\cf17 class }ChronoAdvancedCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAADI}{\bkmkend AAAAAAAADI}
00024 {\cf17 protected}:\par
{\bkmkstart AAAAAAAADK}{\bkmkend AAAAAAAADK}
00025     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADM}{\bkmkend AAAAAAAADM}
00026         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAADO}{\bkmkend AAAAAAAADO}
00027     \}\par
{\bkmkstart AAAAAAAADP}{\bkmkend AAAAAAAADP}
00028     \par
{\bkmkstart AAAAAAAADQ}{\bkmkend AAAAAAAADQ}
00029     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
00030         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAADS}{\bkmkend AAAAAAAADS}
00031     \}\par
{\bkmkstart AAAAAAAADT}{\bkmkend AAAAAAAADT}
00032 \};\par
{\bkmkstart AAAAAAAADV}{\bkmkend AAAAAAAADV}
00033 \par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00038 TEST_F(ChronoAdvancedCoverageTest, TestChronoTypeTraits) \{\par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00039     {\cf20 // Test duration type traits}\par
{\bkmkstart AAAAAAAADY}{\bkmkend AAAAAAAADY}
00040     {\cf17 using }seconds_type = std::chrono::seconds;\par
{\bkmkstart AAAAAAAAEB}{\bkmkend AAAAAAAAEB}
00041     {\cf17 using }milliseconds_type = std::chrono::milliseconds;\par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00042     {\cf17 using }microseconds_type = std::chrono::microseconds;\par
{\bkmkstart AAAAAAAAED}{\bkmkend AAAAAAAAED}
00043     {\cf17 using }nanoseconds_type = std::chrono::nanoseconds;\par
{\bkmkstart AAAAAAAAEE}{\bkmkend AAAAAAAAEE}
00044     \par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
00045     {\cf20 // Test duration properties}\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00046     EXPECT_TRUE(std::is_arithmetic_v<seconds_type::rep>);\par
{\bkmkstart AAAAAAAAEJ}{\bkmkend AAAAAAAAEJ}
00047     EXPECT_TRUE(std::is_arithmetic_v<milliseconds_type::rep>);\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00048     EXPECT_TRUE(std::is_arithmetic_v<microseconds_type::rep>);\par
{\bkmkstart AAAAAAAAEN}{\bkmkend AAAAAAAAEN}
00049     EXPECT_TRUE(std::is_arithmetic_v<nanoseconds_type::rep>);\par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00050     \par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00051     {\cf20 // Test period properties}\par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00052     EXPECT_GT(seconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00053     EXPECT_GT(milliseconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00054     EXPECT_GT(microseconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00055     EXPECT_GT(nanoseconds_type::period::num, 0);\par
{\bkmkstart AAAAAAAAEZ}{\bkmkend AAAAAAAAEZ}
00056 \}\par
{\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00057 \par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00062 TEST_F(ChronoAdvancedCoverageTest, TestChronoRatioOperations) \{\par
{\bkmkstart AAAAAAAAFF}{\bkmkend AAAAAAAAFF}
00063     {\cf17 using namespace }std::chrono;\par
{\bkmkstart AAAAAAAAFG}{\bkmkend AAAAAAAAFG}
00064     \par
{\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
00065     {\cf20 // Test ratio arithmetic}\par
{\bkmkstart AAAAAAAAFJ}{\bkmkend AAAAAAAAFJ}
00066     {\cf17 using }ratio_1_1 = std::ratio<1, 1>;\par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00067     {\cf17 using }ratio_1_1000 = std::ratio<1, 1000>;\par
{\bkmkstart AAAAAAAAFN}{\bkmkend AAAAAAAAFN}
00068     {\cf17 using }ratio_1000_1 = std::ratio<1000, 1>;\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00069     \par
{\bkmkstart AAAAAAAAFQ}{\bkmkend AAAAAAAAFQ}
00070     {\cf20 // Test ratio properties}\par
{\bkmkstart AAAAAAAAFS}{\bkmkend AAAAAAAAFS}
00071     EXPECT_EQ(ratio_1_1::num, 1);\par
{\bkmkstart AAAAAAAAFU}{\bkmkend AAAAAAAAFU}
00072     EXPECT_EQ(ratio_1_1::den, 1);\par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00073     EXPECT_EQ(ratio_1_1000::num, 1);\par
{\bkmkstart AAAAAAAAFY}{\bkmkend AAAAAAAAFY}
00074     EXPECT_EQ(ratio_1_1000::den, 1000);\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00075     EXPECT_EQ(ratio_1000_1::num, 1000);\par
{\bkmkstart AAAAAAAAGB}{\bkmkend AAAAAAAAGB}
00076     EXPECT_EQ(ratio_1000_1::den, 1);\par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00077     \par
{\bkmkstart AAAAAAAAGE}{\bkmkend AAAAAAAAGE}
00078     {\cf20 // Test duration with custom ratios}\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00079     {\cf17 using }custom_duration = duration<int, ratio_1_1000>;\par
{\bkmkstart AAAAAAAAGJ}{\bkmkend AAAAAAAAGJ}
00080     {\cf17 auto} custom_dur = custom_duration(1000);\par
{\bkmkstart AAAAAAAAGL}{\bkmkend AAAAAAAAGL}
00081     EXPECT_EQ(custom_dur.count(), 1000);\par
{\bkmkstart AAAAAAAAGN}{\bkmkend AAAAAAAAGN}
00082 \}\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00083 \par
{\bkmkstart AAAAAAAAGS}{\bkmkend AAAAAAAAGS}
00088 TEST_F(ChronoAdvancedCoverageTest, TestChronoClockComparison) \{\par
{\bkmkstart AAAAAAAAGT}{\bkmkend AAAAAAAAGT}
00089     {\cf20 // Test clock ordering}\par
{\bkmkstart AAAAAAAAGV}{\bkmkend AAAAAAAAGV}
00090     {\cf17 auto} now1 = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00091     std::this_thread::sleep_for(std::chrono::microseconds(1));\par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00092     {\cf17 auto} now2 = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00093     \par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00094     EXPECT_LT(now1, now2);\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00095     EXPECT_LE(now1, now2);\par
{\bkmkstart AAAAAAAAHE}{\bkmkend AAAAAAAAHE}
00096     EXPECT_GT(now2, now1);\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00097     EXPECT_GE(now2, now1);\par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00098     EXPECT_NE(now1, now2);\par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00099     \par
{\bkmkstart AAAAAAAAHK}{\bkmkend AAAAAAAAHK}
00100     {\cf20 // Test equal time points}\par
{\bkmkstart AAAAAAAAHL}{\bkmkend AAAAAAAAHL}
00101     {\cf17 auto} now3 = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00102     {\cf17 auto} now4 = now3;\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00103     EXPECT_EQ(now3, now4);\par
{\bkmkstart AAAAAAAAHW}{\bkmkend AAAAAAAAHW}
00104     EXPECT_LE(now3, now4);\par
{\bkmkstart AAAAAAAAHY}{\bkmkend AAAAAAAAHY}
00105     EXPECT_GE(now3, now4);\par
{\bkmkstart AAAAAAAAIA}{\bkmkend AAAAAAAAIA}
00106 \}\par
{\bkmkstart AAAAAAAAIB}{\bkmkend AAAAAAAAIB}
00107 \par
{\bkmkstart AAAAAAAAID}{\bkmkend AAAAAAAAID}
00112 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationComparison) \{\par
{\bkmkstart AAAAAAAAIE}{\bkmkend AAAAAAAAIE}
00113     {\cf17 auto} dur1 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAAIF}{\bkmkend AAAAAAAAIF}
00114     {\cf17 auto} dur2 = std::chrono::seconds(10);\par
{\bkmkstart AAAAAAAAIG}{\bkmkend AAAAAAAAIG}
00115     {\cf17 auto} dur3 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAAII}{\bkmkend AAAAAAAAII}
00116     \par
{\bkmkstart AAAAAAAAIK}{\bkmkend AAAAAAAAIK}
00117     {\cf20 // Test all comparison operators}\par
{\bkmkstart AAAAAAAAIM}{\bkmkend AAAAAAAAIM}
00118     EXPECT_LT(dur1, dur2);\par
{\bkmkstart AAAAAAAAIO}{\bkmkend AAAAAAAAIO}
00119     EXPECT_LE(dur1, dur2);\par
{\bkmkstart AAAAAAAAIR}{\bkmkend AAAAAAAAIR}
00120     EXPECT_LE(dur1, dur3);\par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00121     EXPECT_GT(dur2, dur1);\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00122     EXPECT_GE(dur2, dur1);\par
{\bkmkstart AAAAAAAAIX}{\bkmkend AAAAAAAAIX}
00123     EXPECT_GE(dur1, dur3);\par
{\bkmkstart AAAAAAAAIZ}{\bkmkend AAAAAAAAIZ}
00124     EXPECT_EQ(dur1, dur3);\par
{\bkmkstart AAAAAAAAJB}{\bkmkend AAAAAAAAJB}
00125     EXPECT_NE(dur1, dur2);\par
{\bkmkstart AAAAAAAAJD}{\bkmkend AAAAAAAAJD}
00126 \}\par
{\bkmkstart AAAAAAAAJE}{\bkmkend AAAAAAAAJE}
00127 \par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00132 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationArithmeticAdvanced) \{\par
{\bkmkstart AAAAAAAAJP}{\bkmkend AAAAAAAAJP}
00133     {\cf20 // Test mixed duration arithmetic}\par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00134     {\cf17 auto} hours = std::chrono::hours(2);\par
{\bkmkstart AAAAAAAAJT}{\bkmkend AAAAAAAAJT}
00135     {\cf17 auto} minutes = std::chrono::minutes(30);\par
{\bkmkstart AAAAAAAAJV}{\bkmkend AAAAAAAAJV}
00136     {\cf17 auto} seconds = std::chrono::seconds(45);\par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
00137     \par
{\bkmkstart AAAAAAAAJZ}{\bkmkend AAAAAAAAJZ}
00138     {\cf20 // Test complex arithmetic}\par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00139     {\cf17 auto} total1 = hours + minutes + seconds;\par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00140     {\cf17 auto} total2 = hours - minutes + seconds;\par
{\bkmkstart AAAAAAAAKF}{\bkmkend AAAAAAAAKF}
00141     {\cf17 auto} total3 = hours * 2 + minutes;\par
{\bkmkstart AAAAAAAAKI}{\bkmkend AAAAAAAAKI}
00142     {\cf17 auto} total4 = (hours + minutes) / 2;\par
{\bkmkstart AAAAAAAAKK}{\bkmkend AAAAAAAAKK}
00143     \par
{\bkmkstart AAAAAAAAKM}{\bkmkend AAAAAAAAKM}
00144     EXPECT_GT(total1.count(), 0);\par
{\bkmkstart AAAAAAAAKP}{\bkmkend AAAAAAAAKP}
00145     EXPECT_GT(total2.count(), 0);\par
{\bkmkstart AAAAAAAAKR}{\bkmkend AAAAAAAAKR}
00146     EXPECT_GT(total3.count(), 0);\par
{\bkmkstart AAAAAAAAKT}{\bkmkend AAAAAAAAKT}
00147     EXPECT_GT(total4.count(), 0);\par
{\bkmkstart AAAAAAAAKV}{\bkmkend AAAAAAAAKV}
00148     \par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00149     {\cf20 // Test duration modulo operations}\par
{\bkmkstart AAAAAAAAKZ}{\bkmkend AAAAAAAAKZ}
00150     {\cf17 auto} remainder = total1 % std::chrono::minutes(1);\par
{\bkmkstart AAAAAAAALB}{\bkmkend AAAAAAAALB}
00151     EXPECT_GE(remainder.count(), 0);\par
{\bkmkstart AAAAAAAALC}{\bkmkend AAAAAAAALC}
00152 \}\par
{\bkmkstart AAAAAAAALD}{\bkmkend AAAAAAAALD}
00153 \par
{\bkmkstart AAAAAAAALE}{\bkmkend AAAAAAAALE}
00158 TEST_F(ChronoAdvancedCoverageTest, TestChronoTimePointArithmeticAdvanced) \{\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00159     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAALK}{\bkmkend AAAAAAAALK}
00160     {\cf17 auto} duration1 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAALQ}{\bkmkend AAAAAAAALQ}
00161     {\cf17 auto} duration2 = std::chrono::minutes(2);\par
{\bkmkstart AAAAAAAAME}{\bkmkend AAAAAAAAME}
00162     \par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00163     {\cf20 // Test time point arithmetic}\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00164     {\cf17 auto} future1 = now + duration1;\par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00165     {\cf17 auto} future2 = now + duration2;\par
{\bkmkstart AAAAAAAAMP}{\bkmkend AAAAAAAAMP}
00166     {\cf17 auto} past1 = now - duration1;\par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00167     {\cf17 auto} past2 = now - duration2;\par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00168     \par
{\bkmkstart AAAAAAAAMX}{\bkmkend AAAAAAAAMX}
00169     EXPECT_GT(future1, now);\par
{\bkmkstart AAAAAAAAMZ}{\bkmkend AAAAAAAAMZ}
00170     EXPECT_GT(future2, now);\par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00171     EXPECT_LT(past1, now);\par
{\bkmkstart AAAAAAAANG}{\bkmkend AAAAAAAANG}
00172     EXPECT_LT(past2, now);\par
{\bkmkstart AAAAAAAANM}{\bkmkend AAAAAAAANM}
00173     \par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00174     {\cf20 // Test time point difference}\par
{\bkmkstart AAAAAAAANQ}{\bkmkend AAAAAAAANQ}
00175     {\cf17 auto} diff1 = future1 - now;\par
{\bkmkstart AAAAAAAANV}{\bkmkend AAAAAAAANV}
00176     {\cf17 auto} diff2 = now - past1;\par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00177     \par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00178     EXPECT_EQ(diff1, duration1);\par
{\bkmkstart AAAAAAAAOH}{\bkmkend AAAAAAAAOH}
00179     EXPECT_EQ(diff2, duration1);\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00180 \}\par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00181 \par
{\bkmkstart AAAAAAAAOP}{\bkmkend AAAAAAAAOP}
00186 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationCastAdvanced) \{\par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00187     {\cf20 // Test complex duration casting}\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00188     {\cf17 auto} hours = std::chrono::hours(1);\par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00189     {\cf17 auto} minutes = std::chrono::minutes(30);\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00190     {\cf17 auto} seconds = std::chrono::seconds(45);\par
{\bkmkstart AAAAAAAAPI}{\bkmkend AAAAAAAAPI}
00191     {\cf17 auto} milliseconds = std::chrono::milliseconds(500);\par
{\bkmkstart AAAAAAAAPK}{\bkmkend AAAAAAAAPK}
00192     \par
{\bkmkstart AAAAAAAAPM}{\bkmkend AAAAAAAAPM}
00193     {\cf20 // Test casting to different types}\par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00194     {\cf17 auto} total_hours = std::chrono::duration_cast<std::chrono::hours>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00195     {\cf17 auto} total_minutes = std::chrono::duration_cast<std::chrono::minutes>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAPZ}{\bkmkend AAAAAAAAPZ}
00196     {\cf17 auto} total_seconds = std::chrono::duration_cast<std::chrono::seconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQD}{\bkmkend AAAAAAAAQD}
00197     {\cf17 auto} total_milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQH}{\bkmkend AAAAAAAAQH}
00198     {\cf17 auto} total_microseconds = std::chrono::duration_cast<std::chrono::microseconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQK}{\bkmkend AAAAAAAAQK}
00199     {\cf17 auto} total_nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(hours + minutes + seconds + milliseconds);\par
{\bkmkstart AAAAAAAAQM}{\bkmkend AAAAAAAAQM}
00200     \par
{\bkmkstart AAAAAAAAQO}{\bkmkend AAAAAAAAQO}
00201     EXPECT_GT(total_hours.count(), 0);\par
{\bkmkstart AAAAAAAAQP}{\bkmkend AAAAAAAAQP}
00202     EXPECT_GT(total_minutes.count(), 0);\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00203     EXPECT_GT(total_seconds.count(), 0);\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00204     EXPECT_GT(total_milliseconds.count(), 0);\par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00205     EXPECT_GT(total_microseconds.count(), 0);\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00206     EXPECT_GT(total_nanoseconds.count(), 0);\par
{\bkmkstart AAAAAAAARB}{\bkmkend AAAAAAAARB}
00207 \}\par
{\bkmkstart AAAAAAAARC}{\bkmkend AAAAAAAARC}
00208 \par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00213 TEST_F(ChronoAdvancedCoverageTest, TestChronoClockResolution) \{\par
{\bkmkstart AAAAAAAARH}{\bkmkend AAAAAAAARH}
00214     {\cf20 // Test high resolution clock resolution}\par
{\bkmkstart AAAAAAAARI}{\bkmkend AAAAAAAARI}
00215     {\cf17 auto} start_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAARN}{\bkmkend AAAAAAAARN}
00216     {\cf17 auto} end_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00217     {\cf17 auto} resolution_hr = end_hr - start_hr;\par
{\bkmkstart AAAAAAAARS}{\bkmkend AAAAAAAARS}
00218     \par
{\bkmkstart AAAAAAAART}{\bkmkend AAAAAAAART}
00219     EXPECT_GE(resolution_hr.count(), 0);\par
{\bkmkstart AAAAAAAARV}{\bkmkend AAAAAAAARV}
00220     \par
{\bkmkstart AAAAAAAARW}{\bkmkend AAAAAAAARW}
00221     {\cf20 // Test steady clock resolution}\par
{\bkmkstart AAAAAAAARX}{\bkmkend AAAAAAAARX}
00222     {\cf17 auto} start_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAARZ}{\bkmkend AAAAAAAARZ}
00223     {\cf17 auto} end_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAASB}{\bkmkend AAAAAAAASB}
00224     {\cf17 auto} resolution_sc = end_sc - start_sc;\par
{\bkmkstart AAAAAAAASD}{\bkmkend AAAAAAAASD}
00225     \par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00226     EXPECT_GE(resolution_sc.count(), 0);\par
{\bkmkstart AAAAAAAASH}{\bkmkend AAAAAAAASH}
00227     \par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00228     {\cf20 // Test system clock resolution}\par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00229     {\cf17 auto} start_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAASO}{\bkmkend AAAAAAAASO}
00230     {\cf17 auto} end_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAASR}{\bkmkend AAAAAAAASR}
00231     {\cf17 auto} resolution_sys = end_sys - start_sys;\par
{\bkmkstart AAAAAAAAST}{\bkmkend AAAAAAAAST}
00232     \par
{\bkmkstart AAAAAAAASV}{\bkmkend AAAAAAAASV}
00233     EXPECT_GE(resolution_sys.count(), 0);\par
{\bkmkstart AAAAAAAASW}{\bkmkend AAAAAAAASW}
00234 \}\par
{\bkmkstart AAAAAAAASY}{\bkmkend AAAAAAAASY}
00235 \par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00240 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationLimits) \{\par
{\bkmkstart AAAAAAAATB}{\bkmkend AAAAAAAATB}
00241     {\cf20 // Test maximum duration values}\par
{\bkmkstart AAAAAAAATC}{\bkmkend AAAAAAAATC}
00242     {\cf17 auto} max_seconds = std::chrono::seconds(std::numeric_limits<std::chrono::seconds::rep>::max());\par
{\bkmkstart AAAAAAAATV}{\bkmkend AAAAAAAATV}
00243     {\cf17 auto} max_milliseconds = std::chrono::milliseconds(std::numeric_limits<std::chrono::milliseconds::rep>::max());\par
{\bkmkstart AAAAAAAAUN}{\bkmkend AAAAAAAAUN}
00244     {\cf17 auto} max_microseconds = std::chrono::microseconds(std::numeric_limits<std::chrono::microseconds::rep>::max());\par
{\bkmkstart AAAAAAAAVD}{\bkmkend AAAAAAAAVD}
00245     {\cf17 auto} max_nanoseconds = std::chrono::nanoseconds(std::numeric_limits<std::chrono::nanoseconds::rep>::max());\par
{\bkmkstart AAAAAAAAVN}{\bkmkend AAAAAAAAVN}
00246     \par
{\bkmkstart AAAAAAAAVP}{\bkmkend AAAAAAAAVP}
00247     EXPECT_GT(max_seconds.count(), 0);\par
{\bkmkstart AAAAAAAAVQ}{\bkmkend AAAAAAAAVQ}
00248     EXPECT_GT(max_milliseconds.count(), 0);\par
{\bkmkstart AAAAAAAAVT}{\bkmkend AAAAAAAAVT}
00249     EXPECT_GT(max_microseconds.count(), 0);\par
{\bkmkstart AAAAAAAAVU}{\bkmkend AAAAAAAAVU}
00250     EXPECT_GT(max_nanoseconds.count(), 0);\par
{\bkmkstart AAAAAAAAVW}{\bkmkend AAAAAAAAVW}
00251     \par
{\bkmkstart AAAAAAAAVX}{\bkmkend AAAAAAAAVX}
00252     {\cf20 // Test minimum duration values}\par
{\bkmkstart AAAAAAAAVY}{\bkmkend AAAAAAAAVY}
00253     {\cf17 auto} min_seconds = std::chrono::seconds(std::numeric_limits<std::chrono::seconds::rep>::min());\par
{\bkmkstart AAAAAAAAWD}{\bkmkend AAAAAAAAWD}
00254     {\cf17 auto} min_milliseconds = std::chrono::milliseconds(std::numeric_limits<std::chrono::milliseconds::rep>::min());\par
{\bkmkstart AAAAAAAAWQ}{\bkmkend AAAAAAAAWQ}
00255     {\cf17 auto} min_microseconds = std::chrono::microseconds(std::numeric_limits<std::chrono::microseconds::rep>::min());\par
{\bkmkstart AAAAAAAAWX}{\bkmkend AAAAAAAAWX}
00256     {\cf17 auto} min_nanoseconds = std::chrono::nanoseconds(std::numeric_limits<std::chrono::nanoseconds::rep>::min());\par
{\bkmkstart AAAAAAAAXE}{\bkmkend AAAAAAAAXE}
00257     \par
{\bkmkstart AAAAAAAAXG}{\bkmkend AAAAAAAAXG}
00258     EXPECT_LT(min_seconds.count(), 0);\par
{\bkmkstart AAAAAAAAXJ}{\bkmkend AAAAAAAAXJ}
00259     EXPECT_LT(min_milliseconds.count(), 0);\par
{\bkmkstart AAAAAAAAXN}{\bkmkend AAAAAAAAXN}
00260     EXPECT_LT(min_microseconds.count(), 0);\par
{\bkmkstart AAAAAAAAXQ}{\bkmkend AAAAAAAAXQ}
00261     EXPECT_LT(min_nanoseconds.count(), 0);\par
{\bkmkstart AAAAAAAAXS}{\bkmkend AAAAAAAAXS}
00262 \}\par
{\bkmkstart AAAAAAAAXT}{\bkmkend AAAAAAAAXT}
00263 \par
{\bkmkstart AAAAAAAAXV}{\bkmkend AAAAAAAAXV}
00268 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationArithmeticOverflow) \{\par
{\bkmkstart AAAAAAAAXX}{\bkmkend AAAAAAAAXX}
00269     {\cf20 // Test safe arithmetic operations}\par
{\bkmkstart AAAAAAAAYB}{\bkmkend AAAAAAAAYB}
00270     {\cf17 auto} duration1 = std::chrono::seconds(1000);\par
{\bkmkstart AAAAAAAAYH}{\bkmkend AAAAAAAAYH}
00271     {\cf17 auto} duration2 = std::chrono::seconds(2000);\par
{\bkmkstart AAAAAAAAYL}{\bkmkend AAAAAAAAYL}
00272     \par
{\bkmkstart AAAAAAAAYN}{\bkmkend AAAAAAAAYN}
00273     {\cf20 // Test safe addition}\par
{\bkmkstart AAAAAAAAYP}{\bkmkend AAAAAAAAYP}
00274     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAAAYW}{\bkmkend AAAAAAAAYW}
00275     EXPECT_EQ(sum.count(), 3000);\par
{\bkmkstart AAAAAAAAYY}{\bkmkend AAAAAAAAYY}
00276     \par
{\bkmkstart AAAAAAAAYZ}{\bkmkend AAAAAAAAYZ}
00277     {\cf20 // Test safe subtraction}\par
{\bkmkstart AAAAAAAAZC}{\bkmkend AAAAAAAAZC}
00278     {\cf17 auto} diff = duration2 - duration1;\par
{\bkmkstart AAAAAAAAZF}{\bkmkend AAAAAAAAZF}
00279     EXPECT_EQ(diff.count(), 1000);\par
{\bkmkstart AAAAAAAAZG}{\bkmkend AAAAAAAAZG}
00280     \par
{\bkmkstart AAAAAAAAZH}{\bkmkend AAAAAAAAZH}
00281     {\cf20 // Test safe multiplication}\par
{\bkmkstart AAAAAAAAZK}{\bkmkend AAAAAAAAZK}
00282     {\cf17 auto} mult = duration1 * 3;\par
{\bkmkstart AAAAAAAAZN}{\bkmkend AAAAAAAAZN}
00283     EXPECT_EQ(mult.count(), 3000);\par
{\bkmkstart AAAAAAAAZP}{\bkmkend AAAAAAAAZP}
00284     \par
{\bkmkstart AAAAAAAAZQ}{\bkmkend AAAAAAAAZQ}
00285     {\cf20 // Test safe division}\par
{\bkmkstart AAAAAAAAZS}{\bkmkend AAAAAAAAZS}
00286     {\cf17 auto} div = duration2 / 2;\par
{\bkmkstart AAAAAAAAZU}{\bkmkend AAAAAAAAZU}
00287     EXPECT_EQ(div.count(), 1000);\par
{\bkmkstart AAAAAAAAZY}{\bkmkend AAAAAAAAZY}
00288 \}\par
{\bkmkstart AAAAAAABAA}{\bkmkend AAAAAAABAA}
00289 \par
{\bkmkstart AAAAAAABAC}{\bkmkend AAAAAAABAC}
00294 TEST_F(ChronoAdvancedCoverageTest, TestChronoTimePointConversion) \{\par
{\bkmkstart AAAAAAABAG}{\bkmkend AAAAAAABAG}
00295     {\cf20 // Test system clock conversions}\par
{\bkmkstart AAAAAAABAI}{\bkmkend AAAAAAABAI}
00296     {\cf17 auto} now_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAABAM}{\bkmkend AAAAAAABAM}
00297     {\cf17 auto} time_t_val = std::chrono::system_clock::to_time_t(now_sys);\par
{\bkmkstart AAAAAAABAS}{\bkmkend AAAAAAABAS}
00298     {\cf17 auto} back_to_sys = std::chrono::system_clock::from_time_t(time_t_val);\par
{\bkmkstart AAAAAAABAY}{\bkmkend AAAAAAABAY}
00299     \par
{\bkmkstart AAAAAAABBB}{\bkmkend AAAAAAABBB}
00300     EXPECT_GT(time_t_val, 0);\par
{\bkmkstart AAAAAAABBC}{\bkmkend AAAAAAABBC}
00301     \par
{\bkmkstart AAAAAAABBE}{\bkmkend AAAAAAABBE}
00302     {\cf20 // Test time point arithmetic with conversions}\par
{\bkmkstart AAAAAAABBG}{\bkmkend AAAAAAABBG}
00303     {\cf17 auto} future_sys = now_sys + std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABBL}{\bkmkend AAAAAAABBL}
00304     {\cf17 auto} past_sys = now_sys - std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABBS}{\bkmkend AAAAAAABBS}
00305     \par
{\bkmkstart AAAAAAABBW}{\bkmkend AAAAAAABBW}
00306     EXPECT_GT(future_sys, now_sys);\par
{\bkmkstart AAAAAAABBZ}{\bkmkend AAAAAAABBZ}
00307     EXPECT_LT(past_sys, now_sys);\par
{\bkmkstart AAAAAAABCC}{\bkmkend AAAAAAABCC}
00308 \}\par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00309 \par
{\bkmkstart AAAAAAABCI}{\bkmkend AAAAAAABCI}
00314 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationSpecialValues) \{\par
{\bkmkstart AAAAAAABCO}{\bkmkend AAAAAAABCO}
00315     {\cf20 // Test zero durations}\par
{\bkmkstart AAAAAAABCS}{\bkmkend AAAAAAABCS}
00316     {\cf17 auto} zero_sec = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAABCW}{\bkmkend AAAAAAABCW}
00317     {\cf17 auto} zero_ms = std::chrono::milliseconds(0);\par
{\bkmkstart AAAAAAABDA}{\bkmkend AAAAAAABDA}
00318     {\cf17 auto} zero_us = std::chrono::microseconds(0);\par
{\bkmkstart AAAAAAABDC}{\bkmkend AAAAAAABDC}
00319     {\cf17 auto} zero_ns = std::chrono::nanoseconds(0);\par
{\bkmkstart AAAAAAABDD}{\bkmkend AAAAAAABDD}
00320     \par
{\bkmkstart AAAAAAABDE}{\bkmkend AAAAAAABDE}
00321     EXPECT_EQ(zero_sec.count(), 0);\par
{\bkmkstart AAAAAAABDG}{\bkmkend AAAAAAABDG}
00322     EXPECT_EQ(zero_ms.count(), 0);\par
{\bkmkstart AAAAAAABDI}{\bkmkend AAAAAAABDI}
00323     EXPECT_EQ(zero_us.count(), 0);\par
{\bkmkstart AAAAAAABDL}{\bkmkend AAAAAAABDL}
00324     EXPECT_EQ(zero_ns.count(), 0);\par
{\bkmkstart AAAAAAABDN}{\bkmkend AAAAAAABDN}
00325     \par
{\bkmkstart AAAAAAABDP}{\bkmkend AAAAAAABDP}
00326     {\cf20 // Test unit durations}\par
{\bkmkstart AAAAAAABDQ}{\bkmkend AAAAAAABDQ}
00327     {\cf17 auto} unit_sec = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAABDT}{\bkmkend AAAAAAABDT}
00328     {\cf17 auto} unit_ms = std::chrono::milliseconds(1);\par
{\bkmkstart AAAAAAABDV}{\bkmkend AAAAAAABDV}
00329     {\cf17 auto} unit_us = std::chrono::microseconds(1);\par
{\bkmkstart AAAAAAABDX}{\bkmkend AAAAAAABDX}
00330     {\cf17 auto} unit_ns = std::chrono::nanoseconds(1);\par
{\bkmkstart AAAAAAABDZ}{\bkmkend AAAAAAABDZ}
00331     \par
{\bkmkstart AAAAAAABEA}{\bkmkend AAAAAAABEA}
00332     EXPECT_EQ(unit_sec.count(), 1);\par
{\bkmkstart AAAAAAABEC}{\bkmkend AAAAAAABEC}
00333     EXPECT_EQ(unit_ms.count(), 1);\par
{\bkmkstart AAAAAAABEE}{\bkmkend AAAAAAABEE}
00334     EXPECT_EQ(unit_us.count(), 1);\par
{\bkmkstart AAAAAAABEG}{\bkmkend AAAAAAABEG}
00335     EXPECT_EQ(unit_ns.count(), 1);\par
{\bkmkstart AAAAAAABEH}{\bkmkend AAAAAAABEH}
00336 \}\par
{\bkmkstart AAAAAAABEI}{\bkmkend AAAAAAABEI}
00337 \par
{\bkmkstart AAAAAAABEK}{\bkmkend AAAAAAABEK}
00342 TEST_F(ChronoAdvancedCoverageTest, TestChronoDurationArithmeticPrecision) \{\par
{\bkmkstart AAAAAAABEN}{\bkmkend AAAAAAABEN}
00343     {\cf20 // Test precision in arithmetic operations}\par
{\bkmkstart AAAAAAABEP}{\bkmkend AAAAAAABEP}
00344     {\cf17 auto} duration1 = std::chrono::nanoseconds(1000000000); {\cf20 // 1 second}\par
{\bkmkstart AAAAAAABET}{\bkmkend AAAAAAABET}
00345     {\cf17 auto} duration2 = std::chrono::nanoseconds(500000000);  {\cf20 // 0.5 seconds}\par
{\bkmkstart AAAAAAABEX}{\bkmkend AAAAAAABEX}
00346     \par
{\bkmkstart AAAAAAABEZ}{\bkmkend AAAAAAABEZ}
00347     {\cf20 // Test precision in addition}\par
{\bkmkstart AAAAAAABFB}{\bkmkend AAAAAAABFB}
00348     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAABFE}{\bkmkend AAAAAAABFE}
00349     EXPECT_EQ(sum.count(), 1500000000);\par
{\bkmkstart AAAAAAABFG}{\bkmkend AAAAAAABFG}
00350     \par
{\bkmkstart AAAAAAABFJ}{\bkmkend AAAAAAABFJ}
00351     {\cf20 // Test precision in subtraction}\par
{\bkmkstart AAAAAAABFK}{\bkmkend AAAAAAABFK}
00352     {\cf17 auto} diff = duration1 - duration2;\par
{\bkmkstart AAAAAAABFP}{\bkmkend AAAAAAABFP}
00353     EXPECT_EQ(diff.count(), 500000000);\par
{\bkmkstart AAAAAAABFR}{\bkmkend AAAAAAABFR}
00354     \par
{\bkmkstart AAAAAAABFS}{\bkmkend AAAAAAABFS}
00355     {\cf20 // Test precision in multiplication}\par
{\bkmkstart AAAAAAABFU}{\bkmkend AAAAAAABFU}
00356     {\cf17 auto} mult = duration2 * 2;\par
{\bkmkstart AAAAAAABFV}{\bkmkend AAAAAAABFV}
00357     EXPECT_EQ(mult.count(), 1000000000);\par
{\bkmkstart AAAAAAABFX}{\bkmkend AAAAAAABFX}
00358     \par
{\bkmkstart AAAAAAABGA}{\bkmkend AAAAAAABGA}
00359     {\cf20 // Test precision in division}\par
{\bkmkstart AAAAAAABGB}{\bkmkend AAAAAAABGB}
00360     {\cf17 auto} div = duration1 / 2;\par
{\bkmkstart AAAAAAABGD}{\bkmkend AAAAAAABGD}
00361     EXPECT_EQ(div.count(), 500000000);\par
{\bkmkstart AAAAAAABGF}{\bkmkend AAAAAAABGF}
00362 \}\par
{\bkmkstart AAAAAAABGH}{\bkmkend AAAAAAABGH}
00363 \par
{\bkmkstart AAAAAAABGI}{\bkmkend AAAAAAABGI}
00364 \} {\cf20 // namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to increase coverage for _msvc_chrono.hpp. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include <chrono>}\par
{\f2 #include <thread>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_chrono_coverage.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__chrono__coverage_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to increase coverage for _msvc_chrono.hpp. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test file specifically targets uncovered lines in _msvc_chrono.hpp to increase the line coverage from 82.2% to 100% \par
}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 test_chrono_coverage.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_chrono_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_chrono_coverage.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAI" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAN}{\bkmkend AAAAAAAAAN}
00001 \par
{\bkmkstart AAAAAAAAAR}{\bkmkend AAAAAAAAAR}
00008 \par
{\bkmkstart AAAAAAAAAS}{\bkmkend AAAAAAAAAS}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAT}{\bkmkend AAAAAAAAAT}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAAAV}{\bkmkend AAAAAAAAAV}
00011 {\cf21 #include <thread>}\par
{\bkmkstart AAAAAAAABB}{\bkmkend AAAAAAAABB}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAABJ}{\bkmkend AAAAAAAABJ}
00013 \par
{\bkmkstart AAAAAAAABK}{\bkmkend AAAAAAAABK}
00014 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAABN}{\bkmkend AAAAAAAABN}
00015 \par
{\bkmkstart AAAAAAAABO}{\bkmkend AAAAAAAABO}
00020 {\cf17 class }ChronoCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAABP}{\bkmkend AAAAAAAABP}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAABQ}{\bkmkend AAAAAAAABQ}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAABR}{\bkmkend AAAAAAAABR}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAABS}{\bkmkend AAAAAAAABS}
00024     \}\par
{\bkmkstart AAAAAAAABT}{\bkmkend AAAAAAAABT}
00025     \par
{\bkmkstart AAAAAAAABU}{\bkmkend AAAAAAAABU}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAAABV}{\bkmkend AAAAAAAABV}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAAABW}{\bkmkend AAAAAAAABW}
00028     \}\par
{\bkmkstart AAAAAAAABX}{\bkmkend AAAAAAAABX}
00029 \};\par
{\bkmkstart AAAAAAAABY}{\bkmkend AAAAAAAABY}
00030 \par
{\bkmkstart AAAAAAAABZ}{\bkmkend AAAAAAAABZ}
00035 TEST_F(ChronoCoverageTest, TestHighResolutionClock) \{\par
{\bkmkstart AAAAAAAACA}{\bkmkend AAAAAAAACA}
00036     {\cf20 // Test high_resolution_clock}\par
{\bkmkstart AAAAAAAACB}{\bkmkend AAAAAAAACB}
00037     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAACC}{\bkmkend AAAAAAAACC}
00038     \par
{\bkmkstart AAAAAAAACD}{\bkmkend AAAAAAAACD}
00039     {\cf20 // Perform some work}\par
{\bkmkstart AAAAAAAACE}{\bkmkend AAAAAAAACE}
00040     std::this_thread::sleep_for(std::chrono::milliseconds(1));\par
{\bkmkstart AAAAAAAACF}{\bkmkend AAAAAAAACF}
00041     \par
{\bkmkstart AAAAAAAACG}{\bkmkend AAAAAAAACG}
00042     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAACI}{\bkmkend AAAAAAAACI}
00043     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAACJ}{\bkmkend AAAAAAAACJ}
00044     \par
{\bkmkstart AAAAAAAACK}{\bkmkend AAAAAAAACK}
00045     EXPECT_GT(duration.count(), 0);\par
{\bkmkstart AAAAAAAACL}{\bkmkend AAAAAAAACL}
00046 \}\par
{\bkmkstart AAAAAAAACM}{\bkmkend AAAAAAAACM}
00047 \par
{\bkmkstart AAAAAAAACN}{\bkmkend AAAAAAAACN}
00052 TEST_F(ChronoCoverageTest, TestSteadyClock) \{\par
{\bkmkstart AAAAAAAACO}{\bkmkend AAAAAAAACO}
00053     {\cf20 // Test steady_clock}\par
{\bkmkstart AAAAAAAACP}{\bkmkend AAAAAAAACP}
00054     {\cf17 auto} start = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAACQ}{\bkmkend AAAAAAAACQ}
00055     \par
{\bkmkstart AAAAAAAACR}{\bkmkend AAAAAAAACR}
00056     {\cf20 // Perform some work}\par
{\bkmkstart AAAAAAAACS}{\bkmkend AAAAAAAACS}
00057     std::this_thread::sleep_for(std::chrono::milliseconds(1));\par
{\bkmkstart AAAAAAAACT}{\bkmkend AAAAAAAACT}
00058     \par
{\bkmkstart AAAAAAAACU}{\bkmkend AAAAAAAACU}
00059     {\cf17 auto} end = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAACV}{\bkmkend AAAAAAAACV}
00060     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAAACZ}{\bkmkend AAAAAAAACZ}
00061     \par
{\bkmkstart AAAAAAAADA}{\bkmkend AAAAAAAADA}
00062     EXPECT_GT(duration.count(), 0);\par
{\bkmkstart AAAAAAAADC}{\bkmkend AAAAAAAADC}
00063 \}\par
{\bkmkstart AAAAAAAADE}{\bkmkend AAAAAAAADE}
00064 \par
{\bkmkstart AAAAAAAADF}{\bkmkend AAAAAAAADF}
00069 TEST_F(ChronoCoverageTest, TestSystemClock) \{\par
{\bkmkstart AAAAAAAADG}{\bkmkend AAAAAAAADG}
00070     {\cf20 // Test system_clock}\par
{\bkmkstart AAAAAAAADH}{\bkmkend AAAAAAAADH}
00071     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAADJ}{\bkmkend AAAAAAAADJ}
00072     {\cf17 auto} time_t_now = std::chrono::system_clock::to_time_t(now);\par
{\bkmkstart AAAAAAAADL}{\bkmkend AAAAAAAADL}
00073     \par
{\bkmkstart AAAAAAAADN}{\bkmkend AAAAAAAADN}
00074     EXPECT_GT(time_t_now, 0);\par
{\bkmkstart AAAAAAAAEG}{\bkmkend AAAAAAAAEG}
00075 \}\par
{\bkmkstart AAAAAAAAEI}{\bkmkend AAAAAAAAEI}
00076 \par
{\bkmkstart AAAAAAAAEK}{\bkmkend AAAAAAAAEK}
00081 TEST_F(ChronoCoverageTest, TestDurationOperations) \{\par
{\bkmkstart AAAAAAAAEM}{\bkmkend AAAAAAAAEM}
00082     {\cf20 // Test different duration types}\par
{\bkmkstart AAAAAAAAER}{\bkmkend AAAAAAAAER}
00083     {\cf17 auto} duration1 = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAET}{\bkmkend AAAAAAAAET}
00084     {\cf17 auto} duration2 = std::chrono::milliseconds(1000);\par
{\bkmkstart AAAAAAAAEW}{\bkmkend AAAAAAAAEW}
00085     {\cf17 auto} duration3 = std::chrono::microseconds(1000000);\par
{\bkmkstart AAAAAAAAEY}{\bkmkend AAAAAAAAEY}
00086     {\cf17 auto} duration4 = std::chrono::nanoseconds(1000000000);\par
{\bkmkstart AAAAAAAAFC}{\bkmkend AAAAAAAAFC}
00087     \par
{\bkmkstart AAAAAAAAFD}{\bkmkend AAAAAAAAFD}
00088     {\cf20 // Test duration arithmetic}\par
{\bkmkstart AAAAAAAAFE}{\bkmkend AAAAAAAAFE}
00089     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAAAFH}{\bkmkend AAAAAAAAFH}
00090     {\cf17 auto} diff = duration3 - duration4;\par
{\bkmkstart AAAAAAAAFK}{\bkmkend AAAAAAAAFK}
00091     \par
{\bkmkstart AAAAAAAAFL}{\bkmkend AAAAAAAAFL}
00092     EXPECT_EQ(sum.count(), 2000);\par
{\bkmkstart AAAAAAAAFO}{\bkmkend AAAAAAAAFO}
00093     EXPECT_EQ(diff.count(), 0);\par
{\bkmkstart AAAAAAAAFR}{\bkmkend AAAAAAAAFR}
00094 \}\par
{\bkmkstart AAAAAAAAFT}{\bkmkend AAAAAAAAFT}
00095 \par
{\bkmkstart AAAAAAAAFV}{\bkmkend AAAAAAAAFV}
00100 TEST_F(ChronoCoverageTest, TestTimePointOperations) \{\par
{\bkmkstart AAAAAAAAFW}{\bkmkend AAAAAAAAFW}
00101     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAAFZ}{\bkmkend AAAAAAAAFZ}
00102     {\cf17 auto} later = now + std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAGC}{\bkmkend AAAAAAAAGC}
00103     {\cf17 auto} earlier = now - std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00104     \par
{\bkmkstart AAAAAAAAGI}{\bkmkend AAAAAAAAGI}
00105     EXPECT_GT(later, now);\par
{\bkmkstart AAAAAAAAGK}{\bkmkend AAAAAAAAGK}
00106     EXPECT_LT(earlier, now);\par
{\bkmkstart AAAAAAAAGM}{\bkmkend AAAAAAAAGM}
00107 \}\par
{\bkmkstart AAAAAAAAGO}{\bkmkend AAAAAAAAGO}
00108 \par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00113 TEST_F(ChronoCoverageTest, TestDurationCast) \{\par
{\bkmkstart AAAAAAAAGU}{\bkmkend AAAAAAAAGU}
00114     {\cf17 auto} seconds = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAGW}{\bkmkend AAAAAAAAGW}
00115     {\cf17 auto} milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(seconds);\par
{\bkmkstart AAAAAAAAGZ}{\bkmkend AAAAAAAAGZ}
00116     {\cf17 auto} microseconds = std::chrono::duration_cast<std::chrono::microseconds>(seconds);\par
{\bkmkstart AAAAAAAAHD}{\bkmkend AAAAAAAAHD}
00117     {\cf17 auto} nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(seconds);\par
{\bkmkstart AAAAAAAAHH}{\bkmkend AAAAAAAAHH}
00118     \par
{\bkmkstart AAAAAAAAHI}{\bkmkend AAAAAAAAHI}
00119     EXPECT_EQ(milliseconds.count(), 1000);\par
{\bkmkstart AAAAAAAAHM}{\bkmkend AAAAAAAAHM}
00120     EXPECT_EQ(microseconds.count(), 1000000);\par
{\bkmkstart AAAAAAAAHP}{\bkmkend AAAAAAAAHP}
00121     EXPECT_EQ(nanoseconds.count(), 1000000000);\par
{\bkmkstart AAAAAAAAHS}{\bkmkend AAAAAAAAHS}
00122 \}\par
{\bkmkstart AAAAAAAAHV}{\bkmkend AAAAAAAAHV}
00123 \par
{\bkmkstart AAAAAAAAHX}{\bkmkend AAAAAAAAHX}
00128 TEST_F(ChronoCoverageTest, TestClockProperties) \{\par
{\bkmkstart AAAAAAAAHZ}{\bkmkend AAAAAAAAHZ}
00129     {\cf20 // Test clock properties}\par
{\bkmkstart AAAAAAAAIC}{\bkmkend AAAAAAAAIC}
00130     EXPECT_TRUE(std::chrono::high_resolution_clock::is_steady || \par
{\bkmkstart AAAAAAAAIH}{\bkmkend AAAAAAAAIH}
00131                 !std::chrono::high_resolution_clock::is_steady);\par
{\bkmkstart AAAAAAAAIJ}{\bkmkend AAAAAAAAIJ}
00132     \par
{\bkmkstart AAAAAAAAIL}{\bkmkend AAAAAAAAIL}
00133     EXPECT_TRUE(std::chrono::steady_clock::is_steady);\par
{\bkmkstart AAAAAAAAIN}{\bkmkend AAAAAAAAIN}
00134     \par
{\bkmkstart AAAAAAAAIQ}{\bkmkend AAAAAAAAIQ}
00135     EXPECT_TRUE(std::chrono::system_clock::is_steady || \par
{\bkmkstart AAAAAAAAIS}{\bkmkend AAAAAAAAIS}
00136                 !std::chrono::system_clock::is_steady);\par
{\bkmkstart AAAAAAAAIU}{\bkmkend AAAAAAAAIU}
00137 \}\par
{\bkmkstart AAAAAAAAIW}{\bkmkend AAAAAAAAIW}
00138 \par
{\bkmkstart AAAAAAAAIY}{\bkmkend AAAAAAAAIY}
00143 TEST_F(ChronoCoverageTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAAAJA}{\bkmkend AAAAAAAAJA}
00144     {\cf20 // Test zero duration}\par
{\bkmkstart AAAAAAAAJC}{\bkmkend AAAAAAAAJC}
00145     {\cf17 auto} zero_duration = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAAAJF}{\bkmkend AAAAAAAAJF}
00146     EXPECT_EQ(zero_duration.count(), 0);\par
{\bkmkstart AAAAAAAAJG}{\bkmkend AAAAAAAAJG}
00147     \par
{\bkmkstart AAAAAAAAJH}{\bkmkend AAAAAAAAJH}
00148     {\cf20 // Test negative duration}\par
{\bkmkstart AAAAAAAAJI}{\bkmkend AAAAAAAAJI}
00149     {\cf17 auto} negative_duration = std::chrono::seconds(-1);\par
{\bkmkstart AAAAAAAAJJ}{\bkmkend AAAAAAAAJJ}
00150     EXPECT_EQ(negative_duration.count(), -1);\par
{\bkmkstart AAAAAAAAJL}{\bkmkend AAAAAAAAJL}
00151     \par
{\bkmkstart AAAAAAAAJR}{\bkmkend AAAAAAAAJR}
00152     {\cf20 // Test large duration}\par
{\bkmkstart AAAAAAAAJS}{\bkmkend AAAAAAAAJS}
00153     {\cf17 auto} large_duration = std::chrono::hours(24);\par
{\bkmkstart AAAAAAAAJU}{\bkmkend AAAAAAAAJU}
00154     EXPECT_EQ(large_duration.count(), 24);\par
{\bkmkstart AAAAAAAAJW}{\bkmkend AAAAAAAAJW}
00155 \}\par
{\bkmkstart AAAAAAAAJY}{\bkmkend AAAAAAAAJY}
00156 \par
{\bkmkstart AAAAAAAAKB}{\bkmkend AAAAAAAAKB}
00161 TEST_F(ChronoCoverageTest, TestChronoLiterals) \{\par
{\bkmkstart AAAAAAAAKC}{\bkmkend AAAAAAAAKC}
00162     {\cf17 using namespace }std::chrono_literals;\par
{\bkmkstart AAAAAAAAKE}{\bkmkend AAAAAAAAKE}
00163     \par
{\bkmkstart AAAAAAAAKG}{\bkmkend AAAAAAAAKG}
00164     {\cf17 auto} duration1 = 1s;\par
{\bkmkstart AAAAAAAAKH}{\bkmkend AAAAAAAAKH}
00165     {\cf17 auto} duration2 = 1000ms;\par
{\bkmkstart AAAAAAAAKJ}{\bkmkend AAAAAAAAKJ}
00166     {\cf17 auto} duration3 = 1000000us;\par
{\bkmkstart AAAAAAAAKL}{\bkmkend AAAAAAAAKL}
00167     {\cf17 auto} duration4 = 1000000000ns;\par
{\bkmkstart AAAAAAAAKN}{\bkmkend AAAAAAAAKN}
00168     \par
{\bkmkstart AAAAAAAAKO}{\bkmkend AAAAAAAAKO}
00169     EXPECT_EQ(duration1.count(), 1);\par
{\bkmkstart AAAAAAAAKQ}{\bkmkend AAAAAAAAKQ}
00170     EXPECT_EQ(duration2.count(), 1000);\par
{\bkmkstart AAAAAAAAKS}{\bkmkend AAAAAAAAKS}
00171     EXPECT_EQ(duration3.count(), 1000000);\par
{\bkmkstart AAAAAAAAKU}{\bkmkend AAAAAAAAKU}
00172     EXPECT_EQ(duration4.count(), 1000000000);\par
{\bkmkstart AAAAAAAAKX}{\bkmkend AAAAAAAAKX}
00173 \}\par
{\bkmkstart AAAAAAAAKY}{\bkmkend AAAAAAAAKY}
00174 \par
{\bkmkstart AAAAAAAALA}{\bkmkend AAAAAAAALA}
00179 TEST_F(ChronoCoverageTest, TestChronoComparison) \{\par
{\bkmkstart AAAAAAAALH}{\bkmkend AAAAAAAALH}
00180     {\cf17 auto} duration1 = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAALM}{\bkmkend AAAAAAAALM}
00181     {\cf17 auto} duration2 = std::chrono::seconds(2);\par
{\bkmkstart AAAAAAAALT}{\bkmkend AAAAAAAALT}
00182     {\cf17 auto} duration3 = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAALW}{\bkmkend AAAAAAAALW}
00183     \par
{\bkmkstart AAAAAAAALX}{\bkmkend AAAAAAAALX}
00184     EXPECT_LT(duration1, duration2);\par
{\bkmkstart AAAAAAAALY}{\bkmkend AAAAAAAALY}
00185     EXPECT_GT(duration2, duration1);\par
{\bkmkstart AAAAAAAAMA}{\bkmkend AAAAAAAAMA}
00186     EXPECT_EQ(duration1, duration3);\par
{\bkmkstart AAAAAAAAMC}{\bkmkend AAAAAAAAMC}
00187     EXPECT_NE(duration1, duration2);\par
{\bkmkstart AAAAAAAAMD}{\bkmkend AAAAAAAAMD}
00188 \}\par
{\bkmkstart AAAAAAAAMF}{\bkmkend AAAAAAAAMF}
00189 \par
{\bkmkstart AAAAAAAAMI}{\bkmkend AAAAAAAAMI}
00194 TEST_F(ChronoCoverageTest, TestChronoArithmetic) \{\par
{\bkmkstart AAAAAAAAMO}{\bkmkend AAAAAAAAMO}
00195     {\cf17 auto} duration1 = std::chrono::seconds(5);\par
{\bkmkstart AAAAAAAAMU}{\bkmkend AAAAAAAAMU}
00196     {\cf17 auto} duration2 = std::chrono::seconds(3);\par
{\bkmkstart AAAAAAAAMY}{\bkmkend AAAAAAAAMY}
00197     \par
{\bkmkstart AAAAAAAANB}{\bkmkend AAAAAAAANB}
00198     {\cf17 auto} sum = duration1 + duration2;\par
{\bkmkstart AAAAAAAANE}{\bkmkend AAAAAAAANE}
00199     {\cf17 auto} diff = duration1 - duration2;\par
{\bkmkstart AAAAAAAANJ}{\bkmkend AAAAAAAANJ}
00200     {\cf17 auto} mult = duration1 * 2;\par
{\bkmkstart AAAAAAAANN}{\bkmkend AAAAAAAANN}
00201     {\cf17 auto} div = duration1 / 2;\par
{\bkmkstart AAAAAAAANR}{\bkmkend AAAAAAAANR}
00202     \par
{\bkmkstart AAAAAAAANT}{\bkmkend AAAAAAAANT}
00203     EXPECT_EQ(sum.count(), 8);\par
{\bkmkstart AAAAAAAANW}{\bkmkend AAAAAAAANW}
00204     EXPECT_EQ(diff.count(), 2);\par
{\bkmkstart AAAAAAAAOB}{\bkmkend AAAAAAAAOB}
00205     EXPECT_EQ(mult.count(), 10);\par
{\bkmkstart AAAAAAAAOF}{\bkmkend AAAAAAAAOF}
00206     EXPECT_EQ(div.count(), 2);\par
{\bkmkstart AAAAAAAAOG}{\bkmkend AAAAAAAAOG}
00207 \}\par
{\bkmkstart AAAAAAAAOI}{\bkmkend AAAAAAAAOI}
00208 \par
{\bkmkstart AAAAAAAAOJ}{\bkmkend AAAAAAAAOJ}
00213 TEST_F(ChronoCoverageTest, TestAdvancedDurationOperations) \{\par
{\bkmkstart AAAAAAAAOQ}{\bkmkend AAAAAAAAOQ}
00214     {\cf20 // Test different duration types with complex operations}\par
{\bkmkstart AAAAAAAAOS}{\bkmkend AAAAAAAAOS}
00215     {\cf17 auto} hours = std::chrono::hours(2);\par
{\bkmkstart AAAAAAAAOX}{\bkmkend AAAAAAAAOX}
00216     {\cf17 auto} minutes = std::chrono::minutes(30);\par
{\bkmkstart AAAAAAAAPA}{\bkmkend AAAAAAAAPA}
00217     {\cf17 auto} seconds = std::chrono::seconds(45);\par
{\bkmkstart AAAAAAAAPC}{\bkmkend AAAAAAAAPC}
00218     {\cf17 auto} milliseconds = std::chrono::milliseconds(500);\par
{\bkmkstart AAAAAAAAPD}{\bkmkend AAAAAAAAPD}
00219     \par
{\bkmkstart AAAAAAAAPF}{\bkmkend AAAAAAAAPF}
00220     {\cf20 // Test complex arithmetic}\par
{\bkmkstart AAAAAAAAPG}{\bkmkend AAAAAAAAPG}
00221     {\cf17 auto} total = hours + minutes + seconds + milliseconds;\par
{\bkmkstart AAAAAAAAPH}{\bkmkend AAAAAAAAPH}
00222     {\cf17 auto} total_ms = std::chrono::duration_cast<std::chrono::milliseconds>(total);\par
{\bkmkstart AAAAAAAAPL}{\bkmkend AAAAAAAAPL}
00223     \par
{\bkmkstart AAAAAAAAPP}{\bkmkend AAAAAAAAPP}
00224     EXPECT_GT(total_ms.count(), 0);\par
{\bkmkstart AAAAAAAAPR}{\bkmkend AAAAAAAAPR}
00225     \par
{\bkmkstart AAAAAAAAPS}{\bkmkend AAAAAAAAPS}
00226     {\cf20 // Test duration ratios}\par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00227     {\cf17 auto} ratio = std::chrono::duration_cast<std::chrono::nanoseconds>(total);\par
{\bkmkstart AAAAAAAAPY}{\bkmkend AAAAAAAAPY}
00228     EXPECT_GT(ratio.count(), 0);\par
{\bkmkstart AAAAAAAAQB}{\bkmkend AAAAAAAAQB}
00229 \}\par
{\bkmkstart AAAAAAAAQC}{\bkmkend AAAAAAAAQC}
00230 \par
{\bkmkstart AAAAAAAAQE}{\bkmkend AAAAAAAAQE}
00235 TEST_F(ChronoCoverageTest, TestClockPrecision) \{\par
{\bkmkstart AAAAAAAAQI}{\bkmkend AAAAAAAAQI}
00236     {\cf20 // Test high resolution clock precision}\par
{\bkmkstart AAAAAAAAQJ}{\bkmkend AAAAAAAAQJ}
00237     {\cf17 auto} start_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00238     std::this_thread::sleep_for(std::chrono::microseconds(100));\par
{\bkmkstart AAAAAAAAQN}{\bkmkend AAAAAAAAQN}
00239     {\cf17 auto} end_hr = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAAAQQ}{\bkmkend AAAAAAAAQQ}
00240     {\cf17 auto} duration_hr = std::chrono::duration_cast<std::chrono::nanoseconds>(end_hr - start_hr);\par
{\bkmkstart AAAAAAAAQR}{\bkmkend AAAAAAAAQR}
00241     \par
{\bkmkstart AAAAAAAAQS}{\bkmkend AAAAAAAAQS}
00242     EXPECT_GT(duration_hr.count(), 0);\par
{\bkmkstart AAAAAAAAQU}{\bkmkend AAAAAAAAQU}
00243     \par
{\bkmkstart AAAAAAAAQW}{\bkmkend AAAAAAAAQW}
00244     {\cf20 // Test steady clock precision}\par
{\bkmkstart AAAAAAAAQX}{\bkmkend AAAAAAAAQX}
00245     {\cf17 auto} start_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAARA}{\bkmkend AAAAAAAARA}
00246     std::this_thread::sleep_for(std::chrono::microseconds(100));\par
{\bkmkstart AAAAAAAARD}{\bkmkend AAAAAAAARD}
00247     {\cf17 auto} end_sc = std::chrono::steady_clock::now();\par
{\bkmkstart AAAAAAAARG}{\bkmkend AAAAAAAARG}
00248     {\cf17 auto} duration_sc = std::chrono::duration_cast<std::chrono::nanoseconds>(end_sc - start_sc);\par
{\bkmkstart AAAAAAAARL}{\bkmkend AAAAAAAARL}
00249     \par
{\bkmkstart AAAAAAAARM}{\bkmkend AAAAAAAARM}
00250     EXPECT_GT(duration_sc.count(), 0);\par
{\bkmkstart AAAAAAAARO}{\bkmkend AAAAAAAARO}
00251 \}\par
{\bkmkstart AAAAAAAARQ}{\bkmkend AAAAAAAARQ}
00252 \par
{\bkmkstart AAAAAAAARR}{\bkmkend AAAAAAAARR}
00257 TEST_F(ChronoCoverageTest, TestTimePointArithmetic) \{\par
{\bkmkstart AAAAAAAARU}{\bkmkend AAAAAAAARU}
00258     {\cf17 auto} now = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAARY}{\bkmkend AAAAAAAARY}
00259     {\cf17 auto} one_second = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAASA}{\bkmkend AAAAAAAASA}
00260     {\cf17 auto} one_minute = std::chrono::minutes(1);\par
{\bkmkstart AAAAAAAASC}{\bkmkend AAAAAAAASC}
00261     {\cf17 auto} one_hour = std::chrono::hours(1);\par
{\bkmkstart AAAAAAAASF}{\bkmkend AAAAAAAASF}
00262     \par
{\bkmkstart AAAAAAAASG}{\bkmkend AAAAAAAASG}
00263     {\cf20 // Test addition}\par
{\bkmkstart AAAAAAAASI}{\bkmkend AAAAAAAASI}
00264     {\cf17 auto} future1 = now + one_second;\par
{\bkmkstart AAAAAAAASM}{\bkmkend AAAAAAAASM}
00265     {\cf17 auto} future2 = now + one_minute;\par
{\bkmkstart AAAAAAAASQ}{\bkmkend AAAAAAAASQ}
00266     {\cf17 auto} future3 = now + one_hour;\par
{\bkmkstart AAAAAAAASS}{\bkmkend AAAAAAAASS}
00267     \par
{\bkmkstart AAAAAAAASU}{\bkmkend AAAAAAAASU}
00268     EXPECT_GT(future1, now);\par
{\bkmkstart AAAAAAAASX}{\bkmkend AAAAAAAASX}
00269     EXPECT_GT(future2, now);\par
{\bkmkstart AAAAAAAATA}{\bkmkend AAAAAAAATA}
00270     EXPECT_GT(future3, now);\par
{\bkmkstart AAAAAAAATD}{\bkmkend AAAAAAAATD}
00271     \par
{\bkmkstart AAAAAAAATE}{\bkmkend AAAAAAAATE}
00272     {\cf20 // Test subtraction}\par
{\bkmkstart AAAAAAAATF}{\bkmkend AAAAAAAATF}
00273     {\cf17 auto} past1 = now - one_second;\par
{\bkmkstart AAAAAAAATG}{\bkmkend AAAAAAAATG}
00274     {\cf17 auto} past2 = now - one_minute;\par
{\bkmkstart AAAAAAAATH}{\bkmkend AAAAAAAATH}
00275     {\cf17 auto} past3 = now - one_hour;\par
{\bkmkstart AAAAAAAATI}{\bkmkend AAAAAAAATI}
00276     \par
{\bkmkstart AAAAAAAATJ}{\bkmkend AAAAAAAATJ}
00277     EXPECT_LT(past1, now);\par
{\bkmkstart AAAAAAAATL}{\bkmkend AAAAAAAATL}
00278     EXPECT_LT(past2, now);\par
{\bkmkstart AAAAAAAATM}{\bkmkend AAAAAAAATM}
00279     EXPECT_LT(past3, now);\par
{\bkmkstart AAAAAAAATN}{\bkmkend AAAAAAAATN}
00280 \}\par
{\bkmkstart AAAAAAAATO}{\bkmkend AAAAAAAATO}
00281 \par
{\bkmkstart AAAAAAAATP}{\bkmkend AAAAAAAATP}
00286 TEST_F(ChronoCoverageTest, TestDurationSpecialCases) \{\par
{\bkmkstart AAAAAAAATQ}{\bkmkend AAAAAAAATQ}
00287     {\cf20 // Test zero duration}\par
{\bkmkstart AAAAAAAATS}{\bkmkend AAAAAAAATS}
00288     {\cf17 auto} zero_sec = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAAATW}{\bkmkend AAAAAAAATW}
00289     {\cf17 auto} zero_ms = std::chrono::milliseconds(0);\par
{\bkmkstart AAAAAAAATX}{\bkmkend AAAAAAAATX}
00290     {\cf17 auto} zero_us = std::chrono::microseconds(0);\par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00291     {\cf17 auto} zero_ns = std::chrono::nanoseconds(0);\par
{\bkmkstart AAAAAAAAUD}{\bkmkend AAAAAAAAUD}
00292     \par
{\bkmkstart AAAAAAAAUE}{\bkmkend AAAAAAAAUE}
00293     EXPECT_EQ(zero_sec.count(), 0);\par
{\bkmkstart AAAAAAAAUF}{\bkmkend AAAAAAAAUF}
00294     EXPECT_EQ(zero_ms.count(), 0);\par
{\bkmkstart AAAAAAAAUH}{\bkmkend AAAAAAAAUH}
00295     EXPECT_EQ(zero_us.count(), 0);\par
{\bkmkstart AAAAAAAAUI}{\bkmkend AAAAAAAAUI}
00296     EXPECT_EQ(zero_ns.count(), 0);\par
{\bkmkstart AAAAAAAAUJ}{\bkmkend AAAAAAAAUJ}
00297     \par
{\bkmkstart AAAAAAAAUL}{\bkmkend AAAAAAAAUL}
00298     {\cf20 // Test negative duration}\par
{\bkmkstart AAAAAAAAUO}{\bkmkend AAAAAAAAUO}
00299     {\cf17 auto} neg_sec = std::chrono::seconds(-1);\par
{\bkmkstart AAAAAAAAUR}{\bkmkend AAAAAAAAUR}
00300     {\cf17 auto} neg_ms = std::chrono::milliseconds(-1000);\par
{\bkmkstart AAAAAAAAUT}{\bkmkend AAAAAAAAUT}
00301     \par
{\bkmkstart AAAAAAAAUU}{\bkmkend AAAAAAAAUU}
00302     EXPECT_EQ(neg_sec.count(), -1);\par
{\bkmkstart AAAAAAAAUV}{\bkmkend AAAAAAAAUV}
00303     EXPECT_EQ(neg_ms.count(), -1000);\par
{\bkmkstart AAAAAAAAUX}{\bkmkend AAAAAAAAUX}
00304     \par
{\bkmkstart AAAAAAAAUY}{\bkmkend AAAAAAAAUY}
00305     {\cf20 // Test large duration}\par
{\bkmkstart AAAAAAAAUZ}{\bkmkend AAAAAAAAUZ}
00306     {\cf17 auto} large_sec = std::chrono::seconds(INT_MAX);\par
{\bkmkstart AAAAAAAAVC}{\bkmkend AAAAAAAAVC}
00307     {\cf17 auto} large_ms = std::chrono::milliseconds(INT_MAX);\par
{\bkmkstart AAAAAAAAVF}{\bkmkend AAAAAAAAVF}
00308     \par
{\bkmkstart AAAAAAAAVG}{\bkmkend AAAAAAAAVG}
00309     EXPECT_EQ(large_sec.count(), INT_MAX);\par
{\bkmkstart AAAAAAAAVI}{\bkmkend AAAAAAAAVI}
00310     EXPECT_EQ(large_ms.count(), INT_MAX);\par
{\bkmkstart AAAAAAAAVK}{\bkmkend AAAAAAAAVK}
00311 \}\par
{\bkmkstart AAAAAAAAVM}{\bkmkend AAAAAAAAVM}
00312 \par
{\bkmkstart AAAAAAAAVO}{\bkmkend AAAAAAAAVO}
00317 TEST_F(ChronoCoverageTest, TestClockConversion) \{\par
{\bkmkstart AAAAAAAAVR}{\bkmkend AAAAAAAAVR}
00318     {\cf20 // Test system clock to time_t conversion}\par
{\bkmkstart AAAAAAAAVS}{\bkmkend AAAAAAAAVS}
00319     {\cf17 auto} now_sys = std::chrono::system_clock::now();\par
{\bkmkstart AAAAAAAAVV}{\bkmkend AAAAAAAAVV}
00320     {\cf17 auto} time_t_now = std::chrono::system_clock::to_time_t(now_sys);\par
{\bkmkstart AAAAAAAAVZ}{\bkmkend AAAAAAAAVZ}
00321     {\cf17 auto} back_to_sys = std::chrono::system_clock::from_time_t(time_t_now);\par
{\bkmkstart AAAAAAAAWB}{\bkmkend AAAAAAAAWB}
00322     \par
{\bkmkstart AAAAAAAAWC}{\bkmkend AAAAAAAAWC}
00323     EXPECT_GT(time_t_now, 0);\par
{\bkmkstart AAAAAAAAWE}{\bkmkend AAAAAAAAWE}
00324     \par
{\bkmkstart AAAAAAAAWF}{\bkmkend AAAAAAAAWF}
00325     {\cf20 // Test duration conversions between different types}\par
{\bkmkstart AAAAAAAAWG}{\bkmkend AAAAAAAAWG}
00326     {\cf17 auto} seconds_val = std::chrono::seconds(1);\par
{\bkmkstart AAAAAAAAWH}{\bkmkend AAAAAAAAWH}
00327     {\cf17 auto} milliseconds_val = std::chrono::duration_cast<std::chrono::milliseconds>(seconds_val);\par
{\bkmkstart AAAAAAAAWJ}{\bkmkend AAAAAAAAWJ}
00328     {\cf17 auto} microseconds_val = std::chrono::duration_cast<std::chrono::microseconds>(seconds_val);\par
{\bkmkstart AAAAAAAAWL}{\bkmkend AAAAAAAAWL}
00329     {\cf17 auto} nanoseconds_val = std::chrono::duration_cast<std::chrono::nanoseconds>(seconds_val);\par
{\bkmkstart AAAAAAAAWP}{\bkmkend AAAAAAAAWP}
00330     \par
{\bkmkstart AAAAAAAAWR}{\bkmkend AAAAAAAAWR}
00331     EXPECT_EQ(milliseconds_val.count(), 1000);\par
{\bkmkstart AAAAAAAAWS}{\bkmkend AAAAAAAAWS}
00332     EXPECT_EQ(microseconds_val.count(), 1000000);\par
{\bkmkstart AAAAAAAAWT}{\bkmkend AAAAAAAAWT}
00333     EXPECT_EQ(nanoseconds_val.count(), 1000000000);\par
{\bkmkstart AAAAAAAAWU}{\bkmkend AAAAAAAAWU}
00334 \}\par
{\bkmkstart AAAAAAAAWV}{\bkmkend AAAAAAAAWV}
00335 \par
{\bkmkstart AAAAAAAAWW}{\bkmkend AAAAAAAAWW}
00340 TEST_F(ChronoCoverageTest, TestChronoLiteralsAdvanced) \{\par
{\bkmkstart AAAAAAAAWY}{\bkmkend AAAAAAAAWY}
00341     {\cf17 using namespace }std::chrono_literals;\par
{\bkmkstart AAAAAAAAWZ}{\bkmkend AAAAAAAAWZ}
00342     \par
{\bkmkstart AAAAAAAAXA}{\bkmkend AAAAAAAAXA}
00343     {\cf20 // Test various literal combinations}\par
{\bkmkstart AAAAAAAAXC}{\bkmkend AAAAAAAAXC}
00344     {\cf17 auto} duration1 = 1h + 30min + 45s + 500ms;\par
{\bkmkstart AAAAAAAAXH}{\bkmkend AAAAAAAAXH}
00345     {\cf17 auto} duration2 = 2h - 15min + 30s;\par
{\bkmkstart AAAAAAAAXK}{\bkmkend AAAAAAAAXK}
00346     {\cf17 auto} duration3 = 3h * 2;\par
{\bkmkstart AAAAAAAAXL}{\bkmkend AAAAAAAAXL}
00347     {\cf17 auto} duration4 = 6h / 3;\par
{\bkmkstart AAAAAAAAXO}{\bkmkend AAAAAAAAXO}
00348     \par
{\bkmkstart AAAAAAAAXP}{\bkmkend AAAAAAAAXP}
00349     EXPECT_GT(duration1.count(), 0);\par
{\bkmkstart AAAAAAAAXR}{\bkmkend AAAAAAAAXR}
00350     EXPECT_GT(duration2.count(), 0);\par
{\bkmkstart AAAAAAAAXU}{\bkmkend AAAAAAAAXU}
00351     EXPECT_GT(duration3.count(), 0);\par
{\bkmkstart AAAAAAAAXW}{\bkmkend AAAAAAAAXW}
00352     EXPECT_GT(duration4.count(), 0);\par
{\bkmkstart AAAAAAAAXY}{\bkmkend AAAAAAAAXY}
00353     \par
{\bkmkstart AAAAAAAAXZ}{\bkmkend AAAAAAAAXZ}
00354     {\cf20 // Test literal arithmetic}\par
{\bkmkstart AAAAAAAAYA}{\bkmkend AAAAAAAAYA}
00355     {\cf17 auto} sum = 1h + 2h + 3h;\par
{\bkmkstart AAAAAAAAYC}{\bkmkend AAAAAAAAYC}
00356     {\cf17 auto} diff = 10h - 5h;\par
{\bkmkstart AAAAAAAAYE}{\bkmkend AAAAAAAAYE}
00357     {\cf17 auto} mult = 2h * 3;\par
{\bkmkstart AAAAAAAAYI}{\bkmkend AAAAAAAAYI}
00358     {\cf17 auto} div = 12h / 4;\par
{\bkmkstart AAAAAAAAYK}{\bkmkend AAAAAAAAYK}
00359     \par
{\bkmkstart AAAAAAAAYM}{\bkmkend AAAAAAAAYM}
00360     EXPECT_EQ(sum.count(), 6);\par
{\bkmkstart AAAAAAAAYR}{\bkmkend AAAAAAAAYR}
00361     EXPECT_EQ(diff.count(), 5);\par
{\bkmkstart AAAAAAAAYU}{\bkmkend AAAAAAAAYU}
00362     EXPECT_EQ(mult.count(), 6);\par
{\bkmkstart AAAAAAAAYX}{\bkmkend AAAAAAAAYX}
00363     EXPECT_EQ(div.count(), 3);\par
{\bkmkstart AAAAAAAAZB}{\bkmkend AAAAAAAAZB}
00364 \}\par
{\bkmkstart AAAAAAAAZD}{\bkmkend AAAAAAAAZD}
00365 \par
{\bkmkstart AAAAAAAAZE}{\bkmkend AAAAAAAAZE}
00370 TEST_F(ChronoCoverageTest, TestClockPropertiesAdvanced) \{\par
{\bkmkstart AAAAAAAAZJ}{\bkmkend AAAAAAAAZJ}
00371     {\cf20 // Test clock period information}\par
{\bkmkstart AAAAAAAAZL}{\bkmkend AAAAAAAAZL}
00372     {\cf17 using }hr_clock = std::chrono::high_resolution_clock;\par
{\bkmkstart AAAAAAAAZO}{\bkmkend AAAAAAAAZO}
00373     {\cf17 using }sc_clock = std::chrono::steady_clock;\par
{\bkmkstart AAAAAAAAZT}{\bkmkend AAAAAAAAZT}
00374     {\cf17 using }sys_clock = std::chrono::system_clock;\par
{\bkmkstart AAAAAAAAZV}{\bkmkend AAAAAAAAZV}
00375     \par
{\bkmkstart AAAAAAAAZW}{\bkmkend AAAAAAAAZW}
00376     {\cf20 // Test clock period ratios}\par
{\bkmkstart AAAAAAAAZZ}{\bkmkend AAAAAAAAZZ}
00377     {\cf17 auto} hr_period = hr_clock::period::num;\par
{\bkmkstart AAAAAAABAF}{\bkmkend AAAAAAABAF}
00378     {\cf17 auto} sc_period = sc_clock::period::num;\par
{\bkmkstart AAAAAAABAH}{\bkmkend AAAAAAABAH}
00379     {\cf17 auto} sys_period = sys_clock::period::num;\par
{\bkmkstart AAAAAAABAJ}{\bkmkend AAAAAAABAJ}
00380     \par
{\bkmkstart AAAAAAABAN}{\bkmkend AAAAAAABAN}
00381     EXPECT_GT(hr_period, 0);\par
{\bkmkstart AAAAAAABAQ}{\bkmkend AAAAAAABAQ}
00382     EXPECT_GT(sc_period, 0);\par
{\bkmkstart AAAAAAABAT}{\bkmkend AAAAAAABAT}
00383     EXPECT_GT(sys_period, 0);\par
{\bkmkstart AAAAAAABAW}{\bkmkend AAAAAAABAW}
00384     \par
{\bkmkstart AAAAAAABAX}{\bkmkend AAAAAAABAX}
00385     {\cf20 // Test clock duration types}\par
{\bkmkstart AAAAAAABAZ}{\bkmkend AAAAAAABAZ}
00386     {\cf17 using }hr_duration = hr_clock::duration;\par
{\bkmkstart AAAAAAABBD}{\bkmkend AAAAAAABBD}
00387     {\cf17 using }sc_duration = sc_clock::duration;\par
{\bkmkstart AAAAAAABBI}{\bkmkend AAAAAAABBI}
00388     {\cf17 using }sys_duration = sys_clock::duration;\par
{\bkmkstart AAAAAAABBK}{\bkmkend AAAAAAABBK}
00389     \par
{\bkmkstart AAAAAAABBN}{\bkmkend AAAAAAABBN}
00390     {\cf17 auto} hr_dur = hr_duration(1);\par
{\bkmkstart AAAAAAABBR}{\bkmkend AAAAAAABBR}
00391     {\cf17 auto} sc_dur = sc_duration(1);\par
{\bkmkstart AAAAAAABBV}{\bkmkend AAAAAAABBV}
00392     {\cf17 auto} sys_dur = sys_duration(1);\par
{\bkmkstart AAAAAAABBY}{\bkmkend AAAAAAABBY}
00393     \par
{\bkmkstart AAAAAAABCA}{\bkmkend AAAAAAABCA}
00394     EXPECT_GT(hr_dur.count(), 0);\par
{\bkmkstart AAAAAAABCE}{\bkmkend AAAAAAABCE}
00395     EXPECT_GT(sc_dur.count(), 0);\par
{\bkmkstart AAAAAAABCK}{\bkmkend AAAAAAABCK}
00396     EXPECT_GT(sys_dur.count(), 0);\par
{\bkmkstart AAAAAAABCN}{\bkmkend AAAAAAABCN}
00397 \}\par
{\bkmkstart AAAAAAABCR}{\bkmkend AAAAAAABCR}
00398 \par
{\bkmkstart AAAAAAABCU}{\bkmkend AAAAAAABCU}
00403 TEST_F(ChronoCoverageTest, TestChronoErrorHandling) \{\par
{\bkmkstart AAAAAAABCX}{\bkmkend AAAAAAABCX}
00404     {\cf20 // Test overflow protection}\par
{\bkmkstart AAAAAAABCY}{\bkmkend AAAAAAABCY}
00405     {\cf17 auto} max_duration = std::chrono::seconds(INT_MAX);\par
{\bkmkstart AAAAAAABDJ}{\bkmkend AAAAAAABDJ}
00406     {\cf17 auto} min_duration = std::chrono::seconds(INT_MIN);\par
{\bkmkstart AAAAAAABDM}{\bkmkend AAAAAAABDM}
00407     \par
{\bkmkstart AAAAAAABDO}{\bkmkend AAAAAAABDO}
00408     EXPECT_EQ(max_duration.count(), INT_MAX);\par
{\bkmkstart AAAAAAABDR}{\bkmkend AAAAAAABDR}
00409     EXPECT_EQ(min_duration.count(), INT_MIN);\par
{\bkmkstart AAAAAAABEB}{\bkmkend AAAAAAABEB}
00410     \par
{\bkmkstart AAAAAAABED}{\bkmkend AAAAAAABED}
00411     {\cf20 // Test duration bounds}\par
{\bkmkstart AAAAAAABEF}{\bkmkend AAAAAAABEF}
00412     {\cf17 auto} zero_duration = std::chrono::seconds(0);\par
{\bkmkstart AAAAAAABEJ}{\bkmkend AAAAAAABEJ}
00413     {\cf17 auto} small_duration = std::chrono::nanoseconds(1);\par
{\bkmkstart AAAAAAABEL}{\bkmkend AAAAAAABEL}
00414     {\cf17 auto} large_duration = std::chrono::hours(24);\par
{\bkmkstart AAAAAAABEO}{\bkmkend AAAAAAABEO}
00415     \par
{\bkmkstart AAAAAAABEQ}{\bkmkend AAAAAAABEQ}
00416     EXPECT_EQ(zero_duration.count(), 0);\par
{\bkmkstart AAAAAAABES}{\bkmkend AAAAAAABES}
00417     EXPECT_EQ(small_duration.count(), 1);\par
{\bkmkstart AAAAAAABEV}{\bkmkend AAAAAAABEV}
00418     EXPECT_EQ(large_duration.count(), 24);\par
{\bkmkstart AAAAAAABEY}{\bkmkend AAAAAAABEY}
00419 \}\par
{\bkmkstart AAAAAAABFA}{\bkmkend AAAAAAABFA}
00420 \par
{\bkmkstart AAAAAAABFD}{\bkmkend AAAAAAABFD}
00425 TEST_F(ChronoCoverageTest, TestChronoPerformance) \{\par
{\bkmkstart AAAAAAABFF}{\bkmkend AAAAAAABFF}
00426     {\cf20 // Test timing accuracy with multiple measurements}\par
{\bkmkstart AAAAAAABFH}{\bkmkend AAAAAAABFH}
00427     std::vector<std::chrono::nanoseconds> measurements;\par
{\bkmkstart AAAAAAABFM}{\bkmkend AAAAAAABFM}
00428     \par
{\bkmkstart AAAAAAABFO}{\bkmkend AAAAAAABFO}
00429     {\cf19 for} ({\cf18 int} i = 0; i < 10; ++i) \{\par
{\bkmkstart AAAAAAABFZ}{\bkmkend AAAAAAABFZ}
00430         {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAABGE}{\bkmkend AAAAAAABGE}
00431         std::this_thread::sleep_for(std::chrono::microseconds(100));\par
{\bkmkstart AAAAAAABGK}{\bkmkend AAAAAAABGK}
00432         {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAABGM}{\bkmkend AAAAAAABGM}
00433         \par
{\bkmkstart AAAAAAABGO}{\bkmkend AAAAAAABGO}
00434         {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start);\par
{\bkmkstart AAAAAAABGQ}{\bkmkend AAAAAAABGQ}
00435         measurements.push_back(duration);\par
{\bkmkstart AAAAAAABGR}{\bkmkend AAAAAAABGR}
00436     \}\par
{\bkmkstart AAAAAAABGS}{\bkmkend AAAAAAABGS}
00437     \par
{\bkmkstart AAAAAAABGT}{\bkmkend AAAAAAABGT}
00438     {\cf20 // Verify all measurements are positive}\par
{\bkmkstart AAAAAAABGU}{\bkmkend AAAAAAABGU}
00439     {\cf19 for} ({\cf17 const} {\cf17 auto}& measurement : measurements) \{\par
{\bkmkstart AAAAAAABGV}{\bkmkend AAAAAAABGV}
00440         EXPECT_GT(measurement.count(), 0);\par
{\bkmkstart AAAAAAABGW}{\bkmkend AAAAAAABGW}
00441     \}\par
{\bkmkstart AAAAAAABGX}{\bkmkend AAAAAAABGX}
00442     \par
{\bkmkstart AAAAAAABGY}{\bkmkend AAAAAAABGY}
00443     {\cf20 // Test duration statistics}\par
{\bkmkstart AAAAAAABGZ}{\bkmkend AAAAAAABGZ}
00444     {\cf17 auto} total_duration = std::chrono::nanoseconds(0);\par
{\bkmkstart AAAAAAABHA}{\bkmkend AAAAAAABHA}
00445     {\cf19 for} ({\cf17 const} {\cf17 auto}& measurement : measurements) \{\par
{\bkmkstart AAAAAAABHB}{\bkmkend AAAAAAABHB}
00446         total_duration += measurement;\par
{\bkmkstart AAAAAAABHC}{\bkmkend AAAAAAABHC}
00447     \}\par
{\bkmkstart AAAAAAABHD}{\bkmkend AAAAAAABHD}
00448     \par
{\bkmkstart AAAAAAABHE}{\bkmkend AAAAAAABHE}
00449     EXPECT_GT(total_duration.count(), 0);\par
{\bkmkstart AAAAAAABHF}{\bkmkend AAAAAAABHF}
00450 \}\par
{\bkmkstart AAAAAAABHG}{\bkmkend AAAAAAABHG}
00451 \par
{\bkmkstart AAAAAAABHH}{\bkmkend AAAAAAABHH}
00452 \} {\cf20 // namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_doubly_linked_list.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_doubly_linked_list.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_doubly_linked_list.cpp}
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/doubly_linked_list.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_doubly_linked_list.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__doubly__linked__list_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAWN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (DoublyLinkedList, InsertAndTraverse)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABBU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (DoublyLinkedList, EdgeCases)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLV}
{\bkmkend AAAAAAADLV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_doubly_linked_list.cpp}
{\xe \v test_doubly_linked_list.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (DoublyLinkedList , EdgeCases )}}
\par
{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABBT" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQF" }{}}{\fldrslt {\cs37\ul\cf2 test_doubly_linked_list.cpp}}}
.}\par
}
{\xe \v TEST\:test_doubly_linked_list.cpp}
{\xe \v test_doubly_linked_list.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (DoublyLinkedList , InsertAndTraverse )}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAWM" }{}}{\fldrslt {\cs37\ul\cf2 4}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQF" }{}}{\fldrslt {\cs37\ul\cf2 test_doubly_linked_list.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_doubly_linked_list.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_doubly_linked_list.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_doubly_linked_list.cpp}
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQG" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAATK}{\bkmkend AAAAAAAATK}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAATU}{\bkmkend AAAAAAAATU}
00002 {\cf21 #include "ds/doubly_linked_list.h"}\par
{\bkmkstart AAAAAAAAWK}{\bkmkend AAAAAAAAWK}
00003 \par
{\bkmkstart AAAAAAAAWM}{\bkmkend AAAAAAAAWM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAWN" }{}}{\fldrslt {\cs37\ul\cf2 00004}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAWN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(DoublyLinkedList, InsertAndTraverse)\{\par
{\bkmkstart AAAAAAAAYG}{\bkmkend AAAAAAAAYG}
00005     ds::DoublyLinkedList<int> dll;\par
{\bkmkstart AAAAAAAAYO}{\bkmkend AAAAAAAAYO}
00006     EXPECT_TRUE(dll.empty());\par
{\bkmkstart AAAAAAAAYV}{\bkmkend AAAAAAAAYV}
00007     dll.push_back(1); dll.push_back(2); dll.push_front(0);\par
{\bkmkstart AAAAAAAAZA}{\bkmkend AAAAAAAAZA}
00008     {\cf18 int} sum = 0; {\cf19 for} ({\cf17 auto} it=dll.begin(); it!=dll.end(); ++it) sum += *it;\par
{\bkmkstart AAAAAAAAZI}{\bkmkend AAAAAAAAZI}
00009     EXPECT_EQ(sum, 3);\par
{\bkmkstart AAAAAAAAZM}{\bkmkend AAAAAAAAZM}
00010     {\cf17 auto} it = dll.begin(); ++it; dll.insert_after(it, 5); {\cf20 // after 1}\par
{\bkmkstart AAAAAAAAZR}{\bkmkend AAAAAAAAZR}
00011     {\cf18 int} arr[4]; {\cf18 int} i=0; {\cf19 for} ({\cf17 auto} it2=dll.begin(); it2!=dll.end(); ++it2) arr[i++]=*it2;\par
{\bkmkstart AAAAAAABAD}{\bkmkend AAAAAAABAD}
00012     EXPECT_EQ(arr[0],0); EXPECT_EQ(arr[1],1); EXPECT_EQ(arr[2],5); EXPECT_EQ(arr[3],2);\par
{\bkmkstart AAAAAAABAK}{\bkmkend AAAAAAABAK}
00013     {\cf20 // erase middle}\par
{\bkmkstart AAAAAAABAO}{\bkmkend AAAAAAABAO}
00014     {\cf17 auto} it3 = dll.begin(); ++it3; dll.erase(it3);\par
{\bkmkstart AAAAAAABAU}{\bkmkend AAAAAAABAU}
00015     {\cf18 int} arr2[3]; i=0; {\cf19 for} ({\cf17 auto} it4=dll.begin(); it4!=dll.end(); ++it4) arr2[i++]=*it4;\par
{\bkmkstart AAAAAAABBF}{\bkmkend AAAAAAABBF}
00016     EXPECT_EQ(arr2[0],0); EXPECT_EQ(arr2[1],5); EXPECT_EQ(arr2[2],2);\par
{\bkmkstart AAAAAAABBM}{\bkmkend AAAAAAABBM}
00017 \}\par
{\bkmkstart AAAAAAABBQ}{\bkmkend AAAAAAABBQ}
00018 \par
{\bkmkstart AAAAAAABBT}{\bkmkend AAAAAAABBT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABBU" }{}}{\fldrslt {\cs37\ul\cf2 00019}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAWN" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(DoublyLinkedList, EdgeCases)\{\par
{\bkmkstart AAAAAAABCG}{\bkmkend AAAAAAABCG}
00020     ds::DoublyLinkedList<int> dll;\par
{\bkmkstart AAAAAAABCP}{\bkmkend AAAAAAABCP}
00021     {\cf20 // insert into empty after end behaves like push_front}\par
{\bkmkstart AAAAAAABCT}{\bkmkend AAAAAAABCT}
00022     dll.insert_after(ds::DoublyLinkedList<int>::iterator(), 42);\par
{\bkmkstart AAAAAAABDS}{\bkmkend AAAAAAABDS}
00023     EXPECT_FALSE(dll.empty());\par
{\bkmkstart AAAAAAABDU}{\bkmkend AAAAAAABDU}
00024     {\cf17 auto} it = dll.begin(); EXPECT_EQ(*it, 42);\par
{\bkmkstart AAAAAAABDW}{\bkmkend AAAAAAABDW}
00025 \}\par
{\bkmkstart AAAAAAABDY}{\bkmkend AAAAAAABDY}
00026 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_graph_bfs_dfs.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_graph_bfs_dfs.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_graph_bfs_dfs.cpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/graph.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_graph_bfs_dfs.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__graph__bfs__dfs_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Graph, BFSandDFS)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLR}
{\bkmkend AAAAAAADLR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_graph_bfs_dfs.cpp}
{\xe \v test_graph_bfs_dfs.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (Graph , BFSandDFS )}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAO" }{}}{\fldrslt {\cs37\ul\cf2 4}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAC" }{}}{\fldrslt {\cs37\ul\cf2 test_graph_bfs_dfs.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_graph_bfs_dfs.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_graph_bfs_dfs.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_graph_bfs_dfs.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAD" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAJ}{\bkmkend AAAAAAAAAJ}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAAL}{\bkmkend AAAAAAAAAL}
00002 {\cf21 #include "ds/graph.h"}\par
{\bkmkstart AAAAAAAAAM}{\bkmkend AAAAAAAAAM}
00003 \par
{\bkmkstart AAAAAAAAAO}{\bkmkend AAAAAAAAAO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 00004}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(Graph, BFSandDFS)\{\par
{\bkmkstart AAAAAAAAAX}{\bkmkend AAAAAAAAAX}
00005     ds::Graph g(6);\par
{\bkmkstart AAAAAAAABA}{\bkmkend AAAAAAAABA}
00006     g.add_edge(0,1,{\cf17 true}); g.add_edge(1,2,{\cf17 true}); g.add_edge(2,3,{\cf17 true}); g.add_edge(3,4,{\cf17 true}); g.add_edge(4,5,{\cf17 true});\par
{\bkmkstart AAAAAAAABD}{\bkmkend AAAAAAAABD}
00007     {\cf17 auto} dist = g.bfs_dist(0);\par
{\bkmkstart AAAAAAAABE}{\bkmkend AAAAAAAABE}
00008     EXPECT_EQ(dist[0],0); EXPECT_EQ(dist[5],5);\par
{\bkmkstart AAAAAAAABF}{\bkmkend AAAAAAAABF}
00009     {\cf17 auto} order = g.dfs_order(0);\par
{\bkmkstart AAAAAAAABG}{\bkmkend AAAAAAAABG}
00010     ASSERT_FALSE(order.empty());\par
{\bkmkstart AAAAAAAABH}{\bkmkend AAAAAAAABH}
00011     EXPECT_EQ(order.front(), 0);\par
{\bkmkstart AAAAAAAABL}{\bkmkend AAAAAAAABL}
00012 \}\par
{\bkmkstart AAAAAAAABM}{\bkmkend AAAAAAAABM}
00013 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_hash_table.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_hash_table.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_hash_table.cpp}
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/hash_table.h"}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_hash_table.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__hash__table_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (HashTable, InsertFindErase)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLU}
{\bkmkend AAAAAAADLU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_hash_table.cpp}
{\xe \v test_hash_table.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (HashTable , InsertFindErase )}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJN" }{}}{\fldrslt {\cs37\ul\cf2 5}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADZ" }{}}{\fldrslt {\cs37\ul\cf2 test_hash_table.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_hash_table.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_hash_table.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_hash_table.cpp}
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEA" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAGQ}{\bkmkend AAAAAAAAGQ}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAHR}{\bkmkend AAAAAAAAHR}
00002 {\cf21 #include "ds/hash_table.h"}\par
{\bkmkstart AAAAAAAAIP}{\bkmkend AAAAAAAAIP}
00003 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAAJM}{\bkmkend AAAAAAAAJM}
00004 \par
{\bkmkstart AAAAAAAAJN}{\bkmkend AAAAAAAAJN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 00005}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJO" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(HashTable, InsertFindErase)\{\par
{\bkmkstart AAAAAAAANH}{\bkmkend AAAAAAAANH}
00006     ds::HashTable<std::string,int> ht(8);\par
{\bkmkstart AAAAAAAANP}{\bkmkend AAAAAAAANP}
00007     EXPECT_TRUE(ht.insert({\cf22 "a"},1));\par
{\bkmkstart AAAAAAAANU}{\bkmkend AAAAAAAANU}
00008     EXPECT_TRUE(ht.insert({\cf22 "b"},2));\par
{\bkmkstart AAAAAAAANZ}{\bkmkend AAAAAAAANZ}
00009     EXPECT_FALSE(ht.insert({\cf22 "a"},3)); {\cf20 // update}\par
{\bkmkstart AAAAAAAAOD}{\bkmkend AAAAAAAAOD}
00010     {\cf17 auto} v = ht.find({\cf22 "a"}); ASSERT_NE(v,{\cf17 nullptr}); EXPECT_EQ(*v,3);\par
{\bkmkstart AAAAAAAAON}{\bkmkend AAAAAAAAON}
00011     EXPECT_TRUE(ht.erase({\cf22 "a"}));\par
{\bkmkstart AAAAAAAAOR}{\bkmkend AAAAAAAAOR}
00012     EXPECT_EQ(ht.find({\cf22 "a"}), {\cf17 nullptr});\par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00013 \}\par
{\bkmkstart AAAAAAAAOV}{\bkmkend AAAAAAAAOV}
00014 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_heap.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_heap.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_heap.cpp}
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/heap.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_heap.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__heap_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (BinaryHeap, PushPopOrder)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (BinaryHeap, HeapSort)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLT}
{\bkmkend AAAAAAADLT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_heap.cpp}
{\xe \v test_heap.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (BinaryHeap , HeapSort )}}
\par
{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUP" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 test_heap.cpp}}}
.}\par
}
{\xe \v TEST\:test_heap.cpp}
{\xe \v test_heap.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (BinaryHeap , PushPopOrder )}}
\par
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASN" }{}}{\fldrslt {\cs37\ul\cf2 4}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALR" }{}}{\fldrslt {\cs37\ul\cf2 test_heap.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_heap.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_heap.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_heap.cpp}
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALU" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAQA}{\bkmkend AAAAAAAAQA}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAARF}{\bkmkend AAAAAAAARF}
00002 {\cf21 #include "ds/heap.h"}\par
{\bkmkstart AAAAAAAASK}{\bkmkend AAAAAAAASK}
00003 \par
{\bkmkstart AAAAAAAASN}{\bkmkend AAAAAAAASN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASP" }{}}{\fldrslt {\cs37\ul\cf2 00004}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(BinaryHeap, PushPopOrder)\{\par
{\bkmkstart AAAAAAAATY}{\bkmkend AAAAAAAATY}
00005     ds::BinaryHeap<int> h; h.push(3); h.push(1); h.push(5); h.push(2);\par
{\bkmkstart AAAAAAAAUG}{\bkmkend AAAAAAAAUG}
00006     EXPECT_EQ(h.top(), 5); h.pop(); EXPECT_EQ(h.top(), 3); h.pop(); EXPECT_EQ(h.top(), 2);\par
{\bkmkstart AAAAAAAAUK}{\bkmkend AAAAAAAAUK}
00007 \}\par
{\bkmkstart AAAAAAAAUM}{\bkmkend AAAAAAAAUM}
00008 \par
{\bkmkstart AAAAAAAAUP}{\bkmkend AAAAAAAAUP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAASP" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(BinaryHeap, HeapSort)\{\par
{\bkmkstart AAAAAAAAUS}{\bkmkend AAAAAAAAUS}
00010     ds::BinaryHeap<int> h; {\cf19 for} ({\cf18 int} v: \{5,1,4,2,3\}) h.push(v);\par
{\bkmkstart AAAAAAAAUW}{\bkmkend AAAAAAAAUW}
00011     {\cf17 auto} sorted = h.heap_sort_copy();\par
{\bkmkstart AAAAAAAAVA}{\bkmkend AAAAAAAAVA}
00012     {\cf20 // For max-heap, heap_sort_copy returns descending}\par
{\bkmkstart AAAAAAAAVB}{\bkmkend AAAAAAAAVB}
00013     ASSERT_EQ(sorted.size(), 5u);\par
{\bkmkstart AAAAAAAAVE}{\bkmkend AAAAAAAAVE}
00014     EXPECT_EQ(sorted[0], 5); EXPECT_EQ(sorted[1], 4); EXPECT_EQ(sorted[2], 3); EXPECT_EQ(sorted[3], 2); EXPECT_EQ(sorted[4], 1);\par
{\bkmkstart AAAAAAAAVH}{\bkmkend AAAAAAAAVH}
00015 \}\par
{\bkmkstart AAAAAAAAVJ}{\bkmkend AAAAAAAAVJ}
00016 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_lexer_parser_codegen.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_lexer_parser_codegen.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_lexer_parser_codegen.cpp}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "translator/lexer.h"}\par
{\f2 #include "translator/parser.h"}\par
{\f2 #include "translator/codegen.h"}\par
{\f2 #include "translator/cfg.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_lexer_parser_codegen.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__lexer__parser__codegen_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (LexerParser, BasicProgramParse)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (Codegen, EmitsCPP)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLS}
{\bkmkend AAAAAAADLS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_lexer_parser_codegen.cpp}
{\xe \v test_lexer_parser_codegen.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (Codegen , EmitsCPP )}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMS" }{}}{\fldrslt {\cs37\ul\cf2 24}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 test_lexer_parser_codegen.cpp}}}
.}\par
}
{\xe \v TEST\:test_lexer_parser_codegen.cpp}
{\xe \v test_lexer_parser_codegen.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (LexerParser , BasicProgramParse )}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 7}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAY" }{}}{\fldrslt {\cs37\ul\cf2 test_lexer_parser_codegen.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_lexer_parser_codegen.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_lexer_parser_codegen.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_lexer_parser_codegen.cpp}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAZ" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAACH}{\bkmkend AAAAAAAACH}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAACW}{\bkmkend AAAAAAAACW}
00002 {\cf21 #include "translator/lexer.h"}\par
{\bkmkstart AAAAAAAADU}{\bkmkend AAAAAAAADU}
00003 {\cf21 #include "translator/parser.h"}\par
{\bkmkstart AAAAAAAAEV}{\bkmkend AAAAAAAAEV}
00004 {\cf21 #include "translator/codegen.h"}\par
{\bkmkstart AAAAAAAAGH}{\bkmkend AAAAAAAAGH}
00005 {\cf21 #include "translator/cfg.h"}\par
{\bkmkstart AAAAAAAAHN}{\bkmkend AAAAAAAAHN}
00006 \par
{\bkmkstart AAAAAAAAHT}{\bkmkend AAAAAAAAHT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 00007}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(LexerParser, BasicProgramParse)\{\par
{\bkmkstart AAAAAAAALF}{\bkmkend AAAAAAAALF}
00008     {\cf17 const} {\cf18 char}* src = R{\cf22 "(10 LET X = 1 + 2}\par
{\bkmkstart AAAAAAAALI}{\bkmkend AAAAAAAALI}
00009 {\cf22 20 PRINT X}\par
{\bkmkstart AAAAAAAALJ}{\bkmkend AAAAAAAALJ}
00010 {\cf22 30 IF X THEN 50}\par
{\bkmkstart AAAAAAAALL}{\bkmkend AAAAAAAALL}
00011 {\cf22 40 GOTO 60}\par
{\bkmkstart AAAAAAAALN}{\bkmkend AAAAAAAALN}
00012 {\cf22 50 GOSUB 70}\par
{\bkmkstart AAAAAAAALO}{\bkmkend AAAAAAAALO}
00013 {\cf22 60 RETURN}\par
{\bkmkstart AAAAAAAALP}{\bkmkend AAAAAAAALP}
00014 {\cf22 70 PRINT X}\par
{\bkmkstart AAAAAAAALS}{\bkmkend AAAAAAAALS}
00015 {\cf22 )";}\par
{\bkmkstart AAAAAAAALV}{\bkmkend AAAAAAAALV}
00016 {\cf22     translator::Lexer lx(src);}\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00017 {\cf22     }{\cf17 auto} toks = lx.tokenize();\par
{\bkmkstart AAAAAAAAMB}{\bkmkend AAAAAAAAMB}
00018     translator::Parser ps(std::move(toks));\par
{\bkmkstart AAAAAAAAMH}{\bkmkend AAAAAAAAMH}
00019     {\cf17 auto} prog = ps.parseProgram();\par
{\bkmkstart AAAAAAAAMK}{\bkmkend AAAAAAAAMK}
00020     ASSERT_EQ(prog.stmts.size(), 7u);\par
{\bkmkstart AAAAAAAAML}{\bkmkend AAAAAAAAML}
00021     ASSERT_EQ(prog.labels.front(), 10);\par
{\bkmkstart AAAAAAAAMN}{\bkmkend AAAAAAAAMN}
00022     ASSERT_EQ(prog.labels.back(), 70);\par
{\bkmkstart AAAAAAAAMQ}{\bkmkend AAAAAAAAMQ}
00023 \par
{\bkmkstart AAAAAAAAMS}{\bkmkend AAAAAAAAMS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMT" }{}}{\fldrslt {\cs37\ul\cf2 00024}}}
     {\cf20 // CFG build and reachability}\par
{\bkmkstart AAAAAAAAMV}{\bkmkend AAAAAAAAMV}
00025     {\cf17 auto} cfg = translator::build_cfg(prog);\par
{\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00026     {\cf17 auto} dist = cfg.g.bfs_dist(0);\par
{\bkmkstart AAAAAAAANC}{\bkmkend AAAAAAAANC}
00027     {\cf20 // Ensure start is reachable and some edges exist}\par
{\bkmkstart AAAAAAAANF}{\bkmkend AAAAAAAANF}
00028     EXPECT_EQ(dist[0], 0);\par
{\bkmkstart AAAAAAAANI}{\bkmkend AAAAAAAANI}
00029 \}\par
{\bkmkstart AAAAAAAANK}{\bkmkend AAAAAAAANK}
00030 \par
{\bkmkstart AAAAAAAANL}{\bkmkend AAAAAAAANL}
00031 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHU" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(Codegen, EmitsCPP)\{\par
{\bkmkstart AAAAAAAANS}{\bkmkend AAAAAAAANS}
00032     {\cf17 const} {\cf18 char}* src = R{\cf22 "(10 LET X = 1 + 2 * 3}\par
{\bkmkstart AAAAAAAANX}{\bkmkend AAAAAAAANX}
00033 {\cf22 20 PRINT X}\par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
00034 {\cf22 )";}\par
{\bkmkstart AAAAAAAAOA}{\bkmkend AAAAAAAAOA}
00035 {\cf22     translator::Lexer lx(src);}\par
{\bkmkstart AAAAAAAAOK}{\bkmkend AAAAAAAAOK}
00036 {\cf22     }{\cf17 auto} toks = lx.tokenize();\par
{\bkmkstart AAAAAAAAOO}{\bkmkend AAAAAAAAOO}
00037     translator::Parser ps(std::move(toks));\par
{\bkmkstart AAAAAAAAOW}{\bkmkend AAAAAAAAOW}
00038     {\cf17 auto} prog = ps.parseProgram();\par
{\bkmkstart AAAAAAAAOZ}{\bkmkend AAAAAAAAOZ}
00039     {\cf17 auto} code = translator::Codegen::emit_cpp(prog);\par
{\bkmkstart AAAAAAAAPJ}{\bkmkend AAAAAAAAPJ}
00040     {\cf20 // Basic sanity checks}\par
{\bkmkstart AAAAAAAAPN}{\bkmkend AAAAAAAAPN}
00041     EXPECT_NE(code.find({\cf22 "#include <iostream>"}), std::string::npos);\par
{\bkmkstart AAAAAAAAPQ}{\bkmkend AAAAAAAAPQ}
00042     EXPECT_NE(code.find({\cf22 "int main()"}), std::string::npos);\par
{\bkmkstart AAAAAAAAPU}{\bkmkend AAAAAAAAPU}
00043     EXPECT_NE(code.find({\cf22 "var[\\"X\\"] = (1 + (2 * 3))"}), std::string::npos);\par
{\bkmkstart AAAAAAAAPW}{\bkmkend AAAAAAAAPW}
00044     EXPECT_NE(code.find({\cf22 "std::cout << var[\\"X\\"] << std::endl;"}), std::string::npos);\par
{\bkmkstart AAAAAAAAPX}{\bkmkend AAAAAAAAPX}
00045 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp}
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to verify integer overflow protection in chrono calculations. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include <chrono>}\par
{\f2 #include <limits>}\par
{\f2 #include <iostream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_overflow_protection.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__overflow__protection_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to verify integer overflow protection in chrono calculations. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test file specifically tests the overflow protection mechanisms that were removed in the diff, ensuring safe arithmetic operations. \par
}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARJ" }{}}{\fldrslt {\cs37\ul\cf2 test_overflow_protection.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_overflow_protection.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp}
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAARK" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAATT}{\bkmkend AAAAAAAATT}
00001 \par
{\bkmkstart AAAAAAAATZ}{\bkmkend AAAAAAAATZ}
00008 \par
{\bkmkstart AAAAAAAAUB}{\bkmkend AAAAAAAAUB}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAVL}{\bkmkend AAAAAAAAVL}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAAAWA}{\bkmkend AAAAAAAAWA}
00011 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAAWO}{\bkmkend AAAAAAAAWO}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAAXD}{\bkmkend AAAAAAAAXD}
00013 \par
{\bkmkstart AAAAAAAAXF}{\bkmkend AAAAAAAAXF}
00014 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAAAXI}{\bkmkend AAAAAAAAXI}
00015 \par
{\bkmkstart AAAAAAAAXM}{\bkmkend AAAAAAAAXM}
00020 {\cf17 class }OverflowProtectionTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAAAYD}{\bkmkend AAAAAAAAYD}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAAAYF}{\bkmkend AAAAAAAAYF}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAAAYQ}{\bkmkend AAAAAAAAYQ}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAAAZX}{\bkmkend AAAAAAAAZX}
00024     \}\par
{\bkmkstart AAAAAAABAB}{\bkmkend AAAAAAABAB}
00025     \par
{\bkmkstart AAAAAAABAE}{\bkmkend AAAAAAABAE}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAABAL}{\bkmkend AAAAAAABAL}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAABAP}{\bkmkend AAAAAAABAP}
00028     \}\par
{\bkmkstart AAAAAAABAR}{\bkmkend AAAAAAABAR}
00029 \};\par
{\bkmkstart AAAAAAABAV}{\bkmkend AAAAAAABAV}
00030 \par
{\bkmkstart AAAAAAABBA}{\bkmkend AAAAAAABBA}
00035 TEST_F(OverflowProtectionTest, TestSafeMultiplication) \{\par
{\bkmkstart AAAAAAABBH}{\bkmkend AAAAAAABBH}
00036     {\cf20 // Test safe multiplication algorithm similar to _Whole and _Part}\par
{\bkmkstart AAAAAAABBJ}{\bkmkend AAAAAAABBJ}
00037     {\cf17 auto} safeMultiply = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} multiplier, {\cf18 long} {\cf18 long} divisor) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAABBO}{\bkmkend AAAAAAABBO}
00038         {\cf20 // Prevent overflow by splitting the calculation}\par
{\bkmkstart AAAAAAABBP}{\bkmkend AAAAAAABBP}
00039         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / divisor) * multiplier;\par
{\bkmkstart AAAAAAABBX}{\bkmkend AAAAAAABBX}
00040         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % divisor) * multiplier / divisor;\par
{\bkmkstart AAAAAAABCB}{\bkmkend AAAAAAABCB}
00041         {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAABCH}{\bkmkend AAAAAAABCH}
00042     \};\par
{\bkmkstart AAAAAAABCJ}{\bkmkend AAAAAAABCJ}
00043     \par
{\bkmkstart AAAAAAABCL}{\bkmkend AAAAAAABCL}
00044     {\cf20 // Test with large values that could cause overflow}\par
{\bkmkstart AAAAAAABCM}{\bkmkend AAAAAAABCM}
00045     {\cf17 const} {\cf18 long} {\cf18 long} largeCounter = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAABEM}{\bkmkend AAAAAAABEM}
00046     {\cf17 const} {\cf18 long} {\cf18 long} multiplier = 1000000;\par
{\bkmkstart AAAAAAABER}{\bkmkend AAAAAAABER}
00047     {\cf17 const} {\cf18 long} {\cf18 long} divisor = 1000000;\par
{\bkmkstart AAAAAAABEU}{\bkmkend AAAAAAABEU}
00048     \par
{\bkmkstart AAAAAAABEW}{\bkmkend AAAAAAABEW}
00049     {\cf20 // This should not overflow with safe algorithm}\par
{\bkmkstart AAAAAAABFC}{\bkmkend AAAAAAABFC}
00050     {\cf18 long} {\cf18 long} result = safeMultiply(largeCounter, multiplier, divisor);\par
{\bkmkstart AAAAAAABFI}{\bkmkend AAAAAAABFI}
00051     EXPECT_GT(result, 0);\par
{\bkmkstart AAAAAAABFL}{\bkmkend AAAAAAABFL}
00052     \par
{\bkmkstart AAAAAAABFN}{\bkmkend AAAAAAABFN}
00053     {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAABFQ}{\bkmkend AAAAAAABFQ}
00054     EXPECT_EQ(safeMultiply(0, multiplier, divisor), 0);\par
{\bkmkstart AAAAAAABFT}{\bkmkend AAAAAAABFT}
00055     EXPECT_EQ(safeMultiply(divisor, multiplier, divisor), multiplier);\par
{\bkmkstart AAAAAAABFW}{\bkmkend AAAAAAABFW}
00056 \}\par
{\bkmkstart AAAAAAABFY}{\bkmkend AAAAAAABFY}
00057 \par
{\bkmkstart AAAAAAABGC}{\bkmkend AAAAAAABGC}
00062 TEST_F(OverflowProtectionTest, TestOverflowDetection) \{\par
{\bkmkstart AAAAAAABGG}{\bkmkend AAAAAAABGG}
00063     {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAABGJ}{\bkmkend AAAAAAABGJ}
00064     {\cf17 auto} detectOverflow = []({\cf18 long} {\cf18 long} a, {\cf18 long} {\cf18 long} b) -> {\cf18 bool} \{\par
{\bkmkstart AAAAAAABGL}{\bkmkend AAAAAAABGL}
00065         {\cf20 // Check if multiplication would overflow}\par
{\bkmkstart AAAAAAABGN}{\bkmkend AAAAAAABGN}
00066         {\cf19 if} (a > 0 && b > 0) \{\par
{\bkmkstart AAAAAAABGP}{\bkmkend AAAAAAABGP}
00067             {\cf19 return} a > std::numeric_limits<long long>::max() / b;\par
{\bkmkstart AAAAAAABHI}{\bkmkend AAAAAAABHI}
00068         \} {\cf19 else} {\cf19 if} (a < 0 && b < 0) \{\par
{\bkmkstart AAAAAAABHJ}{\bkmkend AAAAAAABHJ}
00069             {\cf19 return} a < std::numeric_limits<long long>::max() / b;\par
{\bkmkstart AAAAAAABHK}{\bkmkend AAAAAAABHK}
00070         \} {\cf19 else} {\cf19 if} (a < 0 && b > 0) \{\par
{\bkmkstart AAAAAAABHL}{\bkmkend AAAAAAABHL}
00071             {\cf19 return} a < std::numeric_limits<long long>::min() / b;\par
{\bkmkstart AAAAAAABHM}{\bkmkend AAAAAAABHM}
00072         \} {\cf19 else} {\cf19 if} (a > 0 && b < 0) \{\par
{\bkmkstart AAAAAAABHN}{\bkmkend AAAAAAABHN}
00073             {\cf19 return} b < std::numeric_limits<long long>::min() / a;\par
{\bkmkstart AAAAAAABHO}{\bkmkend AAAAAAABHO}
00074         \}\par
{\bkmkstart AAAAAAABHP}{\bkmkend AAAAAAABHP}
00075         {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAABHQ}{\bkmkend AAAAAAABHQ}
00076     \};\par
{\bkmkstart AAAAAAABHR}{\bkmkend AAAAAAABHR}
00077     \par
{\bkmkstart AAAAAAABHS}{\bkmkend AAAAAAABHS}
00078     {\cf20 // Test cases that should detect overflow}\par
{\bkmkstart AAAAAAABHT}{\bkmkend AAAAAAABHT}
00079     EXPECT_TRUE(detectOverflow(std::numeric_limits<long long>::max(), 2));\par
{\bkmkstart AAAAAAABHU}{\bkmkend AAAAAAABHU}
00080     EXPECT_TRUE(detectOverflow(std::numeric_limits<long long>::min(), 2));\par
{\bkmkstart AAAAAAABHX}{\bkmkend AAAAAAABHX}
00081     EXPECT_FALSE(detectOverflow(1000, 1000));\par
{\bkmkstart AAAAAAABHY}{\bkmkend AAAAAAABHY}
00082     EXPECT_FALSE(detectOverflow(0, 1000));\par
{\bkmkstart AAAAAAABHZ}{\bkmkend AAAAAAABHZ}
00083 \}\par
{\bkmkstart AAAAAAABIA}{\bkmkend AAAAAAABIA}
00084 \par
{\bkmkstart AAAAAAABIB}{\bkmkend AAAAAAABIB}
00089 TEST_F(OverflowProtectionTest, TestChronoOverflowProtection) \{\par
{\bkmkstart AAAAAAABIC}{\bkmkend AAAAAAABIC}
00090     {\cf20 // Test chrono duration calculations with overflow protection}\par
{\bkmkstart AAAAAAABID}{\bkmkend AAAAAAABID}
00091     {\cf17 auto} safeChronoCalculation = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency, {\cf18 long} {\cf18 long} periodDen) -> std::chrono::nanoseconds \{\par
{\bkmkstart AAAAAAABIE}{\bkmkend AAAAAAABIE}
00092         {\cf20 // Safe calculation using _Whole and _Part algorithm}\par
{\bkmkstart AAAAAAABIF}{\bkmkend AAAAAAABIF}
00093         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAABIG}{\bkmkend AAAAAAABIG}
00094         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAABIH}{\bkmkend AAAAAAABIH}
00095         \par
{\bkmkstart AAAAAAABII}{\bkmkend AAAAAAABII}
00096         {\cf20 // Check for overflow before creating duration}\par
{\bkmkstart AAAAAAABIJ}{\bkmkend AAAAAAABIJ}
00097         {\cf19 if} (whole > std::numeric_limits<long long>::max() - part) \{\par
{\bkmkstart AAAAAAABIS}{\bkmkend AAAAAAABIS}
00098             {\cf19 throw} std::overflow_error({\cf22 "Duration calculation would overflow"});\par
{\bkmkstart AAAAAAABIT}{\bkmkend AAAAAAABIT}
00099         \}\par
{\bkmkstart AAAAAAABIU}{\bkmkend AAAAAAABIU}
00100         \par
{\bkmkstart AAAAAAABIV}{\bkmkend AAAAAAABIV}
00101         {\cf19 return} std::chrono::nanoseconds(whole + part);\par
{\bkmkstart AAAAAAABIW}{\bkmkend AAAAAAABIW}
00102     \};\par
{\bkmkstart AAAAAAABIX}{\bkmkend AAAAAAABIX}
00103     \par
{\bkmkstart AAAAAAABIY}{\bkmkend AAAAAAABIY}
00104     {\cf20 // Test with safe values}\par
{\bkmkstart AAAAAAABIZ}{\bkmkend AAAAAAABIZ}
00105     {\cf17 const} {\cf18 long} {\cf18 long} counter = 1000000;\par
{\bkmkstart AAAAAAABJA}{\bkmkend AAAAAAABJA}
00106     {\cf17 const} {\cf18 long} {\cf18 long} frequency = 1000000;\par
{\bkmkstart AAAAAAABJB}{\bkmkend AAAAAAABJB}
00107     {\cf17 const} {\cf18 long} {\cf18 long} periodDen = 1000000000; {\cf20 // nanoseconds}\par
{\bkmkstart AAAAAAABJC}{\bkmkend AAAAAAABJC}
00108     \par
{\bkmkstart AAAAAAABJD}{\bkmkend AAAAAAABJD}
00109     {\cf17 auto} duration = safeChronoCalculation(counter, frequency, periodDen);\par
{\bkmkstart AAAAAAABJE}{\bkmkend AAAAAAABJE}
00110     EXPECT_EQ(duration.count(), 1000000000); {\cf20 // 1 second in nanoseconds}\par
{\bkmkstart AAAAAAABJF}{\bkmkend AAAAAAABJF}
00111     \par
{\bkmkstart AAAAAAABJG}{\bkmkend AAAAAAABJG}
00112     {\cf20 // Test with edge case}\par
{\bkmkstart AAAAAAABJH}{\bkmkend AAAAAAABJH}
00113     EXPECT_EQ(safeChronoCalculation(0, frequency, periodDen).count(), 0);\par
{\bkmkstart AAAAAAABJI}{\bkmkend AAAAAAABJI}
00114 \}\par
{\bkmkstart AAAAAAABJJ}{\bkmkend AAAAAAABJJ}
00115 \par
{\bkmkstart AAAAAAABJK}{\bkmkend AAAAAAABJK}
00120 TEST_F(OverflowProtectionTest, TestLargeValueHandling) \{\par
{\bkmkstart AAAAAAABJL}{\bkmkend AAAAAAABJL}
00121     {\cf20 // Test with very large counter values}\par
{\bkmkstart AAAAAAABJM}{\bkmkend AAAAAAABJM}
00122     {\cf17 auto} handleLargeCounter = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAABJN}{\bkmkend AAAAAAABJN}
00123         {\cf20 // Use safe division and multiplication}\par
{\bkmkstart AAAAAAABJO}{\bkmkend AAAAAAABJO}
00124         {\cf17 const} {\cf18 long} {\cf18 long} quotient = counter / frequency;\par
{\bkmkstart AAAAAAABJP}{\bkmkend AAAAAAABJP}
00125         {\cf17 const} {\cf18 long} {\cf18 long} remainder = counter % frequency;\par
{\bkmkstart AAAAAAABJQ}{\bkmkend AAAAAAABJQ}
00126         \par
{\bkmkstart AAAAAAABJR}{\bkmkend AAAAAAABJR}
00127         {\cf20 // Safe multiplication with overflow check}\par
{\bkmkstart AAAAAAABJS}{\bkmkend AAAAAAABJS}
00128         {\cf17 const} {\cf18 long} {\cf18 long} maxSafeMultiplier = std::numeric_limits<long long>::max() / frequency;\par
{\bkmkstart AAAAAAABJT}{\bkmkend AAAAAAABJT}
00129         {\cf17 const} {\cf18 long} {\cf18 long} multiplier = std::min(1000000000LL, maxSafeMultiplier);\par
{\bkmkstart AAAAAAABJU}{\bkmkend AAAAAAABJU}
00130         \par
{\bkmkstart AAAAAAABJV}{\bkmkend AAAAAAABJV}
00131         {\cf19 return} quotient * multiplier + (remainder * multiplier) / frequency;\par
{\bkmkstart AAAAAAABJW}{\bkmkend AAAAAAABJW}
00132     \};\par
{\bkmkstart AAAAAAABJX}{\bkmkend AAAAAAABJX}
00133     \par
{\bkmkstart AAAAAAABJY}{\bkmkend AAAAAAABJY}
00134     {\cf20 // Test with large but safe values}\par
{\bkmkstart AAAAAAABJZ}{\bkmkend AAAAAAABJZ}
00135     {\cf17 const} {\cf18 long} {\cf18 long} largeCounter = std::numeric_limits<long long>::max() / 4;\par
{\bkmkstart AAAAAAABKB}{\bkmkend AAAAAAABKB}
00136     {\cf17 const} {\cf18 long} {\cf18 long} frequency = 1000000;\par
{\bkmkstart AAAAAAABKC}{\bkmkend AAAAAAABKC}
00137     \par
{\bkmkstart AAAAAAABKE}{\bkmkend AAAAAAABKE}
00138     {\cf18 long} {\cf18 long} result = handleLargeCounter(largeCounter, frequency);\par
{\bkmkstart AAAAAAABKG}{\bkmkend AAAAAAABKG}
00139     EXPECT_GT(result, 0);\par
{\bkmkstart AAAAAAABKH}{\bkmkend AAAAAAABKH}
00140     \par
{\bkmkstart AAAAAAABKI}{\bkmkend AAAAAAABKI}
00141     {\cf20 // Test boundary conditions}\par
{\bkmkstart AAAAAAABKJ}{\bkmkend AAAAAAABKJ}
00142     EXPECT_EQ(handleLargeCounter(0, frequency), 0);\par
{\bkmkstart AAAAAAABKK}{\bkmkend AAAAAAABKK}
00143     EXPECT_EQ(handleLargeCounter(frequency, frequency), 1000000000);\par
{\bkmkstart AAAAAAABKL}{\bkmkend AAAAAAABKL}
00144 \}\par
{\bkmkstart AAAAAAABKM}{\bkmkend AAAAAAABKM}
00145 \par
{\bkmkstart AAAAAAABKP}{\bkmkend AAAAAAABKP}
00150 TEST_F(OverflowProtectionTest, TestFrequencySpecificCalculations) \{\par
{\bkmkstart AAAAAAABKQ}{\bkmkend AAAAAAABKQ}
00151     {\cf20 // Test for 10MHz frequency}\par
{\bkmkstart AAAAAAABKS}{\bkmkend AAAAAAABKS}
00152     {\cf17 auto} calculateFor10MHz = []({\cf18 long} {\cf18 long} counter) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAABKT}{\bkmkend AAAAAAABKT}
00153         {\cf17 const} {\cf18 long} {\cf18 long} frequency = 10000000; {\cf20 // 10MHz}\par
{\bkmkstart AAAAAAABKU}{\bkmkend AAAAAAABKU}
00154         {\cf17 const} {\cf18 long} {\cf18 long} periodDen = 1000000000; {\cf20 // nanoseconds}\par
{\bkmkstart AAAAAAABKV}{\bkmkend AAAAAAABKV}
00155         \par
{\bkmkstart AAAAAAABKX}{\bkmkend AAAAAAABKX}
00156         {\cf20 // Safe calculation}\par
{\bkmkstart AAAAAAABKY}{\bkmkend AAAAAAABKY}
00157         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAABKZ}{\bkmkend AAAAAAABKZ}
00158         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAABLB}{\bkmkend AAAAAAABLB}
00159         \par
{\bkmkstart AAAAAAABLC}{\bkmkend AAAAAAABLC}
00160         {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAABLD}{\bkmkend AAAAAAABLD}
00161     \};\par
{\bkmkstart AAAAAAABLE}{\bkmkend AAAAAAABLE}
00162     \par
{\bkmkstart AAAAAAABLF}{\bkmkend AAAAAAABLF}
00163     {\cf20 // Test for 24MHz frequency}\par
{\bkmkstart AAAAAAABLG}{\bkmkend AAAAAAABLG}
00164     {\cf17 auto} calculateFor24MHz = []({\cf18 long} {\cf18 long} counter) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAABLH}{\bkmkend AAAAAAABLH}
00165         {\cf17 const} {\cf18 long} {\cf18 long} frequency = 24000000; {\cf20 // 24MHz}\par
{\bkmkstart AAAAAAABLI}{\bkmkend AAAAAAABLI}
00166         {\cf17 const} {\cf18 long} {\cf18 long} periodDen = 1000000000; {\cf20 // nanoseconds}\par
{\bkmkstart AAAAAAABLK}{\bkmkend AAAAAAABLK}
00167         \par
{\bkmkstart AAAAAAABLL}{\bkmkend AAAAAAABLL}
00168         {\cf20 // Safe calculation}\par
{\bkmkstart AAAAAAABLM}{\bkmkend AAAAAAABLM}
00169         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAABLN}{\bkmkend AAAAAAABLN}
00170         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAABLP}{\bkmkend AAAAAAABLP}
00171         \par
{\bkmkstart AAAAAAABLQ}{\bkmkend AAAAAAABLQ}
00172         {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAABLS}{\bkmkend AAAAAAABLS}
00173     \};\par
{\bkmkstart AAAAAAABLT}{\bkmkend AAAAAAABLT}
00174     \par
{\bkmkstart AAAAAAABLU}{\bkmkend AAAAAAABLU}
00175     {\cf20 // Test calculations}\par
{\bkmkstart AAAAAAABLV}{\bkmkend AAAAAAABLV}
00176     {\cf17 const} {\cf18 long} {\cf18 long} testCounter = 1000000;\par
{\bkmkstart AAAAAAABLW}{\bkmkend AAAAAAABLW}
00177     \par
{\bkmkstart AAAAAAABLY}{\bkmkend AAAAAAABLY}
00178     {\cf18 long} {\cf18 long} result10MHz = calculateFor10MHz(testCounter);\par
{\bkmkstart AAAAAAABMA}{\bkmkend AAAAAAABMA}
00179     {\cf18 long} {\cf18 long} result24MHz = calculateFor24MHz(testCounter);\par
{\bkmkstart AAAAAAABMC}{\bkmkend AAAAAAABMC}
00180     \par
{\bkmkstart AAAAAAABMD}{\bkmkend AAAAAAABMD}
00181     EXPECT_GT(result10MHz, 0);\par
{\bkmkstart AAAAAAABME}{\bkmkend AAAAAAABME}
00182     EXPECT_GT(result24MHz, 0);\par
{\bkmkstart AAAAAAABMH}{\bkmkend AAAAAAABMH}
00183     EXPECT_NE(result10MHz, result24MHz); {\cf20 // Should be different}\par
{\bkmkstart AAAAAAABMI}{\bkmkend AAAAAAABMI}
00184 \}\par
{\bkmkstart AAAAAAABMJ}{\bkmkend AAAAAAABMJ}
00185 \par
{\bkmkstart AAAAAAABMM}{\bkmkend AAAAAAABMM}
00190 TEST_F(OverflowProtectionTest, TestOverflowPreventionAlgorithm) \{\par
{\bkmkstart AAAAAAABMQ}{\bkmkend AAAAAAABMQ}
00191     {\cf20 // Complete overflow prevention algorithm}\par
{\bkmkstart AAAAAAABMT}{\bkmkend AAAAAAABMT}
00192     {\cf17 auto} overflowSafeCalculation = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency, {\cf18 long} {\cf18 long} periodDen) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAABMX}{\bkmkend AAAAAAABMX}
00193         {\cf20 // Check if direct multiplication would overflow}\par
{\bkmkstart AAAAAAABNA}{\bkmkend AAAAAAABNA}
00194         {\cf19 if} (counter > 0 && periodDen > 0) \{\par
{\bkmkstart AAAAAAABNB}{\bkmkend AAAAAAABNB}
00195             {\cf19 if} (counter > std::numeric_limits<long long>::max() / periodDen) \{\par
{\bkmkstart AAAAAAABSP}{\bkmkend AAAAAAABSP}
00196                 {\cf20 // Use safe algorithm}\par
{\bkmkstart AAAAAAABSU}{\bkmkend AAAAAAABSU}
00197                 {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAACZF}{\bkmkend AAAAAAACZF}
00198                 {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADBR}{\bkmkend AAAAAAADBR}
00199                 \par
{\bkmkstart AAAAAAADBS}{\bkmkend AAAAAAADBS}
00200                 {\cf20 // Check if result would overflow}\par
{\bkmkstart AAAAAAADBT}{\bkmkend AAAAAAADBT}
00201                 {\cf19 if} (whole > std::numeric_limits<long long>::max() - part) \{\par
{\bkmkstart AAAAAAADCT}{\bkmkend AAAAAAADCT}
00202                     {\cf19 throw} std::overflow_error({\cf22 "Calculation would overflow even with safe algorithm"});\par
{\bkmkstart AAAAAAADCZ}{\bkmkend AAAAAAADCZ}
00203                 \}\par
{\bkmkstart AAAAAAADDA}{\bkmkend AAAAAAADDA}
00204                 \par
{\bkmkstart AAAAAAADDC}{\bkmkend AAAAAAADDC}
00205                 {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAADDH}{\bkmkend AAAAAAADDH}
00206             \}\par
{\bkmkstart AAAAAAADDI}{\bkmkend AAAAAAADDI}
00207         \}\par
{\bkmkstart AAAAAAADDK}{\bkmkend AAAAAAADDK}
00208         \par
{\bkmkstart AAAAAAADDN}{\bkmkend AAAAAAADDN}
00209         {\cf20 // Safe to use direct multiplication}\par
{\bkmkstart AAAAAAADDP}{\bkmkend AAAAAAADDP}
00210         {\cf19 return} (counter * periodDen) / frequency;\par
{\bkmkstart AAAAAAADDR}{\bkmkend AAAAAAADDR}
00211     \};\par
{\bkmkstart AAAAAAADDS}{\bkmkend AAAAAAADDS}
00212     \par
{\bkmkstart AAAAAAADDT}{\bkmkend AAAAAAADDT}
00213     {\cf20 // Test with various values}\par
{\bkmkstart AAAAAAADDV}{\bkmkend AAAAAAADDV}
00214     {\cf17 struct }TestCase \{\par
{\bkmkstart AAAAAAADDW}{\bkmkend AAAAAAADDW}
00215         {\cf18 long} {\cf18 long} counter;\par
{\bkmkstart AAAAAAADDZ}{\bkmkend AAAAAAADDZ}
00216         {\cf18 long} {\cf18 long} frequency;\par
{\bkmkstart AAAAAAADEB}{\bkmkend AAAAAAADEB}
00217         {\cf18 long} {\cf18 long} periodDen;\par
{\bkmkstart AAAAAAADEF}{\bkmkend AAAAAAADEF}
00218         {\cf18 bool} shouldSucceed;\par
{\bkmkstart AAAAAAADEH}{\bkmkend AAAAAAADEH}
00219     \};\par
{\bkmkstart AAAAAAADEJ}{\bkmkend AAAAAAADEJ}
00220     \par
{\bkmkstart AAAAAAADEL}{\bkmkend AAAAAAADEL}
00221     std::vector<TestCase> testCases = \{\par
{\bkmkstart AAAAAAADEP}{\bkmkend AAAAAAADEP}
00222         \{1000, 1000000, 1000000000, {\cf17 true}\},\par
{\bkmkstart AAAAAAADEY}{\bkmkend AAAAAAADEY}
00223         \{0, 1000000, 1000000000, {\cf17 true}\},\par
{\bkmkstart AAAAAAADFB}{\bkmkend AAAAAAADFB}
00224         \{1000000, 1000000, 1000000000, {\cf17 true}\},\par
{\bkmkstart AAAAAAADFE}{\bkmkend AAAAAAADFE}
00225         \{std::numeric_limits<long long>::max() / 2, 1000000, 1000000000, {\cf17 true}\},\par
{\bkmkstart AAAAAAADFQ}{\bkmkend AAAAAAADFQ}
00226         \{std::numeric_limits<long long>::max(), 1, 1, {\cf17 false}\} {\cf20 // This should fail}\par
{\bkmkstart AAAAAAADIE}{\bkmkend AAAAAAADIE}
00227     \};\par
{\bkmkstart AAAAAAADIH}{\bkmkend AAAAAAADIH}
00228     \par
{\bkmkstart AAAAAAADII}{\bkmkend AAAAAAADII}
00229     {\cf19 for} ({\cf17 const} {\cf17 auto}& testCase : testCases) \{\par
{\bkmkstart AAAAAAADIO}{\bkmkend AAAAAAADIO}
00230         {\cf19 if} (testCase.shouldSucceed) \{\par
{\bkmkstart AAAAAAADIR}{\bkmkend AAAAAAADIR}
00231             EXPECT_NO_THROW(\{\par
{\bkmkstart AAAAAAADIS}{\bkmkend AAAAAAADIS}
00232                 {\cf18 long} {\cf18 long} result = overflowSafeCalculation(testCase.counter, testCase.frequency, testCase.periodDen);\par
{\bkmkstart AAAAAAADIY}{\bkmkend AAAAAAADIY}
00233                 EXPECT_GE(result, 0);\par
{\bkmkstart AAAAAAADJB}{\bkmkend AAAAAAADJB}
00234             \});\par
{\bkmkstart AAAAAAADJD}{\bkmkend AAAAAAADJD}
00235         \} {\cf19 else} \{\par
{\bkmkstart AAAAAAADJF}{\bkmkend AAAAAAADJF}
00236             EXPECT_THROW(\{\par
{\bkmkstart AAAAAAADJI}{\bkmkend AAAAAAADJI}
00237                 overflowSafeCalculation(testCase.counter, testCase.frequency, testCase.periodDen);\par
{\bkmkstart AAAAAAADJL}{\bkmkend AAAAAAADJL}
00238             \}, std::overflow_error);\par
{\bkmkstart AAAAAAADJN}{\bkmkend AAAAAAADJN}
00239         \}\par
{\bkmkstart AAAAAAADJO}{\bkmkend AAAAAAADJO}
00240     \}\par
{\bkmkstart AAAAAAADJP}{\bkmkend AAAAAAADJP}
00241 \}\par
{\bkmkstart AAAAAAADJQ}{\bkmkend AAAAAAADJQ}
00242 \par
{\bkmkstart AAAAAAADJS}{\bkmkend AAAAAAADJS}
00247 TEST_F(OverflowProtectionTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAADJV}{\bkmkend AAAAAAADJV}
00248     {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAADJW}{\bkmkend AAAAAAADJW}
00249     {\cf17 auto} testEdgeCase = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency, {\cf18 long} {\cf18 long} periodDen) -> {\cf18 bool} \{\par
{\bkmkstart AAAAAAADJZ}{\bkmkend AAAAAAADJZ}
00250         {\cf19 try} \{\par
{\bkmkstart AAAAAAADKB}{\bkmkend AAAAAAADKB}
00251             {\cf20 // Safe calculation}\par
{\bkmkstart AAAAAAADKC}{\bkmkend AAAAAAADKC}
00252             {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAADKK}{\bkmkend AAAAAAADKK}
00253             {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADKM}{\bkmkend AAAAAAADKM}
00254             \par
{\bkmkstart AAAAAAADKN}{\bkmkend AAAAAAADKN}
00255             {\cf20 // Check for overflow}\par
{\bkmkstart AAAAAAADKO}{\bkmkend AAAAAAADKO}
00256             {\cf19 if} (whole > std::numeric_limits<long long>::max() - part) \{\par
{\bkmkstart AAAAAAADKV}{\bkmkend AAAAAAADKV}
00257                 {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADKW}{\bkmkend AAAAAAADKW}
00258             \}\par
{\bkmkstart AAAAAAADKX}{\bkmkend AAAAAAADKX}
00259             \par
{\bkmkstart AAAAAAADKY}{\bkmkend AAAAAAADKY}
00260             {\cf18 long} {\cf18 long} result = whole + part;\par
{\bkmkstart AAAAAAADKZ}{\bkmkend AAAAAAADKZ}
00261             {\cf19 return} result >= 0;\par
{\bkmkstart AAAAAAADLA}{\bkmkend AAAAAAADLA}
00262         \} {\cf19 catch} (...) \{\par
{\bkmkstart AAAAAAADLB}{\bkmkend AAAAAAADLB}
00263             {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADLC}{\bkmkend AAAAAAADLC}
00264         \}\par
{\bkmkstart AAAAAAADLD}{\bkmkend AAAAAAADLD}
00265     \};\par
{\bkmkstart AAAAAAADLE}{\bkmkend AAAAAAADLE}
00266     \par
{\bkmkstart AAAAAAADLF}{\bkmkend AAAAAAADLF}
00267     {\cf20 // Test various edge cases}\par
{\bkmkstart AAAAAAADLG}{\bkmkend AAAAAAADLG}
00268     EXPECT_TRUE(testEdgeCase(0, 1, 1));\par
{\bkmkstart AAAAAAADLH}{\bkmkend AAAAAAADLH}
00269     EXPECT_TRUE(testEdgeCase(1, 1, 1));\par
{\bkmkstart AAAAAAADLI}{\bkmkend AAAAAAADLI}
00270     EXPECT_TRUE(testEdgeCase(1000000, 1000000, 1000000000));\par
{\bkmkstart AAAAAAADLJ}{\bkmkend AAAAAAADLJ}
00271     EXPECT_TRUE(testEdgeCase(std::numeric_limits<long long>::max() / 4, 1000000, 1000000000));\par
{\bkmkstart AAAAAAADLK}{\bkmkend AAAAAAADLK}
00272     \par
{\bkmkstart AAAAAAADLL}{\bkmkend AAAAAAADLL}
00273     {\cf20 // Test with zero frequency (should handle gracefully)}\par
{\bkmkstart AAAAAAADLM}{\bkmkend AAAAAAADLM}
00274     EXPECT_FALSE(testEdgeCase(1000, 0, 1000000000));\par
{\bkmkstart AAAAAAADLN}{\bkmkend AAAAAAADLN}
00275 \}\par
{\bkmkstart AAAAAAADLO}{\bkmkend AAAAAAADLO}
00276 \par
{\bkmkstart AAAAAAADLP}{\bkmkend AAAAAAADLP}
00277 \} {\cf20 // namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_sparse_matrix.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_sparse_matrix.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_sparse_matrix.cpp}
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/sparse_matrix.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_sparse_matrix.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__sparse__matrix_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAYT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (SparseMatrix, InsertAndLookup)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLW}
{\bkmkend AAAAAAADLW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_sparse_matrix.cpp}
{\xe \v test_sparse_matrix.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SparseMatrix , InsertAndLookup )}}
\par
{\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAYS" }{}}{\fldrslt {\cs37\ul\cf2 4}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATR" }{}}{\fldrslt {\cs37\ul\cf2 test_sparse_matrix.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_sparse_matrix.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_sparse_matrix.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_sparse_matrix.cpp}
{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAWI}{\bkmkend AAAAAAAAWI}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAAAXB}{\bkmkend AAAAAAAAXB}
00002 {\cf21 #include "ds/sparse_matrix.h"}\par
{\bkmkstart AAAAAAAAYJ}{\bkmkend AAAAAAAAYJ}
00003 \par
{\bkmkstart AAAAAAAAYS}{\bkmkend AAAAAAAAYS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAYT" }{}}{\fldrslt {\cs37\ul\cf2 00004}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAYT" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(SparseMatrix, InsertAndLookup)\{\par
{\bkmkstart AAAAAAABCF}{\bkmkend AAAAAAABCF}
00005     ds::SparseMatrix<int> sm(100,100);\par
{\bkmkstart AAAAAAABCQ}{\bkmkend AAAAAAABCQ}
00006     EXPECT_EQ(sm.nonZeroCount(), 0u);\par
{\bkmkstart AAAAAAABCV}{\bkmkend AAAAAAABCV}
00007     sm.set(2,3,10); sm.set(50,50,7);\par
{\bkmkstart AAAAAAABCZ}{\bkmkend AAAAAAABCZ}
00008     EXPECT_EQ(sm.nonZeroCount(), 2u);\par
{\bkmkstart AAAAAAABDB}{\bkmkend AAAAAAABDB}
00009     {\cf17 auto} v = sm.get(2,3); ASSERT_NE(v, {\cf17 nullptr}); EXPECT_EQ(*v, 10);\par
{\bkmkstart AAAAAAABDF}{\bkmkend AAAAAAABDF}
00010     {\cf17 auto} v2 = sm.get(1,1); EXPECT_EQ(v2, {\cf17 nullptr});\par
{\bkmkstart AAAAAAABDH}{\bkmkend AAAAAAABDH}
00011 \}\par
{\bkmkstart AAAAAAABDK}{\bkmkend AAAAAAABDK}
00012 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_stack_queue.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_stack_queue.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_stack_queue.cpp}
{\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/stack.h"}\par
{\f2 #include "ds/queue.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_stack_queue.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__stack__queue_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StackQueue, StackLIFO)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABML" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (StackQueue, QueueFIFO)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLY}
{\bkmkend AAAAAAADLY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_stack_queue.cpp}
{\xe \v test_stack_queue.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StackQueue , QueueFIFO )}}
\par
{\bkmkstart AAAAAAABML}
{\bkmkend AAAAAAABML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMK" }{}}{\fldrslt {\cs37\ul\cf2 10}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABHV" }{}}{\fldrslt {\cs37\ul\cf2 test_stack_queue.cpp}}}
.}\par
}
{\xe \v TEST\:test_stack_queue.cpp}
{\xe \v test_stack_queue.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StackQueue , StackLIFO )}}
\par
{\bkmkstart AAAAAAABIR}
{\bkmkend AAAAAAABIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIQ" }{}}{\fldrslt {\cs37\ul\cf2 5}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABHV" }{}}{\fldrslt {\cs37\ul\cf2 test_stack_queue.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_stack_queue.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_stack_queue.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_stack_queue.cpp}
{\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABHW" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABIK}{\bkmkend AAAAAAABIK}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABIN}{\bkmkend AAAAAAABIN}
00002 {\cf21 #include "ds/stack.h"}\par
{\bkmkstart AAAAAAABIO}{\bkmkend AAAAAAABIO}
00003 {\cf21 #include "ds/queue.h"}\par
{\bkmkstart AAAAAAABIP}{\bkmkend AAAAAAABIP}
00004 \par
{\bkmkstart AAAAAAABIQ}{\bkmkend AAAAAAABIQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIR" }{}}{\fldrslt {\cs37\ul\cf2 00005}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(StackQueue, StackLIFO)\{\par
{\bkmkstart AAAAAAABLX}{\bkmkend AAAAAAABLX}
00006     ds::Stack<int> st; st.push(1); st.push(2); st.push(3);\par
{\bkmkstart AAAAAAABMB}{\bkmkend AAAAAAABMB}
00007     EXPECT_EQ(st.top(), 3); st.pop(); EXPECT_EQ(st.top(), 2); st.pop(); EXPECT_EQ(st.top(), 1);\par
{\bkmkstart AAAAAAABMF}{\bkmkend AAAAAAABMF}
00008 \}\par
{\bkmkstart AAAAAAABMG}{\bkmkend AAAAAAABMG}
00009 \par
{\bkmkstart AAAAAAABMK}{\bkmkend AAAAAAABMK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABML" }{}}{\fldrslt {\cs37\ul\cf2 00010}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIR" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(StackQueue, QueueFIFO)\{\par
{\bkmkstart AAAAAAABMO}{\bkmkend AAAAAAABMO}
00011     ds::Queue<int> q; q.enqueue(1); q.enqueue(2); q.enqueue(3);\par
{\bkmkstart AAAAAAABMS}{\bkmkend AAAAAAABMS}
00012     EXPECT_EQ(q.front(), 1); q.dequeue(); EXPECT_EQ(q.front(), 2); q.dequeue(); EXPECT_EQ(q.front(), 3);\par
{\bkmkstart AAAAAAABMV}{\bkmkend AAAAAAABMV}
00013 \}\par
{\bkmkstart AAAAAAABMW}{\bkmkend AAAAAAABMW}
00014 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\bkmkstart AAAAAAABIM}
{\bkmkend AAAAAAABIM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Advanced test file to maximize coverage for _msvc_string_view.hpp. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include <string_view>}\par
{\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <cstring>}\par
{\f2 #include <limits>}\par
{\f2 #include <sstream>}\par
{\f2 #include <iomanip>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_string_view_advanced_coverage.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__string__view__advanced__coverage_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Advanced test file to maximize coverage for _msvc_string_view.hpp. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test file targets remaining uncovered lines in _msvc_string_view.hpp to achieve 100% line coverage \par
}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIL" }{}}{\fldrslt {\cs37\ul\cf2 test_string_view_advanced_coverage.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_advanced_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_advanced_coverage.cpp}
{\bkmkstart AAAAAAABIL}
{\bkmkend AAAAAAABIL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABIM" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABKA}{\bkmkend AAAAAAABKA}
00001 \par
{\bkmkstart AAAAAAABKD}{\bkmkend AAAAAAABKD}
00008 \par
{\bkmkstart AAAAAAABKF}{\bkmkend AAAAAAABKF}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABKN}{\bkmkend AAAAAAABKN}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAABKO}{\bkmkend AAAAAAABKO}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAABKR}{\bkmkend AAAAAAABKR}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAABKW}{\bkmkend AAAAAAABKW}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAABLA}{\bkmkend AAAAAAABLA}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAABLJ}{\bkmkend AAAAAAABLJ}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAABLO}{\bkmkend AAAAAAABLO}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAABLR}{\bkmkend AAAAAAABLR}
00017 {\cf21 #include <sstream>}\par
{\bkmkstart AAAAAAABLZ}{\bkmkend AAAAAAABLZ}
00018 {\cf21 #include <iomanip>}\par
{\bkmkstart AAAAAAABMN}{\bkmkend AAAAAAABMN}
00019 \par
{\bkmkstart AAAAAAABMP}{\bkmkend AAAAAAABMP}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAABMR}{\bkmkend AAAAAAABMR}
00021 \par
{\bkmkstart AAAAAAABMU}{\bkmkend AAAAAAABMU}
00026 {\cf17 class }StringViewAdvancedCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAABMY}{\bkmkend AAAAAAABMY}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAABMZ}{\bkmkend AAAAAAABMZ}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAABNC}{\bkmkend AAAAAAABNC}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAABND}{\bkmkend AAAAAAABND}
00030     \}\par
{\bkmkstart AAAAAAABNE}{\bkmkend AAAAAAABNE}
00031     \par
{\bkmkstart AAAAAAABNF}{\bkmkend AAAAAAABNF}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAABNG}{\bkmkend AAAAAAABNG}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAABNH}{\bkmkend AAAAAAABNH}
00034     \}\par
{\bkmkstart AAAAAAABNI}{\bkmkend AAAAAAABNI}
00035 \};\par
{\bkmkstart AAAAAAABNJ}{\bkmkend AAAAAAABNJ}
00036 \par
{\bkmkstart AAAAAAABNK}{\bkmkend AAAAAAABNK}
00041 TEST_F(StringViewAdvancedCoverageTest, TestStringViewComparisonOperators) \{\par
{\bkmkstart AAAAAAABNP}{\bkmkend AAAAAAABNP}
00042     std::string_view sv1({\cf22 "abc"});\par
{\bkmkstart AAAAAAABNQ}{\bkmkend AAAAAAABNQ}
00043     std::string_view sv2({\cf22 "def"});\par
{\bkmkstart AAAAAAABNR}{\bkmkend AAAAAAABNR}
00044     std::string_view sv3({\cf22 "abc"});\par
{\bkmkstart AAAAAAABNS}{\bkmkend AAAAAAABNS}
00045     \par
{\bkmkstart AAAAAAABNT}{\bkmkend AAAAAAABNT}
00046     {\cf20 // Test operator==}\par
{\bkmkstart AAAAAAABNU}{\bkmkend AAAAAAABNU}
00047     EXPECT_TRUE(sv1 == sv3);\par
{\bkmkstart AAAAAAABNV}{\bkmkend AAAAAAABNV}
00048     EXPECT_FALSE(sv1 == sv2);\par
{\bkmkstart AAAAAAABNW}{\bkmkend AAAAAAABNW}
00049     \par
{\bkmkstart AAAAAAABNX}{\bkmkend AAAAAAABNX}
00050     {\cf20 // Test operator!=}\par
{\bkmkstart AAAAAAABNY}{\bkmkend AAAAAAABNY}
00051     EXPECT_TRUE(sv1 != sv2);\par
{\bkmkstart AAAAAAABNZ}{\bkmkend AAAAAAABNZ}
00052     EXPECT_FALSE(sv1 != sv3);\par
{\bkmkstart AAAAAAABOA}{\bkmkend AAAAAAABOA}
00053     \par
{\bkmkstart AAAAAAABOB}{\bkmkend AAAAAAABOB}
00054     {\cf20 // Test operator<}\par
{\bkmkstart AAAAAAABOC}{\bkmkend AAAAAAABOC}
00055     EXPECT_TRUE(sv1 < sv2);\par
{\bkmkstart AAAAAAABOF}{\bkmkend AAAAAAABOF}
00056     EXPECT_FALSE(sv2 < sv1);\par
{\bkmkstart AAAAAAABOG}{\bkmkend AAAAAAABOG}
00057     EXPECT_FALSE(sv1 < sv3);\par
{\bkmkstart AAAAAAABOH}{\bkmkend AAAAAAABOH}
00058     \par
{\bkmkstart AAAAAAABOI}{\bkmkend AAAAAAABOI}
00059     {\cf20 // Test operator<=}\par
{\bkmkstart AAAAAAABOJ}{\bkmkend AAAAAAABOJ}
00060     EXPECT_TRUE(sv1 <= sv2);\par
{\bkmkstart AAAAAAABOL}{\bkmkend AAAAAAABOL}
00061     EXPECT_TRUE(sv1 <= sv3);\par
{\bkmkstart AAAAAAABOM}{\bkmkend AAAAAAABOM}
00062     EXPECT_FALSE(sv2 <= sv1);\par
{\bkmkstart AAAAAAABON}{\bkmkend AAAAAAABON}
00063     \par
{\bkmkstart AAAAAAABOO}{\bkmkend AAAAAAABOO}
00064     {\cf20 // Test operator>}\par
{\bkmkstart AAAAAAABOP}{\bkmkend AAAAAAABOP}
00065     EXPECT_TRUE(sv2 > sv1);\par
{\bkmkstart AAAAAAABOQ}{\bkmkend AAAAAAABOQ}
00066     EXPECT_FALSE(sv1 > sv2);\par
{\bkmkstart AAAAAAABOR}{\bkmkend AAAAAAABOR}
00067     EXPECT_FALSE(sv1 > sv3);\par
{\bkmkstart AAAAAAABOS}{\bkmkend AAAAAAABOS}
00068     \par
{\bkmkstart AAAAAAABOT}{\bkmkend AAAAAAABOT}
00069     {\cf20 // Test operator>=}\par
{\bkmkstart AAAAAAABOU}{\bkmkend AAAAAAABOU}
00070     EXPECT_TRUE(sv2 >= sv1);\par
{\bkmkstart AAAAAAABOV}{\bkmkend AAAAAAABOV}
00071     EXPECT_TRUE(sv1 >= sv3);\par
{\bkmkstart AAAAAAABOW}{\bkmkend AAAAAAABOW}
00072     EXPECT_FALSE(sv1 >= sv2);\par
{\bkmkstart AAAAAAABOX}{\bkmkend AAAAAAABOX}
00073     \par
{\bkmkstart AAAAAAABOY}{\bkmkend AAAAAAABOY}
00074     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAABOZ}{\bkmkend AAAAAAABOZ}
00075     std::string str = {\cf22 "abc"};\par
{\bkmkstart AAAAAAABPB}{\bkmkend AAAAAAABPB}
00076     {\cf17 const} {\cf18 char}* cstr = {\cf22 "abc"};\par
{\bkmkstart AAAAAAABPD}{\bkmkend AAAAAAABPD}
00077     \par
{\bkmkstart AAAAAAABPE}{\bkmkend AAAAAAABPE}
00078     EXPECT_TRUE(sv1 == str);\par
{\bkmkstart AAAAAAABPF}{\bkmkend AAAAAAABPF}
00079     EXPECT_TRUE(sv1 == cstr);\par
{\bkmkstart AAAAAAABPG}{\bkmkend AAAAAAABPG}
00080     EXPECT_TRUE(str == sv1);\par
{\bkmkstart AAAAAAABPJ}{\bkmkend AAAAAAABPJ}
00081     EXPECT_TRUE(cstr == sv1);\par
{\bkmkstart AAAAAAABPK}{\bkmkend AAAAAAABPK}
00082     \par
{\bkmkstart AAAAAAABPL}{\bkmkend AAAAAAABPL}
00083     EXPECT_TRUE(sv1 != {\cf22 "def"});\par
{\bkmkstart AAAAAAABPM}{\bkmkend AAAAAAABPM}
00084     EXPECT_TRUE({\cf22 "def"} != sv1);\par
{\bkmkstart AAAAAAABPN}{\bkmkend AAAAAAABPN}
00085 \}\par
{\bkmkstart AAAAAAABPO}{\bkmkend AAAAAAABPO}
00086 \par
{\bkmkstart AAAAAAABPQ}{\bkmkend AAAAAAABPQ}
00091 TEST_F(StringViewAdvancedCoverageTest, TestStringViewStreamOutput) \{\par
{\bkmkstart AAAAAAABPT}{\bkmkend AAAAAAABPT}
00092     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABPU}{\bkmkend AAAAAAABPU}
00093     std::ostringstream oss;\par
{\bkmkstart AAAAAAABPV}{\bkmkend AAAAAAABPV}
00094     \par
{\bkmkstart AAAAAAABPW}{\bkmkend AAAAAAABPW}
00095     {\cf20 // Test basic stream output}\par
{\bkmkstart AAAAAAABPX}{\bkmkend AAAAAAABPX}
00096     oss << sv;\par
{\bkmkstart AAAAAAABPY}{\bkmkend AAAAAAABPY}
00097     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABQA}{\bkmkend AAAAAAABQA}
00098     \par
{\bkmkstart AAAAAAABQB}{\bkmkend AAAAAAABQB}
00099     {\cf20 // Test with multiple string_views}\par
{\bkmkstart AAAAAAABQC}{\bkmkend AAAAAAABQC}
00100     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAABQD}{\bkmkend AAAAAAABQD}
00101     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAABQE}{\bkmkend AAAAAAABQE}
00102     std::string_view sv2({\cf22 ", "});\par
{\bkmkstart AAAAAAABQF}{\bkmkend AAAAAAABQF}
00103     std::string_view sv3({\cf22 "World!"});\par
{\bkmkstart AAAAAAABQG}{\bkmkend AAAAAAABQG}
00104     oss << sv1 << sv2 << sv3;\par
{\bkmkstart AAAAAAABQH}{\bkmkend AAAAAAABQH}
00105     EXPECT_EQ(oss.str(), {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABQI}{\bkmkend AAAAAAABQI}
00106     \par
{\bkmkstart AAAAAAABQJ}{\bkmkend AAAAAAABQJ}
00107     {\cf20 // Test with formatting}\par
{\bkmkstart AAAAAAABQL}{\bkmkend AAAAAAABQL}
00108     oss.str({\cf22 ""});\par
{\bkmkstart AAAAAAABQM}{\bkmkend AAAAAAABQM}
00109     oss << std::setw(20) << sv;\par
{\bkmkstart AAAAAAABQN}{\bkmkend AAAAAAABQN}
00110     EXPECT_EQ(oss.str().length(), 20);\par
{\bkmkstart AAAAAAABQO}{\bkmkend AAAAAAABQO}
00111     EXPECT_TRUE(oss.str().find({\cf22 "Hello, World!"}) != std::string::npos);\par
{\bkmkstart AAAAAAABQP}{\bkmkend AAAAAAABQP}
00112 \}\par
{\bkmkstart AAAAAAABQQ}{\bkmkend AAAAAAABQQ}
00113 \par
{\bkmkstart AAAAAAABQS}{\bkmkend AAAAAAABQS}
00118 TEST_F(StringViewAdvancedCoverageTest, TestStringViewConstMethods) \{\par
{\bkmkstart AAAAAAABQT}{\bkmkend AAAAAAABQT}
00119     {\cf17 const} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABQX}{\bkmkend AAAAAAABQX}
00120     \par
{\bkmkstart AAAAAAABRA}{\bkmkend AAAAAAABRA}
00121     {\cf20 // Test const access methods}\par
{\bkmkstart AAAAAAABRC}{\bkmkend AAAAAAABRC}
00122     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAABRH}{\bkmkend AAAAAAABRH}
00123     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAABRK}{\bkmkend AAAAAAABRK}
00124     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAABRM}{\bkmkend AAAAAAABRM}
00125     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAABRN}{\bkmkend AAAAAAABRN}
00126     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAABRP}{\bkmkend AAAAAAABRP}
00127     \par
{\bkmkstart AAAAAAABRQ}{\bkmkend AAAAAAABRQ}
00128     {\cf20 // Test const size methods}\par
{\bkmkstart AAAAAAABRS}{\bkmkend AAAAAAABRS}
00129     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAABRV}{\bkmkend AAAAAAABRV}
00130     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAABRW}{\bkmkend AAAAAAABRW}
00131     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00132     \par
{\bkmkstart AAAAAAABRY}{\bkmkend AAAAAAABRY}
00133     {\cf20 // Test const iterator methods}\par
{\bkmkstart AAAAAAABSA}{\bkmkend AAAAAAABSA}
00134     EXPECT_NE(sv.begin(), sv.end());\par
{\bkmkstart AAAAAAABSB}{\bkmkend AAAAAAABSB}
00135     EXPECT_NE(sv.cbegin(), sv.cend());\par
{\bkmkstart AAAAAAABSC}{\bkmkend AAAAAAABSC}
00136     EXPECT_NE(sv.rbegin(), sv.rend());\par
{\bkmkstart AAAAAAABSD}{\bkmkend AAAAAAABSD}
00137     EXPECT_NE(sv.crbegin(), sv.crend());\par
{\bkmkstart AAAAAAABSE}{\bkmkend AAAAAAABSE}
00138     \par
{\bkmkstart AAAAAAABSF}{\bkmkend AAAAAAABSF}
00139     {\cf20 // Test const find methods}\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00140     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABSI}{\bkmkend AAAAAAABSI}
00141     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAABSJ}{\bkmkend AAAAAAABSJ}
00142     EXPECT_EQ(sv.rfind({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAABSL}{\bkmkend AAAAAAABSL}
00143     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1);\par
{\bkmkstart AAAAAAABSM}{\bkmkend AAAAAAABSM}
00144     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 8);\par
{\bkmkstart AAAAAAABSN}{\bkmkend AAAAAAABSN}
00145     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAABSO}{\bkmkend AAAAAAABSO}
00146     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 11);\par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00147     \par
{\bkmkstart AAAAAAABSR}{\bkmkend AAAAAAABSR}
00148     {\cf20 // Test const contains methods using find}\par
{\bkmkstart AAAAAAABST}{\bkmkend AAAAAAABST}
00149     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAABSW}{\bkmkend AAAAAAABSW}
00150     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAABSX}{\bkmkend AAAAAAABSX}
00151     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAABSY}{\bkmkend AAAAAAABSY}
00152     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAABSZ}{\bkmkend AAAAAAABSZ}
00153 \}\par
{\bkmkstart AAAAAAABTA}{\bkmkend AAAAAAABTA}
00154 \par
{\bkmkstart AAAAAAABTB}{\bkmkend AAAAAAABTB}
00159 TEST_F(StringViewAdvancedCoverageTest, TestStringViewSubstrEdgeCases) \{\par
{\bkmkstart AAAAAAABTD}{\bkmkend AAAAAAABTD}
00160     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABTG}{\bkmkend AAAAAAABTG}
00161     \par
{\bkmkstart AAAAAAABTH}{\bkmkend AAAAAAABTH}
00162     {\cf20 // Test substr with zero length}\par
{\bkmkstart AAAAAAABTJ}{\bkmkend AAAAAAABTJ}
00163     std::string_view sub1 = sv.substr(0, 0);\par
{\bkmkstart AAAAAAABTL}{\bkmkend AAAAAAABTL}
00164     EXPECT_TRUE(sub1.empty());\par
{\bkmkstart AAAAAAABTM}{\bkmkend AAAAAAABTM}
00165     EXPECT_EQ(sub1.size(), 0);\par
{\bkmkstart AAAAAAABTN}{\bkmkend AAAAAAABTN}
00166     \par
{\bkmkstart AAAAAAABTO}{\bkmkend AAAAAAABTO}
00167     {\cf20 // Test substr with length beyond string}\par
{\bkmkstart AAAAAAABTQ}{\bkmkend AAAAAAABTQ}
00168     std::string_view sub2 = sv.substr(10, 100);\par
{\bkmkstart AAAAAAABTT}{\bkmkend AAAAAAABTT}
00169     EXPECT_EQ(sub2, {\cf22 "d!"});\par
{\bkmkstart AAAAAAABTW}{\bkmkend AAAAAAABTW}
00170     EXPECT_EQ(sub2.size(), 3);\par
{\bkmkstart AAAAAAABTY}{\bkmkend AAAAAAABTY}
00171     \par
{\bkmkstart AAAAAAABUA}{\bkmkend AAAAAAABUA}
00172     {\cf20 // Test substr at end of string}\par
{\bkmkstart AAAAAAABUE}{\bkmkend AAAAAAABUE}
00173     std::string_view sub3 = sv.substr(12, 1);\par
{\bkmkstart AAAAAAABUH}{\bkmkend AAAAAAABUH}
00174     EXPECT_EQ(sub3, {\cf22 "!"});\par
{\bkmkstart AAAAAAABUJ}{\bkmkend AAAAAAABUJ}
00175     EXPECT_EQ(sub3.size(), 1);\par
{\bkmkstart AAAAAAABUM}{\bkmkend AAAAAAABUM}
00176     \par
{\bkmkstart AAAAAAABUN}{\bkmkend AAAAAAABUN}
00177     {\cf20 // Test substr with npos}\par
{\bkmkstart AAAAAAABUO}{\bkmkend AAAAAAABUO}
00178     std::string_view sub4 = sv.substr(std::string_view::npos);\par
{\bkmkstart AAAAAAABUR}{\bkmkend AAAAAAABUR}
00179     EXPECT_TRUE(sub4.empty());\par
{\bkmkstart AAAAAAABUT}{\bkmkend AAAAAAABUT}
00180     \par
{\bkmkstart AAAAAAABUU}{\bkmkend AAAAAAABUU}
00181     {\cf20 // Test substr with very large position}\par
{\bkmkstart AAAAAAABUW}{\bkmkend AAAAAAABUW}
00182     std::string_view sub5 = sv.substr(1000);\par
{\bkmkstart AAAAAAABUZ}{\bkmkend AAAAAAABUZ}
00183     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAABVB}{\bkmkend AAAAAAABVB}
00184 \}\par
{\bkmkstart AAAAAAABVD}{\bkmkend AAAAAAABVD}
00185 \par
{\bkmkstart AAAAAAABVE}{\bkmkend AAAAAAABVE}
00190 TEST_F(StringViewAdvancedCoverageTest, TestStringViewFindEdgeCases) \{\par
{\bkmkstart AAAAAAABVI}{\bkmkend AAAAAAABVI}
00191     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABVL}{\bkmkend AAAAAAABVL}
00192     \par
{\bkmkstart AAAAAAABVM}{\bkmkend AAAAAAABVM}
00193     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAABVN}{\bkmkend AAAAAAABVN}
00194     std::string_view empty_sv;\par
{\bkmkstart AAAAAAABVP}{\bkmkend AAAAAAABVP}
00195     EXPECT_EQ(empty_sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAABVT}{\bkmkend AAAAAAABVT}
00196     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAABVZ}{\bkmkend AAAAAAABVZ}
00197     \par
{\bkmkstart AAAAAAABWA}{\bkmkend AAAAAAABWA}
00198     {\cf20 // Test find with position beyond string}\par
{\bkmkstart AAAAAAABWD}{\bkmkend AAAAAAABWD}
00199     EXPECT_EQ(sv.find({\cf23 'H'}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAABWF}{\bkmkend AAAAAAABWF}
00200     EXPECT_EQ(sv.find({\cf22 "Hello"}, 100), std::string_view::npos);\par
{\bkmkstart AAAAAAABWN}{\bkmkend AAAAAAABWN}
00201     \par
{\bkmkstart AAAAAAABWO}{\bkmkend AAAAAAABWO}
00202     {\cf20 // Test find with empty search string}\par
{\bkmkstart AAAAAAABWQ}{\bkmkend AAAAAAABWQ}
00203     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAABWT}{\bkmkend AAAAAAABWT}
00204     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAABWY}{\bkmkend AAAAAAABWY}
00205     \par
{\bkmkstart AAAAAAABXA}{\bkmkend AAAAAAABXA}
00206     {\cf20 // Test find with single character at boundaries}\par
{\bkmkstart AAAAAAABXB}{\bkmkend AAAAAAABXB}
00207     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABXF}{\bkmkend AAAAAAABXF}
00208     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAABXI}{\bkmkend AAAAAAABXI}
00209     \par
{\bkmkstart AAAAAAABXL}{\bkmkend AAAAAAABXL}
00210     {\cf20 // Test find with repeated characters}\par
{\bkmkstart AAAAAAABXM}{\bkmkend AAAAAAABXM}
00211     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAABXQ}{\bkmkend AAAAAAABXQ}
00212     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAABXU}{\bkmkend AAAAAAABXU}
00213     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAABXX}{\bkmkend AAAAAAABXX}
00214     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAABXY}{\bkmkend AAAAAAABXY}
00215     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAABYD}{\bkmkend AAAAAAABYD}
00216 \}\par
{\bkmkstart AAAAAAABYE}{\bkmkend AAAAAAABYE}
00217 \par
{\bkmkstart AAAAAAABYI}{\bkmkend AAAAAAABYI}
00222 TEST_F(StringViewAdvancedCoverageTest, TestStringViewCopyEdgeCases) \{\par
{\bkmkstart AAAAAAABYN}{\bkmkend AAAAAAABYN}
00223     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABYQ}{\bkmkend AAAAAAABYQ}
00224     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAABYS}{\bkmkend AAAAAAABYS}
00225     \par
{\bkmkstart AAAAAAABYT}{\bkmkend AAAAAAABYT}
00226     {\cf20 // Test copy with zero length}\par
{\bkmkstart AAAAAAABYW}{\bkmkend AAAAAAABYW}
00227     {\cf18 size_t} copied = sv.copy(buffer, 0);\par
{\bkmkstart AAAAAAABYY}{\bkmkend AAAAAAABYY}
00228     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAABYZ}{\bkmkend AAAAAAABYZ}
00229     \par
{\bkmkstart AAAAAAABZB}{\bkmkend AAAAAAABZB}
00230     {\cf20 // Test copy with position beyond string}\par
{\bkmkstart AAAAAAABZC}{\bkmkend AAAAAAABZC}
00231     copied = sv.copy(buffer, 5, 100);\par
{\bkmkstart AAAAAAABZE}{\bkmkend AAAAAAABZE}
00232     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAABZH}{\bkmkend AAAAAAABZH}
00233     \par
{\bkmkstart AAAAAAABZI}{\bkmkend AAAAAAABZI}
00234     {\cf20 // Test copy with npos position}\par
{\bkmkstart AAAAAAABZK}{\bkmkend AAAAAAABZK}
00235     copied = sv.copy(buffer, 5, std::string_view::npos);\par
{\bkmkstart AAAAAAABZN}{\bkmkend AAAAAAABZN}
00236     EXPECT_EQ(copied, 0);\par
{\bkmkstart AAAAAAABZP}{\bkmkend AAAAAAABZP}
00237     \par
{\bkmkstart AAAAAAABZR}{\bkmkend AAAAAAABZR}
00238     {\cf20 // Test copy with exact length}\par
{\bkmkstart AAAAAAABZT}{\bkmkend AAAAAAABZT}
00239     copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAABZV}{\bkmkend AAAAAAABZV}
00240     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAACAA}{\bkmkend AAAAAAACAA}
00241     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACAE}{\bkmkend AAAAAAACAE}
00242     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACAG}{\bkmkend AAAAAAACAG}
00243     \par
{\bkmkstart AAAAAAACAH}{\bkmkend AAAAAAACAH}
00244     {\cf20 // Test copy with small buffer}\par
{\bkmkstart AAAAAAACAJ}{\bkmkend AAAAAAACAJ}
00245     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAACAL}{\bkmkend AAAAAAACAL}
00246     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAACAO}{\bkmkend AAAAAAACAO}
00247     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAACAR}{\bkmkend AAAAAAACAR}
00248     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAACAU}{\bkmkend AAAAAAACAU}
00249     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAACAW}{\bkmkend AAAAAAACAW}
00250 \}\par
{\bkmkstart AAAAAAACAZ}{\bkmkend AAAAAAACAZ}
00251 \par
{\bkmkstart AAAAAAACBA}{\bkmkend AAAAAAACBA}
00256 TEST_F(StringViewAdvancedCoverageTest, TestStringViewStartsWithEndsWithEdgeCases) \{\par
{\bkmkstart AAAAAAACBG}{\bkmkend AAAAAAACBG}
00257     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACBM}{\bkmkend AAAAAAACBM}
00258     \par
{\bkmkstart AAAAAAACBN}{\bkmkend AAAAAAACBN}
00259     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAACBP}{\bkmkend AAAAAAACBP}
00260     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACBS}{\bkmkend AAAAAAACBS}
00261     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACBW}{\bkmkend AAAAAAACBW}
00262     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACBZ}{\bkmkend AAAAAAACBZ}
00263     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACCC}{\bkmkend AAAAAAACCC}
00264     EXPECT_EQ(empty_sv.find({\cf22 "World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACCH}{\bkmkend AAAAAAACCH}
00265     \par
{\bkmkstart AAAAAAACCI}{\bkmkend AAAAAAACCI}
00266     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAACCK}{\bkmkend AAAAAAACCK}
00267     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACCN}{\bkmkend AAAAAAACCN}
00268     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACCR}{\bkmkend AAAAAAACCR}
00269     \par
{\bkmkstart AAAAAAACCS}{\bkmkend AAAAAAACCS}
00270     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAACCV}{\bkmkend AAAAAAACCV}
00271     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAACCW}{\bkmkend AAAAAAACCW}
00272     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAACCZ}{\bkmkend AAAAAAACCZ}
00273     \par
{\bkmkstart AAAAAAACDB}{\bkmkend AAAAAAACDB}
00274     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAACDE}{\bkmkend AAAAAAACDE}
00275     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACDH}{\bkmkend AAAAAAACDH}
00276     EXPECT_EQ(sv.find({\cf22 "Extra Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACDM}{\bkmkend AAAAAAACDM}
00277     \par
{\bkmkstart AAAAAAACDO}{\bkmkend AAAAAAACDO}
00278     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAACDS}{\bkmkend AAAAAAACDS}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACDU}{\bkmkend AAAAAAACDU}
00280     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAACDW}{\bkmkend AAAAAAACDW}
00281     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACDX}{\bkmkend AAAAAAACDX}
00282     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACEB}{\bkmkend AAAAAAACEB}
00283 \}\par
{\bkmkstart AAAAAAACED}{\bkmkend AAAAAAACED}
00284 \par
{\bkmkstart AAAAAAACEG}{\bkmkend AAAAAAACEG}
00289 TEST_F(StringViewAdvancedCoverageTest, TestStringViewContainsEdgeCases) \{\par
{\bkmkstart AAAAAAACEJ}{\bkmkend AAAAAAACEJ}
00290     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACEO}{\bkmkend AAAAAAACEO}
00291     \par
{\bkmkstart AAAAAAACEP}{\bkmkend AAAAAAACEP}
00292     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAACES}{\bkmkend AAAAAAACES}
00293     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACEU}{\bkmkend AAAAAAACEU}
00294     EXPECT_NE(empty_sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAACEW}{\bkmkend AAAAAAACEW}
00295     EXPECT_EQ(empty_sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACFA}{\bkmkend AAAAAAACFA}
00296     \par
{\bkmkstart AAAAAAACFB}{\bkmkend AAAAAAACFB}
00297     {\cf20 // Test with empty search string}\par
{\bkmkstart AAAAAAACFF}{\bkmkend AAAAAAACFF}
00298     EXPECT_NE(sv.find({\cf22 ""}), std::string_view::npos);\par
{\bkmkstart AAAAAAACFG}{\bkmkend AAAAAAACFG}
00299     \par
{\bkmkstart AAAAAAACFI}{\bkmkend AAAAAAACFI}
00300     {\cf20 // Test with exact match}\par
{\bkmkstart AAAAAAACFJ}{\bkmkend AAAAAAACFJ}
00301     EXPECT_NE(sv.find({\cf22 "Hello, World!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACFL}{\bkmkend AAAAAAACFL}
00302     \par
{\bkmkstart AAAAAAACFO}{\bkmkend AAAAAAACFO}
00303     {\cf20 // Test with longer search string}\par
{\bkmkstart AAAAAAACFQ}{\bkmkend AAAAAAACFQ}
00304     EXPECT_EQ(sv.find({\cf22 "Hello, World! Extra"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACFU}{\bkmkend AAAAAAACFU}
00305     \par
{\bkmkstart AAAAAAACFV}{\bkmkend AAAAAAACFV}
00306     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAACFW}{\bkmkend AAAAAAACFW}
00307     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACGA}{\bkmkend AAAAAAACGA}
00308     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACGD}{\bkmkend AAAAAAACGD}
00309     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACGH}{\bkmkend AAAAAAACGH}
00310     \par
{\bkmkstart AAAAAAACGI}{\bkmkend AAAAAAACGI}
00311     {\cf20 // Test with repeated characters}\par
{\bkmkstart AAAAAAACGK}{\bkmkend AAAAAAACGK}
00312     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAACGO}{\bkmkend AAAAAAACGO}
00313     EXPECT_NE(repeated.find({\cf23 'a'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACGT}{\bkmkend AAAAAAACGT}
00314     EXPECT_NE(repeated.find({\cf22 "aa"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACGX}{\bkmkend AAAAAAACGX}
00315     EXPECT_EQ(repeated.find({\cf23 'b'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACHA}{\bkmkend AAAAAAACHA}
00316 \}\par
{\bkmkstart AAAAAAACHC}{\bkmkend AAAAAAACHC}
00317 \par
{\bkmkstart AAAAAAACHE}{\bkmkend AAAAAAACHE}
00322 TEST_F(StringViewAdvancedCoverageTest, TestStringViewRemovePrefixSuffixEdgeCases) \{\par
{\bkmkstart AAAAAAACHJ}{\bkmkend AAAAAAACHJ}
00323     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACHN}{\bkmkend AAAAAAACHN}
00324     \par
{\bkmkstart AAAAAAACHO}{\bkmkend AAAAAAACHO}
00325     {\cf20 // Test remove_prefix with zero}\par
{\bkmkstart AAAAAAACHQ}{\bkmkend AAAAAAACHQ}
00326     sv.remove_prefix(0);\par
{\bkmkstart AAAAAAACHT}{\bkmkend AAAAAAACHT}
00327     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACHV}{\bkmkend AAAAAAACHV}
00328     \par
{\bkmkstart AAAAAAACHY}{\bkmkend AAAAAAACHY}
00329     {\cf20 // Test remove_suffix with zero}\par
{\bkmkstart AAAAAAACHZ}{\bkmkend AAAAAAACHZ}
00330     sv.remove_suffix(0);\par
{\bkmkstart AAAAAAACID}{\bkmkend AAAAAAACID}
00331     EXPECT_EQ(sv, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACIG}{\bkmkend AAAAAAACIG}
00332     \par
{\bkmkstart AAAAAAACII}{\bkmkend AAAAAAACII}
00333     {\cf20 // Test remove_prefix with full length}\par
{\bkmkstart AAAAAAACIK}{\bkmkend AAAAAAACIK}
00334     sv.remove_prefix(sv.size());\par
{\bkmkstart AAAAAAACIO}{\bkmkend AAAAAAACIO}
00335     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAACIS}{\bkmkend AAAAAAACIS}
00336     \par
{\bkmkstart AAAAAAACIT}{\bkmkend AAAAAAACIT}
00337     {\cf20 // Reset and test remove_suffix with full length}\par
{\bkmkstart AAAAAAACIW}{\bkmkend AAAAAAACIW}
00338     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAACIZ}{\bkmkend AAAAAAACIZ}
00339     sv.remove_suffix(sv.size());\par
{\bkmkstart AAAAAAACJC}{\bkmkend AAAAAAACJC}
00340     EXPECT_TRUE(sv.empty());\par
{\bkmkstart AAAAAAACJG}{\bkmkend AAAAAAACJG}
00341     \par
{\bkmkstart AAAAAAACJH}{\bkmkend AAAAAAACJH}
00342     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAACJJ}{\bkmkend AAAAAAACJJ}
00343     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACJN}{\bkmkend AAAAAAACJN}
00344     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAACJO}{\bkmkend AAAAAAACJO}
00345     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAACJS}{\bkmkend AAAAAAACJS}
00346     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACJV}{\bkmkend AAAAAAACJV}
00347 \}\par
{\bkmkstart AAAAAAACJW}{\bkmkend AAAAAAACJW}
00348 \par
{\bkmkstart AAAAAAACJY}{\bkmkend AAAAAAACJY}
00353 TEST_F(StringViewAdvancedCoverageTest, TestStringViewHashEdgeCases) \{\par
{\bkmkstart AAAAAAACKA}{\bkmkend AAAAAAACKA}
00354     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAACKE}{\bkmkend AAAAAAACKE}
00355     \par
{\bkmkstart AAAAAAACKF}{\bkmkend AAAAAAACKF}
00356     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAACKH}{\bkmkend AAAAAAACKH}
00357     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACKL}{\bkmkend AAAAAAACKL}
00358     {\cf17 auto} empty_hash = hasher(empty_sv);\par
{\bkmkstart AAAAAAACKO}{\bkmkend AAAAAAACKO}
00359     EXPECT_EQ(empty_hash, hasher(empty_sv));\par
{\bkmkstart AAAAAAACKX}{\bkmkend AAAAAAACKX}
00360     \par
{\bkmkstart AAAAAAACKY}{\bkmkend AAAAAAACKY}
00361     {\cf20 // Test single character}\par
{\bkmkstart AAAAAAACLB}{\bkmkend AAAAAAACLB}
00362     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAACLE}{\bkmkend AAAAAAACLE}
00363     {\cf17 auto} single_hash = hasher(single_sv);\par
{\bkmkstart AAAAAAACLK}{\bkmkend AAAAAAACLK}
00364     EXPECT_NE(empty_hash, single_hash);\par
{\bkmkstart AAAAAAACLN}{\bkmkend AAAAAAACLN}
00365     \par
{\bkmkstart AAAAAAACLQ}{\bkmkend AAAAAAACLQ}
00366     {\cf20 // Test same content different sources}\par
{\bkmkstart AAAAAAACLR}{\bkmkend AAAAAAACLR}
00367     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAACLU}{\bkmkend AAAAAAACLU}
00368     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAACLY}{\bkmkend AAAAAAACLY}
00369     std::string_view sv1(str);\par
{\bkmkstart AAAAAAACMA}{\bkmkend AAAAAAACMA}
00370     std::string_view sv2(cstr);\par
{\bkmkstart AAAAAAACME}{\bkmkend AAAAAAACME}
00371     \par
{\bkmkstart AAAAAAACMF}{\bkmkend AAAAAAACMF}
00372     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAACMJ}{\bkmkend AAAAAAACMJ}
00373     \par
{\bkmkstart AAAAAAACML}{\bkmkend AAAAAAACML}
00374     {\cf20 // Test different content same length}\par
{\bkmkstart AAAAAAACMM}{\bkmkend AAAAAAACMM}
00375     std::string_view sv3({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACMW}{\bkmkend AAAAAAACMW}
00376     std::string_view sv4({\cf22 "World"});\par
{\bkmkstart AAAAAAACNA}{\bkmkend AAAAAAACNA}
00377     EXPECT_NE(hasher(sv3), hasher(sv4));\par
{\bkmkstart AAAAAAACND}{\bkmkend AAAAAAACND}
00378 \}\par
{\bkmkstart AAAAAAACNF}{\bkmkend AAAAAAACNF}
00379 \par
{\bkmkstart AAAAAAACNG}{\bkmkend AAAAAAACNG}
00384 TEST_F(StringViewAdvancedCoverageTest, TestStringViewIteratorEdgeCases) \{\par
{\bkmkstart AAAAAAACNJ}{\bkmkend AAAAAAACNJ}
00385     {\cf20 // Test empty string_view iterators}\par
{\bkmkstart AAAAAAACNL}{\bkmkend AAAAAAACNL}
00386     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACNP}{\bkmkend AAAAAAACNP}
00387     EXPECT_EQ(empty_sv.begin(), empty_sv.end());\par
{\bkmkstart AAAAAAACNS}{\bkmkend AAAAAAACNS}
00388     EXPECT_EQ(empty_sv.cbegin(), empty_sv.cend());\par
{\bkmkstart AAAAAAACNV}{\bkmkend AAAAAAACNV}
00389     EXPECT_EQ(empty_sv.rbegin(), empty_sv.rend());\par
{\bkmkstart AAAAAAACNY}{\bkmkend AAAAAAACNY}
00390     EXPECT_EQ(empty_sv.crbegin(), empty_sv.crend());\par
{\bkmkstart AAAAAAACOC}{\bkmkend AAAAAAACOC}
00391     \par
{\bkmkstart AAAAAAACOE}{\bkmkend AAAAAAACOE}
00392     {\cf20 // Test single character iterators}\par
{\bkmkstart AAAAAAACOH}{\bkmkend AAAAAAACOH}
00393     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAACOL}{\bkmkend AAAAAAACOL}
00394     EXPECT_NE(single_sv.begin(), single_sv.end());\par
{\bkmkstart AAAAAAACOQ}{\bkmkend AAAAAAACOQ}
00395     EXPECT_EQ(single_sv.begin() + 1, single_sv.end());\par
{\bkmkstart AAAAAAACOT}{\bkmkend AAAAAAACOT}
00396     EXPECT_EQ(*single_sv.begin(), {\cf23 'A'});\par
{\bkmkstart AAAAAAACOX}{\bkmkend AAAAAAACOX}
00397     EXPECT_EQ(*(single_sv.end() - 1), {\cf23 'A'});\par
{\bkmkstart AAAAAAACPB}{\bkmkend AAAAAAACPB}
00398     \par
{\bkmkstart AAAAAAACPE}{\bkmkend AAAAAAACPE}
00399     {\cf20 // Test reverse iterators}\par
{\bkmkstart AAAAAAACPM}{\bkmkend AAAAAAACPM}
00400     std::string_view sv({\cf22 "ABC"});\par
{\bkmkstart AAAAAAACPP}{\bkmkend AAAAAAACPP}
00401     {\cf17 auto} rit = sv.rbegin();\par
{\bkmkstart AAAAAAACPS}{\bkmkend AAAAAAACPS}
00402     EXPECT_EQ(*rit, {\cf23 'C'});\par
{\bkmkstart AAAAAAACPV}{\bkmkend AAAAAAACPV}
00403     ++rit;\par
{\bkmkstart AAAAAAACPX}{\bkmkend AAAAAAACPX}
00404     EXPECT_EQ(*rit, {\cf23 'B'});\par
{\bkmkstart AAAAAAACQC}{\bkmkend AAAAAAACQC}
00405     ++rit;\par
{\bkmkstart AAAAAAACQD}{\bkmkend AAAAAAACQD}
00406     EXPECT_EQ(*rit, {\cf23 'A'});\par
{\bkmkstart AAAAAAACQH}{\bkmkend AAAAAAACQH}
00407     ++rit;\par
{\bkmkstart AAAAAAACQI}{\bkmkend AAAAAAACQI}
00408     EXPECT_EQ(rit, sv.rend());\par
{\bkmkstart AAAAAAACQM}{\bkmkend AAAAAAACQM}
00409 \}\par
{\bkmkstart AAAAAAACQP}{\bkmkend AAAAAAACQP}
00410 \par
{\bkmkstart AAAAAAACQT}{\bkmkend AAAAAAACQT}
00415 TEST_F(StringViewAdvancedCoverageTest, TestStringViewConstexprEdgeCases) \{\par
{\bkmkstart AAAAAAACQX}{\bkmkend AAAAAAACQX}
00416     {\cf20 // Test constexpr with empty string}\par
{\bkmkstart AAAAAAACQY}{\bkmkend AAAAAAACQY}
00417     {\cf17 constexpr} std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAACRD}{\bkmkend AAAAAAACRD}
00418     {\cf17 static_assert}(empty_sv.empty());\par
{\bkmkstart AAAAAAACRG}{\bkmkend AAAAAAACRG}
00419     {\cf17 static_assert}(empty_sv.size() == 0);\par
{\bkmkstart AAAAAAACRM}{\bkmkend AAAAAAACRM}
00420     \par
{\bkmkstart AAAAAAACRP}{\bkmkend AAAAAAACRP}
00421     {\cf20 // Test constexpr with single character}\par
{\bkmkstart AAAAAAACRR}{\bkmkend AAAAAAACRR}
00422     {\cf17 constexpr} std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAACRV}{\bkmkend AAAAAAACRV}
00423     {\cf17 static_assert}(single_sv.size() == 1);\par
{\bkmkstart AAAAAAACRY}{\bkmkend AAAAAAACRY}
00424     {\cf17 static_assert}(single_sv[0] == {\cf23 'A'});\par
{\bkmkstart AAAAAAACSC}{\bkmkend AAAAAAACSC}
00425     \par
{\bkmkstart AAAAAAACSE}{\bkmkend AAAAAAACSE}
00426     {\cf20 // Test constexpr find operations}\par
{\bkmkstart AAAAAAACSH}{\bkmkend AAAAAAACSH}
00427     {\cf17 constexpr} std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACSL}{\bkmkend AAAAAAACSL}
00428     {\cf17 constexpr} {\cf18 size_t} pos1 = sv.find({\cf22 "World"});\par
{\bkmkstart AAAAAAACSO}{\bkmkend AAAAAAACSO}
00429     {\cf17 static_assert}(pos1 == 7);\par
{\bkmkstart AAAAAAACSR}{\bkmkend AAAAAAACSR}
00430     \par
{\bkmkstart AAAAAAACST}{\bkmkend AAAAAAACST}
00431     {\cf17 constexpr} {\cf18 size_t} pos2 = sv.find({\cf22 "xyz"});\par
{\bkmkstart AAAAAAACSV}{\bkmkend AAAAAAACSV}
00432     {\cf17 static_assert}(pos2 == std::string_view::npos);\par
{\bkmkstart AAAAAAACSX}{\bkmkend AAAAAAACSX}
00433     \par
{\bkmkstart AAAAAAACSZ}{\bkmkend AAAAAAACSZ}
00434     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAACTB}{\bkmkend AAAAAAACTB}
00435     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAACTF}{\bkmkend AAAAAAACTF}
00436     {\cf17 static_assert}(sv.find({\cf22 "World!"}) == 7);\par
{\bkmkstart AAAAAAACTH}{\bkmkend AAAAAAACTH}
00437     {\cf17 static_assert}(sv.find({\cf22 "World"}) == 7);\par
{\bkmkstart AAAAAAACTI}{\bkmkend AAAAAAACTI}
00438     {\cf17 static_assert}(sv.find({\cf22 "Hello"}) == 0);\par
{\bkmkstart AAAAAAACTK}{\bkmkend AAAAAAACTK}
00439     \par
{\bkmkstart AAAAAAACTL}{\bkmkend AAAAAAACTL}
00440     {\cf20 // Test constexpr contains using find}\par
{\bkmkstart AAAAAAACTM}{\bkmkend AAAAAAACTM}
00441     {\cf17 static_assert}(sv.find({\cf22 "lo, Wo"}) != std::string_view::npos);\par
{\bkmkstart AAAAAAACTN}{\bkmkend AAAAAAACTN}
00442     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAACTO}{\bkmkend AAAAAAACTO}
00443 \}\par
{\bkmkstart AAAAAAACTP}{\bkmkend AAAAAAACTP}
00444 \par
{\bkmkstart AAAAAAACTQ}{\bkmkend AAAAAAACTQ}
00449 TEST_F(StringViewAdvancedCoverageTest, TestStringViewPerformanceEdgeCases) \{\par
{\bkmkstart AAAAAAACTV}{\bkmkend AAAAAAACTV}
00450     {\cf20 // Test with very large string}\par
{\bkmkstart AAAAAAACTX}{\bkmkend AAAAAAACTX}
00451     std::string large_string(100000, {\cf23 'A'});\par
{\bkmkstart AAAAAAACUC}{\bkmkend AAAAAAACUC}
00452     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAACUG}{\bkmkend AAAAAAACUG}
00453     \par
{\bkmkstart AAAAAAACUI}{\bkmkend AAAAAAACUI}
00454     {\cf20 // Test operations that should be fast}\par
{\bkmkstart AAAAAAACUJ}{\bkmkend AAAAAAACUJ}
00455     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAACUP}{\bkmkend AAAAAAACUP}
00456     \par
{\bkmkstart AAAAAAACUS}{\bkmkend AAAAAAACUS}
00457     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAACUT}{\bkmkend AAAAAAACUT}
00458     {\cf19 for} ({\cf18 int} i = 0; i < 100; ++i) \{\par
{\bkmkstart AAAAAAACUX}{\bkmkend AAAAAAACUX}
00459         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAACVB}{\bkmkend AAAAAAACVB}
00460         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAACVE}{\bkmkend AAAAAAACVE}
00461         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAACVM}{\bkmkend AAAAAAACVM}
00462         {\cf17 auto} starts = sv.find({\cf22 "AAAA"}) == 0;\par
{\bkmkstart AAAAAAACVP}{\bkmkend AAAAAAACVP}
00463         {\cf17 auto} ends = sv.find({\cf22 "AAAA"}) == (sv.size() - 4);\par
{\bkmkstart AAAAAAACVV}{\bkmkend AAAAAAACVV}
00464         (void)sub; (void)pos; (void)contains; (void)starts; (void)ends;\par
{\bkmkstart AAAAAAACWA}{\bkmkend AAAAAAACWA}
00465     \}\par
{\bkmkstart AAAAAAACWB}{\bkmkend AAAAAAACWB}
00466     \par
{\bkmkstart AAAAAAACWC}{\bkmkend AAAAAAACWC}
00467     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAACWJ}{\bkmkend AAAAAAACWJ}
00468     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAACWP}{\bkmkend AAAAAAACWP}
00469     \par
{\bkmkstart AAAAAAACWQ}{\bkmkend AAAAAAACWQ}
00470     {\cf20 // Should complete quickly}\par
{\bkmkstart AAAAAAACWT}{\bkmkend AAAAAAACWT}
00471     EXPECT_LT(duration.count(), 100000); {\cf20 // Less than 0.1 second}\par
{\bkmkstart AAAAAAACWV}{\bkmkend AAAAAAACWV}
00472 \}\par
{\bkmkstart AAAAAAACWW}{\bkmkend AAAAAAACWW}
00473 \par
{\bkmkstart AAAAAAACWY}{\bkmkend AAAAAAACWY}
00474 \} {\cf20 // namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAABNM}
{\bkmkend AAAAAAABNM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to increase coverage for _msvc_string_view.hpp. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include <string_view>}\par
{\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <cstring>}\par
{\f2 #include <limits>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_string_view_coverage.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__string__view__coverage_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to increase coverage for _msvc_string_view.hpp. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test file specifically targets uncovered lines in _msvc_string_view.hpp to increase the line coverage from 41.9% to 100% \par
}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNL" }{}}{\fldrslt {\cs37\ul\cf2 test_string_view_coverage.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_coverage.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_coverage.cpp}
{\bkmkstart AAAAAAABNL}
{\bkmkend AAAAAAABNL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNM" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABQR}{\bkmkend AAAAAAABQR}
00001 \par
{\bkmkstart AAAAAAABQW}{\bkmkend AAAAAAABQW}
00008 \par
{\bkmkstart AAAAAAABQY}{\bkmkend AAAAAAABQY}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABRI}{\bkmkend AAAAAAABRI}
00010 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAABRZ}{\bkmkend AAAAAAABRZ}
00011 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAABSK}{\bkmkend AAAAAAABSK}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAABSS}{\bkmkend AAAAAAABSS}
00013 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAABTC}{\bkmkend AAAAAAABTC}
00014 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAABTS}{\bkmkend AAAAAAABTS}
00015 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAABUK}{\bkmkend AAAAAAABUK}
00016 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAABVV}{\bkmkend AAAAAAABVV}
00017 \par
{\bkmkstart AAAAAAABVW}{\bkmkend AAAAAAABVW}
00018 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAABVY}{\bkmkend AAAAAAABVY}
00019 \par
{\bkmkstart AAAAAAABWB}{\bkmkend AAAAAAABWB}
00024 {\cf17 class }StringViewCoverageTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAABWI}{\bkmkend AAAAAAABWI}
00025 {\cf17 protected}:\par
{\bkmkstart AAAAAAABWK}{\bkmkend AAAAAAABWK}
00026     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAABWP}{\bkmkend AAAAAAABWP}
00027         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAABWR}{\bkmkend AAAAAAABWR}
00028     \}\par
{\bkmkstart AAAAAAABWS}{\bkmkend AAAAAAABWS}
00029     \par
{\bkmkstart AAAAAAABWV}{\bkmkend AAAAAAABWV}
00030     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAABXC}{\bkmkend AAAAAAABXC}
00031         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAABXE}{\bkmkend AAAAAAABXE}
00032     \}\par
{\bkmkstart AAAAAAABXG}{\bkmkend AAAAAAABXG}
00033 \};\par
{\bkmkstart AAAAAAABXH}{\bkmkend AAAAAAABXH}
00034 \par
{\bkmkstart AAAAAAABXJ}{\bkmkend AAAAAAABXJ}
00039 TEST_F(StringViewCoverageTest, TestStringViewConstruction) \{\par
{\bkmkstart AAAAAAABXO}{\bkmkend AAAAAAABXO}
00040     {\cf20 // Test construction from C-string}\par
{\bkmkstart AAAAAAABXR}{\bkmkend AAAAAAABXR}
00041     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAABXV}{\bkmkend AAAAAAABXV}
00042     std::string_view sv1(cstr);\par
{\bkmkstart AAAAAAABXZ}{\bkmkend AAAAAAABXZ}
00043     EXPECT_EQ(sv1.size(), 13);\par
{\bkmkstart AAAAAAABYC}{\bkmkend AAAAAAABYC}
00044     EXPECT_EQ(sv1.data(), cstr);\par
{\bkmkstart AAAAAAABYH}{\bkmkend AAAAAAABYH}
00045     \par
{\bkmkstart AAAAAAABYK}{\bkmkend AAAAAAABYK}
00046     {\cf20 // Test construction from std::string}\par
{\bkmkstart AAAAAAABYL}{\bkmkend AAAAAAABYL}
00047     std::string str = {\cf22 "Test String"};\par
{\bkmkstart AAAAAAABYO}{\bkmkend AAAAAAABYO}
00048     std::string_view sv2(str);\par
{\bkmkstart AAAAAAABZS}{\bkmkend AAAAAAABZS}
00049     EXPECT_EQ(sv2.size(), str.size());\par
{\bkmkstart AAAAAAABZX}{\bkmkend AAAAAAABZX}
00050     EXPECT_EQ(sv2.data(), str.data());\par
{\bkmkstart AAAAAAABZZ}{\bkmkend AAAAAAABZZ}
00051     \par
{\bkmkstart AAAAAAACAB}{\bkmkend AAAAAAACAB}
00052     {\cf20 // Test construction with length}\par
{\bkmkstart AAAAAAACAD}{\bkmkend AAAAAAACAD}
00053     std::string_view sv3(cstr, 5);\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00054     EXPECT_EQ(sv3.size(), 5);\par
{\bkmkstart AAAAAAACAN}{\bkmkend AAAAAAACAN}
00055     EXPECT_EQ(sv3, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAACAP}{\bkmkend AAAAAAACAP}
00056     \par
{\bkmkstart AAAAAAACAS}{\bkmkend AAAAAAACAS}
00057     {\cf20 // Test construction from char array}\par
{\bkmkstart AAAAAAACAT}{\bkmkend AAAAAAACAT}
00058     {\cf18 char} arr[] = {\cf22 "Array Test"};\par
{\bkmkstart AAAAAAACAX}{\bkmkend AAAAAAACAX}
00059     std::string_view sv4(arr);\par
{\bkmkstart AAAAAAACBC}{\bkmkend AAAAAAACBC}
00060     EXPECT_EQ(sv4.size(), 10);\par
{\bkmkstart AAAAAAACBE}{\bkmkend AAAAAAACBE}
00061     EXPECT_EQ(sv4, {\cf22 "Array Test"});\par
{\bkmkstart AAAAAAACBH}{\bkmkend AAAAAAACBH}
00062     \par
{\bkmkstart AAAAAAACBJ}{\bkmkend AAAAAAACBJ}
00063     {\cf20 // Test construction from string literal}\par
{\bkmkstart AAAAAAACBK}{\bkmkend AAAAAAACBK}
00064     std::string_view sv5({\cf22 "Literal"});\par
{\bkmkstart AAAAAAACBQ}{\bkmkend AAAAAAACBQ}
00065     EXPECT_EQ(sv5.size(), 7);\par
{\bkmkstart AAAAAAACBT}{\bkmkend AAAAAAACBT}
00066     EXPECT_EQ(sv5, {\cf22 "Literal"});\par
{\bkmkstart AAAAAAACBV}{\bkmkend AAAAAAACBV}
00067 \}\par
{\bkmkstart AAAAAAACBX}{\bkmkend AAAAAAACBX}
00068 \par
{\bkmkstart AAAAAAACCA}{\bkmkend AAAAAAACCA}
00073 TEST_F(StringViewCoverageTest, TestStringViewAccess) \{\par
{\bkmkstart AAAAAAACCD}{\bkmkend AAAAAAACCD}
00074     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACCM}{\bkmkend AAAAAAACCM}
00075     \par
{\bkmkstart AAAAAAACCO}{\bkmkend AAAAAAACCO}
00076     {\cf20 // Test operator[]}\par
{\bkmkstart AAAAAAACCP}{\bkmkend AAAAAAACCP}
00077     EXPECT_EQ(sv[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAACCT}{\bkmkend AAAAAAACCT}
00078     EXPECT_EQ(sv[6], {\cf23 ' '});\par
{\bkmkstart AAAAAAACDC}{\bkmkend AAAAAAACDC}
00079     EXPECT_EQ(sv[12], {\cf23 '!'});\par
{\bkmkstart AAAAAAACDG}{\bkmkend AAAAAAACDG}
00080     \par
{\bkmkstart AAAAAAACDI}{\bkmkend AAAAAAACDI}
00081     {\cf20 // Test at() method}\par
{\bkmkstart AAAAAAACDK}{\bkmkend AAAAAAACDK}
00082     EXPECT_EQ(sv.at(0), {\cf23 'H'});\par
{\bkmkstart AAAAAAACDN}{\bkmkend AAAAAAACDN}
00083     EXPECT_EQ(sv.at(6), {\cf23 ' '});\par
{\bkmkstart AAAAAAACDQ}{\bkmkend AAAAAAACDQ}
00084     EXPECT_EQ(sv.at(12), {\cf23 '!'});\par
{\bkmkstart AAAAAAACDY}{\bkmkend AAAAAAACDY}
00085     \par
{\bkmkstart AAAAAAACDZ}{\bkmkend AAAAAAACDZ}
00086     {\cf20 // Test front() and back()}\par
{\bkmkstart AAAAAAACEF}{\bkmkend AAAAAAACEF}
00087     EXPECT_EQ(sv.front(), {\cf23 'H'});\par
{\bkmkstart AAAAAAACEH}{\bkmkend AAAAAAACEH}
00088     EXPECT_EQ(sv.back(), {\cf23 '!'});\par
{\bkmkstart AAAAAAACEK}{\bkmkend AAAAAAACEK}
00089     \par
{\bkmkstart AAAAAAACEL}{\bkmkend AAAAAAACEL}
00090     {\cf20 // Test data() method}\par
{\bkmkstart AAAAAAACEN}{\bkmkend AAAAAAACEN}
00091     EXPECT_NE(sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAACER}{\bkmkend AAAAAAACER}
00092     EXPECT_EQ(sv.data()[0], {\cf23 'H'});\par
{\bkmkstart AAAAAAACEZ}{\bkmkend AAAAAAACEZ}
00093     \par
{\bkmkstart AAAAAAACFC}{\bkmkend AAAAAAACFC}
00094     {\cf20 // Test size() and length()}\par
{\bkmkstart AAAAAAACFE}{\bkmkend AAAAAAACFE}
00095     EXPECT_EQ(sv.size(), 13);\par
{\bkmkstart AAAAAAACFK}{\bkmkend AAAAAAACFK}
00096     EXPECT_EQ(sv.length(), 13);\par
{\bkmkstart AAAAAAACFM}{\bkmkend AAAAAAACFM}
00097     \par
{\bkmkstart AAAAAAACFP}{\bkmkend AAAAAAACFP}
00098     {\cf20 // Test empty()}\par
{\bkmkstart AAAAAAACFR}{\bkmkend AAAAAAACFR}
00099     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAACFS}{\bkmkend AAAAAAACFS}
00100     \par
{\bkmkstart AAAAAAACFT}{\bkmkend AAAAAAACFT}
00101     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACFY}{\bkmkend AAAAAAACFY}
00102     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACGB}{\bkmkend AAAAAAACGB}
00103     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAACGC}{\bkmkend AAAAAAACGC}
00104 \}\par
{\bkmkstart AAAAAAACGE}{\bkmkend AAAAAAACGE}
00105 \par
{\bkmkstart AAAAAAACGG}{\bkmkend AAAAAAACGG}
00110 TEST_F(StringViewCoverageTest, TestStringViewIterators) \{\par
{\bkmkstart AAAAAAACGM}{\bkmkend AAAAAAACGM}
00111     std::string_view sv({\cf22 "Test"});\par
{\bkmkstart AAAAAAACGP}{\bkmkend AAAAAAACGP}
00112     \par
{\bkmkstart AAAAAAACGQ}{\bkmkend AAAAAAACGQ}
00113     {\cf20 // Test begin() and end()}\par
{\bkmkstart AAAAAAACGS}{\bkmkend AAAAAAACGS}
00114     {\cf17 auto} it_begin = sv.begin();\par
{\bkmkstart AAAAAAACGV}{\bkmkend AAAAAAACGV}
00115     {\cf17 auto} it_end = sv.end();\par
{\bkmkstart AAAAAAACGZ}{\bkmkend AAAAAAACGZ}
00116     EXPECT_NE(it_begin, it_end);\par
{\bkmkstart AAAAAAACHD}{\bkmkend AAAAAAACHD}
00117     EXPECT_EQ(*it_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAACHG}{\bkmkend AAAAAAACHG}
00118     EXPECT_EQ(*(it_end - 1), {\cf23 't'});\par
{\bkmkstart AAAAAAACHI}{\bkmkend AAAAAAACHI}
00119     \par
{\bkmkstart AAAAAAACHK}{\bkmkend AAAAAAACHK}
00120     {\cf20 // Test cbegin() and cend()}\par
{\bkmkstart AAAAAAACHL}{\bkmkend AAAAAAACHL}
00121     {\cf17 auto} cit_begin = sv.cbegin();\par
{\bkmkstart AAAAAAACHP}{\bkmkend AAAAAAACHP}
00122     {\cf17 auto} cit_end = sv.cend();\par
{\bkmkstart AAAAAAACHS}{\bkmkend AAAAAAACHS}
00123     EXPECT_NE(cit_begin, cit_end);\par
{\bkmkstart AAAAAAACHW}{\bkmkend AAAAAAACHW}
00124     EXPECT_EQ(*cit_begin, {\cf23 'T'});\par
{\bkmkstart AAAAAAACIA}{\bkmkend AAAAAAACIA}
00125     \par
{\bkmkstart AAAAAAACIC}{\bkmkend AAAAAAACIC}
00126     {\cf20 // Test rbegin() and rend()}\par
{\bkmkstart AAAAAAACIF}{\bkmkend AAAAAAACIF}
00127     {\cf17 auto} rit_begin = sv.rbegin();\par
{\bkmkstart AAAAAAACIJ}{\bkmkend AAAAAAACIJ}
00128     {\cf17 auto} rit_end = sv.rend();\par
{\bkmkstart AAAAAAACIP}{\bkmkend AAAAAAACIP}
00129     EXPECT_NE(rit_begin, rit_end);\par
{\bkmkstart AAAAAAACIU}{\bkmkend AAAAAAACIU}
00130     EXPECT_EQ(*rit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAACIX}{\bkmkend AAAAAAACIX}
00131     EXPECT_EQ(*(rit_end - 1), {\cf23 'T'});\par
{\bkmkstart AAAAAAACJA}{\bkmkend AAAAAAACJA}
00132     \par
{\bkmkstart AAAAAAACJD}{\bkmkend AAAAAAACJD}
00133     {\cf20 // Test crbegin() and crend()}\par
{\bkmkstart AAAAAAACJF}{\bkmkend AAAAAAACJF}
00134     {\cf17 auto} crit_begin = sv.crbegin();\par
{\bkmkstart AAAAAAACJI}{\bkmkend AAAAAAACJI}
00135     {\cf17 auto} crit_end = sv.crend();\par
{\bkmkstart AAAAAAACJL}{\bkmkend AAAAAAACJL}
00136     EXPECT_NE(crit_begin, crit_end);\par
{\bkmkstart AAAAAAACJP}{\bkmkend AAAAAAACJP}
00137     EXPECT_EQ(*crit_begin, {\cf23 't'});\par
{\bkmkstart AAAAAAACJR}{\bkmkend AAAAAAACJR}
00138     \par
{\bkmkstart AAAAAAACJT}{\bkmkend AAAAAAACJT}
00139     {\cf20 // Test range-based for loop}\par
{\bkmkstart AAAAAAACJU}{\bkmkend AAAAAAACJU}
00140     std::string result;\par
{\bkmkstart AAAAAAACJX}{\bkmkend AAAAAAACJX}
00141     {\cf19 for} ({\cf18 char} c : sv) \{\par
{\bkmkstart AAAAAAACKB}{\bkmkend AAAAAAACKB}
00142         result += c;\par
{\bkmkstart AAAAAAACKC}{\bkmkend AAAAAAACKC}
00143     \}\par
{\bkmkstart AAAAAAACKD}{\bkmkend AAAAAAACKD}
00144     EXPECT_EQ(result, {\cf22 "Test"});\par
{\bkmkstart AAAAAAACKI}{\bkmkend AAAAAAACKI}
00145 \}\par
{\bkmkstart AAAAAAACKJ}{\bkmkend AAAAAAACKJ}
00146 \par
{\bkmkstart AAAAAAACKK}{\bkmkend AAAAAAACKK}
00151 TEST_F(StringViewCoverageTest, TestStringViewSubstring) \{\par
{\bkmkstart AAAAAAACKQ}{\bkmkend AAAAAAACKQ}
00152     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACKT}{\bkmkend AAAAAAACKT}
00153     \par
{\bkmkstart AAAAAAACKU}{\bkmkend AAAAAAACKU}
00154     {\cf20 // Test substr() with start position}\par
{\bkmkstart AAAAAAACKV}{\bkmkend AAAAAAACKV}
00155     std::string_view sub1 = sv.substr(7);\par
{\bkmkstart AAAAAAACKZ}{\bkmkend AAAAAAACKZ}
00156     EXPECT_EQ(sub1, {\cf22 "World!"});\par
{\bkmkstart AAAAAAACLC}{\bkmkend AAAAAAACLC}
00157     EXPECT_EQ(sub1.size(), 6);\par
{\bkmkstart AAAAAAACLG}{\bkmkend AAAAAAACLG}
00158     \par
{\bkmkstart AAAAAAACLH}{\bkmkend AAAAAAACLH}
00159     {\cf20 // Test substr() with start position and length}\par
{\bkmkstart AAAAAAACLJ}{\bkmkend AAAAAAACLJ}
00160     std::string_view sub2 = sv.substr(0, 5);\par
{\bkmkstart AAAAAAACLP}{\bkmkend AAAAAAACLP}
00161     EXPECT_EQ(sub2, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAACLT}{\bkmkend AAAAAAACLT}
00162     EXPECT_EQ(sub2.size(), 5);\par
{\bkmkstart AAAAAAACLV}{\bkmkend AAAAAAACLV}
00163     \par
{\bkmkstart AAAAAAACLX}{\bkmkend AAAAAAACLX}
00164     {\cf20 // Test substr() with middle range}\par
{\bkmkstart AAAAAAACLZ}{\bkmkend AAAAAAACLZ}
00165     std::string_view sub3 = sv.substr(7, 5);\par
{\bkmkstart AAAAAAACMB}{\bkmkend AAAAAAACMB}
00166     EXPECT_EQ(sub3, {\cf22 "World"});\par
{\bkmkstart AAAAAAACMD}{\bkmkend AAAAAAACMD}
00167     EXPECT_EQ(sub3.size(), 5);\par
{\bkmkstart AAAAAAACMG}{\bkmkend AAAAAAACMG}
00168     \par
{\bkmkstart AAAAAAACMH}{\bkmkend AAAAAAACMH}
00169     {\cf20 // Test substr() with single character}\par
{\bkmkstart AAAAAAACMI}{\bkmkend AAAAAAACMI}
00170     std::string_view sub4 = sv.substr(6, 1);\par
{\bkmkstart AAAAAAACMO}{\bkmkend AAAAAAACMO}
00171     EXPECT_EQ(sub4, {\cf22 ","});\par
{\bkmkstart AAAAAAACMR}{\bkmkend AAAAAAACMR}
00172     EXPECT_EQ(sub4.size(), 1);\par
{\bkmkstart AAAAAAACMS}{\bkmkend AAAAAAACMS}
00173     \par
{\bkmkstart AAAAAAACMT}{\bkmkend AAAAAAACMT}
00174     {\cf20 // Test substr() with empty result}\par
{\bkmkstart AAAAAAACMV}{\bkmkend AAAAAAACMV}
00175     std::string_view sub5 = sv.substr(13, 0);\par
{\bkmkstart AAAAAAACMY}{\bkmkend AAAAAAACMY}
00176     EXPECT_TRUE(sub5.empty());\par
{\bkmkstart AAAAAAACNB}{\bkmkend AAAAAAACNB}
00177 \}\par
{\bkmkstart AAAAAAACNC}{\bkmkend AAAAAAACNC}
00178 \par
{\bkmkstart AAAAAAACNE}{\bkmkend AAAAAAACNE}
00183 TEST_F(StringViewCoverageTest, TestStringViewComparison) \{\par
{\bkmkstart AAAAAAACNI}{\bkmkend AAAAAAACNI}
00184     std::string_view sv1({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACNN}{\bkmkend AAAAAAACNN}
00185     std::string_view sv2({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACNQ}{\bkmkend AAAAAAACNQ}
00186     std::string_view sv3({\cf22 "World"});\par
{\bkmkstart AAAAAAACNT}{\bkmkend AAAAAAACNT}
00187     std::string_view sv4({\cf22 "Hell"});\par
{\bkmkstart AAAAAAACNX}{\bkmkend AAAAAAACNX}
00188     \par
{\bkmkstart AAAAAAACNZ}{\bkmkend AAAAAAACNZ}
00189     {\cf20 // Test equality}\par
{\bkmkstart AAAAAAACOB}{\bkmkend AAAAAAACOB}
00190     EXPECT_EQ(sv1, sv2);\par
{\bkmkstart AAAAAAACOF}{\bkmkend AAAAAAACOF}
00191     EXPECT_NE(sv1, sv3);\par
{\bkmkstart AAAAAAACOJ}{\bkmkend AAAAAAACOJ}
00192     EXPECT_NE(sv1, sv4);\par
{\bkmkstart AAAAAAACOM}{\bkmkend AAAAAAACOM}
00193     \par
{\bkmkstart AAAAAAACON}{\bkmkend AAAAAAACON}
00194     {\cf20 // Test less than}\par
{\bkmkstart AAAAAAACOP}{\bkmkend AAAAAAACOP}
00195     EXPECT_LT(sv4, sv1);\par
{\bkmkstart AAAAAAACOR}{\bkmkend AAAAAAACOR}
00196     EXPECT_LT(sv1, sv3);\par
{\bkmkstart AAAAAAACOU}{\bkmkend AAAAAAACOU}
00197     \par
{\bkmkstart AAAAAAACOW}{\bkmkend AAAAAAACOW}
00198     {\cf20 // Test greater than}\par
{\bkmkstart AAAAAAACOY}{\bkmkend AAAAAAACOY}
00199     EXPECT_GT(sv1, sv4);\par
{\bkmkstart AAAAAAACPD}{\bkmkend AAAAAAACPD}
00200     EXPECT_GT(sv3, sv1);\par
{\bkmkstart AAAAAAACPF}{\bkmkend AAAAAAACPF}
00201     \par
{\bkmkstart AAAAAAACPG}{\bkmkend AAAAAAACPG}
00202     {\cf20 // Test less than or equal}\par
{\bkmkstart AAAAAAACPI}{\bkmkend AAAAAAACPI}
00203     EXPECT_LE(sv1, sv2);\par
{\bkmkstart AAAAAAACPK}{\bkmkend AAAAAAACPK}
00204     EXPECT_LE(sv4, sv1);\par
{\bkmkstart AAAAAAACPN}{\bkmkend AAAAAAACPN}
00205     EXPECT_LE(sv1, sv3);\par
{\bkmkstart AAAAAAACPU}{\bkmkend AAAAAAACPU}
00206     \par
{\bkmkstart AAAAAAACPW}{\bkmkend AAAAAAACPW}
00207     {\cf20 // Test greater than or equal}\par
{\bkmkstart AAAAAAACPZ}{\bkmkend AAAAAAACPZ}
00208     EXPECT_GE(sv1, sv2);\par
{\bkmkstart AAAAAAACQE}{\bkmkend AAAAAAACQE}
00209     EXPECT_GE(sv1, sv4);\par
{\bkmkstart AAAAAAACQK}{\bkmkend AAAAAAACQK}
00210     EXPECT_GE(sv3, sv1);\par
{\bkmkstart AAAAAAACQN}{\bkmkend AAAAAAACQN}
00211     \par
{\bkmkstart AAAAAAACQQ}{\bkmkend AAAAAAACQQ}
00212     {\cf20 // Test with different types}\par
{\bkmkstart AAAAAAACQS}{\bkmkend AAAAAAACQS}
00213     std::string str = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAACQV}{\bkmkend AAAAAAACQV}
00214     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAACQZ}{\bkmkend AAAAAAACQZ}
00215     \par
{\bkmkstart AAAAAAACRB}{\bkmkend AAAAAAACRB}
00216     EXPECT_EQ(sv1, str);\par
{\bkmkstart AAAAAAACRE}{\bkmkend AAAAAAACRE}
00217     EXPECT_EQ(sv1, cstr);\par
{\bkmkstart AAAAAAACRH}{\bkmkend AAAAAAACRH}
00218     EXPECT_EQ(str, sv1);\par
{\bkmkstart AAAAAAACRK}{\bkmkend AAAAAAACRK}
00219     EXPECT_EQ(cstr, sv1);\par
{\bkmkstart AAAAAAACRN}{\bkmkend AAAAAAACRN}
00220 \}\par
{\bkmkstart AAAAAAACRQ}{\bkmkend AAAAAAACRQ}
00221 \par
{\bkmkstart AAAAAAACRS}{\bkmkend AAAAAAACRS}
00226 TEST_F(StringViewCoverageTest, TestStringViewFind) \{\par
{\bkmkstart AAAAAAACRW}{\bkmkend AAAAAAACRW}
00227     std::string_view sv({\cf22 "Hello, World! Hello, Universe!"});\par
{\bkmkstart AAAAAAACSA}{\bkmkend AAAAAAACSA}
00228     \par
{\bkmkstart AAAAAAACSD}{\bkmkend AAAAAAACSD}
00229     {\cf20 // Test find() with character}\par
{\bkmkstart AAAAAAACSG}{\bkmkend AAAAAAACSG}
00230     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACSI}{\bkmkend AAAAAAACSI}
00231     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAACSK}{\bkmkend AAAAAAACSK}
00232     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAACSM}{\bkmkend AAAAAAACSM}
00233     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACSQ}{\bkmkend AAAAAAACSQ}
00234     \par
{\bkmkstart AAAAAAACSS}{\bkmkend AAAAAAACSS}
00235     {\cf20 // Test find() with string}\par
{\bkmkstart AAAAAAACSU}{\bkmkend AAAAAAACSU}
00236     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAACSW}{\bkmkend AAAAAAACSW}
00237     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAACTA}{\bkmkend AAAAAAACTA}
00238     EXPECT_EQ(sv.find({\cf22 "Universe"}), 20);\par
{\bkmkstart AAAAAAACTE}{\bkmkend AAAAAAACTE}
00239     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACTR}{\bkmkend AAAAAAACTR}
00240     \par
{\bkmkstart AAAAAAACTS}{\bkmkend AAAAAAACTS}
00241     {\cf20 // Test find() with string_view}\par
{\bkmkstart AAAAAAACTU}{\bkmkend AAAAAAACTU}
00242     std::string_view search({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACTY}{\bkmkend AAAAAAACTY}
00243     EXPECT_EQ(sv.find(search), 0);\par
{\bkmkstart AAAAAAACUB}{\bkmkend AAAAAAACUB}
00244     \par
{\bkmkstart AAAAAAACUD}{\bkmkend AAAAAAACUD}
00245     {\cf20 // Test find() with position}\par
{\bkmkstart AAAAAAACUE}{\bkmkend AAAAAAACUE}
00246     EXPECT_EQ(sv.find({\cf22 "Hello"}, 1), 14);\par
{\bkmkstart AAAAAAACUH}{\bkmkend AAAAAAACUH}
00247     EXPECT_EQ(sv.find({\cf22 "o"}, 5), 8);\par
{\bkmkstart AAAAAAACUK}{\bkmkend AAAAAAACUK}
00248     \par
{\bkmkstart AAAAAAACUM}{\bkmkend AAAAAAACUM}
00249     {\cf20 // Test rfind()}\par
{\bkmkstart AAAAAAACUN}{\bkmkend AAAAAAACUN}
00250     EXPECT_EQ(sv.rfind({\cf22 "Hello"}), 14);\par
{\bkmkstart AAAAAAACUQ}{\bkmkend AAAAAAACUQ}
00251     EXPECT_EQ(sv.rfind({\cf23 'o'}), 25);\par
{\bkmkstart AAAAAAACUV}{\bkmkend AAAAAAACUV}
00252     EXPECT_EQ(sv.rfind({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACUZ}{\bkmkend AAAAAAACUZ}
00253     \par
{\bkmkstart AAAAAAACVA}{\bkmkend AAAAAAACVA}
00254     {\cf20 // Test find_first_of()}\par
{\bkmkstart AAAAAAACVC}{\bkmkend AAAAAAACVC}
00255     EXPECT_EQ(sv.find_first_of({\cf22 "aeiou"}), 1); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAACVG}{\bkmkend AAAAAAACVG}
00256     EXPECT_EQ(sv.find_first_of({\cf22 "AEIOU"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACVI}{\bkmkend AAAAAAACVI}
00257     \par
{\bkmkstart AAAAAAACVJ}{\bkmkend AAAAAAACVJ}
00258     {\cf20 // Test find_last_of()}\par
{\bkmkstart AAAAAAACVK}{\bkmkend AAAAAAACVK}
00259     EXPECT_EQ(sv.find_last_of({\cf22 "aeiou"}), 25); {\cf20 // 'e'}\par
{\bkmkstart AAAAAAACVN}{\bkmkend AAAAAAACVN}
00260     EXPECT_EQ(sv.find_last_of({\cf22 "AEIOU"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACVS}{\bkmkend AAAAAAACVS}
00261     \par
{\bkmkstart AAAAAAACVU}{\bkmkend AAAAAAACVU}
00262     {\cf20 // Test find_first_not_of()}\par
{\bkmkstart AAAAAAACVW}{\bkmkend AAAAAAACVW}
00263     EXPECT_EQ(sv.find_first_not_of({\cf22 "H"}), 1);\par
{\bkmkstart AAAAAAACVY}{\bkmkend AAAAAAACVY}
00264     EXPECT_EQ(sv.find_first_not_of({\cf22 "Hello, World! "}), 14);\par
{\bkmkstart AAAAAAACWE}{\bkmkend AAAAAAACWE}
00265     \par
{\bkmkstart AAAAAAACWF}{\bkmkend AAAAAAACWF}
00266     {\cf20 // Test find_last_not_of()}\par
{\bkmkstart AAAAAAACWG}{\bkmkend AAAAAAACWG}
00267     EXPECT_EQ(sv.find_last_not_of({\cf22 "!"}), 30);\par
{\bkmkstart AAAAAAACWL}{\bkmkend AAAAAAACWL}
00268     EXPECT_EQ(sv.find_last_not_of({\cf22 "Hello, World! Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACWN}{\bkmkend AAAAAAACWN}
00269 \}\par
{\bkmkstart AAAAAAACWO}{\bkmkend AAAAAAACWO}
00270 \par
{\bkmkstart AAAAAAACWS}{\bkmkend AAAAAAACWS}
00275 TEST_F(StringViewCoverageTest, TestStringViewStartsWithEndsWith) \{\par
{\bkmkstart AAAAAAACXC}{\bkmkend AAAAAAACXC}
00276     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACXE}{\bkmkend AAAAAAACXE}
00277     \par
{\bkmkstart AAAAAAACXF}{\bkmkend AAAAAAACXF}
00278     {\cf20 // Test starts_with() functionality using find (C++20 features not available)}\par
{\bkmkstart AAAAAAACXH}{\bkmkend AAAAAAACXH}
00279     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACXI}{\bkmkend AAAAAAACXI}
00280     EXPECT_EQ(sv.find({\cf23 'h'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACXL}{\bkmkend AAAAAAACXL}
00281     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAACXN}{\bkmkend AAAAAAACXN}
00282 \par
{\bkmkstart AAAAAAACXO}{\bkmkend AAAAAAACXO}
00283     {\cf20 // Test starts_with() with string using find}\par
{\bkmkstart AAAAAAACXQ}{\bkmkend AAAAAAACXQ}
00284     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAACXR}{\bkmkend AAAAAAACXR}
00285     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAACXS}{\bkmkend AAAAAAACXS}
00286     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAACXT}{\bkmkend AAAAAAACXT}
00287     EXPECT_EQ(sv.find({\cf22 "Hello, Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACXV}{\bkmkend AAAAAAACXV}
00288 \par
{\bkmkstart AAAAAAACXW}{\bkmkend AAAAAAACXW}
00289     {\cf20 // Test starts_with() with string_view using find}\par
{\bkmkstart AAAAAAACXY}{\bkmkend AAAAAAACXY}
00290     std::string_view prefix({\cf22 "Hello"});\par
{\bkmkstart AAAAAAACYA}{\bkmkend AAAAAAACYA}
00291     EXPECT_EQ(sv.find(prefix), 0);\par
{\bkmkstart AAAAAAACYB}{\bkmkend AAAAAAACYB}
00292 \par
{\bkmkstart AAAAAAACYC}{\bkmkend AAAAAAACYC}
00293     {\cf20 // Test ends_with() functionality using find}\par
{\bkmkstart AAAAAAACYD}{\bkmkend AAAAAAACYD}
00294     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAACYF}{\bkmkend AAAAAAACYF}
00295     EXPECT_EQ(sv.find({\cf23 '?'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACYH}{\bkmkend AAAAAAACYH}
00296     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAACYJ}{\bkmkend AAAAAAACYJ}
00297 \par
{\bkmkstart AAAAAAACYL}{\bkmkend AAAAAAACYL}
00298     {\cf20 // Test ends_with() with string using find}\par
{\bkmkstart AAAAAAACYM}{\bkmkend AAAAAAACYM}
00299     EXPECT_EQ(sv.find({\cf22 "World!"}), 7);\par
{\bkmkstart AAAAAAACYO}{\bkmkend AAAAAAACYO}
00300     EXPECT_EQ(sv.find({\cf22 "Hello, World!"}), 0);\par
{\bkmkstart AAAAAAACYQ}{\bkmkend AAAAAAACYQ}
00301     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAACYS}{\bkmkend AAAAAAACYS}
00302     EXPECT_EQ(sv.find({\cf22 "Universe!"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACYV}{\bkmkend AAAAAAACYV}
00303 \par
{\bkmkstart AAAAAAACYW}{\bkmkend AAAAAAACYW}
00304     {\cf20 // Test ends_with() with string_view using find}\par
{\bkmkstart AAAAAAACYY}{\bkmkend AAAAAAACYY}
00305     std::string_view suffix({\cf22 "World!"});\par
{\bkmkstart AAAAAAACYZ}{\bkmkend AAAAAAACYZ}
00306     EXPECT_EQ(sv.find(suffix), 7);\par
{\bkmkstart AAAAAAACZC}{\bkmkend AAAAAAACZC}
00307 \}\par
{\bkmkstart AAAAAAACZD}{\bkmkend AAAAAAACZD}
00308 \par
{\bkmkstart AAAAAAACZE}{\bkmkend AAAAAAACZE}
00313 TEST_F(StringViewCoverageTest, TestStringViewContains) \{\par
{\bkmkstart AAAAAAACZH}{\bkmkend AAAAAAACZH}
00314     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACZI}{\bkmkend AAAAAAACZI}
00315     \par
{\bkmkstart AAAAAAACZJ}{\bkmkend AAAAAAACZJ}
00316     {\cf20 // Test contains() functionality using find (C++23 features not available)}\par
{\bkmkstart AAAAAAACZK}{\bkmkend AAAAAAACZK}
00317     EXPECT_NE(sv.find({\cf23 'H'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZL}{\bkmkend AAAAAAACZL}
00318     EXPECT_NE(sv.find({\cf23 'o'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZM}{\bkmkend AAAAAAACZM}
00319     EXPECT_NE(sv.find({\cf23 '!'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZN}{\bkmkend AAAAAAACZN}
00320     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZO}{\bkmkend AAAAAAACZO}
00321     \par
{\bkmkstart AAAAAAACZP}{\bkmkend AAAAAAACZP}
00322     {\cf20 // Test contains() with string using find}\par
{\bkmkstart AAAAAAACZQ}{\bkmkend AAAAAAACZQ}
00323     EXPECT_NE(sv.find({\cf22 "Hello"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZR}{\bkmkend AAAAAAACZR}
00324     EXPECT_NE(sv.find({\cf22 "World"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZU}{\bkmkend AAAAAAACZU}
00325     EXPECT_NE(sv.find({\cf22 "lo, Wo"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZW}{\bkmkend AAAAAAACZW}
00326     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZY}{\bkmkend AAAAAAACZY}
00327     EXPECT_EQ(sv.find({\cf22 "Universe"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACZZ}{\bkmkend AAAAAAACZZ}
00328     \par
{\bkmkstart AAAAAAADAA}{\bkmkend AAAAAAADAA}
00329     {\cf20 // Test contains() with string_view using find}\par
{\bkmkstart AAAAAAADAB}{\bkmkend AAAAAAADAB}
00330     std::string_view search({\cf22 "lo, Wo"});\par
{\bkmkstart AAAAAAADAD}{\bkmkend AAAAAAADAD}
00331     EXPECT_NE(sv.find(search), std::string_view::npos);\par
{\bkmkstart AAAAAAADAG}{\bkmkend AAAAAAADAG}
00332     \par
{\bkmkstart AAAAAAADAI}{\bkmkend AAAAAAADAI}
00333     std::string_view not_found({\cf22 "xyz"});\par
{\bkmkstart AAAAAAADAJ}{\bkmkend AAAAAAADAJ}
00334     EXPECT_EQ(sv.find(not_found), std::string_view::npos);\par
{\bkmkstart AAAAAAADAN}{\bkmkend AAAAAAADAN}
00335 \}\par
{\bkmkstart AAAAAAADAO}{\bkmkend AAAAAAADAO}
00336 \par
{\bkmkstart AAAAAAADAQ}{\bkmkend AAAAAAADAQ}
00341 TEST_F(StringViewCoverageTest, TestStringViewRemovePrefixSuffix) \{\par
{\bkmkstart AAAAAAADAT}{\bkmkend AAAAAAADAT}
00342     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADAV}{\bkmkend AAAAAAADAV}
00343     \par
{\bkmkstart AAAAAAADAW}{\bkmkend AAAAAAADAW}
00344     {\cf20 // Test remove_prefix()}\par
{\bkmkstart AAAAAAADAX}{\bkmkend AAAAAAADAX}
00345     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAADAY}{\bkmkend AAAAAAADAY}
00346     EXPECT_EQ(sv, {\cf22 "World!"});\par
{\bkmkstart AAAAAAADBB}{\bkmkend AAAAAAADBB}
00347     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAADBD}{\bkmkend AAAAAAADBD}
00348     \par
{\bkmkstart AAAAAAADBE}{\bkmkend AAAAAAADBE}
00349     {\cf20 // Reset and test remove_suffix()}\par
{\bkmkstart AAAAAAADBG}{\bkmkend AAAAAAADBG}
00350     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAADBH}{\bkmkend AAAAAAADBH}
00351     sv.remove_suffix(7);\par
{\bkmkstart AAAAAAADBK}{\bkmkend AAAAAAADBK}
00352     EXPECT_EQ(sv, {\cf22 "Hello,"});\par
{\bkmkstart AAAAAAADBM}{\bkmkend AAAAAAADBM}
00353     EXPECT_EQ(sv.size(), 6);\par
{\bkmkstart AAAAAAADBN}{\bkmkend AAAAAAADBN}
00354     \par
{\bkmkstart AAAAAAADBV}{\bkmkend AAAAAAADBV}
00355     {\cf20 // Test remove_prefix() and remove_suffix() together}\par
{\bkmkstart AAAAAAADBX}{\bkmkend AAAAAAADBX}
00356     sv = {\cf22 "Hello, World!"};\par
{\bkmkstart AAAAAAADCA}{\bkmkend AAAAAAADCA}
00357     sv.remove_prefix(7);\par
{\bkmkstart AAAAAAADCB}{\bkmkend AAAAAAADCB}
00358     sv.remove_suffix(1);\par
{\bkmkstart AAAAAAADCC}{\bkmkend AAAAAAADCC}
00359     EXPECT_EQ(sv, {\cf22 "World"});\par
{\bkmkstart AAAAAAADCF}{\bkmkend AAAAAAADCF}
00360     EXPECT_EQ(sv.size(), 5);\par
{\bkmkstart AAAAAAADCG}{\bkmkend AAAAAAADCG}
00361     \par
{\bkmkstart AAAAAAADCI}{\bkmkend AAAAAAADCI}
00362     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAADCJ}{\bkmkend AAAAAAADCJ}
00363     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADCM}{\bkmkend AAAAAAADCM}
00364     empty_sv.remove_prefix(0);\par
{\bkmkstart AAAAAAADCO}{\bkmkend AAAAAAADCO}
00365     empty_sv.remove_suffix(0);\par
{\bkmkstart AAAAAAADCQ}{\bkmkend AAAAAAADCQ}
00366     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADCS}{\bkmkend AAAAAAADCS}
00367 \}\par
{\bkmkstart AAAAAAADCV}{\bkmkend AAAAAAADCV}
00368 \par
{\bkmkstart AAAAAAADCX}{\bkmkend AAAAAAADCX}
00373 TEST_F(StringViewCoverageTest, TestStringViewCopy) \{\par
{\bkmkstart AAAAAAADDB}{\bkmkend AAAAAAADDB}
00374     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADDF}{\bkmkend AAAAAAADDF}
00375     {\cf18 char} buffer[20];\par
{\bkmkstart AAAAAAADDJ}{\bkmkend AAAAAAADDJ}
00376     \par
{\bkmkstart AAAAAAADDL}{\bkmkend AAAAAAADDL}
00377     {\cf20 // Test copy() with full length}\par
{\bkmkstart AAAAAAADDO}{\bkmkend AAAAAAADDO}
00378     {\cf18 size_t} copied = sv.copy(buffer, sv.size());\par
{\bkmkstart AAAAAAADDQ}{\bkmkend AAAAAAADDQ}
00379     EXPECT_EQ(copied, sv.size());\par
{\bkmkstart AAAAAAADDU}{\bkmkend AAAAAAADDU}
00380     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADDX}{\bkmkend AAAAAAADDX}
00381     EXPECT_STREQ(buffer, {\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADEA}{\bkmkend AAAAAAADEA}
00382     \par
{\bkmkstart AAAAAAADED}{\bkmkend AAAAAAADED}
00383     {\cf20 // Test copy() with partial length}\par
{\bkmkstart AAAAAAADEG}{\bkmkend AAAAAAADEG}
00384     copied = sv.copy(buffer, 5);\par
{\bkmkstart AAAAAAADEI}{\bkmkend AAAAAAADEI}
00385     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAADEM}{\bkmkend AAAAAAADEM}
00386     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADEO}{\bkmkend AAAAAAADEO}
00387     EXPECT_STREQ(buffer, {\cf22 "Hello"});\par
{\bkmkstart AAAAAAADER}{\bkmkend AAAAAAADER}
00388     \par
{\bkmkstart AAAAAAADES}{\bkmkend AAAAAAADES}
00389     {\cf20 // Test copy() with offset}\par
{\bkmkstart AAAAAAADEU}{\bkmkend AAAAAAADEU}
00390     copied = sv.copy(buffer, 5, 7);\par
{\bkmkstart AAAAAAADEW}{\bkmkend AAAAAAADEW}
00391     EXPECT_EQ(copied, 5);\par
{\bkmkstart AAAAAAADFA}{\bkmkend AAAAAAADFA}
00392     buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADFC}{\bkmkend AAAAAAADFC}
00393     EXPECT_STREQ(buffer, {\cf22 "World"});\par
{\bkmkstart AAAAAAADFF}{\bkmkend AAAAAAADFF}
00394     \par
{\bkmkstart AAAAAAADFG}{\bkmkend AAAAAAADFG}
00395     {\cf20 // Test copy() with small buffer}\par
{\bkmkstart AAAAAAADFI}{\bkmkend AAAAAAADFI}
00396     {\cf18 char} small_buffer[3];\par
{\bkmkstart AAAAAAADFJ}{\bkmkend AAAAAAADFJ}
00397     copied = sv.copy(small_buffer, 2);\par
{\bkmkstart AAAAAAADFM}{\bkmkend AAAAAAADFM}
00398     EXPECT_EQ(copied, 2);\par
{\bkmkstart AAAAAAADFP}{\bkmkend AAAAAAADFP}
00399     small_buffer[copied] = {\cf23 '\\0'};\par
{\bkmkstart AAAAAAADFV}{\bkmkend AAAAAAADFV}
00400     EXPECT_STREQ(small_buffer, {\cf22 "He"});\par
{\bkmkstart AAAAAAADFW}{\bkmkend AAAAAAADFW}
00401 \}\par
{\bkmkstart AAAAAAADFX}{\bkmkend AAAAAAADFX}
00402 \par
{\bkmkstart AAAAAAADFY}{\bkmkend AAAAAAADFY}
00407 TEST_F(StringViewCoverageTest, TestStringViewHash) \{\par
{\bkmkstart AAAAAAADFZ}{\bkmkend AAAAAAADFZ}
00408     std::string_view sv1({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADGA}{\bkmkend AAAAAAADGA}
00409     std::string_view sv2({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAADGB}{\bkmkend AAAAAAADGB}
00410     std::string_view sv3({\cf22 "Hello, Universe!"});\par
{\bkmkstart AAAAAAADGC}{\bkmkend AAAAAAADGC}
00411     \par
{\bkmkstart AAAAAAADGD}{\bkmkend AAAAAAADGD}
00412     {\cf20 // Test hash equality for same content}\par
{\bkmkstart AAAAAAADGE}{\bkmkend AAAAAAADGE}
00413     std::hash<std::string_view> hasher;\par
{\bkmkstart AAAAAAADGF}{\bkmkend AAAAAAADGF}
00414     EXPECT_EQ(hasher(sv1), hasher(sv2));\par
{\bkmkstart AAAAAAADGG}{\bkmkend AAAAAAADGG}
00415     \par
{\bkmkstart AAAAAAADGH}{\bkmkend AAAAAAADGH}
00416     {\cf20 // Test hash difference for different content}\par
{\bkmkstart AAAAAAADGI}{\bkmkend AAAAAAADGI}
00417     EXPECT_NE(hasher(sv1), hasher(sv3));\par
{\bkmkstart AAAAAAADGJ}{\bkmkend AAAAAAADGJ}
00418     \par
{\bkmkstart AAAAAAADGK}{\bkmkend AAAAAAADGK}
00419     {\cf20 // Test hash with empty string_view}\par
{\bkmkstart AAAAAAADGL}{\bkmkend AAAAAAADGL}
00420     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADGM}{\bkmkend AAAAAAADGM}
00421     EXPECT_EQ(hasher(empty_sv), hasher(empty_sv));\par
{\bkmkstart AAAAAAADGN}{\bkmkend AAAAAAADGN}
00422     \par
{\bkmkstart AAAAAAADGO}{\bkmkend AAAAAAADGO}
00423     {\cf20 // Test hash consistency}\par
{\bkmkstart AAAAAAADGP}{\bkmkend AAAAAAADGP}
00424     {\cf17 auto} hash1 = hasher(sv1);\par
{\bkmkstart AAAAAAADGQ}{\bkmkend AAAAAAADGQ}
00425     {\cf17 auto} hash2 = hasher(sv1);\par
{\bkmkstart AAAAAAADGR}{\bkmkend AAAAAAADGR}
00426     EXPECT_EQ(hash1, hash2);\par
{\bkmkstart AAAAAAADGS}{\bkmkend AAAAAAADGS}
00427 \}\par
{\bkmkstart AAAAAAADGT}{\bkmkend AAAAAAADGT}
00428 \par
{\bkmkstart AAAAAAADGU}{\bkmkend AAAAAAADGU}
00433 TEST_F(StringViewCoverageTest, TestStringViewEdgeCases) \{\par
{\bkmkstart AAAAAAADGV}{\bkmkend AAAAAAADGV}
00434     {\cf20 // Test empty string_view}\par
{\bkmkstart AAAAAAADGW}{\bkmkend AAAAAAADGW}
00435     std::string_view empty_sv;\par
{\bkmkstart AAAAAAADGX}{\bkmkend AAAAAAADGX}
00436     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAADGY}{\bkmkend AAAAAAADGY}
00437     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAADGZ}{\bkmkend AAAAAAADGZ}
00438     EXPECT_EQ(empty_sv.data(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAADHA}{\bkmkend AAAAAAADHA}
00439     \par
{\bkmkstart AAAAAAADHB}{\bkmkend AAAAAAADHB}
00440     {\cf20 // Test string_view with null character}\par
{\bkmkstart AAAAAAADHC}{\bkmkend AAAAAAADHC}
00441     std::string_view null_sv({\cf22 "Hello\\0World"}, 11);\par
{\bkmkstart AAAAAAADHD}{\bkmkend AAAAAAADHD}
00442     EXPECT_EQ(null_sv.size(), 11);\par
{\bkmkstart AAAAAAADHE}{\bkmkend AAAAAAADHE}
00443     EXPECT_EQ(null_sv[5], {\cf23 '\\0'});\par
{\bkmkstart AAAAAAADHF}{\bkmkend AAAAAAADHF}
00444     \par
{\bkmkstart AAAAAAADHG}{\bkmkend AAAAAAADHG}
00445     {\cf20 // Test string_view with single character}\par
{\bkmkstart AAAAAAADHH}{\bkmkend AAAAAAADHH}
00446     std::string_view single_sv({\cf22 "A"});\par
{\bkmkstart AAAAAAADHI}{\bkmkend AAAAAAADHI}
00447     EXPECT_EQ(single_sv.size(), 1);\par
{\bkmkstart AAAAAAADHJ}{\bkmkend AAAAAAADHJ}
00448     EXPECT_EQ(single_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAADHK}{\bkmkend AAAAAAADHK}
00449     EXPECT_EQ(single_sv.front(), {\cf23 'A'});\par
{\bkmkstart AAAAAAADHL}{\bkmkend AAAAAAADHL}
00450     EXPECT_EQ(single_sv.back(), {\cf23 'A'});\par
{\bkmkstart AAAAAAADHM}{\bkmkend AAAAAAADHM}
00451     \par
{\bkmkstart AAAAAAADHN}{\bkmkend AAAAAAADHN}
00452     {\cf20 // Test string_view with very long string}\par
{\bkmkstart AAAAAAADHO}{\bkmkend AAAAAAADHO}
00453     std::string long_str(1000, {\cf23 'A'});\par
{\bkmkstart AAAAAAADHP}{\bkmkend AAAAAAADHP}
00454     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAADHQ}{\bkmkend AAAAAAADHQ}
00455     EXPECT_EQ(long_sv.size(), 1000);\par
{\bkmkstart AAAAAAADHR}{\bkmkend AAAAAAADHR}
00456     EXPECT_EQ(long_sv[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAADHS}{\bkmkend AAAAAAADHS}
00457     EXPECT_EQ(long_sv[999], {\cf23 'A'});\par
{\bkmkstart AAAAAAADHT}{\bkmkend AAAAAAADHT}
00458     \par
{\bkmkstart AAAAAAADHU}{\bkmkend AAAAAAADHU}
00459     {\cf20 // Test string_view with special characters}\par
{\bkmkstart AAAAAAADHV}{\bkmkend AAAAAAADHV}
00460     std::string_view special_sv({\cf22 "!@#$%^&*()"});\par
{\bkmkstart AAAAAAADHW}{\bkmkend AAAAAAADHW}
00461     EXPECT_EQ(special_sv.size(), 10);\par
{\bkmkstart AAAAAAADHX}{\bkmkend AAAAAAADHX}
00462     EXPECT_EQ(special_sv[0], {\cf23 '!'});\par
{\bkmkstart AAAAAAADHY}{\bkmkend AAAAAAADHY}
00463     EXPECT_EQ(special_sv[9], {\cf23 ')'});\par
{\bkmkstart AAAAAAADHZ}{\bkmkend AAAAAAADHZ}
00464 \}\par
{\bkmkstart AAAAAAADIA}{\bkmkend AAAAAAADIA}
00465 \par
{\bkmkstart AAAAAAADIB}{\bkmkend AAAAAAADIB}
00470 TEST_F(StringViewCoverageTest, TestStringViewConstexpr) \{\par
{\bkmkstart AAAAAAADIC}{\bkmkend AAAAAAADIC}
00471     {\cf20 // Test constexpr construction}\par
{\bkmkstart AAAAAAADID}{\bkmkend AAAAAAADID}
00472     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr Test"});\par
{\bkmkstart AAAAAAADIF}{\bkmkend AAAAAAADIF}
00473     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAADIG}{\bkmkend AAAAAAADIG}
00474     {\cf17 static_assert}(sv[0] == {\cf23 'C'});\par
{\bkmkstart AAAAAAADIJ}{\bkmkend AAAAAAADIJ}
00475     {\cf17 static_assert}(sv[13] == {\cf23 't'});\par
{\bkmkstart AAAAAAADIK}{\bkmkend AAAAAAADIK}
00476     \par
{\bkmkstart AAAAAAADIL}{\bkmkend AAAAAAADIL}
00477     {\cf20 // Test constexpr operations}\par
{\bkmkstart AAAAAAADIM}{\bkmkend AAAAAAADIM}
00478     {\cf17 constexpr} std::string_view prefix = sv.substr(0, 9);\par
{\bkmkstart AAAAAAADIN}{\bkmkend AAAAAAADIN}
00479     {\cf17 static_assert}(prefix == {\cf22 "Constexpr"});\par
{\bkmkstart AAAAAAADIP}{\bkmkend AAAAAAADIP}
00480     \par
{\bkmkstart AAAAAAADIQ}{\bkmkend AAAAAAADIQ}
00481     {\cf17 constexpr} std::string_view suffix = sv.substr(10);\par
{\bkmkstart AAAAAAADIT}{\bkmkend AAAAAAADIT}
00482     {\cf17 static_assert}(suffix == {\cf22 "Test"});\par
{\bkmkstart AAAAAAADIU}{\bkmkend AAAAAAADIU}
00483     \par
{\bkmkstart AAAAAAADIV}{\bkmkend AAAAAAADIV}
00484     {\cf20 // Test constexpr find}\par
{\bkmkstart AAAAAAADIW}{\bkmkend AAAAAAADIW}
00485     {\cf17 constexpr} {\cf18 size_t} pos = sv.find({\cf22 "Test"});\par
{\bkmkstart AAAAAAADIX}{\bkmkend AAAAAAADIX}
00486     {\cf17 static_assert}(pos == 10);\par
{\bkmkstart AAAAAAADIZ}{\bkmkend AAAAAAADIZ}
00487     \par
{\bkmkstart AAAAAAADJA}{\bkmkend AAAAAAADJA}
00488     {\cf20 // Test constexpr functionality using find}\par
{\bkmkstart AAAAAAADJC}{\bkmkend AAAAAAADJC}
00489     {\cf17 static_assert}(sv.find({\cf22 "Constexpr"}) == 0);\par
{\bkmkstart AAAAAAADJE}{\bkmkend AAAAAAADJE}
00490     {\cf17 static_assert}(sv.find({\cf22 "Test"}) == 10);\par
{\bkmkstart AAAAAAADJG}{\bkmkend AAAAAAADJG}
00491 \}\par
{\bkmkstart AAAAAAADJH}{\bkmkend AAAAAAADJH}
00492 \par
{\bkmkstart AAAAAAADJJ}{\bkmkend AAAAAAADJJ}
00497 TEST_F(StringViewCoverageTest, TestStringViewPerformance) \{\par
{\bkmkstart AAAAAAADJK}{\bkmkend AAAAAAADJK}
00498     std::string large_string(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAADJM}{\bkmkend AAAAAAADJM}
00499     std::string_view sv(large_string);\par
{\bkmkstart AAAAAAADJR}{\bkmkend AAAAAAADJR}
00500     \par
{\bkmkstart AAAAAAADJT}{\bkmkend AAAAAAADJT}
00501     {\cf20 // Test that operations are O(1) or O(n) as expected}\par
{\bkmkstart AAAAAAADJU}{\bkmkend AAAAAAADJU}
00502     {\cf17 auto} start = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAADJX}{\bkmkend AAAAAAADJX}
00503     \par
{\bkmkstart AAAAAAADJY}{\bkmkend AAAAAAADJY}
00504     {\cf20 // Perform many operations}\par
{\bkmkstart AAAAAAADKA}{\bkmkend AAAAAAADKA}
00505     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAADKD}{\bkmkend AAAAAAADKD}
00506         {\cf17 auto} sub = sv.substr(1000, 1000);\par
{\bkmkstart AAAAAAADKE}{\bkmkend AAAAAAADKE}
00507         {\cf17 auto} pos = sv.find({\cf22 "AAA"});\par
{\bkmkstart AAAAAAADKF}{\bkmkend AAAAAAADKF}
00508         {\cf17 auto} contains = sv.find({\cf22 "BBB"}) != std::string_view::npos;\par
{\bkmkstart AAAAAAADKG}{\bkmkend AAAAAAADKG}
00509         (void)sub; (void)pos; (void)contains; {\cf20 // Suppress unused warnings}\par
{\bkmkstart AAAAAAADKH}{\bkmkend AAAAAAADKH}
00510     \}\par
{\bkmkstart AAAAAAADKI}{\bkmkend AAAAAAADKI}
00511     \par
{\bkmkstart AAAAAAADKJ}{\bkmkend AAAAAAADKJ}
00512     {\cf17 auto} end = std::chrono::high_resolution_clock::now();\par
{\bkmkstart AAAAAAADKL}{\bkmkend AAAAAAADKL}
00513     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);\par
{\bkmkstart AAAAAAADKP}{\bkmkend AAAAAAADKP}
00514     \par
{\bkmkstart AAAAAAADKQ}{\bkmkend AAAAAAADKQ}
00515     {\cf20 // Should complete quickly (this is more of a smoke test)}\par
{\bkmkstart AAAAAAADKR}{\bkmkend AAAAAAADKR}
00516     EXPECT_LT(duration.count(), 1000000); {\cf20 // Less than 1 second}\par
{\bkmkstart AAAAAAADKS}{\bkmkend AAAAAAADKS}
00517 \}\par
{\bkmkstart AAAAAAADKT}{\bkmkend AAAAAAADKT}
00518 \par
{\bkmkstart AAAAAAADKU}{\bkmkend AAAAAAADKU}
00519 \} {\cf20 // namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to cover internal utility functions in _msvc_string_view.hpp. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include <string_view>}\par
{\f2 #include <string>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <cstring>}\par
{\f2 #include <limits>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_string_view_internal_utilities.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__string__view__internal__utilities_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test file to cover internal utility functions in _msvc_string_view.hpp. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This test file specifically targets the uncovered internal utility functions:{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
length() function (lines 133-142)\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
find() function (lines 144-154)\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
assign() function (lines 156-161) \par}
\par
}{
Definition in file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOD" }{}}{\fldrslt {\cs37\ul\cf2 test_string_view_internal_utilities.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_string_view_internal_utilities.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_string_view_internal_utilities.cpp}
{\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABOE" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABPC}{\bkmkend AAAAAAABPC}
00001 \par
{\bkmkstart AAAAAAABPH}{\bkmkend AAAAAAABPH}
00010 \par
{\bkmkstart AAAAAAABPI}{\bkmkend AAAAAAABPI}
00011 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABPZ}{\bkmkend AAAAAAABPZ}
00012 {\cf21 #include <string_view>}\par
{\bkmkstart AAAAAAABQK}{\bkmkend AAAAAAABQK}
00013 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAABQV}{\bkmkend AAAAAAABQV}
00014 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAABRE}{\bkmkend AAAAAAABRE}
00015 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAABRR}{\bkmkend AAAAAAABRR}
00016 {\cf21 #include <algorithm>}\par
{\bkmkstart AAAAAAABSH}{\bkmkend AAAAAAABSH}
00017 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAABSV}{\bkmkend AAAAAAABSV}
00018 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAABTE}{\bkmkend AAAAAAABTE}
00019 \par
{\bkmkstart AAAAAAABTF}{\bkmkend AAAAAAABTF}
00020 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAABTI}{\bkmkend AAAAAAABTI}
00021 \par
{\bkmkstart AAAAAAABTK}{\bkmkend AAAAAAABTK}
00026 {\cf17 class }StringViewInternalUtilitiesTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAABTP}{\bkmkend AAAAAAABTP}
00027 {\cf17 protected}:\par
{\bkmkstart AAAAAAABTR}{\bkmkend AAAAAAABTR}
00028     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAABTU}{\bkmkend AAAAAAABTU}
00029         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAABTV}{\bkmkend AAAAAAABTV}
00030     \}\par
{\bkmkstart AAAAAAABTX}{\bkmkend AAAAAAABTX}
00031     \par
{\bkmkstart AAAAAAABTZ}{\bkmkend AAAAAAABTZ}
00032     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAABUB}{\bkmkend AAAAAAABUB}
00033         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAABUC}{\bkmkend AAAAAAABUC}
00034     \}\par
{\bkmkstart AAAAAAABUD}{\bkmkend AAAAAAABUD}
00035 \};\par
{\bkmkstart AAAAAAABUF}{\bkmkend AAAAAAABUF}
00036 \par
{\bkmkstart AAAAAAABUG}{\bkmkend AAAAAAABUG}
00041 TEST_F(StringViewInternalUtilitiesTest, TestStringViewLengthFunction) \{\par
{\bkmkstart AAAAAAABUI}{\bkmkend AAAAAAABUI}
00042     {\cf20 // Test with various C-strings to trigger internal length() function}\par
{\bkmkstart AAAAAAABUL}{\bkmkend AAAAAAABUL}
00043     {\cf17 const} {\cf18 char}* cstr1 = {\cf22 "Hello"};\par
{\bkmkstart AAAAAAABUP}{\bkmkend AAAAAAABUP}
00044     std::string_view sv1(cstr1);\par
{\bkmkstart AAAAAAABUQ}{\bkmkend AAAAAAABUQ}
00045     EXPECT_EQ(sv1.size(), 5);\par
{\bkmkstart AAAAAAABUS}{\bkmkend AAAAAAABUS}
00046     EXPECT_EQ(sv1.length(), 5);\par
{\bkmkstart AAAAAAABUV}{\bkmkend AAAAAAABUV}
00047     \par
{\bkmkstart AAAAAAABUX}{\bkmkend AAAAAAABUX}
00048     {\cf20 // Test with empty string}\par
{\bkmkstart AAAAAAABUY}{\bkmkend AAAAAAABUY}
00049     {\cf17 const} {\cf18 char}* cstr2 = {\cf22 ""};\par
{\bkmkstart AAAAAAABVA}{\bkmkend AAAAAAABVA}
00050     std::string_view sv2(cstr2);\par
{\bkmkstart AAAAAAABVC}{\bkmkend AAAAAAABVC}
00051     EXPECT_EQ(sv2.size(), 0);\par
{\bkmkstart AAAAAAABVF}{\bkmkend AAAAAAABVF}
00052     EXPECT_EQ(sv2.length(), 0);\par
{\bkmkstart AAAAAAABVG}{\bkmkend AAAAAAABVG}
00053     \par
{\bkmkstart AAAAAAABVH}{\bkmkend AAAAAAABVH}
00054     {\cf20 // Test with single character}\par
{\bkmkstart AAAAAAABVJ}{\bkmkend AAAAAAABVJ}
00055     {\cf17 const} {\cf18 char}* cstr3 = {\cf22 "A"};\par
{\bkmkstart AAAAAAABVK}{\bkmkend AAAAAAABVK}
00056     std::string_view sv3(cstr3);\par
{\bkmkstart AAAAAAABVO}{\bkmkend AAAAAAABVO}
00057     EXPECT_EQ(sv3.size(), 1);\par
{\bkmkstart AAAAAAABVQ}{\bkmkend AAAAAAABVQ}
00058     EXPECT_EQ(sv3.length(), 1);\par
{\bkmkstart AAAAAAABVR}{\bkmkend AAAAAAABVR}
00059     \par
{\bkmkstart AAAAAAABVS}{\bkmkend AAAAAAABVS}
00060     {\cf20 // Test with long string}\par
{\bkmkstart AAAAAAABVU}{\bkmkend AAAAAAABVU}
00061     {\cf17 const} {\cf18 char}* cstr4 = {\cf22 "This is a very long string that should trigger the internal length function"};\par
{\bkmkstart AAAAAAABVX}{\bkmkend AAAAAAABVX}
00062     std::string_view sv4(cstr4);\par
{\bkmkstart AAAAAAABWC}{\bkmkend AAAAAAABWC}
00063     EXPECT_EQ(sv4.size(), 70);\par
{\bkmkstart AAAAAAABWE}{\bkmkend AAAAAAABWE}
00064     EXPECT_EQ(sv4.length(), 70);\par
{\bkmkstart AAAAAAABWG}{\bkmkend AAAAAAABWG}
00065     \par
{\bkmkstart AAAAAAABWH}{\bkmkend AAAAAAABWH}
00066     {\cf20 // Test with string containing null characters (but null-terminated)}\par
{\bkmkstart AAAAAAABWJ}{\bkmkend AAAAAAABWJ}
00067     {\cf17 const} {\cf18 char}* cstr5 = {\cf22 "Hello\\0World"};\par
{\bkmkstart AAAAAAABWL}{\bkmkend AAAAAAABWL}
00068     std::string_view sv5(cstr5, 11); {\cf20 // Explicit length to include null}\par
{\bkmkstart AAAAAAABWM}{\bkmkend AAAAAAABWM}
00069     EXPECT_EQ(sv5.size(), 11);\par
{\bkmkstart AAAAAAABWU}{\bkmkend AAAAAAABWU}
00070     EXPECT_EQ(sv5.length(), 11);\par
{\bkmkstart AAAAAAABWW}{\bkmkend AAAAAAABWW}
00071     \par
{\bkmkstart AAAAAAABWX}{\bkmkend AAAAAAABWX}
00072     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAABWZ}{\bkmkend AAAAAAABWZ}
00073     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Hello"};\par
{\bkmkstart AAAAAAABXD}{\bkmkend AAAAAAABXD}
00074     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAABXK}{\bkmkend AAAAAAABXK}
00075     EXPECT_EQ(wsv.size(), 5);\par
{\bkmkstart AAAAAAABXN}{\bkmkend AAAAAAABXN}
00076     EXPECT_EQ(wsv.length(), 5);\par
{\bkmkstart AAAAAAABXP}{\bkmkend AAAAAAABXP}
00077     \par
{\bkmkstart AAAAAAABXS}{\bkmkend AAAAAAABXS}
00078     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAABXT}{\bkmkend AAAAAAABXT}
00079     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "Hello"};\par
{\bkmkstart AAAAAAABXW}{\bkmkend AAAAAAABXW}
00080     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAABYA}{\bkmkend AAAAAAABYA}
00081     EXPECT_EQ(sv16.size(), 5);\par
{\bkmkstart AAAAAAABYB}{\bkmkend AAAAAAABYB}
00082     EXPECT_EQ(sv16.length(), 5);\par
{\bkmkstart AAAAAAABYF}{\bkmkend AAAAAAABYF}
00083     \par
{\bkmkstart AAAAAAABYG}{\bkmkend AAAAAAABYG}
00084     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAABYJ}{\bkmkend AAAAAAABYJ}
00085     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "Hello"};\par
{\bkmkstart AAAAAAABYM}{\bkmkend AAAAAAABYM}
00086     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAABYP}{\bkmkend AAAAAAABYP}
00087     EXPECT_EQ(sv32.size(), 5);\par
{\bkmkstart AAAAAAABYR}{\bkmkend AAAAAAABYR}
00088     EXPECT_EQ(sv32.length(), 5);\par
{\bkmkstart AAAAAAABYU}{\bkmkend AAAAAAABYU}
00089 \}\par
{\bkmkstart AAAAAAABYV}{\bkmkend AAAAAAABYV}
00090 \par
{\bkmkstart AAAAAAABYX}{\bkmkend AAAAAAABYX}
00095 TEST_F(StringViewInternalUtilitiesTest, TestStringViewFindFunction) \{\par
{\bkmkstart AAAAAAABZA}{\bkmkend AAAAAAABZA}
00096     std::string_view sv({\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAABZD}{\bkmkend AAAAAAABZD}
00097     \par
{\bkmkstart AAAAAAABZF}{\bkmkend AAAAAAABZF}
00098     {\cf20 // Test find with character - this should trigger internal find() function}\par
{\bkmkstart AAAAAAABZG}{\bkmkend AAAAAAABZG}
00099     EXPECT_EQ(sv.find({\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAABZJ}{\bkmkend AAAAAAABZJ}
00100     EXPECT_EQ(sv.find({\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAABZL}{\bkmkend AAAAAAABZL}
00101     EXPECT_EQ(sv.find({\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAABZM}{\bkmkend AAAAAAABZM}
00102     EXPECT_EQ(sv.find({\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAABZO}{\bkmkend AAAAAAABZO}
00103     EXPECT_EQ(sv.find({\cf23 ','}), 5);\par
{\bkmkstart AAAAAAABZQ}{\bkmkend AAAAAAABZQ}
00104     EXPECT_EQ(sv.find({\cf23 ' '}), 6);\par
{\bkmkstart AAAAAAABZU}{\bkmkend AAAAAAABZU}
00105     EXPECT_EQ(sv.find({\cf23 'W'}), 7);\par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00106     EXPECT_EQ(sv.find({\cf23 'r'}), 8);\par
{\bkmkstart AAAAAAABZY}{\bkmkend AAAAAAABZY}
00107     EXPECT_EQ(sv.find({\cf23 'd'}), 10);\par
{\bkmkstart AAAAAAACAC}{\bkmkend AAAAAAACAC}
00108     EXPECT_EQ(sv.find({\cf23 '!'}), 12);\par
{\bkmkstart AAAAAAACAF}{\bkmkend AAAAAAACAF}
00109     EXPECT_EQ(sv.find({\cf23 'z'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACAK}{\bkmkend AAAAAAACAK}
00110     \par
{\bkmkstart AAAAAAACAM}{\bkmkend AAAAAAACAM}
00111     {\cf20 // Test find with string - this should also trigger internal find() function}\par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00112     EXPECT_EQ(sv.find({\cf22 "Hello"}), 0);\par
{\bkmkstart AAAAAAACAV}{\bkmkend AAAAAAACAV}
00113     EXPECT_EQ(sv.find({\cf22 "ello"}), 1);\par
{\bkmkstart AAAAAAACAY}{\bkmkend AAAAAAACAY}
00114     EXPECT_EQ(sv.find({\cf22 "llo"}), 2);\par
{\bkmkstart AAAAAAACBB}{\bkmkend AAAAAAACBB}
00115     EXPECT_EQ(sv.find({\cf22 "lo"}), 3);\par
{\bkmkstart AAAAAAACBD}{\bkmkend AAAAAAACBD}
00116     EXPECT_EQ(sv.find({\cf22 "o"}), 4);\par
{\bkmkstart AAAAAAACBF}{\bkmkend AAAAAAACBF}
00117     EXPECT_EQ(sv.find({\cf22 ", "}), 5);\par
{\bkmkstart AAAAAAACBI}{\bkmkend AAAAAAACBI}
00118     EXPECT_EQ(sv.find({\cf22 "World"}), 7);\par
{\bkmkstart AAAAAAACBL}{\bkmkend AAAAAAACBL}
00119     EXPECT_EQ(sv.find({\cf22 "orld"}), 8);\par
{\bkmkstart AAAAAAACBO}{\bkmkend AAAAAAACBO}
00120     EXPECT_EQ(sv.find({\cf22 "rld"}), 9);\par
{\bkmkstart AAAAAAACBR}{\bkmkend AAAAAAACBR}
00121     EXPECT_EQ(sv.find({\cf22 "ld"}), 10);\par
{\bkmkstart AAAAAAACBU}{\bkmkend AAAAAAACBU}
00122     EXPECT_EQ(sv.find({\cf22 "d"}), 10);\par
{\bkmkstart AAAAAAACBY}{\bkmkend AAAAAAACBY}
00123     EXPECT_EQ(sv.find({\cf22 "!"}), 12);\par
{\bkmkstart AAAAAAACCB}{\bkmkend AAAAAAACCB}
00124     EXPECT_EQ(sv.find({\cf22 "xyz"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACCE}{\bkmkend AAAAAAACCE}
00125     \par
{\bkmkstart AAAAAAACCF}{\bkmkend AAAAAAACCF}
00126     {\cf20 // Test find with position parameter}\par
{\bkmkstart AAAAAAACCG}{\bkmkend AAAAAAACCG}
00127     EXPECT_EQ(sv.find({\cf23 'l'}, 3), 3);\par
{\bkmkstart AAAAAAACCJ}{\bkmkend AAAAAAACCJ}
00128     EXPECT_EQ(sv.find({\cf23 'l'}, 4), 9);\par
{\bkmkstart AAAAAAACCL}{\bkmkend AAAAAAACCL}
00129     EXPECT_EQ(sv.find({\cf23 'o'}, 5), 8);\par
{\bkmkstart AAAAAAACCQ}{\bkmkend AAAAAAACCQ}
00130     EXPECT_EQ(sv.find({\cf22 "lo"}, 3), 3);\par
{\bkmkstart AAAAAAACCU}{\bkmkend AAAAAAACCU}
00131     EXPECT_EQ(sv.find({\cf22 "lo"}, 4), std::string_view::npos);\par
{\bkmkstart AAAAAAACCX}{\bkmkend AAAAAAACCX}
00132     \par
{\bkmkstart AAAAAAACCY}{\bkmkend AAAAAAACCY}
00133     {\cf20 // Test find with empty string}\par
{\bkmkstart AAAAAAACDA}{\bkmkend AAAAAAACDA}
00134     EXPECT_EQ(sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACDD}{\bkmkend AAAAAAACDD}
00135     EXPECT_EQ(sv.find({\cf22 ""}, 5), 5);\par
{\bkmkstart AAAAAAACDF}{\bkmkend AAAAAAACDF}
00136     \par
{\bkmkstart AAAAAAACDJ}{\bkmkend AAAAAAACDJ}
00137     {\cf20 // Test find with single character at various positions}\par
{\bkmkstart AAAAAAACDL}{\bkmkend AAAAAAACDL}
00138     std::string_view repeated({\cf22 "aaa"});\par
{\bkmkstart AAAAAAACDP}{\bkmkend AAAAAAACDP}
00139     EXPECT_EQ(repeated.find({\cf23 'a'}), 0);\par
{\bkmkstart AAAAAAACDR}{\bkmkend AAAAAAACDR}
00140     EXPECT_EQ(repeated.find({\cf23 'a'}, 1), 1);\par
{\bkmkstart AAAAAAACDT}{\bkmkend AAAAAAACDT}
00141     EXPECT_EQ(repeated.find({\cf23 'a'}, 2), 2);\par
{\bkmkstart AAAAAAACDV}{\bkmkend AAAAAAACDV}
00142     EXPECT_EQ(repeated.find({\cf23 'a'}, 3), std::string_view::npos);\par
{\bkmkstart AAAAAAACEA}{\bkmkend AAAAAAACEA}
00143     \par
{\bkmkstart AAAAAAACEC}{\bkmkend AAAAAAACEC}
00144     {\cf20 // Test find with wide characters}\par
{\bkmkstart AAAAAAACEE}{\bkmkend AAAAAAACEE}
00145     std::wstring_view wsv(L{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACEI}{\bkmkend AAAAAAACEI}
00146     EXPECT_EQ(wsv.find(L{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACEM}{\bkmkend AAAAAAACEM}
00147     EXPECT_EQ(wsv.find(L{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAACEQ}{\bkmkend AAAAAAACEQ}
00148     EXPECT_EQ(wsv.find(L{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAACET}{\bkmkend AAAAAAACET}
00149     EXPECT_EQ(wsv.find(L{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAACEV}{\bkmkend AAAAAAACEV}
00150     EXPECT_EQ(wsv.find(L{\cf23 'z'}), std::wstring_view::npos);\par
{\bkmkstart AAAAAAACEX}{\bkmkend AAAAAAACEX}
00151     \par
{\bkmkstart AAAAAAACEY}{\bkmkend AAAAAAACEY}
00152     {\cf20 // Test find with char16_t}\par
{\bkmkstart AAAAAAACFD}{\bkmkend AAAAAAACFD}
00153     std::u16string_view sv16(u{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACFH}{\bkmkend AAAAAAACFH}
00154     EXPECT_EQ(sv16.find(u{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACFN}{\bkmkend AAAAAAACFN}
00155     EXPECT_EQ(sv16.find(u{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAACFX}{\bkmkend AAAAAAACFX}
00156     EXPECT_EQ(sv16.find(u{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAACFZ}{\bkmkend AAAAAAACFZ}
00157     EXPECT_EQ(sv16.find(u{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAACGF}{\bkmkend AAAAAAACGF}
00158     EXPECT_EQ(sv16.find(u{\cf23 'z'}), std::u16string_view::npos);\par
{\bkmkstart AAAAAAACGJ}{\bkmkend AAAAAAACGJ}
00159     \par
{\bkmkstart AAAAAAACGL}{\bkmkend AAAAAAACGL}
00160     {\cf20 // Test find with char32_t}\par
{\bkmkstart AAAAAAACGN}{\bkmkend AAAAAAACGN}
00161     std::u32string_view sv32(U{\cf22 "Hello, World!"});\par
{\bkmkstart AAAAAAACGR}{\bkmkend AAAAAAACGR}
00162     EXPECT_EQ(sv32.find(U{\cf23 'H'}), 0);\par
{\bkmkstart AAAAAAACGU}{\bkmkend AAAAAAACGU}
00163     EXPECT_EQ(sv32.find(U{\cf23 'e'}), 1);\par
{\bkmkstart AAAAAAACGW}{\bkmkend AAAAAAACGW}
00164     EXPECT_EQ(sv32.find(U{\cf23 'l'}), 2);\par
{\bkmkstart AAAAAAACGY}{\bkmkend AAAAAAACGY}
00165     EXPECT_EQ(sv32.find(U{\cf23 'o'}), 4);\par
{\bkmkstart AAAAAAACHB}{\bkmkend AAAAAAACHB}
00166     EXPECT_EQ(sv32.find(U{\cf23 'z'}), std::u32string_view::npos);\par
{\bkmkstart AAAAAAACHF}{\bkmkend AAAAAAACHF}
00167 \}\par
{\bkmkstart AAAAAAACHH}{\bkmkend AAAAAAACHH}
00168 \par
{\bkmkstart AAAAAAACHM}{\bkmkend AAAAAAACHM}
00173 TEST_F(StringViewInternalUtilitiesTest, TestStringViewAssignFunction) \{\par
{\bkmkstart AAAAAAACHR}{\bkmkend AAAAAAACHR}
00174     {\cf20 // Test with string construction that might trigger internal assign() function}\par
{\bkmkstart AAAAAAACHU}{\bkmkend AAAAAAACHU}
00175     std::string str1(10, {\cf23 'A'});\par
{\bkmkstart AAAAAAACHX}{\bkmkend AAAAAAACHX}
00176     std::string_view sv1(str1);\par
{\bkmkstart AAAAAAACIB}{\bkmkend AAAAAAACIB}
00177     EXPECT_EQ(sv1.size(), 10);\par
{\bkmkstart AAAAAAACIE}{\bkmkend AAAAAAACIE}
00178     EXPECT_EQ(sv1[0], {\cf23 'A'});\par
{\bkmkstart AAAAAAACIH}{\bkmkend AAAAAAACIH}
00179     EXPECT_EQ(sv1[9], {\cf23 'A'});\par
{\bkmkstart AAAAAAACIL}{\bkmkend AAAAAAACIL}
00180     \par
{\bkmkstart AAAAAAACIM}{\bkmkend AAAAAAACIM}
00181     {\cf20 // Test with string fill operations}\par
{\bkmkstart AAAAAAACIN}{\bkmkend AAAAAAACIN}
00182     std::string str2;\par
{\bkmkstart AAAAAAACIQ}{\bkmkend AAAAAAACIQ}
00183     str2.resize(5, {\cf23 'B'});\par
{\bkmkstart AAAAAAACIR}{\bkmkend AAAAAAACIR}
00184     std::string_view sv2(str2);\par
{\bkmkstart AAAAAAACIV}{\bkmkend AAAAAAACIV}
00185     EXPECT_EQ(sv2.size(), 5);\par
{\bkmkstart AAAAAAACIY}{\bkmkend AAAAAAACIY}
00186     EXPECT_EQ(sv2[0], {\cf23 'B'});\par
{\bkmkstart AAAAAAACJB}{\bkmkend AAAAAAACJB}
00187     EXPECT_EQ(sv2[4], {\cf23 'B'});\par
{\bkmkstart AAAAAAACJE}{\bkmkend AAAAAAACJE}
00188     \par
{\bkmkstart AAAAAAACJK}{\bkmkend AAAAAAACJK}
00189     {\cf20 // Test with vector operations that might trigger assign()}\par
{\bkmkstart AAAAAAACJM}{\bkmkend AAAAAAACJM}
00190     std::vector<char> vec(8, {\cf23 'C'});\par
{\bkmkstart AAAAAAACJQ}{\bkmkend AAAAAAACJQ}
00191     std::string_view sv3(vec.data(), vec.size());\par
{\bkmkstart AAAAAAACJZ}{\bkmkend AAAAAAACJZ}
00192     EXPECT_EQ(sv3.size(), 8);\par
{\bkmkstart AAAAAAACKG}{\bkmkend AAAAAAACKG}
00193     EXPECT_EQ(sv3[0], {\cf23 'C'});\par
{\bkmkstart AAAAAAACKM}{\bkmkend AAAAAAACKM}
00194     EXPECT_EQ(sv3[7], {\cf23 'C'});\par
{\bkmkstart AAAAAAACKN}{\bkmkend AAAAAAACKN}
00195     \par
{\bkmkstart AAAAAAACKP}{\bkmkend AAAAAAACKP}
00196     {\cf20 // Test with array operations}\par
{\bkmkstart AAAAAAACKR}{\bkmkend AAAAAAACKR}
00197     {\cf18 char} arr[6];\par
{\bkmkstart AAAAAAACKS}{\bkmkend AAAAAAACKS}
00198     std::fill(arr, arr + 6, {\cf23 'D'});\par
{\bkmkstart AAAAAAACKW}{\bkmkend AAAAAAACKW}
00199     std::string_view sv4(arr, 6);\par
{\bkmkstart AAAAAAACLA}{\bkmkend AAAAAAACLA}
00200     EXPECT_EQ(sv4.size(), 6);\par
{\bkmkstart AAAAAAACLD}{\bkmkend AAAAAAACLD}
00201     EXPECT_EQ(sv4[0], {\cf23 'D'});\par
{\bkmkstart AAAAAAACLF}{\bkmkend AAAAAAACLF}
00202     EXPECT_EQ(sv4[5], {\cf23 'D'});\par
{\bkmkstart AAAAAAACLI}{\bkmkend AAAAAAACLI}
00203     \par
{\bkmkstart AAAAAAACLL}{\bkmkend AAAAAAACLL}
00204     {\cf20 // Test with memset operations}\par
{\bkmkstart AAAAAAACLM}{\bkmkend AAAAAAACLM}
00205     {\cf18 char} buffer[12];\par
{\bkmkstart AAAAAAACLO}{\bkmkend AAAAAAACLO}
00206     std::memset(buffer, {\cf23 'E'}, 12);\par
{\bkmkstart AAAAAAACLS}{\bkmkend AAAAAAACLS}
00207     std::string_view sv5(buffer, 12);\par
{\bkmkstart AAAAAAACLW}{\bkmkend AAAAAAACLW}
00208     EXPECT_EQ(sv5.size(), 12);\par
{\bkmkstart AAAAAAACMC}{\bkmkend AAAAAAACMC}
00209     EXPECT_EQ(sv5[0], {\cf23 'E'});\par
{\bkmkstart AAAAAAACMK}{\bkmkend AAAAAAACMK}
00210     EXPECT_EQ(sv5[11], {\cf23 'E'});\par
{\bkmkstart AAAAAAACMN}{\bkmkend AAAAAAACMN}
00211     \par
{\bkmkstart AAAAAAACMP}{\bkmkend AAAAAAACMP}
00212     {\cf20 // Test with wide characters}\par
{\bkmkstart AAAAAAACMQ}{\bkmkend AAAAAAACMQ}
00213     std::wstring wstr(7, L{\cf23 'F'});\par
{\bkmkstart AAAAAAACMU}{\bkmkend AAAAAAACMU}
00214     std::wstring_view wsv(wstr);\par
{\bkmkstart AAAAAAACMX}{\bkmkend AAAAAAACMX}
00215     EXPECT_EQ(wsv.size(), 7);\par
{\bkmkstart AAAAAAACMZ}{\bkmkend AAAAAAACMZ}
00216     EXPECT_EQ(wsv[0], L{\cf23 'F'});\par
{\bkmkstart AAAAAAACNH}{\bkmkend AAAAAAACNH}
00217     EXPECT_EQ(wsv[6], L{\cf23 'F'});\par
{\bkmkstart AAAAAAACNK}{\bkmkend AAAAAAACNK}
00218     \par
{\bkmkstart AAAAAAACNM}{\bkmkend AAAAAAACNM}
00219     {\cf20 // Test with char16_t}\par
{\bkmkstart AAAAAAACNO}{\bkmkend AAAAAAACNO}
00220     std::u16string u16str(9, u{\cf23 'G'});\par
{\bkmkstart AAAAAAACNR}{\bkmkend AAAAAAACNR}
00221     std::u16string_view sv16(u16str);\par
{\bkmkstart AAAAAAACNU}{\bkmkend AAAAAAACNU}
00222     EXPECT_EQ(sv16.size(), 9);\par
{\bkmkstart AAAAAAACNW}{\bkmkend AAAAAAACNW}
00223     EXPECT_EQ(sv16[0], u{\cf23 'G'});\par
{\bkmkstart AAAAAAACOA}{\bkmkend AAAAAAACOA}
00224     EXPECT_EQ(sv16[8], u{\cf23 'G'});\par
{\bkmkstart AAAAAAACOD}{\bkmkend AAAAAAACOD}
00225     \par
{\bkmkstart AAAAAAACOG}{\bkmkend AAAAAAACOG}
00226     {\cf20 // Test with char32_t}\par
{\bkmkstart AAAAAAACOI}{\bkmkend AAAAAAACOI}
00227     std::u32string u32str(11, U{\cf23 'H'});\par
{\bkmkstart AAAAAAACOK}{\bkmkend AAAAAAACOK}
00228     std::u32string_view sv32(u32str);\par
{\bkmkstart AAAAAAACOO}{\bkmkend AAAAAAACOO}
00229     EXPECT_EQ(sv32.size(), 11);\par
{\bkmkstart AAAAAAACOS}{\bkmkend AAAAAAACOS}
00230     EXPECT_EQ(sv32[0], U{\cf23 'H'});\par
{\bkmkstart AAAAAAACOV}{\bkmkend AAAAAAACOV}
00231     EXPECT_EQ(sv32[10], U{\cf23 'H'});\par
{\bkmkstart AAAAAAACOZ}{\bkmkend AAAAAAACOZ}
00232 \}\par
{\bkmkstart AAAAAAACPA}{\bkmkend AAAAAAACPA}
00233 \par
{\bkmkstart AAAAAAACPC}{\bkmkend AAAAAAACPC}
00238 TEST_F(StringViewInternalUtilitiesTest, TestStringViewInternalOperations) \{\par
{\bkmkstart AAAAAAACPH}{\bkmkend AAAAAAACPH}
00239     {\cf20 // Test operations that might trigger length() function}\par
{\bkmkstart AAAAAAACPJ}{\bkmkend AAAAAAACPJ}
00240     {\cf17 const} {\cf18 char}* cstr = {\cf22 "Internal operations test"};\par
{\bkmkstart AAAAAAACPL}{\bkmkend AAAAAAACPL}
00241     std::string_view sv(cstr);\par
{\bkmkstart AAAAAAACPO}{\bkmkend AAAAAAACPO}
00242     \par
{\bkmkstart AAAAAAACPQ}{\bkmkend AAAAAAACPQ}
00243     {\cf20 // Test size() and length() calls}\par
{\bkmkstart AAAAAAACPR}{\bkmkend AAAAAAACPR}
00244     EXPECT_EQ(sv.size(), 24);\par
{\bkmkstart AAAAAAACPT}{\bkmkend AAAAAAACPT}
00245     EXPECT_EQ(sv.length(), 24);\par
{\bkmkstart AAAAAAACPY}{\bkmkend AAAAAAACPY}
00246     \par
{\bkmkstart AAAAAAACQA}{\bkmkend AAAAAAACQA}
00247     {\cf20 // Test empty() which might use length()}\par
{\bkmkstart AAAAAAACQB}{\bkmkend AAAAAAACQB}
00248     EXPECT_FALSE(sv.empty());\par
{\bkmkstart AAAAAAACQF}{\bkmkend AAAAAAACQF}
00249     \par
{\bkmkstart AAAAAAACQG}{\bkmkend AAAAAAACQG}
00250     std::string_view empty_sv({\cf22 ""});\par
{\bkmkstart AAAAAAACQJ}{\bkmkend AAAAAAACQJ}
00251     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACQL}{\bkmkend AAAAAAACQL}
00252     \par
{\bkmkstart AAAAAAACQO}{\bkmkend AAAAAAACQO}
00253     {\cf20 // Test operations that might trigger find() function}\par
{\bkmkstart AAAAAAACQR}{\bkmkend AAAAAAACQR}
00254     EXPECT_EQ(sv.find({\cf22 "Internal"}), 0);\par
{\bkmkstart AAAAAAACQU}{\bkmkend AAAAAAACQU}
00255     EXPECT_EQ(sv.find({\cf22 "operations"}), 9);\par
{\bkmkstart AAAAAAACQW}{\bkmkend AAAAAAACQW}
00256     EXPECT_EQ(sv.find({\cf22 "test"}), 20);\par
{\bkmkstart AAAAAAACRA}{\bkmkend AAAAAAACRA}
00257     EXPECT_EQ(sv.find({\cf23 'I'}), 0);\par
{\bkmkstart AAAAAAACRC}{\bkmkend AAAAAAACRC}
00258     EXPECT_EQ(sv.find({\cf23 'o'}), 9);\par
{\bkmkstart AAAAAAACRF}{\bkmkend AAAAAAACRF}
00259     EXPECT_EQ(sv.find({\cf23 't'}), 20);\par
{\bkmkstart AAAAAAACRI}{\bkmkend AAAAAAACRI}
00260     \par
{\bkmkstart AAAAAAACRJ}{\bkmkend AAAAAAACRJ}
00261     {\cf20 // Test operations that might trigger assign() function}\par
{\bkmkstart AAAAAAACRL}{\bkmkend AAAAAAACRL}
00262     std::string str(15, {\cf23 'X'});\par
{\bkmkstart AAAAAAACRO}{\bkmkend AAAAAAACRO}
00263     std::string_view sv2(str);\par
{\bkmkstart AAAAAAACRT}{\bkmkend AAAAAAACRT}
00264     EXPECT_EQ(sv2.size(), 15);\par
{\bkmkstart AAAAAAACRU}{\bkmkend AAAAAAACRU}
00265     EXPECT_EQ(sv2[0], {\cf23 'X'});\par
{\bkmkstart AAAAAAACRX}{\bkmkend AAAAAAACRX}
00266     EXPECT_EQ(sv2[14], {\cf23 'X'});\par
{\bkmkstart AAAAAAACRZ}{\bkmkend AAAAAAACRZ}
00267     \par
{\bkmkstart AAAAAAACSB}{\bkmkend AAAAAAACSB}
00268     {\cf20 // Test with different character types}\par
{\bkmkstart AAAAAAACSF}{\bkmkend AAAAAAACSF}
00269     {\cf17 const} {\cf18 wchar_t}* wcstr = L{\cf22 "Wide string test"};\par
{\bkmkstart AAAAAAACSJ}{\bkmkend AAAAAAACSJ}
00270     std::wstring_view wsv(wcstr);\par
{\bkmkstart AAAAAAACSN}{\bkmkend AAAAAAACSN}
00271     EXPECT_EQ(wsv.size(), 16);\par
{\bkmkstart AAAAAAACSP}{\bkmkend AAAAAAACSP}
00272     EXPECT_EQ(wsv.find(L{\cf23 'W'}), 0);\par
{\bkmkstart AAAAAAACSY}{\bkmkend AAAAAAACSY}
00273     EXPECT_EQ(wsv.find(L{\cf23 't'}), 5);\par
{\bkmkstart AAAAAAACTC}{\bkmkend AAAAAAACTC}
00274     \par
{\bkmkstart AAAAAAACTD}{\bkmkend AAAAAAACTD}
00275     {\cf17 const} {\cf18 char16_t}* c16str = u{\cf22 "UTF-16 string test"};\par
{\bkmkstart AAAAAAACTG}{\bkmkend AAAAAAACTG}
00276     std::u16string_view sv16(c16str);\par
{\bkmkstart AAAAAAACTJ}{\bkmkend AAAAAAACTJ}
00277     EXPECT_EQ(sv16.size(), 18);\par
{\bkmkstart AAAAAAACTT}{\bkmkend AAAAAAACTT}
00278     EXPECT_EQ(sv16.find(u{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAACTW}{\bkmkend AAAAAAACTW}
00279     EXPECT_EQ(sv16.find(u{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAACTZ}{\bkmkend AAAAAAACTZ}
00280     \par
{\bkmkstart AAAAAAACUA}{\bkmkend AAAAAAACUA}
00281     {\cf17 const} {\cf18 char32_t}* c32str = U{\cf22 "UTF-32 string test"};\par
{\bkmkstart AAAAAAACUF}{\bkmkend AAAAAAACUF}
00282     std::u32string_view sv32(c32str);\par
{\bkmkstart AAAAAAACUL}{\bkmkend AAAAAAACUL}
00283     EXPECT_EQ(sv32.size(), 18);\par
{\bkmkstart AAAAAAACUO}{\bkmkend AAAAAAACUO}
00284     EXPECT_EQ(sv32.find(U{\cf23 'U'}), 0);\par
{\bkmkstart AAAAAAACUR}{\bkmkend AAAAAAACUR}
00285     EXPECT_EQ(sv32.find(U{\cf23 't'}), 7);\par
{\bkmkstart AAAAAAACUU}{\bkmkend AAAAAAACUU}
00286 \}\par
{\bkmkstart AAAAAAACUW}{\bkmkend AAAAAAACUW}
00287 \par
{\bkmkstart AAAAAAACUY}{\bkmkend AAAAAAACUY}
00292 TEST_F(StringViewInternalUtilitiesTest, TestStringViewEdgeCasesForInternalFunctions) \{\par
{\bkmkstart AAAAAAACVD}{\bkmkend AAAAAAACVD}
00293     {\cf20 // Test with very long strings to trigger length() function}\par
{\bkmkstart AAAAAAACVF}{\bkmkend AAAAAAACVF}
00294     std::string long_str(10000, {\cf23 'A'});\par
{\bkmkstart AAAAAAACVH}{\bkmkend AAAAAAACVH}
00295     std::string_view long_sv(long_str);\par
{\bkmkstart AAAAAAACVL}{\bkmkend AAAAAAACVL}
00296     EXPECT_EQ(long_sv.size(), 10000);\par
{\bkmkstart AAAAAAACVO}{\bkmkend AAAAAAACVO}
00297     EXPECT_EQ(long_sv.length(), 10000);\par
{\bkmkstart AAAAAAACVQ}{\bkmkend AAAAAAACVQ}
00298     \par
{\bkmkstart AAAAAAACVR}{\bkmkend AAAAAAACVR}
00299     {\cf20 // Test find operations on long strings}\par
{\bkmkstart AAAAAAACVT}{\bkmkend AAAAAAACVT}
00300     EXPECT_EQ(long_sv.find({\cf23 'A'}), 0);\par
{\bkmkstart AAAAAAACVX}{\bkmkend AAAAAAACVX}
00301     EXPECT_EQ(long_sv.find({\cf23 'B'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACVZ}{\bkmkend AAAAAAACVZ}
00302     EXPECT_EQ(long_sv.find({\cf22 "AAAA"}), 0);\par
{\bkmkstart AAAAAAACWD}{\bkmkend AAAAAAACWD}
00303     EXPECT_EQ(long_sv.find({\cf22 "BBBB"}), std::string_view::npos);\par
{\bkmkstart AAAAAAACWH}{\bkmkend AAAAAAACWH}
00304     \par
{\bkmkstart AAAAAAACWI}{\bkmkend AAAAAAACWI}
00305     {\cf20 // Test with strings containing special characters}\par
{\bkmkstart AAAAAAACWK}{\bkmkend AAAAAAACWK}
00306     std::string special_str = {\cf22 "Hello\\0World\\0Test"};\par
{\bkmkstart AAAAAAACWM}{\bkmkend AAAAAAACWM}
00307     std::string_view special_sv(special_str.data(), 16);\par
{\bkmkstart AAAAAAACWR}{\bkmkend AAAAAAACWR}
00308     EXPECT_EQ(special_sv.size(), 16);\par
{\bkmkstart AAAAAAACWU}{\bkmkend AAAAAAACWU}
00309     EXPECT_EQ(special_sv.find({\cf23 '\\0'}), 5);\par
{\bkmkstart AAAAAAACWX}{\bkmkend AAAAAAACWX}
00310     EXPECT_EQ(special_sv.find({\cf22 "World"}), 6);\par
{\bkmkstart AAAAAAACWZ}{\bkmkend AAAAAAACWZ}
00311     \par
{\bkmkstart AAAAAAACXA}{\bkmkend AAAAAAACXA}
00312     {\cf20 // Test with strings containing all possible characters}\par
{\bkmkstart AAAAAAACXB}{\bkmkend AAAAAAACXB}
00313     std::string all_chars;\par
{\bkmkstart AAAAAAACXD}{\bkmkend AAAAAAACXD}
00314     {\cf19 for} ({\cf18 int} i = 0; i < 256; ++i) \{\par
{\bkmkstart AAAAAAACXG}{\bkmkend AAAAAAACXG}
00315         all_chars += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i);\par
{\bkmkstart AAAAAAACXJ}{\bkmkend AAAAAAACXJ}
00316     \}\par
{\bkmkstart AAAAAAACXK}{\bkmkend AAAAAAACXK}
00317     std::string_view all_sv(all_chars);\par
{\bkmkstart AAAAAAACXM}{\bkmkend AAAAAAACXM}
00318     EXPECT_EQ(all_sv.size(), 256);\par
{\bkmkstart AAAAAAACXP}{\bkmkend AAAAAAACXP}
00319     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAACXU}{\bkmkend AAAAAAACXU}
00320     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAACXX}{\bkmkend AAAAAAACXX}
00321     EXPECT_EQ(all_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(128)), 128);\par
{\bkmkstart AAAAAAACXZ}{\bkmkend AAAAAAACXZ}
00322     \par
{\bkmkstart AAAAAAACYE}{\bkmkend AAAAAAACYE}
00323     {\cf20 // Test with empty string_view}\par
{\bkmkstart AAAAAAACYG}{\bkmkend AAAAAAACYG}
00324     std::string_view empty_sv;\par
{\bkmkstart AAAAAAACYI}{\bkmkend AAAAAAACYI}
00325     EXPECT_EQ(empty_sv.size(), 0);\par
{\bkmkstart AAAAAAACYK}{\bkmkend AAAAAAACYK}
00326     EXPECT_EQ(empty_sv.length(), 0);\par
{\bkmkstart AAAAAAACYN}{\bkmkend AAAAAAACYN}
00327     EXPECT_TRUE(empty_sv.empty());\par
{\bkmkstart AAAAAAACYP}{\bkmkend AAAAAAACYP}
00328     EXPECT_EQ(empty_sv.find({\cf23 'A'}), std::string_view::npos);\par
{\bkmkstart AAAAAAACYR}{\bkmkend AAAAAAACYR}
00329     EXPECT_EQ(empty_sv.find({\cf22 ""}), 0);\par
{\bkmkstart AAAAAAACYT}{\bkmkend AAAAAAACYT}
00330 \}\par
{\bkmkstart AAAAAAACYU}{\bkmkend AAAAAAACYU}
00331 \par
{\bkmkstart AAAAAAACYX}{\bkmkend AAAAAAACYX}
00336 TEST_F(StringViewInternalUtilitiesTest, TestStringViewConstexprInternalFunctions) \{\par
{\bkmkstart AAAAAAACZA}{\bkmkend AAAAAAACZA}
00337     {\cf20 // Test constexpr operations that might trigger internal functions}\par
{\bkmkstart AAAAAAACZB}{\bkmkend AAAAAAACZB}
00338     {\cf17 constexpr} std::string_view sv({\cf22 "Constexpr test"});\par
{\bkmkstart AAAAAAACZG}{\bkmkend AAAAAAACZG}
00339     {\cf17 static_assert}(sv.size() == 14);\par
{\bkmkstart AAAAAAACZS}{\bkmkend AAAAAAACZS}
00340     {\cf17 static_assert}(sv.length() == 14);\par
{\bkmkstart AAAAAAACZT}{\bkmkend AAAAAAACZT}
00341     {\cf17 static_assert}(!sv.empty());\par
{\bkmkstart AAAAAAACZV}{\bkmkend AAAAAAACZV}
00342     {\cf17 static_assert}(sv.find({\cf23 'C'}) == 0);\par
{\bkmkstart AAAAAAACZX}{\bkmkend AAAAAAACZX}
00343     {\cf17 static_assert}(sv.find({\cf22 "test"}) == 10);\par
{\bkmkstart AAAAAAADAC}{\bkmkend AAAAAAADAC}
00344     {\cf17 static_assert}(sv.find({\cf22 "xyz"}) == std::string_view::npos);\par
{\bkmkstart AAAAAAADAE}{\bkmkend AAAAAAADAE}
00345     \par
{\bkmkstart AAAAAAADAF}{\bkmkend AAAAAAADAF}
00346     {\cf20 // Test constexpr with wide characters}\par
{\bkmkstart AAAAAAADAH}{\bkmkend AAAAAAADAH}
00347     {\cf17 constexpr} std::wstring_view wsv(L{\cf22 "Wide constexpr test"});\par
{\bkmkstart AAAAAAADAK}{\bkmkend AAAAAAADAK}
00348     {\cf17 static_assert}(wsv.size() == 19);\par
{\bkmkstart AAAAAAADAL}{\bkmkend AAAAAAADAL}
00349     {\cf17 static_assert}(wsv.length() == 19);\par
{\bkmkstart AAAAAAADAM}{\bkmkend AAAAAAADAM}
00350     {\cf17 static_assert}(!wsv.empty());\par
{\bkmkstart AAAAAAADAP}{\bkmkend AAAAAAADAP}
00351     {\cf17 static_assert}(wsv.find(L{\cf23 'W'}) == 0);\par
{\bkmkstart AAAAAAADAR}{\bkmkend AAAAAAADAR}
00352     \par
{\bkmkstart AAAAAAADAS}{\bkmkend AAAAAAADAS}
00353     {\cf20 // Test constexpr with char16_t}\par
{\bkmkstart AAAAAAADAU}{\bkmkend AAAAAAADAU}
00354     {\cf17 constexpr} std::u16string_view sv16(u{\cf22 "UTF-16 constexpr test"});\par
{\bkmkstart AAAAAAADAZ}{\bkmkend AAAAAAADAZ}
00355     {\cf17 static_assert}(sv16.size() == 21);\par
{\bkmkstart AAAAAAADBA}{\bkmkend AAAAAAADBA}
00356     {\cf17 static_assert}(sv16.length() == 21);\par
{\bkmkstart AAAAAAADBC}{\bkmkend AAAAAAADBC}
00357     {\cf17 static_assert}(!sv16.empty());\par
{\bkmkstart AAAAAAADBF}{\bkmkend AAAAAAADBF}
00358     {\cf17 static_assert}(sv16.find(u{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAADBI}{\bkmkend AAAAAAADBI}
00359     \par
{\bkmkstart AAAAAAADBJ}{\bkmkend AAAAAAADBJ}
00360     {\cf20 // Test constexpr with char32_t}\par
{\bkmkstart AAAAAAADBL}{\bkmkend AAAAAAADBL}
00361     {\cf17 constexpr} std::u32string_view sv32(U{\cf22 "UTF-32 constexpr test"});\par
{\bkmkstart AAAAAAADBO}{\bkmkend AAAAAAADBO}
00362     {\cf17 static_assert}(sv32.size() == 21);\par
{\bkmkstart AAAAAAADBP}{\bkmkend AAAAAAADBP}
00363     {\cf17 static_assert}(sv32.length() == 21);\par
{\bkmkstart AAAAAAADBQ}{\bkmkend AAAAAAADBQ}
00364     {\cf17 static_assert}(!sv32.empty());\par
{\bkmkstart AAAAAAADBU}{\bkmkend AAAAAAADBU}
00365     {\cf17 static_assert}(sv32.find(U{\cf23 'U'}) == 0);\par
{\bkmkstart AAAAAAADBW}{\bkmkend AAAAAAADBW}
00366 \}\par
{\bkmkstart AAAAAAADBY}{\bkmkend AAAAAAADBY}
00367 \par
{\bkmkstart AAAAAAADBZ}{\bkmkend AAAAAAADBZ}
00372 TEST_F(StringViewInternalUtilitiesTest, TestStringViewPerformanceInternalFunctions) \{\par
{\bkmkstart AAAAAAADCD}{\bkmkend AAAAAAADCD}
00373     {\cf20 // Test with large strings to trigger internal functions}\par
{\bkmkstart AAAAAAADCE}{\bkmkend AAAAAAADCE}
00374     std::string large_string(100000, {\cf23 'P'});\par
{\bkmkstart AAAAAAADCH}{\bkmkend AAAAAAADCH}
00375     std::string_view large_sv(large_string);\par
{\bkmkstart AAAAAAADCK}{\bkmkend AAAAAAADCK}
00376     \par
{\bkmkstart AAAAAAADCL}{\bkmkend AAAAAAADCL}
00377     {\cf20 // Test size operations}\par
{\bkmkstart AAAAAAADCN}{\bkmkend AAAAAAADCN}
00378     EXPECT_EQ(large_sv.size(), 100000);\par
{\bkmkstart AAAAAAADCP}{\bkmkend AAAAAAADCP}
00379     EXPECT_EQ(large_sv.length(), 100000);\par
{\bkmkstart AAAAAAADCR}{\bkmkend AAAAAAADCR}
00380     \par
{\bkmkstart AAAAAAADCU}{\bkmkend AAAAAAADCU}
00381     {\cf20 // Test find operations on large strings}\par
{\bkmkstart AAAAAAADCW}{\bkmkend AAAAAAADCW}
00382     EXPECT_EQ(large_sv.find({\cf23 'P'}), 0);\par
{\bkmkstart AAAAAAADCY}{\bkmkend AAAAAAADCY}
00383     EXPECT_EQ(large_sv.find({\cf23 'Q'}), std::string_view::npos);\par
{\bkmkstart AAAAAAADDD}{\bkmkend AAAAAAADDD}
00384     \par
{\bkmkstart AAAAAAADDE}{\bkmkend AAAAAAADDE}
00385     {\cf20 // Test with repeated patterns}\par
{\bkmkstart AAAAAAADDG}{\bkmkend AAAAAAADDG}
00386     std::string pattern_str;\par
{\bkmkstart AAAAAAADDM}{\bkmkend AAAAAAADDM}
00387     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAADDY}{\bkmkend AAAAAAADDY}
00388         pattern_str += {\cf22 "ABC"};\par
{\bkmkstart AAAAAAADEC}{\bkmkend AAAAAAADEC}
00389     \}\par
{\bkmkstart AAAAAAADEE}{\bkmkend AAAAAAADEE}
00390     std::string_view pattern_sv(pattern_str);\par
{\bkmkstart AAAAAAADEK}{\bkmkend AAAAAAADEK}
00391     EXPECT_EQ(pattern_sv.size(), 3000);\par
{\bkmkstart AAAAAAADEN}{\bkmkend AAAAAAADEN}
00392     EXPECT_EQ(pattern_sv.find({\cf22 "ABC"}), 0);\par
{\bkmkstart AAAAAAADEQ}{\bkmkend AAAAAAADEQ}
00393     EXPECT_EQ(pattern_sv.find({\cf22 "BCA"}), 1);\par
{\bkmkstart AAAAAAADET}{\bkmkend AAAAAAADET}
00394     EXPECT_EQ(pattern_sv.find({\cf22 "CAB"}), 2);\par
{\bkmkstart AAAAAAADEV}{\bkmkend AAAAAAADEV}
00395     \par
{\bkmkstart AAAAAAADEX}{\bkmkend AAAAAAADEX}
00396     {\cf20 // Test with mixed character types}\par
{\bkmkstart AAAAAAADEZ}{\bkmkend AAAAAAADEZ}
00397     std::string mixed_str;\par
{\bkmkstart AAAAAAADFD}{\bkmkend AAAAAAADFD}
00398     {\cf19 for} ({\cf18 int} i = 0; i < 1000; ++i) \{\par
{\bkmkstart AAAAAAADFH}{\bkmkend AAAAAAADFH}
00399         mixed_str += {\cf17 static_cast<}{\cf18 char}{\cf17 >}(i % 256);\par
{\bkmkstart AAAAAAADFK}{\bkmkend AAAAAAADFK}
00400     \}\par
{\bkmkstart AAAAAAADFL}{\bkmkend AAAAAAADFL}
00401     std::string_view mixed_sv(mixed_str);\par
{\bkmkstart AAAAAAADFN}{\bkmkend AAAAAAADFN}
00402     EXPECT_EQ(mixed_sv.size(), 1000);\par
{\bkmkstart AAAAAAADFO}{\bkmkend AAAAAAADFO}
00403     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(0)), 0);\par
{\bkmkstart AAAAAAADFR}{\bkmkend AAAAAAADFR}
00404     EXPECT_EQ(mixed_sv.find({\cf17 static_cast<}{\cf18 char}{\cf17 >}(255)), 255);\par
{\bkmkstart AAAAAAADFS}{\bkmkend AAAAAAADFS}
00405 \}\par
{\bkmkstart AAAAAAADFT}{\bkmkend AAAAAAADFT}
00406 \par
{\bkmkstart AAAAAAADFU}{\bkmkend AAAAAAADFU}
00407 \} {\cf20 // namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_xor_linked_list.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_xor_linked_list.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_xor_linked_list.cpp}
{\bkmkstart AAAAAAABNO}
{\bkmkend AAAAAAABNO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "ds/xor_linked_list.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_xor_linked_list.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__xor__linked__list_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABPS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
 (XORLinkedList, InsertDeleteNavigate)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAADLX}
{\bkmkend AAAAAAADLX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:test_xor_linked_list.cpp}
{\xe \v test_xor_linked_list.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (XORLinkedList , InsertDeleteNavigate )}}
\par
{\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABPR" }{}}{\fldrslt {\cs37\ul\cf2 4}}}
 of file {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 test_xor_linked_list.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_xor_linked_list.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_xor_linked_list.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masa\'FCst\'FC/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_xor_linked_list.cpp}
{\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNO" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABOK}{\bkmkend AAAAAAABOK}
00001 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAABPA}{\bkmkend AAAAAAABPA}
00002 {\cf21 #include "ds/xor_linked_list.h"}\par
{\bkmkstart AAAAAAABPP}{\bkmkend AAAAAAABPP}
00003 \par
{\bkmkstart AAAAAAABPR}{\bkmkend AAAAAAABPR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABPS" }{}}{\fldrslt {\cs37\ul\cf2 00004}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABPS" }{}}{\fldrslt {\cs37\ul\cf2 TEST}}}
(XORLinkedList, InsertDeleteNavigate)\{\par
{\bkmkstart AAAAAAABQU}{\bkmkend AAAAAAABQU}
00005     ds::XORLinkedList<int> xl;\par
{\bkmkstart AAAAAAABQZ}{\bkmkend AAAAAAABQZ}
00006     xl.push_back(1); xl.push_back(2); xl.push_front(0);\par
{\bkmkstart AAAAAAABRB}{\bkmkend AAAAAAABRB}
00007     {\cf18 int} forward[3]; {\cf18 int} i=0; xl.for_each_forward([&]({\cf18 int} v)\{ forward[i++]=v; {\cf19 return} {\cf17 true}; \});\par
{\bkmkstart AAAAAAABRD}{\bkmkend AAAAAAABRD}
00008     EXPECT_EQ(forward[0],0); EXPECT_EQ(forward[1],1); EXPECT_EQ(forward[2],2);\par
{\bkmkstart AAAAAAABRF}{\bkmkend AAAAAAABRF}
00009     {\cf18 int} backward[3]; i=0; xl.for_each_backward([&]({\cf18 int} v)\{ backward[i++]=v; {\cf19 return} {\cf17 true}; \});\par
{\bkmkstart AAAAAAABRG}{\bkmkend AAAAAAABRG}
00010     EXPECT_EQ(backward[0],2); EXPECT_EQ(backward[1],1); EXPECT_EQ(backward[2],0);\par
{\bkmkstart AAAAAAABRJ}{\bkmkend AAAAAAABRJ}
00011     EXPECT_TRUE(xl.remove_first(1));\par
{\bkmkstart AAAAAAABRL}{\bkmkend AAAAAAABRL}
00012     {\cf18 int} after[2]; i=0; xl.for_each_forward([&]({\cf18 int} v)\{ after[i++]=v; {\cf19 return} {\cf17 true}; \});\par
{\bkmkstart AAAAAAABRO}{\bkmkend AAAAAAABRO}
00013     EXPECT_EQ(after[0],0); EXPECT_EQ(after[1],2);\par
{\bkmkstart AAAAAAABRT}{\bkmkend AAAAAAABRT}
00014 \}\par
{\bkmkstart AAAAAAABRU}{\bkmkend AAAAAAABRU}
00015 \par
}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
