{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test_overflow_protection.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp}
{\xe \v C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_overflow_protection.cpp}
{\bkmkstart AAAAAAADLR}
{\bkmkend AAAAAAADLR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADLS" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADLT}{\bkmkend AAAAAAADLT}
00001 \par
{\bkmkstart AAAAAAADLU}{\bkmkend AAAAAAADLU}
00008 \par
{\bkmkstart AAAAAAADLV}{\bkmkend AAAAAAADLV}
00009 {\cf21 #include <gtest/gtest.h>}\par
{\bkmkstart AAAAAAADLW}{\bkmkend AAAAAAADLW}
00010 {\cf21 #include <chrono>}\par
{\bkmkstart AAAAAAADLX}{\bkmkend AAAAAAADLX}
00011 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAADLY}{\bkmkend AAAAAAADLY}
00012 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAADLZ}{\bkmkend AAAAAAADLZ}
00013 \par
{\bkmkstart AAAAAAADMA}{\bkmkend AAAAAAADMA}
00014 {\cf17 namespace }\{\par
{\bkmkstart AAAAAAADMB}{\bkmkend AAAAAAADMB}
00015 \par
{\bkmkstart AAAAAAADMC}{\bkmkend AAAAAAADMC}
00020 {\cf17 class }OverflowProtectionTest : {\cf17 public} ::testing::Test \{\par
{\bkmkstart AAAAAAADMD}{\bkmkend AAAAAAADMD}
00021 {\cf17 protected}:\par
{\bkmkstart AAAAAAADME}{\bkmkend AAAAAAADME}
00022     {\cf18 void} SetUp(){\cf17  override }\{\par
{\bkmkstart AAAAAAADMF}{\bkmkend AAAAAAADMF}
00023         {\cf20 // Setup for each test}\par
{\bkmkstart AAAAAAADMG}{\bkmkend AAAAAAADMG}
00024     \}\par
{\bkmkstart AAAAAAADMH}{\bkmkend AAAAAAADMH}
00025     \par
{\bkmkstart AAAAAAADMI}{\bkmkend AAAAAAADMI}
00026     {\cf18 void} TearDown(){\cf17  override }\{\par
{\bkmkstart AAAAAAADMJ}{\bkmkend AAAAAAADMJ}
00027         {\cf20 // Cleanup after each test}\par
{\bkmkstart AAAAAAADMK}{\bkmkend AAAAAAADMK}
00028     \}\par
{\bkmkstart AAAAAAADML}{\bkmkend AAAAAAADML}
00029 \};\par
{\bkmkstart AAAAAAADMM}{\bkmkend AAAAAAADMM}
00030 \par
{\bkmkstart AAAAAAADMN}{\bkmkend AAAAAAADMN}
00035 TEST_F(OverflowProtectionTest, TestSafeMultiplication) \{\par
{\bkmkstart AAAAAAADMO}{\bkmkend AAAAAAADMO}
00036     {\cf20 // Test safe multiplication algorithm similar to _Whole and _Part}\par
{\bkmkstart AAAAAAADMP}{\bkmkend AAAAAAADMP}
00037     {\cf17 auto} safeMultiply = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} multiplier, {\cf18 long} {\cf18 long} divisor) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAADMQ}{\bkmkend AAAAAAADMQ}
00038         {\cf20 // Prevent overflow by splitting the calculation}\par
{\bkmkstart AAAAAAADMR}{\bkmkend AAAAAAADMR}
00039         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / divisor) * multiplier;\par
{\bkmkstart AAAAAAADMS}{\bkmkend AAAAAAADMS}
00040         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % divisor) * multiplier / divisor;\par
{\bkmkstart AAAAAAADMT}{\bkmkend AAAAAAADMT}
00041         {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAADMU}{\bkmkend AAAAAAADMU}
00042     \};\par
{\bkmkstart AAAAAAADMV}{\bkmkend AAAAAAADMV}
00043     \par
{\bkmkstart AAAAAAADMW}{\bkmkend AAAAAAADMW}
00044     {\cf20 // Test with large values that could cause overflow}\par
{\bkmkstart AAAAAAADMX}{\bkmkend AAAAAAADMX}
00045     {\cf17 const} {\cf18 long} {\cf18 long} largeCounter = std::numeric_limits<long long>::max() / 2;\par
{\bkmkstart AAAAAAADMY}{\bkmkend AAAAAAADMY}
00046     {\cf17 const} {\cf18 long} {\cf18 long} multiplier = 1000000;\par
{\bkmkstart AAAAAAADMZ}{\bkmkend AAAAAAADMZ}
00047     {\cf17 const} {\cf18 long} {\cf18 long} divisor = 1000000;\par
{\bkmkstart AAAAAAADNA}{\bkmkend AAAAAAADNA}
00048     \par
{\bkmkstart AAAAAAADNB}{\bkmkend AAAAAAADNB}
00049     {\cf20 // This should not overflow with safe algorithm}\par
{\bkmkstart AAAAAAADND}{\bkmkend AAAAAAADND}
00050     {\cf18 long} {\cf18 long} result = safeMultiply(largeCounter, multiplier, divisor);\par
{\bkmkstart AAAAAAADNE}{\bkmkend AAAAAAADNE}
00051     EXPECT_GT(result, 0);\par
{\bkmkstart AAAAAAADNF}{\bkmkend AAAAAAADNF}
00052     \par
{\bkmkstart AAAAAAADNG}{\bkmkend AAAAAAADNG}
00053     {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAADNH}{\bkmkend AAAAAAADNH}
00054     EXPECT_EQ(safeMultiply(0, multiplier, divisor), 0);\par
{\bkmkstart AAAAAAADNI}{\bkmkend AAAAAAADNI}
00055     EXPECT_EQ(safeMultiply(divisor, multiplier, divisor), multiplier);\par
{\bkmkstart AAAAAAADNJ}{\bkmkend AAAAAAADNJ}
00056 \}\par
{\bkmkstart AAAAAAADNK}{\bkmkend AAAAAAADNK}
00057 \par
{\bkmkstart AAAAAAADNL}{\bkmkend AAAAAAADNL}
00062 TEST_F(OverflowProtectionTest, TestOverflowDetection) \{\par
{\bkmkstart AAAAAAADNM}{\bkmkend AAAAAAADNM}
00063     {\cf20 // Test overflow detection}\par
{\bkmkstart AAAAAAADNN}{\bkmkend AAAAAAADNN}
00064     {\cf17 auto} detectOverflow = []({\cf18 long} {\cf18 long} a, {\cf18 long} {\cf18 long} b) -> {\cf18 bool} \{\par
{\bkmkstart AAAAAAADNO}{\bkmkend AAAAAAADNO}
00065         {\cf20 // Check if multiplication would overflow}\par
{\bkmkstart AAAAAAADNP}{\bkmkend AAAAAAADNP}
00066         {\cf19 if} (a > 0 && b > 0) \{\par
{\bkmkstart AAAAAAADNQ}{\bkmkend AAAAAAADNQ}
00067             {\cf19 return} a > std::numeric_limits<long long>::max() / b;\par
{\bkmkstart AAAAAAADNR}{\bkmkend AAAAAAADNR}
00068         \} {\cf19 else} {\cf19 if} (a < 0 && b < 0) \{\par
{\bkmkstart AAAAAAADNS}{\bkmkend AAAAAAADNS}
00069             {\cf19 return} a < std::numeric_limits<long long>::max() / b;\par
{\bkmkstart AAAAAAADNT}{\bkmkend AAAAAAADNT}
00070         \} {\cf19 else} {\cf19 if} (a < 0 && b > 0) \{\par
{\bkmkstart AAAAAAADNU}{\bkmkend AAAAAAADNU}
00071             {\cf19 return} a < std::numeric_limits<long long>::min() / b;\par
{\bkmkstart AAAAAAADNV}{\bkmkend AAAAAAADNV}
00072         \} {\cf19 else} {\cf19 if} (a > 0 && b < 0) \{\par
{\bkmkstart AAAAAAADNW}{\bkmkend AAAAAAADNW}
00073             {\cf19 return} b < std::numeric_limits<long long>::min() / a;\par
{\bkmkstart AAAAAAADNX}{\bkmkend AAAAAAADNX}
00074         \}\par
{\bkmkstart AAAAAAADNY}{\bkmkend AAAAAAADNY}
00075         {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADNZ}{\bkmkend AAAAAAADNZ}
00076     \};\par
{\bkmkstart AAAAAAADOA}{\bkmkend AAAAAAADOA}
00077     \par
{\bkmkstart AAAAAAADOB}{\bkmkend AAAAAAADOB}
00078     {\cf20 // Test cases that should detect overflow}\par
{\bkmkstart AAAAAAADOC}{\bkmkend AAAAAAADOC}
00079     EXPECT_TRUE(detectOverflow(std::numeric_limits<long long>::max(), 2));\par
{\bkmkstart AAAAAAADOH}{\bkmkend AAAAAAADOH}
00080     EXPECT_TRUE(detectOverflow(std::numeric_limits<long long>::min(), 2));\par
{\bkmkstart AAAAAAADOI}{\bkmkend AAAAAAADOI}
00081     EXPECT_FALSE(detectOverflow(1000, 1000));\par
{\bkmkstart AAAAAAADOJ}{\bkmkend AAAAAAADOJ}
00082     EXPECT_FALSE(detectOverflow(0, 1000));\par
{\bkmkstart AAAAAAADOK}{\bkmkend AAAAAAADOK}
00083 \}\par
{\bkmkstart AAAAAAADOL}{\bkmkend AAAAAAADOL}
00084 \par
{\bkmkstart AAAAAAADOM}{\bkmkend AAAAAAADOM}
00089 TEST_F(OverflowProtectionTest, TestChronoOverflowProtection) \{\par
{\bkmkstart AAAAAAADON}{\bkmkend AAAAAAADON}
00090     {\cf20 // Test chrono duration calculations with overflow protection}\par
{\bkmkstart AAAAAAADOO}{\bkmkend AAAAAAADOO}
00091     {\cf17 auto} safeChronoCalculation = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency, {\cf18 long} {\cf18 long} periodDen) -> std::chrono::nanoseconds \{\par
{\bkmkstart AAAAAAADOP}{\bkmkend AAAAAAADOP}
00092         {\cf20 // Safe calculation using _Whole and _Part algorithm}\par
{\bkmkstart AAAAAAADOQ}{\bkmkend AAAAAAADOQ}
00093         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAADOR}{\bkmkend AAAAAAADOR}
00094         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADOS}{\bkmkend AAAAAAADOS}
00095         \par
{\bkmkstart AAAAAAADOT}{\bkmkend AAAAAAADOT}
00096         {\cf20 // Check for overflow before creating duration}\par
{\bkmkstart AAAAAAADOU}{\bkmkend AAAAAAADOU}
00097         {\cf19 if} (whole > std::numeric_limits<long long>::max() - part) \{\par
{\bkmkstart AAAAAAADOV}{\bkmkend AAAAAAADOV}
00098             {\cf19 throw} std::overflow_error({\cf22 "Duration calculation would overflow"});\par
{\bkmkstart AAAAAAADOW}{\bkmkend AAAAAAADOW}
00099         \}\par
{\bkmkstart AAAAAAADOX}{\bkmkend AAAAAAADOX}
00100         \par
{\bkmkstart AAAAAAADOY}{\bkmkend AAAAAAADOY}
00101         {\cf19 return} std::chrono::nanoseconds(whole + part);\par
{\bkmkstart AAAAAAADOZ}{\bkmkend AAAAAAADOZ}
00102     \};\par
{\bkmkstart AAAAAAADPA}{\bkmkend AAAAAAADPA}
00103     \par
{\bkmkstart AAAAAAADPB}{\bkmkend AAAAAAADPB}
00104     {\cf20 // Test with safe values}\par
{\bkmkstart AAAAAAADPC}{\bkmkend AAAAAAADPC}
00105     {\cf17 const} {\cf18 long} {\cf18 long} counter = 1000000;\par
{\bkmkstart AAAAAAADPD}{\bkmkend AAAAAAADPD}
00106     {\cf17 const} {\cf18 long} {\cf18 long} frequency = 1000000;\par
{\bkmkstart AAAAAAADPE}{\bkmkend AAAAAAADPE}
00107     {\cf17 const} {\cf18 long} {\cf18 long} periodDen = 1000000000; {\cf20 // nanoseconds}\par
{\bkmkstart AAAAAAADPF}{\bkmkend AAAAAAADPF}
00108     \par
{\bkmkstart AAAAAAADPG}{\bkmkend AAAAAAADPG}
00109     {\cf17 auto} duration = safeChronoCalculation(counter, frequency, periodDen);\par
{\bkmkstart AAAAAAADPH}{\bkmkend AAAAAAADPH}
00110     EXPECT_EQ(duration.count(), 1000000000); {\cf20 // 1 second in nanoseconds}\par
{\bkmkstart AAAAAAADPI}{\bkmkend AAAAAAADPI}
00111     \par
{\bkmkstart AAAAAAADPJ}{\bkmkend AAAAAAADPJ}
00112     {\cf20 // Test with edge case}\par
{\bkmkstart AAAAAAADPK}{\bkmkend AAAAAAADPK}
00113     EXPECT_EQ(safeChronoCalculation(0, frequency, periodDen).count(), 0);\par
{\bkmkstart AAAAAAADPL}{\bkmkend AAAAAAADPL}
00114 \}\par
{\bkmkstart AAAAAAADPM}{\bkmkend AAAAAAADPM}
00115 \par
{\bkmkstart AAAAAAADPN}{\bkmkend AAAAAAADPN}
00120 TEST_F(OverflowProtectionTest, TestLargeValueHandling) \{\par
{\bkmkstart AAAAAAADPO}{\bkmkend AAAAAAADPO}
00121     {\cf20 // Test with very large counter values}\par
{\bkmkstart AAAAAAADPP}{\bkmkend AAAAAAADPP}
00122     {\cf17 auto} handleLargeCounter = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAADPR}{\bkmkend AAAAAAADPR}
00123         {\cf20 // Use safe division and multiplication}\par
{\bkmkstart AAAAAAADPS}{\bkmkend AAAAAAADPS}
00124         {\cf17 const} {\cf18 long} {\cf18 long} quotient = counter / frequency;\par
{\bkmkstart AAAAAAADPT}{\bkmkend AAAAAAADPT}
00125         {\cf17 const} {\cf18 long} {\cf18 long} remainder = counter % frequency;\par
{\bkmkstart AAAAAAADPU}{\bkmkend AAAAAAADPU}
00126         \par
{\bkmkstart AAAAAAADPV}{\bkmkend AAAAAAADPV}
00127         {\cf20 // Safe multiplication with overflow check}\par
{\bkmkstart AAAAAAADPW}{\bkmkend AAAAAAADPW}
00128         {\cf17 const} {\cf18 long} {\cf18 long} maxSafeMultiplier = std::numeric_limits<long long>::max() / frequency;\par
{\bkmkstart AAAAAAADQB}{\bkmkend AAAAAAADQB}
00129         {\cf17 const} {\cf18 long} {\cf18 long} multiplier = std::min(1000000000LL, maxSafeMultiplier);\par
{\bkmkstart AAAAAAADQC}{\bkmkend AAAAAAADQC}
00130         \par
{\bkmkstart AAAAAAADQD}{\bkmkend AAAAAAADQD}
00131         {\cf19 return} quotient * multiplier + (remainder * multiplier) / frequency;\par
{\bkmkstart AAAAAAADQE}{\bkmkend AAAAAAADQE}
00132     \};\par
{\bkmkstart AAAAAAADQF}{\bkmkend AAAAAAADQF}
00133     \par
{\bkmkstart AAAAAAADQG}{\bkmkend AAAAAAADQG}
00134     {\cf20 // Test with large but safe values}\par
{\bkmkstart AAAAAAADQH}{\bkmkend AAAAAAADQH}
00135     {\cf17 const} {\cf18 long} {\cf18 long} largeCounter = std::numeric_limits<long long>::max() / 8; {\cf20 // Use smaller value to avoid overflow}\par
{\bkmkstart AAAAAAADQI}{\bkmkend AAAAAAADQI}
00136     {\cf17 const} {\cf18 long} {\cf18 long} frequency = 1000000;\par
{\bkmkstart AAAAAAADQJ}{\bkmkend AAAAAAADQJ}
00137     \par
{\bkmkstart AAAAAAADQK}{\bkmkend AAAAAAADQK}
00138     {\cf18 long} {\cf18 long} result = handleLargeCounter(largeCounter, frequency);\par
{\bkmkstart AAAAAAADQL}{\bkmkend AAAAAAADQL}
00139     EXPECT_GT(result, 0);\par
{\bkmkstart AAAAAAADQM}{\bkmkend AAAAAAADQM}
00140     \par
{\bkmkstart AAAAAAADQN}{\bkmkend AAAAAAADQN}
00141     {\cf20 // Test boundary conditions}\par
{\bkmkstart AAAAAAADQO}{\bkmkend AAAAAAADQO}
00142     EXPECT_EQ(handleLargeCounter(0, frequency), 0);\par
{\bkmkstart AAAAAAADQP}{\bkmkend AAAAAAADQP}
00143     EXPECT_EQ(handleLargeCounter(frequency, frequency), 1000000000);\par
{\bkmkstart AAAAAAADQQ}{\bkmkend AAAAAAADQQ}
00144 \}\par
{\bkmkstart AAAAAAADQR}{\bkmkend AAAAAAADQR}
00145 \par
{\bkmkstart AAAAAAADQS}{\bkmkend AAAAAAADQS}
00150 TEST_F(OverflowProtectionTest, TestFrequencySpecificCalculations) \{\par
{\bkmkstart AAAAAAADQT}{\bkmkend AAAAAAADQT}
00151     {\cf20 // Test for 10MHz frequency}\par
{\bkmkstart AAAAAAADQU}{\bkmkend AAAAAAADQU}
00152     {\cf17 auto} calculateFor10MHz = []({\cf18 long} {\cf18 long} counter) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAADQV}{\bkmkend AAAAAAADQV}
00153         {\cf17 const} {\cf18 long} {\cf18 long} frequency = 10000000; {\cf20 // 10MHz}\par
{\bkmkstart AAAAAAADQW}{\bkmkend AAAAAAADQW}
00154         {\cf17 const} {\cf18 long} {\cf18 long} periodDen = 1000000000; {\cf20 // nanoseconds}\par
{\bkmkstart AAAAAAADQX}{\bkmkend AAAAAAADQX}
00155         \par
{\bkmkstart AAAAAAADQY}{\bkmkend AAAAAAADQY}
00156         {\cf20 // Safe calculation}\par
{\bkmkstart AAAAAAADQZ}{\bkmkend AAAAAAADQZ}
00157         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAADRA}{\bkmkend AAAAAAADRA}
00158         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADRB}{\bkmkend AAAAAAADRB}
00159         \par
{\bkmkstart AAAAAAADRC}{\bkmkend AAAAAAADRC}
00160         {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAADRD}{\bkmkend AAAAAAADRD}
00161     \};\par
{\bkmkstart AAAAAAADRE}{\bkmkend AAAAAAADRE}
00162     \par
{\bkmkstart AAAAAAADRF}{\bkmkend AAAAAAADRF}
00163     {\cf20 // Test for 24MHz frequency}\par
{\bkmkstart AAAAAAADRG}{\bkmkend AAAAAAADRG}
00164     {\cf17 auto} calculateFor24MHz = []({\cf18 long} {\cf18 long} counter) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAADRH}{\bkmkend AAAAAAADRH}
00165         {\cf17 const} {\cf18 long} {\cf18 long} frequency = 24000000; {\cf20 // 24MHz}\par
{\bkmkstart AAAAAAADRI}{\bkmkend AAAAAAADRI}
00166         {\cf17 const} {\cf18 long} {\cf18 long} periodDen = 1000000000; {\cf20 // nanoseconds}\par
{\bkmkstart AAAAAAADRJ}{\bkmkend AAAAAAADRJ}
00167         \par
{\bkmkstart AAAAAAADRK}{\bkmkend AAAAAAADRK}
00168         {\cf20 // Safe calculation}\par
{\bkmkstart AAAAAAADRL}{\bkmkend AAAAAAADRL}
00169         {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAADRM}{\bkmkend AAAAAAADRM}
00170         {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADRN}{\bkmkend AAAAAAADRN}
00171         \par
{\bkmkstart AAAAAAADRO}{\bkmkend AAAAAAADRO}
00172         {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAADRP}{\bkmkend AAAAAAADRP}
00173     \};\par
{\bkmkstart AAAAAAADRQ}{\bkmkend AAAAAAADRQ}
00174     \par
{\bkmkstart AAAAAAADRR}{\bkmkend AAAAAAADRR}
00175     {\cf20 // Test calculations}\par
{\bkmkstart AAAAAAADRS}{\bkmkend AAAAAAADRS}
00176     {\cf17 const} {\cf18 long} {\cf18 long} testCounter = 1000000;\par
{\bkmkstart AAAAAAADRT}{\bkmkend AAAAAAADRT}
00177     \par
{\bkmkstart AAAAAAADRU}{\bkmkend AAAAAAADRU}
00178     {\cf18 long} {\cf18 long} result10MHz = calculateFor10MHz(testCounter);\par
{\bkmkstart AAAAAAADRV}{\bkmkend AAAAAAADRV}
00179     {\cf18 long} {\cf18 long} result24MHz = calculateFor24MHz(testCounter);\par
{\bkmkstart AAAAAAADRW}{\bkmkend AAAAAAADRW}
00180     \par
{\bkmkstart AAAAAAADRX}{\bkmkend AAAAAAADRX}
00181     EXPECT_GT(result10MHz, 0);\par
{\bkmkstart AAAAAAADRY}{\bkmkend AAAAAAADRY}
00182     EXPECT_GT(result24MHz, 0);\par
{\bkmkstart AAAAAAADRZ}{\bkmkend AAAAAAADRZ}
00183     EXPECT_NE(result10MHz, result24MHz); {\cf20 // Should be different}\par
{\bkmkstart AAAAAAADSA}{\bkmkend AAAAAAADSA}
00184 \}\par
{\bkmkstart AAAAAAADSB}{\bkmkend AAAAAAADSB}
00185 \par
{\bkmkstart AAAAAAADSC}{\bkmkend AAAAAAADSC}
00190 TEST_F(OverflowProtectionTest, TestOverflowPreventionAlgorithm) \{\par
{\bkmkstart AAAAAAADSD}{\bkmkend AAAAAAADSD}
00191     {\cf20 // Complete overflow prevention algorithm}\par
{\bkmkstart AAAAAAADSE}{\bkmkend AAAAAAADSE}
00192     {\cf17 auto} overflowSafeCalculation = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency, {\cf18 long} {\cf18 long} periodDen) -> {\cf18 long} {\cf18 long} \{\par
{\bkmkstart AAAAAAADSF}{\bkmkend AAAAAAADSF}
00193         {\cf20 // Check if direct multiplication would overflow}\par
{\bkmkstart AAAAAAADSG}{\bkmkend AAAAAAADSG}
00194         {\cf19 if} (counter > 0 && periodDen > 0) \{\par
{\bkmkstart AAAAAAADSH}{\bkmkend AAAAAAADSH}
00195             {\cf19 if} (counter > std::numeric_limits<long long>::max() / periodDen) \{\par
{\bkmkstart AAAAAAADSI}{\bkmkend AAAAAAADSI}
00196                 {\cf20 // Use safe algorithm}\par
{\bkmkstart AAAAAAADSJ}{\bkmkend AAAAAAADSJ}
00197                 {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAADSK}{\bkmkend AAAAAAADSK}
00198                 {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADSL}{\bkmkend AAAAAAADSL}
00199                 \par
{\bkmkstart AAAAAAADSM}{\bkmkend AAAAAAADSM}
00200                 {\cf20 // Check if result would overflow}\par
{\bkmkstart AAAAAAADSN}{\bkmkend AAAAAAADSN}
00201                 {\cf19 if} (whole > std::numeric_limits<long long>::max() - part) \{\par
{\bkmkstart AAAAAAADSO}{\bkmkend AAAAAAADSO}
00202                     {\cf19 throw} std::overflow_error({\cf22 "Calculation would overflow even with safe algorithm"});\par
{\bkmkstart AAAAAAADSP}{\bkmkend AAAAAAADSP}
00203                 \}\par
{\bkmkstart AAAAAAADSQ}{\bkmkend AAAAAAADSQ}
00204                 \par
{\bkmkstart AAAAAAADSR}{\bkmkend AAAAAAADSR}
00205                 {\cf19 return} whole + part;\par
{\bkmkstart AAAAAAADSS}{\bkmkend AAAAAAADSS}
00206             \}\par
{\bkmkstart AAAAAAADST}{\bkmkend AAAAAAADST}
00207         \}\par
{\bkmkstart AAAAAAADSU}{\bkmkend AAAAAAADSU}
00208         \par
{\bkmkstart AAAAAAADSV}{\bkmkend AAAAAAADSV}
00209         {\cf20 // Safe to use direct multiplication}\par
{\bkmkstart AAAAAAADSW}{\bkmkend AAAAAAADSW}
00210         {\cf19 return} (counter * periodDen) / frequency;\par
{\bkmkstart AAAAAAADSX}{\bkmkend AAAAAAADSX}
00211     \};\par
{\bkmkstart AAAAAAADSY}{\bkmkend AAAAAAADSY}
00212     \par
{\bkmkstart AAAAAAADSZ}{\bkmkend AAAAAAADSZ}
00213     {\cf20 // Test with various values - only test cases that should succeed}\par
{\bkmkstart AAAAAAADTA}{\bkmkend AAAAAAADTA}
00214     {\cf17 struct }TestCase \{\par
{\bkmkstart AAAAAAADTB}{\bkmkend AAAAAAADTB}
00215         {\cf18 long} {\cf18 long} counter;\par
{\bkmkstart AAAAAAADTC}{\bkmkend AAAAAAADTC}
00216         {\cf18 long} {\cf18 long} frequency;\par
{\bkmkstart AAAAAAADTD}{\bkmkend AAAAAAADTD}
00217         {\cf18 long} {\cf18 long} periodDen;\par
{\bkmkstart AAAAAAADTE}{\bkmkend AAAAAAADTE}
00218     \};\par
{\bkmkstart AAAAAAADTF}{\bkmkend AAAAAAADTF}
00219     \par
{\bkmkstart AAAAAAADTG}{\bkmkend AAAAAAADTG}
00220     std::vector<TestCase> testCases = \{\par
{\bkmkstart AAAAAAADTH}{\bkmkend AAAAAAADTH}
00221         \{1000, 1000000, 1000000000\},\par
{\bkmkstart AAAAAAADTI}{\bkmkend AAAAAAADTI}
00222         \{0, 1000000, 1000000000\},\par
{\bkmkstart AAAAAAADTJ}{\bkmkend AAAAAAADTJ}
00223         \{1000000, 1000000, 1000000000\},\par
{\bkmkstart AAAAAAADTK}{\bkmkend AAAAAAADTK}
00224         \{std::numeric_limits<long long>::max() / 16, 1000000, 1000000000\} {\cf20 // Use even smaller value}\par
{\bkmkstart AAAAAAADTL}{\bkmkend AAAAAAADTL}
00225     \};\par
{\bkmkstart AAAAAAADTM}{\bkmkend AAAAAAADTM}
00226     \par
{\bkmkstart AAAAAAADTN}{\bkmkend AAAAAAADTN}
00227     {\cf19 for} ({\cf17 const} {\cf17 auto}& testCase : testCases) \{\par
{\bkmkstart AAAAAAADTO}{\bkmkend AAAAAAADTO}
00228         EXPECT_NO_THROW(\{\par
{\bkmkstart AAAAAAADTP}{\bkmkend AAAAAAADTP}
00229             {\cf18 long} {\cf18 long} result = overflowSafeCalculation(testCase.counter, testCase.frequency, testCase.periodDen);\par
{\bkmkstart AAAAAAADTQ}{\bkmkend AAAAAAADTQ}
00230             EXPECT_GE(result, 0);\par
{\bkmkstart AAAAAAADTR}{\bkmkend AAAAAAADTR}
00231         \});\par
{\bkmkstart AAAAAAADTS}{\bkmkend AAAAAAADTS}
00232     \}\par
{\bkmkstart AAAAAAADTT}{\bkmkend AAAAAAADTT}
00233 \}\par
{\bkmkstart AAAAAAADTU}{\bkmkend AAAAAAADTU}
00234 \par
{\bkmkstart AAAAAAADTV}{\bkmkend AAAAAAADTV}
00239 TEST_F(OverflowProtectionTest, TestEdgeCases) \{\par
{\bkmkstart AAAAAAADTW}{\bkmkend AAAAAAADTW}
00240     {\cf20 // Test edge cases}\par
{\bkmkstart AAAAAAADTX}{\bkmkend AAAAAAADTX}
00241     {\cf17 auto} testEdgeCase = []({\cf18 long} {\cf18 long} counter, {\cf18 long} {\cf18 long} frequency, {\cf18 long} {\cf18 long} periodDen) -> {\cf18 bool} \{\par
{\bkmkstart AAAAAAADTY}{\bkmkend AAAAAAADTY}
00242         {\cf19 try} \{\par
{\bkmkstart AAAAAAADTZ}{\bkmkend AAAAAAADTZ}
00243             {\cf20 // Safe calculation}\par
{\bkmkstart AAAAAAADUA}{\bkmkend AAAAAAADUA}
00244             {\cf17 const} {\cf18 long} {\cf18 long} whole = (counter / frequency) * periodDen;\par
{\bkmkstart AAAAAAADUB}{\bkmkend AAAAAAADUB}
00245             {\cf17 const} {\cf18 long} {\cf18 long} part = (counter % frequency) * periodDen / frequency;\par
{\bkmkstart AAAAAAADUC}{\bkmkend AAAAAAADUC}
00246             \par
{\bkmkstart AAAAAAADUD}{\bkmkend AAAAAAADUD}
00247             {\cf20 // Check for overflow}\par
{\bkmkstart AAAAAAADUE}{\bkmkend AAAAAAADUE}
00248             {\cf19 if} (whole > std::numeric_limits<long long>::max() - part) \{\par
{\bkmkstart AAAAAAADUO}{\bkmkend AAAAAAADUO}
00249                 {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADUP}{\bkmkend AAAAAAADUP}
00250             \}\par
{\bkmkstart AAAAAAADUQ}{\bkmkend AAAAAAADUQ}
00251             \par
{\bkmkstart AAAAAAADUR}{\bkmkend AAAAAAADUR}
00252             {\cf18 long} {\cf18 long} result = whole + part;\par
{\bkmkstart AAAAAAADUS}{\bkmkend AAAAAAADUS}
00253             {\cf19 return} result >= 0;\par
{\bkmkstart AAAAAAADUT}{\bkmkend AAAAAAADUT}
00254         \} {\cf19 catch} (...) \{\par
{\bkmkstart AAAAAAADUU}{\bkmkend AAAAAAADUU}
00255             {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADUV}{\bkmkend AAAAAAADUV}
00256         \}\par
{\bkmkstart AAAAAAADUW}{\bkmkend AAAAAAADUW}
00257     \};\par
{\bkmkstart AAAAAAADUX}{\bkmkend AAAAAAADUX}
00258     \par
{\bkmkstart AAAAAAADUY}{\bkmkend AAAAAAADUY}
00259     {\cf20 // Test various edge cases}\par
{\bkmkstart AAAAAAADUZ}{\bkmkend AAAAAAADUZ}
00260     EXPECT_TRUE(testEdgeCase(0, 1, 1));\par
{\bkmkstart AAAAAAADVC}{\bkmkend AAAAAAADVC}
00261     EXPECT_TRUE(testEdgeCase(1, 1, 1));\par
{\bkmkstart AAAAAAADVE}{\bkmkend AAAAAAADVE}
00262     EXPECT_TRUE(testEdgeCase(1000000, 1000000, 1000000000));\par
{\bkmkstart AAAAAAADVG}{\bkmkend AAAAAAADVG}
00263     EXPECT_TRUE(testEdgeCase(std::numeric_limits<long long>::max() / 16, 1000000, 1000000000)); {\cf20 // Use even smaller value}\par
{\bkmkstart AAAAAAADVU}{\bkmkend AAAAAAADVU}
00264     \par
{\bkmkstart AAAAAAADVV}{\bkmkend AAAAAAADVV}
00265     {\cf20 // Test with zero frequency (should handle gracefully)}\par
{\bkmkstart AAAAAAADVX}{\bkmkend AAAAAAADVX}
00266     EXPECT_FALSE(testEdgeCase(1000, 0, 1000000000));\par
{\bkmkstart AAAAAAADVZ}{\bkmkend AAAAAAADVZ}
00267 \}\par
{\bkmkstart AAAAAAADWA}{\bkmkend AAAAAAADWA}
00268 \par
{\bkmkstart AAAAAAADWB}{\bkmkend AAAAAAADWB}
00269 \} {\cf20 // namespace}\par
}
}