<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="test__translator__additional_8cpp" kind="file" language="C++">
    <compoundname>test_translator_additional.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">string</includes>
    <includes local="yes">translator/lexer.h</includes>
    <includes local="yes">translator/parser.h</includes>
    <includes local="yes">translator/codegen.h</includes>
    <includes local="yes">translator/ast.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp</label>
        <link refid="test__translator__additional_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="7">
        <label>translator/ast.h</label>
      </node>
      <node id="6">
        <label>translator/codegen.h</label>
      </node>
      <node id="4">
        <label>translator/lexer.h</label>
      </node>
      <node id="5">
        <label>translator/parser.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetranslator">translator</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__translator__additional_8cpp_1a7e2e289df54d813e205cff62003e6d70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Program</type>
        <definition>static Program parse_program_from</definition>
        <argsstring>(const char *src)</argsstring>
        <name>parse_program_from</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="14" column="16" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="14" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, MissingRParen)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>MissingRParen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="21" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="21" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a58eeba6a901b6ce031a9adf726aa6f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, UnknownStatement)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>UnknownStatement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="29" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a5e01015d67e43affd1e6ac2198deeb5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, LetMissingAssign)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>LetMissingAssign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="37" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1af53a37441ac6ee09fb1973b0fccb3bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, InputNeedsIdentifier)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>InputNeedsIdentifier</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="45" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a4ac96865b7fe2b0f8dcafb22e531ac3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, IfRequiresThen)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>IfRequiresThen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="53" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a2c2b01219fa918d1e27ef67bd0b70ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, IfThenRequiresNumber)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>IfThenRequiresNumber</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="61" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a1d4c7f9e64231d3818b91f504416a617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserErrors, GotoRequiresNumber)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserErrors</type>
        </param>
        <param>
          <type>GotoRequiresNumber</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="69" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a20a827b1d4c7d881b955e37b76465c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ParserProgram, AutoLabelsWhenMissing)</argsstring>
        <name>TEST</name>
        <param>
          <type>ParserProgram</type>
        </param>
        <param>
          <type>AutoLabelsWhenMissing</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="77" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="77" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a324f13166bedacba2a9f028f5e4e6f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Lexer, UnknownCharIsIgnored)</argsstring>
        <name>TEST</name>
        <param>
          <type>Lexer</type>
        </param>
        <param>
          <type>UnknownCharIsIgnored</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="87" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="87" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a5c1cdba96f253346ebc4f90039293ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CodegenPaths, EmptyProgramReturnsEarly)</argsstring>
        <name>TEST</name>
        <param>
          <type>CodegenPaths</type>
        </param>
        <param>
          <type>EmptyProgramReturnsEarly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="97" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__additional_8cpp_1a87666bc2c76582e15f883cb39424af64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CodegenPaths, InputGotoIfGosubReturn)</argsstring>
        <name>TEST</name>
        <param>
          <type>CodegenPaths</type>
        </param>
        <param>
          <type>InputGotoIfGosubReturn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" line="105" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp" bodystart="105" bodyend="123"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Ek<sp/>kapsama:<sp/>parser<sp/>hata<sp/>yolları,<sp/>otomatik<sp/>etiketler<sp/>ve<sp/>codegen<sp/>dalları</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bu<sp/>testler,<sp/>lexer/parser/codegen<sp/>için<sp/>eksik<sp/>kalan<sp/>akışları<sp/>hedefler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;translator/lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;translator/parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;translator/codegen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;translator/ast.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">translator;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Yardımcı:<sp/>kaynak<sp/>metnini<sp/>parse<sp/>edip<sp/>Program<sp/>döndür</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Program<sp/>parse_program_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps.parseProgram();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>MissingRParen){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>PRINT<sp/>(1<sp/>+<sp/>2\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>&apos;)&apos;<sp/>eksik</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="test__translator__additional_8cpp_1a58eeba6a901b6ce031a9adf726aa6f17" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>UnknownStatement){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>FOOBAR\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>desteklenmeyen<sp/>ifade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="test__translator__additional_8cpp_1a5e01015d67e43affd1e6ac2198deeb5f" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>LetMissingAssign){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>LET<sp/>X<sp/>5\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>&apos;=&apos;<sp/>eksik</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="test__translator__additional_8cpp_1af53a37441ac6ee09fb1973b0fccb3bea" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>InputNeedsIdentifier){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>INPUT<sp/>123\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="test__translator__additional_8cpp_1a4ac96865b7fe2b0f8dcafb22e531ac3b" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>IfRequiresThen){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>IF<sp/>1<sp/>20\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>THEN<sp/>eksik</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="test__translator__additional_8cpp_1a2c2b01219fa918d1e27ef67bd0b70ce8" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>IfThenRequiresNumber){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>IF<sp/>1<sp/>THEN<sp/>X\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>sayı<sp/>yerine<sp/>kimlik</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="test__translator__additional_8cpp_1a1d4c7f9e64231d3818b91f504416a617" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserErrors,<sp/>GotoRequiresNumber){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>GOTO<sp/>X\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>ps(std::move(toks));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)ps.parseProgram(),<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="test__translator__additional_8cpp_1a20a827b1d4c7d881b955e37b76465c6e" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(ParserProgram,<sp/>AutoLabelsWhenMissing){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Satır<sp/>numarası<sp/>yoksa<sp/>10,20,...<sp/>üretir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LET<sp/>X<sp/>=<sp/>1\nPRINT<sp/>X\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prog<sp/>=<sp/>parse_program_from(src);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(prog.stmts.size(),<sp/>2u);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(prog.labels.size(),<sp/>2u);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(prog.labels[0],<sp/>10);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(prog.labels[1],<sp/>20);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="test__translator__additional_8cpp_1a324f13166bedacba2a9f028f5e4e6f53" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(Lexer,<sp/>UnknownCharIsIgnored){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;@&apos;<sp/>bilinmeyen<sp/>—<sp/>token<sp/>üretilmeden<sp/>atlanmalı</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(</highlight><highlight class="stringliteral">&quot;10<sp/>LET<sp/>X<sp/>=<sp/>1<sp/>@<sp/>2\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>tokenlarının<sp/>en<sp/>az<sp/>iki<sp/>kez<sp/>gelmesini<sp/>bekleriz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/>toks)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.type<sp/>==<sp/>TokenType::Number)<sp/>++number_count;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GE(number_count,<sp/>2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="test__translator__additional_8cpp_1a5c1cdba96f253346ebc4f90039293ea6" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(CodegenPaths,<sp/>EmptyProgramReturnsEarly){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boş<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>Program<sp/>p;<sp/></highlight><highlight class="comment">//<sp/>labels<sp/>ve<sp/>stmts<sp/>boş</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>Codegen::emit_cpp(p);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>erken<sp/>return<sp/>içermeli</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;return<sp/>0;&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="test__translator__additional_8cpp_1a87666bc2c76582e15f883cb39424af64" refkind="member"><highlight class="normal"><ref refid="test__translator__additional_8cpp_1ab4f8b86eeb7e109d3d6f656694e44181" kindref="member">TEST</ref>(CodegenPaths,<sp/>InputGotoIfGosubReturn){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src<sp/>=</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;10<sp/>INPUT<sp/>X\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;20<sp/>IF<sp/>X<sp/>THEN<sp/>40\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;30<sp/>GOTO<sp/>50\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;40<sp/>GOSUB<sp/>60\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;50<sp/>PRINT<sp/>X\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;60<sp/>RETURN\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prog<sp/>=<sp/>parse_program_from(src);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>Codegen::emit_cpp(prog);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>üretimi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;std::cin<sp/>&gt;&gt;<sp/>tmp&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IF<sp/>THEN<sp/>else<sp/>bir<sp/>sonraki<sp/>etikete<sp/>gidiş</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;if<sp/>(var[\&quot;X\&quot;])&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;else<sp/>pc<sp/>=<sp/>30;&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);<sp/></highlight><highlight class="comment">//<sp/>20&apos;den<sp/>sonraki<sp/>etiket<sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GOSUB<sp/>çağrısı<sp/>ve<sp/>dönüş</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;call.push(50);<sp/>pc<sp/>=<sp/>60;&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;if<sp/>(call.empty())<sp/>return<sp/>0;<sp/>pc<sp/>=<sp/>call.top();<sp/>call.pop();&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_additional.cpp"/>
  </compounddef>
</doxygen>
