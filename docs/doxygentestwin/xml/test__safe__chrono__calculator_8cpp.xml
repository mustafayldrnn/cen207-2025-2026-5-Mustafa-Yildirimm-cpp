<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="test__safe__chrono__calculator_8cpp" kind="file" language="C++">
    <compoundname>test_safe_chrono_calculator.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">chrono</includes>
    <includes local="no">thread</includes>
    <includes local="no">iostream</includes>
    <includes local="yes">../src/SafeChronoCalculator.h</includes>
    <incdepgraph>
      <node id="6">
        <label>../src/SafeChronoCalculator.h</label>
      </node>
      <node id="1">
        <label>C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp</label>
        <link refid="test__safe__chrono__calculator_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>thread</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_safe_chrono_calculator_test" prot="public">SafeChronoCalculatorTest</innerclass>
    <innernamespace refid="namespace_safe_chrono">SafeChrono</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestSafeDurationCalculation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestSafeDurationCalculation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="29" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="29" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1acd306c0c21160c456d45aaa8040e4d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, Test10MHzCalculation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>Test10MHzCalculation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="44" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="44" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a9e9240567200b50628550147187b98f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, Test24MHzCalculation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>Test24MHzCalculation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="56" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="56" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a5499308ed9483f2b9c807a58a21c8316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestOverflowDetection)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestOverflowDetection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="68" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="68" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a6b49b38b9ace8e0ed07e40687dae30cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestErrorHandling)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestErrorHandling</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="97" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="97" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a7e5ad27c9b992260df1f6083243fc05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestEdgeCases)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestEdgeCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="108" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a548497d9aaa1d18d6fbeca4167240832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestPerformance)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestPerformance</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="124" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="124" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a75a3ba58324f699a02bcc8d7cde35b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestDifferentFrequencies)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestDifferentFrequencies</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="141" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="141" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1aed0ecf53b54be60e380d6401e2f2c657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestOverflowErrorHandling)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestOverflowErrorHandling</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="160" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="160" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1a266f54628bd04783ff3ca6ae1b4ff817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestConsistency)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestConsistency</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="170" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="170" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="test__safe__chrono__calculator_8cpp_1ab8e9721e31d415cb0d00bd87f32ae5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SafeChronoCalculatorTest, TestBoundaryValues)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref></type>
        </param>
        <param>
          <type>TestBoundaryValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" line="183" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp" bodystart="183" bodyend="192"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Test file for SafeChronoCalculator to increase coverage. </para>
    </briefdescription>
    <detaileddescription>
<para>This test file targets all uncovered functions in SafeChronoCalculator to achieve maximum line coverage </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/SafeChronoCalculator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SafeChrono;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_safe_chrono_calculator_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19" refid="class_safe_chrono_calculator_test_1af659918d4061a3359da420f487388fbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_safe_chrono_calculator_test_1af659918d4061a3359da420f487388fbd" kindref="member">SetUp</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SafeChronoCalculator<sp/>uses<sp/>static<sp/>methods,<sp/>no<sp/>instance<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23" refid="class_safe_chrono_calculator_test_1a521a2df4e6885407df7b7bd37989e36f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_safe_chrono_calculator_test_1a521a2df4e6885407df7b7bd37989e36f" kindref="member">TearDown</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>cleanup<sp/>needed<sp/>for<sp/>static<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>basic<sp/>safe<sp/>duration<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestSafeDurationCalculation)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>normal<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>different<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(5000,<sp/>2000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>large<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000000,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>10MHz<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="test__safe__chrono__calculator_8cpp_1acd306c0c21160c456d45aaa8040e4d78" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>Test10MHzCalculation)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::calculateFor10MHz(1000);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::calculateFor10MHz(10000);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::calculateFor10MHz(100000);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>24MHz<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="test__safe__chrono__calculator_8cpp_1a9e9240567200b50628550147187b98f1" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>Test24MHzCalculation)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::calculateFor24MHz(1000);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::calculateFor24MHz(10000);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::calculateFor24MHz(100000);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>overflow<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="test__safe__chrono__calculator_8cpp_1a5499308ed9483f2b9c807a58a21c8316" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestOverflowDetection)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>no<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(1000,<sp/>1000);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(wouldOverflow);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>zero<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(0,<sp/>1000);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(wouldOverflow);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(1000,<sp/>0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(wouldOverflow);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>large<sp/>values<sp/>that<sp/>might<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>largeValue<sp/>=<sp/>std::numeric_limits&lt;long<sp/>long&gt;::max()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(largeValue,<sp/>3);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(wouldOverflow);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>negative<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(-1000,<sp/>1000);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(wouldOverflow);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(1000,<sp/>-1000);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(wouldOverflow);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>wouldOverflow<sp/>=<sp/>SafeChronoCalculator::wouldOverflow(-1000,<sp/>-1000);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(wouldOverflow);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>error<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="test__safe__chrono__calculator_8cpp_1a6b49b38b9ace8e0ed07e40687dae30cc" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestErrorHandling)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000,<sp/>0,<sp/>1000000000),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000,<sp/>-1000,<sp/>1000000000),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>period<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000,<sp/>1000000,<sp/>0),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(1000,<sp/>1000000,<sp/>-1000),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>edge<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="test__safe__chrono__calculator_8cpp_1a7e5ad27c9b992260df1f6083243fc05a" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestEdgeCases)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>very<sp/>small<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>zero<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(0,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>maximum<sp/>safe<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxSafe<sp/>=<sp/>std::numeric_limits&lt;long<sp/>long&gt;::max()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(maxSafe,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="test__safe__chrono__calculator_8cpp_1a548497d9aaa1d18d6fbeca4167240832" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestPerformance)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>many<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(i,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>complete<sp/>in<sp/>reasonable<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_LT(duration.count(),<sp/>1000);<sp/></highlight><highlight class="comment">//<sp/>Less<sp/>than<sp/>1<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>frequency<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="test__safe__chrono__calculator_8cpp_1a75a3ba58324f699a02bcc8d7cde35b65" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestDifferentFrequencies)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>1MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>5MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>5000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>50MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>50000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>100MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>100000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>overflow<sp/>error<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="test__safe__chrono__calculator_8cpp_1aed0ecf53b54be60e380d6401e2f2c657" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestOverflowErrorHandling)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>values<sp/>that<sp/>would<sp/>cause<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>veryLargeCounter<sp/>=<sp/>std::numeric_limits&lt;long<sp/>long&gt;::max();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>veryLargeFrequency<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>veryLargePeriodDen<sp/>=<sp/>std::numeric_limits&lt;long<sp/>long&gt;::max();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(SafeChronoCalculator::safeCalculateDuration(veryLargeCounter,<sp/>veryLargeFrequency,<sp/>veryLargePeriodDen),<sp/>std::overflow_error);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>consistency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="test__safe__chrono__calculator_8cpp_1a266f54628bd04783ff3ca6ae1b4ff817" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestConsistency)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>same<sp/>inputs<sp/>give<sp/>same<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result1<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result2<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1000,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result1.count(),<sp/>result2.count());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>10MHz<sp/>and<sp/>24MHz<sp/>give<sp/>different<sp/>results<sp/>for<sp/>same<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result10MHz<sp/>=<sp/>SafeChronoCalculator::calculateFor10MHz(1000);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result24MHz<sp/>=<sp/>SafeChronoCalculator::calculateFor24MHz(1000);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(result10MHz.count(),<sp/>result24MHz.count());</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>boundary<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="test__safe__chrono__calculator_8cpp_1ab8e9721e31d415cb0d00bd87f32ae5e8" refkind="member"><highlight class="normal"><ref refid="test__safe__chrono__calculator_8cpp_1acfae8a9f57a8afe9ad2ed446c6ad2052" kindref="member">TEST_F</ref>(<ref refid="class_safe_chrono_calculator_test" kindref="compound">SafeChronoCalculatorTest</ref>,<sp/>TestBoundaryValues)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>minimum<sp/>positive<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>maximum<sp/>safe<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxSafe<sp/>=<sp/>std::numeric_limits&lt;long<sp/>long&gt;::max()<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SafeChronoCalculator::safeCalculateDuration(maxSafe,<sp/>1000000,<sp/>1000000000);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(result.count(),<sp/>0);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_safe_chrono_calculator.cpp"/>
  </compounddef>
</doxygen>
