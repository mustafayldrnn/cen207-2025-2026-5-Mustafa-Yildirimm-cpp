<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="test__translator__coverage__topoff_8cpp" kind="file" language="C++">
    <compoundname>test_translator_coverage_topoff.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">../src/translator/lexer.h</includes>
    <includes local="yes">../src/translator/parser.h</includes>
    <includes local="yes">../src/translator/codegen.h</includes>
    <incdepgraph>
      <node id="7">
        <label>../src/translator/codegen.h</label>
      </node>
      <node id="5">
        <label>../src/translator/lexer.h</label>
      </node>
      <node id="6">
        <label>../src/translator/parser.h</label>
      </node>
      <node id="1">
        <label>C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp</label>
        <link refid="test__translator__coverage__topoff_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__translator__coverage__topoff_8cpp_1ad706e944b7cb470ae8e045bdb5b21fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TranslatorCoverageTopOff, Lexer_StringAndPunctuators)</argsstring>
        <name>TEST</name>
        <param>
          <type>TranslatorCoverageTopOff</type>
        </param>
        <param>
          <type>Lexer_StringAndPunctuators</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" line="16" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" bodystart="16" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__coverage__topoff_8cpp_1a8a263aa60c424871c78a4d33cafa3ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TranslatorCoverageTopOff, Lexer_Identifier_And_SimpleString)</argsstring>
        <name>TEST</name>
        <param>
          <type>TranslatorCoverageTopOff</type>
        </param>
        <param>
          <type>Lexer_Identifier_And_SimpleString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" line="44" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" bodystart="44" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__coverage__topoff_8cpp_1a9b90f6d79dd504ce0457d0bdb43ebb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TranslatorCoverageTopOff, Lexer_EmptyString)</argsstring>
        <name>TEST</name>
        <param>
          <type>TranslatorCoverageTopOff</type>
        </param>
        <param>
          <type>Lexer_EmptyString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" line="58" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__coverage__topoff_8cpp_1a1797536d856f57f7d810b59c9402d1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TranslatorCoverageTopOff, Parser_MulDiv_And_CodegenLet)</argsstring>
        <name>TEST</name>
        <param>
          <type>TranslatorCoverageTopOff</type>
        </param>
        <param>
          <type>Parser_MulDiv_And_CodegenLet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" line="68" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" bodystart="68" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="test__translator__coverage__topoff_8cpp_1ac10431de6385049e50b671867eea8408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TranslatorCoverageTopOff, Parser_UnexpectedTokenInFactor)</argsstring>
        <name>TEST</name>
        <param>
          <type>TranslatorCoverageTopOff</type>
        </param>
        <param>
          <type>Parser_UnexpectedTokenInFactor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" line="87" column="1" bodyfile="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp" bodystart="87" bodyend="94"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Targeted tests to cover remaining uncovered lines in lexer/parser/codegen. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/translator/lexer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/translator/parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/translator/codegen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">translator;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Covers:<sp/>string<sp/>literal<sp/>scanning<sp/>(multi-line),<sp/>and<sp/>single-char<sp/>tokens<sp/>-,*,/,),(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">TEST(TranslatorCoverageTopOff,<sp/>Lexer_StringAndPunctuators)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>without<sp/>closing<sp/>quote<sp/>on<sp/>same<sp/>line<sp/>to<sp/>exercise<sp/>newline<sp/>handling<sp/>inside<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PRINT<sp/>\&quot;hello\nworld\&quot;\nA<sp/>=<sp/>1-2*3/4,(5)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Lexer<sp/>lx(src);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>lx.tokenize();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>saw<sp/>a<sp/>String<sp/>token<sp/>and<sp/>various<sp/>punctuators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sawString=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawMinus=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawStar=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawSlash=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawLParen=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawRParen=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawComma=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/>toks)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawString<sp/>|=<sp/>(t.type==TokenType::String);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawMinus<sp/><sp/>|=<sp/>(t.type==TokenType::Minus);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawStar<sp/><sp/><sp/>|=<sp/>(t.type==TokenType::Star);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawSlash<sp/><sp/>|=<sp/>(t.type==TokenType::Slash);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawLParen<sp/>|=<sp/>(t.type==TokenType::LParen);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawRParen<sp/>|=<sp/>(t.type==TokenType::RParen);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawComma<sp/><sp/>|=<sp/>(t.type==TokenType::Comma);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawString);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawMinus);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawStar);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawSlash);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawLParen);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawRParen);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawComma);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Additional<sp/>lexer<sp/>micro-cases:<sp/>bare<sp/>identifier<sp/>and<sp/>same-line<sp/>string<sp/>termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">TEST(TranslatorCoverageTopOff,<sp/>Lexer_Identifier_And_SimpleString)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo\nPRINT<sp/>\&quot;x\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>Lexer(src).tokenize();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sawId=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>sawString=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/>toks)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawId<sp/>|=<sp/>(t.type==TokenType::Identifier<sp/>&amp;&amp;<sp/>t.lexeme==</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sawString<sp/>|=<sp/>(t.type==TokenType::String<sp/>&amp;&amp;<sp/>t.lexeme==</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawId);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(sawString);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>case:<sp/>empty<sp/>string<sp/>literal<sp/>to<sp/>ensure<sp/>closing-quote<sp/>branch<sp/>counted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">TEST(TranslatorCoverageTopOff,<sp/>Lexer_EmptyString)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PRINT<sp/>\&quot;\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>Lexer(src).tokenize();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stringCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/>toks)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.type==TokenType::String)<sp/>++stringCount;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(stringCount,<sp/>1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Covers:<sp/>parse_term()<sp/>loop<sp/>for<sp/>*<sp/>and<sp/>/;<sp/>and<sp/>codegen<sp/>Let<sp/>with<sp/>BinaryExpr<sp/>and<sp/>next-label<sp/>branch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">TEST(TranslatorCoverageTopOff,<sp/>Parser_MulDiv_And_CodegenLet)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>src<sp/>=</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;10<sp/>LET<sp/>A<sp/>=<sp/>2*3/4\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;20<sp/>PRINT<sp/>1\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>next_label<sp/>exists<sp/>after<sp/>LET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>Lexer(src).tokenize();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Program<sp/>prog<sp/>=<sp/>Parser(std::move(toks)).parseProgram();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>sanity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(prog.stmts.size(),<sp/>2u);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Emitting<sp/>C++<sp/>should<sp/>include<sp/>the<sp/>binary<sp/>expression<sp/>with<sp/>both<sp/>ops<sp/>and<sp/>the<sp/>LET<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>out<sp/>=<sp/>Codegen().emit_cpp(prog);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;var[\&quot;A\&quot;]<sp/>=&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(out.find(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">),<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Covers:<sp/>parser<sp/>factor<sp/>unexpected<sp/>token<sp/>throw<sp/>(line<sp/>with<sp/>&quot;Unexpected<sp/>token<sp/>in<sp/>factor&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">TEST(TranslatorCoverageTopOff,<sp/>Parser_UnexpectedTokenInFactor)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRINT<sp/>THEN<sp/>-&gt;<sp/>when<sp/>parsing<sp/>expression<sp/>after<sp/>PRINT,<sp/>first<sp/>token<sp/>is<sp/>THEN<sp/>and<sp/>triggers<sp/>factor<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>src<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>PRINT<sp/>THEN\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toks<sp/>=<sp/>Lexer(src).tokenize();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser<sp/>p(std::move(toks));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW({<sp/>(void)p.parseProgram();<sp/>},<sp/>std::runtime_error);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ahmet/OneDrive/Masaüstü/DataStructure/cen207-2025-2026-5-Mustafa-Yildirimm-cpp/tests/test_translator_coverage_topoff.cpp"/>
  </compounddef>
</doxygen>
